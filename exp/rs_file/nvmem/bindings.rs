/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const CONFIG_RTC_DRV_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_AIC79XX_RESET_DELAY_MS: u32 = 5000;
pub const CONFIG_REGULATOR_LP3972_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_RT288X: u32 = 1;
pub const CONFIG_VIDEO_PVRUSB2_MODULE: u32 = 1;
pub const CONFIG_LIQUIDIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_REALTEK_COMMON_MODULE: u32 = 1;
pub const CONFIG_EDAC_GHES: u32 = 1;
pub const CONFIG_NFC_MRVL_MODULE: u32 = 1;
pub const CONFIG_IPV6_IOAM6_LWTUNNEL: u32 = 1;
pub const CONFIG_WM8350_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_INTEL_SOC_PMIC_MRFLD_MODULE: u32 = 1;
pub const CONFIG_PATA_OPTI_MODULE: u32 = 1;
pub const CONFIG_FB_CARMINE_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_RUNTIME_UARTS: u32 = 32;
pub const CONFIG_USB_GSPCA_PAC7311_MODULE: u32 = 1;
pub const CONFIG_IIO_GTS_HELPER_MODULE: u32 = 1;
pub const CONFIG_GENERIC_PHY_MIPI_DPHY: u32 = 1;
pub const CONFIG_COMEDI_MPC624_MODULE: u32 = 1;
pub const CONFIG_MFD_IQS62X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_ACP_PROBES_MODULE: u32 = 1;
pub const CONFIG_MAX9611_MODULE: u32 = 1;
pub const CONFIG_NET_CLS_BPF_MODULE: u32 = 1;
pub const CONFIG_STM_PROTO_SYS_T_MODULE: u32 = 1;
pub const CONFIG_MTRR: u32 = 1;
pub const CONFIG_DHT11_MODULE: u32 = 1;
pub const CONFIG_USB_LD_MODULE: u32 = 1;
pub const CONFIG_W83627HF_WDT_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DA9063_MODULE: u32 = 1;
pub const CONFIG_UBSAN_BOUNDS: u32 = 1;
pub const CONFIG_ARCH_USES_HIGH_VMA_FLAGS: u32 = 1;
pub const CONFIG_LEDS_AS3645A_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SQ930X_MODULE: u32 = 1;
pub const CONFIG_RFKILL: u32 = 1;
pub const CONFIG_SPARSEMEM_VMEMMAP_ENABLE: u32 = 1;
pub const CONFIG_SERIAL_ALTERA_UART_BAUDRATE: u32 = 115200;
pub const CONFIG_NET_DSA_MSCC_SEVILLE_MODULE: u32 = 1;
pub const CONFIG_BATTERY_MAX1721X_MODULE: u32 = 1;
pub const CONFIG_NET_9P_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_USB_COMMON: u32 = 1;
pub const CONFIG_SND_SB_COMMON_MODULE: u32 = 1;
pub const CONFIG_MTD_MAP_BANK_WIDTH_1: u32 = 1;
pub const CONFIG_TABLET_SERIAL_WACOM4_MODULE: u32 = 1;
pub const CONFIG_FS_VERITY_BUILTIN_SIGNATURES: u32 = 1;
pub const CONFIG_SND_SOC_RT1308_SDW_MODULE: u32 = 1;
pub const CONFIG_SCSI_ENCLOSURE_MODULE: u32 = 1;
pub const CONFIG_BALLOON_COMPACTION: u32 = 1;
pub const CONFIG_NFT_FIB_IPV4_MODULE: u32 = 1;
pub const CONFIG_QRTR_MODULE: u32 = 1;
pub const CONFIG_XEN_512GB: u32 = 1;
pub const CONFIG_SND_SOC_TAS6424_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_PEDIT_MODULE: u32 = 1;
pub const CONFIG_MMC: u32 = 1;
pub const CONFIG_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_CM32181_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RL6347A_MODULE: u32 = 1;
pub const CONFIG_GPIOLIB: u32 = 1;
pub const CONFIG_USB_DWC2: u32 = 1;
pub const CONFIG_FB_NVIDIA_I2C: u32 = 1;
pub const CONFIG_DVB_LGS8GXX_MODULE: u32 = 1;
pub const CONFIG_MFD_TPS6586X: u32 = 1;
pub const CONFIG_HYPERV_UTILS_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_EVENTS: u32 = 1;
pub const CONFIG_NET_EMATCH_NBYTE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SM3_GENERIC_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_AUO_PIXCIR_MODULE: u32 = 1;
pub const CONFIG_PARPORT_PC_FIFO: u32 = 1;
pub const CONFIG_DM_CACHE_SMQ_MODULE: u32 = 1;
pub const CONFIG_IR_SANYO_DECODER_MODULE: u32 = 1;
pub const CONFIG_NFS_V3_MODULE: u32 = 1;
pub const CONFIG_INPUT_KXTJ9_MODULE: u32 = 1;
pub const CONFIG_VIDEO_DEV_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_OV534_MODULE: u32 = 1;
pub const CONFIG_INPUT_XEN_KBDDEV_FRONTEND_MODULE: u32 = 1;
pub const CONFIG_MTD_MCHP23K256_MODULE: u32 = 1;
pub const CONFIG_DMARD06_MODULE: u32 = 1;
pub const CONFIG_AD7923_MODULE: u32 = 1;
pub const CONFIG_VDPA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_PROBE_WORK_QUEUE: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROSEMI: u32 = 1;
pub const CONFIG_SND_EMU10K1_MODULE: u32 = 1;
pub const CONFIG_SND_AMD_ASOC_REMBRANDT_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_MASQUERADE_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_NI: u32 = 1;
pub const CONFIG_VL6180_MODULE: u32 = 1;
pub const CONFIG_QSEMI_PHY_MODULE: u32 = 1;
pub const CONFIG_RFKILL_INPUT: u32 = 1;
pub const CONFIG_USB_GSPCA_TOUPTEK_MODULE: u32 = 1;
pub const CONFIG_SCSI_AHA1740_MODULE: u32 = 1;
pub const CONFIG_LIB80211_CRYPT_TKIP_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TAS2552_MODULE: u32 = 1;
pub const CONFIG_GENERIC_IRQ_CHIP: u32 = 1;
pub const CONFIG_USB_ROLE_SWITCH: u32 = 1;
pub const CONFIG_ADT7316_MODULE: u32 = 1;
pub const CONFIG_SCSI_MYRB_MODULE: u32 = 1;
pub const CONFIG_IRQ_BYPASS_MANAGER: u32 = 1;
pub const CONFIG_REGMAP_SOUNDWIRE_MODULE: u32 = 1;
pub const CONFIG_NET_HANDSHAKE: u32 = 1;
pub const CONFIG_USER_RETURN_NOTIFIER: u32 = 1;
pub const CONFIG_NF_CONNTRACK_OVS: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_RATEEST_MODULE: u32 = 1;
pub const CONFIG_HTS221_I2C_MODULE: u32 = 1;
pub const CONFIG_R8169_MODULE: u32 = 1;
pub const CONFIG_IWLMVM_MODULE: u32 = 1;
pub const CONFIG_ATH10K_CE: u32 = 1;
pub const CONFIG_RDS_TCP_MODULE: u32 = 1;
pub const CONFIG_NFC_PN533_I2C_MODULE: u32 = 1;
pub const CONFIG_PAGE_SHIFT: u32 = 12;
pub const CONFIG_NOA1305_MODULE: u32 = 1;
pub const CONFIG_NLS_ASCII_MODULE: u32 = 1;
pub const CONFIG_UIO_HV_GENERIC_MODULE: u32 = 1;
pub const CONFIG_SND_ES1968_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_TIME_MODULE: u32 = 1;
pub const CONFIG_COMEDI_TESTS_MODULE: u32 = 1;
pub const CONFIG_SND_VXPOCKET_MODULE: u32 = 1;
pub const CONFIG_USB_F_UAC1_LEGACY_MODULE: u32 = 1;
pub const CONFIG_INET_DCCP_DIAG_MODULE: u32 = 1;
pub const CONFIG_SATA_SVW_MODULE: u32 = 1;
pub const CONFIG_SECURITY_LOCKDOWN_LSM_EARLY: u32 = 1;
pub const CONFIG_UEVENT_HELPER: u32 = 1;
pub const CONFIG_NFS_COMMON: u32 = 1;
pub const CONFIG_MMA9551_CORE_MODULE: u32 = 1;
pub const CONFIG_PPPOATM_MODULE: u32 = 1;
pub const CONFIG_SENSORS_HP_WMI_MODULE: u32 = 1;
pub const CONFIG_WL12XX_MODULE: u32 = 1;
pub const CONFIG_CGROUP_NET_CLASSID: u32 = 1;
pub const CONFIG_NET_DSA_TAG_EDSA_MODULE: u32 = 1;
pub const CONFIG_LOGIG940_FF: u32 = 1;
pub const CONFIG_DVB_ISL6423_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX6697_MODULE: u32 = 1;
pub const CONFIG_INPUT_TWL4030_PWRBUTTON_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_MC13783_MODULE: u32 = 1;
pub const CONFIG_MTD_RAM_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ARCH_HAVE_LIB_CURVE25519_MODULE: u32 = 1;
pub const CONFIG_TREE_RCU: u32 = 1;
pub const CONFIG_XEN_SYMS: u32 = 1;
pub const CONFIG_LRU_GEN_WALKS_MMU: u32 = 1;
pub const CONFIG_SYSVIPC_COMPAT: u32 = 1;
pub const CONFIG_USB_ISP1760_HCD: u32 = 1;
pub const CONFIG_PM_WAKELOCKS: u32 = 1;
pub const CONFIG_CHARGER_MAX8998_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CRYPTD_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA711X_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_USER_MAD_MODULE: u32 = 1;
pub const CONFIG_SPI_INTEL_MODULE: u32 = 1;
pub const CONFIG_VIDEO_MT9M111_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ECC: u32 = 1;
pub const CONFIG_GPIO_104_DIO_48E_MODULE: u32 = 1;
pub const CONFIG_BMC150_ACCEL_MODULE: u32 = 1;
pub const CONFIG_CRC_CCITT: u32 = 1;
pub const CONFIG_USB_NET_AX8817X_MODULE: u32 = 1;
pub const CONFIG_SYSTEM_BLACKLIST_HASH_LIST: &[u8; 1] = b"\0";
pub const CONFIG_PANASONIC_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_QEDR_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_437: u32 = 1;
pub const CONFIG_SENSORS_GL518SM_MODULE: u32 = 1;
pub const CONFIG_RMI4_F03_SERIO_MODULE: u32 = 1;
pub const CONFIG_X9250_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_PCI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TC358743_CEC: u32 = 1;
pub const CONFIG_ISL76682_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_GCM: u32 = 1;
pub const CONFIG_ICE_SWITCHDEV: u32 = 1;
pub const CONFIG_CRYPTO_WP512_MODULE: u32 = 1;
pub const CONFIG_INTEL_OAKTRAIL_MODULE: u32 = 1;
pub const CONFIG_ARCH_USE_BUILTIN_BSWAP: u32 = 1;
pub const CONFIG_SND_SOC_MAX98396_MODULE: u32 = 1;
pub const CONFIG_VEML6040_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM1789_I2C_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKL_RT286_MACH_MODULE: u32 = 1;
pub const CONFIG_SBITMAP: u32 = 1;
pub const CONFIG_USB_SERIAL_AIRCABLE_MODULE: u32 = 1;
pub const CONFIG_USB_NET_CDCETHER_MODULE: u32 = 1;
pub const CONFIG_NET_NCSI: u32 = 1;
pub const CONFIG_LRU_CACHE_MODULE: u32 = 1;
pub const CONFIG_SND_XEN_FRONTEND_MODULE: u32 = 1;
pub const CONFIG_AS_IS_GNU: u32 = 1;
pub const CONFIG_BACKLIGHT_APPLE_MODULE: u32 = 1;
pub const CONFIG_EARLY_PRINTK_USB_XDBC: u32 = 1;
pub const CONFIG_STACKPROTECTOR_STRONG: u32 = 1;
pub const CONFIG_RTW88_MODULE: u32 = 1;
pub const CONFIG_FB_NVIDIA_MODULE: u32 = 1;
pub const CONFIG_IR_RC6_DECODER_MODULE: u32 = 1;
pub const CONFIG_ENCRYPTED_KEYS: u32 = 1;
pub const CONFIG_DVB_USB_UMT_010_MODULE: u32 = 1;
pub const CONFIG_USB_EZUSB_FX2_MODULE: u32 = 1;
pub const CONFIG_IIO_TRIGGER: u32 = 1;
pub const CONFIG_USB_XHCI_PCI_RENESAS_MODULE: u32 = 1;
pub const CONFIG_EXPORTFS_BLOCK_OPS: u32 = 1;
pub const CONFIG_EDAC_SBRIDGE_MODULE: u32 = 1;
pub const CONFIG_TERANETICS_PHY_MODULE: u32 = 1;
pub const CONFIG_V4L2_FWNODE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_INA209_MODULE: u32 = 1;
pub const CONFIG_INIT_STACK_ALL_ZERO: u32 = 1;
pub const CONFIG_SENSORS_DELTA_AHE50DC_FAN_MODULE: u32 = 1;
pub const CONFIG_MFD_INTEL_LPSS_ACPI_MODULE: u32 = 1;
pub const CONFIG_USB_HCD_BCMA_MODULE: u32 = 1;
pub const CONFIG_ACPI_FAN: u32 = 1;
pub const CONFIG_HID_STEAM_MODULE: u32 = 1;
pub const CONFIG_RANDSTRUCT_NONE: u32 = 1;
pub const CONFIG_INTEL_SDSI_MODULE: u32 = 1;
pub const CONFIG_HTS221_MODULE: u32 = 1;
pub const CONFIG_RTC_I2C_AND_SPI: u32 = 1;
pub const CONFIG_RADIO_SHARK2_MODULE: u32 = 1;
pub const CONFIG_INTEL_IOMMU_PERF_EVENTS: u32 = 1;
pub const CONFIG_ROMFS_ON_BLOCK: u32 = 1;
pub const CONFIG_TMPFS: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT_4B: u32 = 1;
pub const CONFIG_TINYDRM_MI0283QT_MODULE: u32 = 1;
pub const CONFIG_RAVE_SP_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MP2629_MODULE: u32 = 1;
pub const CONFIG_PMBUS_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_MODULE: u32 = 1;
pub const CONFIG_DM_MIRROR_MODULE: u32 = 1;
pub const CONFIG_PM_NOTIFIER_ERROR_INJECT_MODULE: u32 = 1;
pub const CONFIG_FPGA_MGR_LATTICE_SYSCONFIG_SPI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV02A10_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_IRTOUCH: u32 = 1;
pub const CONFIG_INFINIBAND_ISER_MODULE: u32 = 1;
pub const CONFIG_DVB_LGS8GL5_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_PREEMPT_TIMEOUT_COMPUTE: u32 = 7500;
pub const CONFIG_BACKLIGHT_AAT2870_MODULE: u32 = 1;
pub const CONFIG_CARL9170_MODULE: u32 = 1;
pub const CONFIG_DNET_MODULE: u32 = 1;
pub const CONFIG_IPV6: u32 = 1;
pub const CONFIG_RTC_DRV_FM3130_MODULE: u32 = 1;
pub const CONFIG_MCTP_SERIAL_MODULE: u32 = 1;
pub const CONFIG_SCSI_DMA: u32 = 1;
pub const CONFIG_LIDAR_LITE_V2_MODULE: u32 = 1;
pub const CONFIG_SIGNALFD: u32 = 1;
pub const CONFIG_SENSORS_INTEL_M10_BMC_HWMON_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_XIRC2PS_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_M48T59_MODULE: u32 = 1;
pub const CONFIG_DVB_DDBRIDGE_MODULE: u32 = 1;
pub const CONFIG_V4L2_JPEG_HELPER_MODULE: u32 = 1;
pub const CONFIG_HID_ORTEK_MODULE: u32 = 1;
pub const CONFIG_USB_PWC_INPUT_EVDEV: u32 = 1;
pub const CONFIG_MP2629_ADC_MODULE: u32 = 1;
pub const CONFIG_ASYNC_RAID6_RECOV_MODULE: u32 = 1;
pub const CONFIG_ANON_VMA_NAME: u32 = 1;
pub const CONFIG_ATM_DUMMY_MODULE: u32 = 1;
pub const CONFIG_VIDEO_GC05A2_MODULE: u32 = 1;
pub const CONFIG_MLX5_SF_MANAGER: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_PERFORMANCE: u32 = 1;
pub const CONFIG_F2FS_FS_LZORLE: u32 = 1;
pub const CONFIG_CHARGER_LT3651_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8782_MODULE: u32 = 1;
pub const CONFIG_MFD_88PM860X: u32 = 1;
pub const CONFIG_ATM_IDT77252_MODULE: u32 = 1;
pub const CONFIG_KVM_AMD_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_PFNCACHE: u32 = 1;
pub const CONFIG_MMC_CB710_MODULE: u32 = 1;
pub const CONFIG_NFT_TPROXY_MODULE: u32 = 1;
pub const CONFIG_MFD_ARIZONA_SPI_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_RTRS_SERVER_MODULE: u32 = 1;
pub const CONFIG_SENSORS_WM831X_MODULE: u32 = 1;
pub const CONFIG_INPUT_CS40L50_VIBRA_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ADV7842_CEC: u32 = 1;
pub const CONFIG_MFD_TPS65910: u32 = 1;
pub const CONFIG_NET_VENDOR_MICREL: u32 = 1;
pub const CONFIG_TI_ADC0832_MODULE: u32 = 1;
pub const CONFIG_XEN_HAVE_PVMMU: u32 = 1;
pub const CONFIG_AD7746_MODULE: u32 = 1;
pub const CONFIG_MTD_MAP_BANK_WIDTH_2: u32 = 1;
pub const CONFIG_GPIO_F7188X_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_ASIX: u32 = 1;
pub const CONFIG_SND_SST_ATOM_HIFI2_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_INTEL_MODULE: u32 = 1;
pub const CONFIG_SXGBE_ETH_MODULE: u32 = 1;
pub const CONFIG_SND_PORTMAN2X4_MODULE: u32 = 1;
pub const CONFIG_DELL_RBTN_MODULE: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_UNCORE: u32 = 1;
pub const CONFIG_SND_SOC_XILINX_AUDIO_FORMATTER_MODULE: u32 = 1;
pub const CONFIG_SYSFS_SYSCALL: u32 = 1;
pub const CONFIG_SND_SOC_RT700_MODULE: u32 = 1;
pub const CONFIG_KVM_GUEST: u32 = 1;
pub const CONFIG_MFD_RT5120_MODULE: u32 = 1;
pub const CONFIG_CAN_PEAK_PCMCIA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC31XX_MODULE: u32 = 1;
pub const CONFIG_REGMAP_I3C_MODULE: u32 = 1;
pub const CONFIG_ATH11K_DEBUGFS: u32 = 1;
pub const CONFIG_SCSI_BUSLOGIC_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_AS3711_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_ECC_MXIC: u32 = 1;
pub const CONFIG_ACPI_HED: u32 = 1;
pub const CONFIG_USB_DWC3_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PEB2466_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_IP6_MODULE: u32 = 1;
pub const CONFIG_HAVE_UID16: u32 = 1;
pub const CONFIG_DEVFREQ_GOV_POWERSAVE: u32 = 1;
pub const CONFIG_MEMORY_HOTPLUG_DEFAULT_ONLINE: u32 = 1;
pub const CONFIG_DEFXX_MODULE: u32 = 1;
pub const CONFIG_CAIF_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_DEBUG_PAGEALLOC: u32 = 1;
pub const CONFIG_NFS_V2_MODULE: u32 = 1;
pub const CONFIG_VIDEO_AR0521_MODULE: u32 = 1;
pub const CONFIG_UHID_MODULE: u32 = 1;
pub const CONFIG_LEDS_LM355x_MODULE: u32 = 1;
pub const CONFIG_COMEDI_BOND_MODULE: u32 = 1;
pub const CONFIG_HID_RAZER_MODULE: u32 = 1;
pub const CONFIG_NFC_MRVL_UART_MODULE: u32 = 1;
pub const CONFIG_SECURITY_NETWORK: u32 = 1;
pub const CONFIG_DWC_XLGMAC_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DRBG: u32 = 1;
pub const CONFIG_SENSORS_RM3100_I2C_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_SMT: u32 = 1;
pub const CONFIG_FB_DEVICE: u32 = 1;
pub const CONFIG_NET_IPIP_MODULE: u32 = 1;
pub const CONFIG_WDTPCI_MODULE: u32 = 1;
pub const CONFIG_AIO: u32 = 1;
pub const CONFIG_HID_SPEEDLINK_MODULE: u32 = 1;
pub const CONFIG_DRM_AMDGPU_USERPTR: u32 = 1;
pub const CONFIG_RMNET_MODULE: u32 = 1;
pub const CONFIG_HP03_MODULE: u32 = 1;
pub const CONFIG_DRM_AMDGPU_SI: u32 = 1;
pub const CONFIG_RADIO_TEF6862_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PALMAS_MODULE: u32 = 1;
pub const CONFIG_EXTCON_USBC_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_INV_MPU6050_IIO_MODULE: u32 = 1;
pub const CONFIG_GENERIC_IRQ_SHOW: u32 = 1;
pub const CONFIG_SENSORS_INSPUR_IPSPS_MODULE: u32 = 1;
pub const CONFIG_DRM_AMD_ISP: u32 = 1;
pub const CONFIG_PATA_EFAR_MODULE: u32 = 1;
pub const CONFIG_SCSI_DH_RDAC_MODULE: u32 = 1;
pub const CONFIG_JFFS2_FS_SECURITY: u32 = 1;
pub const CONFIG_ZSWAP_ZPOOL_DEFAULT_ZBUD: u32 = 1;
pub const CONFIG_BLOCK_LEGACY_AUTOLOAD: u32 = 1;
pub const CONFIG_VIDEO_GC2145_MODULE: u32 = 1;
pub const CONFIG_HP_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_PCI_SW_SWITCHTEC_MODULE: u32 = 1;
pub const CONFIG_UIO_NETX_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_SKBPRIO_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ARIA_AESNI_AVX2_X86_64_MODULE: u32 = 1;
pub const CONFIG_DWMAC_GENERIC_MODULE: u32 = 1;
pub const CONFIG_SECURITY_TOMOYO_MAX_ACCEPT_ENTRY: u32 = 2048;
pub const CONFIG_MPU3050_I2C_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TDA7432_MODULE: u32 = 1;
pub const CONFIG_CDNS_I3C_MASTER_MODULE: u32 = 1;
pub const CONFIG_XILINX_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_NETFS_SUPPORT_MODULE: u32 = 1;
pub const CONFIG_ACPI_HOTPLUG_MEMORY: u32 = 1;
pub const CONFIG_CAN_KVASER_USB_MODULE: u32 = 1;
pub const CONFIG_MTD_RAW_NAND_MODULE: u32 = 1;
pub const CONFIG_TI_ADC128S052_MODULE: u32 = 1;
pub const CONFIG_HID_WINWING_MODULE: u32 = 1;
pub const CONFIG_INTEL_SCU_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_NHPOLY1305_AVX2_MODULE: u32 = 1;
pub const CONFIG_GPIO_DWAPB_MODULE: u32 = 1;
pub const CONFIG_RPCSEC_GSS_KRB5_MODULE: u32 = 1;
pub const CONFIG_INPUT_POWERMATE_MODULE: u32 = 1;
pub const CONFIG_DP83848_PHY_MODULE: u32 = 1;
pub const CONFIG_WDAT_WDT_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADQ12B_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX25821_ALSA_MODULE: u32 = 1;
pub const CONFIG_PCI_PASID: u32 = 1;
pub const CONFIG_NET_DSA_MICROCHIP_KSZ_PTP: u32 = 1;
pub const CONFIG_WL1251_SDIO_MODULE: u32 = 1;
pub const CONFIG_WIL6210_TRACING: u32 = 1;
pub const CONFIG_BACKLIGHT_ADP8860_MODULE: u32 = 1;
pub const CONFIG_VIDEO_E5010_JPEG_ENC_MODULE: u32 = 1;
pub const CONFIG_F2FS_FS_MODULE: u32 = 1;
pub const CONFIG_SND_DMA_SGBUF: u32 = 1;
pub const CONFIG_IP_VS_MH_TAB_INDEX: u32 = 12;
pub const CONFIG_CRYPTO_KPP: u32 = 1;
pub const CONFIG_GENERIC_STRNLEN_USER: u32 = 1;
pub const CONFIG_NET_FOU_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CRC32_PCLMUL_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_PC236_PCI_MODULE: u32 = 1;
pub const CONFIG_CHROMEOS_PSTORE_MODULE: u32 = 1;
pub const CONFIG_PCF50633_GPIO_MODULE: u32 = 1;
pub const CONFIG_VIDEO_DW9714_MODULE: u32 = 1;
pub const CONFIG_ADIN1100_PHY_MODULE: u32 = 1;
pub const CONFIG_SND_LAYLA20_MODULE: u32 = 1;
pub const CONFIG_BLK_SED_OPAL: u32 = 1;
pub const CONFIG_PGTABLE_LEVELS: u32 = 5;
pub const CONFIG_QFMT_V2_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ECB: u32 = 1;
pub const CONFIG_DRM_AST_MODULE: u32 = 1;
pub const CONFIG_THINKPAD_ACPI_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROSOFT: u32 = 1;
pub const CONFIG_IDLE_PAGE_TRACKING: u32 = 1;
pub const CONFIG_CACHEFILES_ERROR_INJECTION: u32 = 1;
pub const CONFIG_DRM_I915_DP_TUNNEL: u32 = 1;
pub const CONFIG_B44_MODULE: u32 = 1;
pub const CONFIG_FB_RIVA_I2C: u32 = 1;
pub const CONFIG_BT_BNEP_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_XTKBD_MODULE: u32 = 1;
pub const CONFIG_REGMAP: u32 = 1;
pub const CONFIG_SLAB_OBJ_EXT: u32 = 1;
pub const CONFIG_CRYPTO_ARCH_HAVE_LIB_POLY1305_MODULE: u32 = 1;
pub const CONFIG_BT_HCIBPA10X_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX1619_MODULE: u32 = 1;
pub const CONFIG_PCI_ATS: u32 = 1;
pub const CONFIG_SCSI_SYM53C8XX_MAX_TAGS: u32 = 64;
pub const CONFIG_NET_VENDOR_8390: u32 = 1;
pub const CONFIG_LEDS_SPI_BYTE_MODULE: u32 = 1;
pub const CONFIG_NLS_MAC_ROMANIAN_MODULE: u32 = 1;
pub const CONFIG_USB_NET_GL620A_MODULE: u32 = 1;
pub const CONFIG_DVB_ZL10039_MODULE: u32 = 1;
pub const CONFIG_LED_TRIGGER_PHY: u32 = 1;
pub const CONFIG_HAVE_KVM_ARCH_GMEM_PREPARE: u32 = 1;
pub const CONFIG_DRM_FBDEV_EMULATION: u32 = 1;
pub const CONFIG_DRM_ANALOGIX_DP_MODULE: u32 = 1;
pub const CONFIG_USER_NS: u32 = 1;
pub const CONFIG_RT73USB_MODULE: u32 = 1;
pub const CONFIG_NFSD_V4_2_INTER_SSC: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CY8CTMA140_MODULE: u32 = 1;
pub const CONFIG_XEN_GRANT_DMA_ALLOC: u32 = 1;
pub const CONFIG_HWMON_VID_MODULE: u32 = 1;
pub const CONFIG_MWL8K_MODULE: u32 = 1;
pub const CONFIG_RTW89_MODULE: u32 = 1;
pub const CONFIG_MITIGATION_SPECTRE_BHI: u32 = 1;
pub const CONFIG_COMEDI_PCL724_MODULE: u32 = 1;
pub const CONFIG_MITIGATION_SLS: u32 = 1;
pub const CONFIG_X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK: u32 = 1;
pub const CONFIG_LEDS_LM3601X_MODULE: u32 = 1;
pub const CONFIG_SECURITY_YAMA: u32 = 1;
pub const CONFIG_VIDEO_SONY_BTF_MPX_MODULE: u32 = 1;
pub const CONFIG_USB_GOKU_MODULE: u32 = 1;
pub const CONFIG_RTW88_8822BE_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_ADD_PAGES: u32 = 1;
pub const CONFIG_SND_SOC_ADAU1372_MODULE: u32 = 1;
pub const CONFIG_ACPI_AC: u32 = 1;
pub const CONFIG_USB_SERIAL_OPTION_MODULE: u32 = 1;
pub const CONFIG_SCD30_SERIAL_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_ATUSB_MODULE: u32 = 1;
pub const CONFIG_NVME_AUTH_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_C62XVF_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_SND_AU8810_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_MEMBARRIER_SYNC_CORE: u32 = 1;
pub const CONFIG_SND_SOC_RT5616_MODULE: u32 = 1;
pub const CONFIG_USB_RTL8152_MODULE: u32 = 1;
pub const CONFIG_PREFIX_SYMBOLS: u32 = 1;
pub const CONFIG_AD799X_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ADC_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV8856_MODULE: u32 = 1;
pub const CONFIG_GAMEPORT_FM801_MODULE: u32 = 1;
pub const CONFIG_I2C_CP2615_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS28E04_MODULE: u32 = 1;
pub const CONFIG_MMC_MTK_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX8660_MODULE: u32 = 1;
pub const CONFIG_HAVE_C_RECORDMCOUNT: u32 = 1;
pub const CONFIG_MAX44000_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_VIA: u32 = 1;
pub const CONFIG_SND_SOC_MSM8916_WCD_ANALOG_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_RT5663_MODULE: u32 = 1;
pub const CONFIG_NF_TABLES_IPV4: u32 = 1;
pub const CONFIG_MAC80211_STA_HASH_MAX_SIZE: u32 = 0;
pub const CONFIG_DEBUG_WX: u32 = 1;
pub const CONFIG_TICK_ONESHOT: u32 = 1;
pub const CONFIG_INET_ESP_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_SAFE_MODULE: u32 = 1;
pub const CONFIG_NFC_NXP_NCI_I2C_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_MODULE: u32 = 1;
pub const CONFIG_AK09911_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TW9903_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_HUGE_PMD_SHARE: u32 = 1;
pub const CONFIG_MFD_MC13XXX_SPI_MODULE: u32 = 1;
pub const CONFIG_RSI_USB_MODULE: u32 = 1;
pub const CONFIG_RSI_COEX: u32 = 1;
pub const CONFIG_DRM: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZMA: u32 = 1;
pub const CONFIG_BCMA_POSSIBLE: u32 = 1;
pub const CONFIG_NF_REJECT_IPV6_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV8865_MODULE: u32 = 1;
pub const CONFIG_NFC_MODULE: u32 = 1;
pub const CONFIG_NFSD_V4_SECURITY_LABEL: u32 = 1;
pub const CONFIG_MLXSW_MINIMAL_MODULE: u32 = 1;
pub const CONFIG_PWM_LPSS: u32 = 1;
pub const CONFIG_CRC64_ROCKSOFT: u32 = 1;
pub const CONFIG_HUGETLB_PAGE_OPTIMIZE_VMEMMAP: u32 = 1;
pub const CONFIG_MFD_TPS6594_MODULE: u32 = 1;
pub const CONFIG_MT76_USB_MODULE: u32 = 1;
pub const CONFIG_TCG_TPM: u32 = 1;
pub const CONFIG_SILICOM_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_USB_ISIGHTFW_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP_I2S_MODULE: u32 = 1;
pub const CONFIG_PCIE_DW_PLAT: u32 = 1;
pub const CONFIG_IIO_SIMPLE_DUMMY_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_PADLOCK_AES_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_DSA_COMMON_MODULE: u32 = 1;
pub const CONFIG_AD5380_MODULE: u32 = 1;
pub const CONFIG_STMMAC_ETH_MODULE: u32 = 1;
pub const CONFIG_USB_YUREX_MODULE: u32 = 1;
pub const CONFIG_USB_IPHETH_MODULE: u32 = 1;
pub const CONFIG_BCACHEFS_QUOTA: u32 = 1;
pub const CONFIG_USB_GSPCA_PAC7302_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_VERTEXCOM: u32 = 1;
pub const CONFIG_LCD_LTV350QV_MODULE: u32 = 1;
pub const CONFIG_IIO_TIGHTLOOP_TRIGGER_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_MD: u32 = 1;
pub const CONFIG_NET_DSA_TAG_QCA_MODULE: u32 = 1;
pub const CONFIG_MEMSTICK_R592_MODULE: u32 = 1;
pub const CONFIG_VFIO_PCI_MODULE: u32 = 1;
pub const CONFIG_TEHUTI_MODULE: u32 = 1;
pub const CONFIG_BATMAN_ADV_NC: u32 = 1;
pub const CONFIG_SND_PCM_IEC958: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TSC_SERIO_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_EMMITSBURG_MODULE: u32 = 1;
pub const CONFIG_CPUMASK_OFFSTACK: u32 = 1;
pub const CONFIG_SENSORS_ADM1177_MODULE: u32 = 1;
pub const CONFIG_JFS_STATISTICS: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_UAC2: u32 = 1;
pub const CONFIG_I2C_ALGOPCA_MODULE: u32 = 1;
pub const CONFIG_IPW2200_PROMISCUOUS: u32 = 1;
pub const CONFIG_BATTERY_BQ27XXX_I2C_MODULE: u32 = 1;
pub const CONFIG_TTY_PRINTK: u32 = 1;
pub const CONFIG_ISCSI_TCP_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_QCOM_SPMI_MODULE: u32 = 1;
pub const CONFIG_MCP4725_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_TRACE_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_GENERIC: u32 = 1;
pub const CONFIG_DMIID: u32 = 1;
pub const CONFIG_NFC_DIGITAL_MODULE: u32 = 1;
pub const CONFIG_MLX5_SF: u32 = 1;
pub const CONFIG_DM9051_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK_TPS68470_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_NFLOG_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_MTHCA_MODULE: u32 = 1;
pub const CONFIG_HID_SIGMAMICRO_MODULE: u32 = 1;
pub const CONFIG_NF_DUP_IPV4_MODULE: u32 = 1;
pub const CONFIG_IR_IMON_RAW_MODULE: u32 = 1;
pub const CONFIG_SURFACE_3_POWER_OPREGION_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM3168A_I2C_MODULE: u32 = 1;
pub const CONFIG_SCSI_AACRAID_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MC13783_MODULE: u32 = 1;
pub const CONFIG_CAN_IFI_CANFD_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_SNAT_MODULE: u32 = 1;
pub const CONFIG_USB_GPIO_VBUS_MODULE: u32 = 1;
pub const CONFIG_RELAY: u32 = 1;
pub const CONFIG_HAVE_KPROBES_ON_FTRACE: u32 = 1;
pub const CONFIG_CPUSETS: u32 = 1;
pub const CONFIG_FB_RADEON_I2C: u32 = 1;
pub const CONFIG_DRM_NOUVEAU_MODULE: u32 = 1;
pub const CONFIG_VF610_ADC_MODULE: u32 = 1;
pub const CONFIG_AD4130_MODULE: u32 = 1;
pub const CONFIG_USB_KC2190: u32 = 1;
pub const CONFIG_EISA_NAMES: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_VIA_MODULE: u32 = 1;
pub const CONFIG_I2C_ISCH_MODULE: u32 = 1;
pub const CONFIG_NFP_APP_ABM_NIC: u32 = 1;
pub const CONFIG_CPU_FREQ_STAT: u32 = 1;
pub const CONFIG_LOOPBACK_TARGET_MODULE: u32 = 1;
pub const CONFIG_SCSI_MVSAS_MODULE: u32 = 1;
pub const CONFIG_MLX5_INFINIBAND_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_CLASSIFY_MODULE: u32 = 1;
pub const CONFIG_LXT_PHY_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_DAVICOM: u32 = 1;
pub const CONFIG_SENSORS_LM3533_MODULE: u32 = 1;
pub const CONFIG_NVME_TARGET_AUTH: u32 = 1;
pub const CONFIG_INTEL_VSC_MODULE: u32 = 1;
pub const CONFIG_NFS_V3_ACL: u32 = 1;
pub const CONFIG_DVB_SMIPCIE_MODULE: u32 = 1;
pub const CONFIG_X86_USER_SHADOW_STACK: u32 = 1;
pub const CONFIG_TOUCHSCREEN_WM9712: u32 = 1;
pub const CONFIG_CRC_T10DIF: u32 = 1;
pub const CONFIG_GPIO_SIOX_MODULE: u32 = 1;
pub const CONFIG_ATA_BMDMA: u32 = 1;
pub const CONFIG_USB_TMC_MODULE: u32 = 1;
pub const CONFIG_PPPOE_HASH_BITS_4: u32 = 1;
pub const CONFIG_BCMA_HOST_PCI: u32 = 1;
pub const CONFIG_QCA83XX_PHY_MODULE: u32 = 1;
pub const CONFIG_SECURITY_LANDLOCK: u32 = 1;
pub const CONFIG_NET_DSA_TAG_DSA_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MT6370_MODULE: u32 = 1;
pub const CONFIG_X509_CERTIFICATE_PARSER: u32 = 1;
pub const CONFIG_EDAC_I5100_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_DA903X_MODULE: u32 = 1;
pub const CONFIG_MAC80211_RC_DEFAULT: &[u8; 12] = b"minstrel_ht\0";
pub const CONFIG_MCP41010_MODULE: u32 = 1;
pub const CONFIG_HID_CYPRESS_MODULE: u32 = 1;
pub const CONFIG_MLX4_INFINIBAND_MODULE: u32 = 1;
pub const CONFIG_RICHTEK_RTQ6056_MODULE: u32 = 1;
pub const CONFIG_BT_HCIDTL1_MODULE: u32 = 1;
pub const CONFIG_ATH9K_HWRNG: u32 = 1;
pub const CONFIG_DP83822_PHY_MODULE: u32 = 1;
pub const CONFIG_SKGE_GENESIS: u32 = 1;
pub const CONFIG_EVENTFD: u32 = 1;
pub const CONFIG_SND_SOC_WM8903_MODULE: u32 = 1;
pub const CONFIG_NFC_NCI_SPI_MODULE: u32 = 1;
pub const CONFIG_GENERIC_CPU_VULNERABILITIES: u32 = 1;
pub const CONFIG_REGULATOR_DA9210_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_QT2160_MODULE: u32 = 1;
pub const CONFIG_X86_PCC_CPUFREQ: u32 = 1;
pub const CONFIG_BACKLIGHT_LM3630A_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX31730_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_STOWAWAY_MODULE: u32 = 1;
pub const CONFIG_FXAS21002C_MODULE: u32 = 1;
pub const CONFIG_SYSTEM_BLACKLIST_KEYRING: u32 = 1;
pub const CONFIG_I2C_MUX_GPIO_MODULE: u32 = 1;
pub const CONFIG_NFSD_V4: u32 = 1;
pub const CONFIG_NUMA: u32 = 1;
pub const CONFIG_VIDEO_HEXIUM_GEMINI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_I2C_AND_SPI_MODULE: u32 = 1;
pub const CONFIG_HID_VIVALDI_COMMON_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MT6360_MODULE: u32 = 1;
pub const CONFIG_INTEL_RAPL_TPMI_MODULE: u32 = 1;
pub const CONFIG_XEN_SCSI_BACKEND_MODULE: u32 = 1;
pub const CONFIG_ZLIB_DEFLATE: u32 = 1;
pub const CONFIG_ADT7316_I2C_MODULE: u32 = 1;
pub const CONFIG_BNXT_HWMON: u32 = 1;
pub const CONFIG_ATM_HE_MODULE: u32 = 1;
pub const CONFIG_PCI_ENDPOINT: u32 = 1;
pub const CONFIG_CHARGER_WILCO_MODULE: u32 = 1;
pub const CONFIG_TTY_PRINTK_LEVEL: u32 = 6;
pub const CONFIG_USB_NET_DM9601_MODULE: u32 = 1;
pub const CONFIG_SCSI_ARCMSR_MODULE: u32 = 1;
pub const CONFIG_LEDS_INTEL_SS4200_MODULE: u32 = 1;
pub const CONFIG_WLCORE_MODULE: u32 = 1;
pub const CONFIG_IP_NF_NAT_MODULE: u32 = 1;
pub const CONFIG_ROHM_BU27008_MODULE: u32 = 1;
pub const CONFIG_B43_PHY_HT: u32 = 1;
pub const CONFIG_ICE_HWTS: u32 = 1;
pub const CONFIG_PNP: u32 = 1;
pub const CONFIG_SATA_AHCI_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MC13XXX_CORE_MODULE: u32 = 1;
pub const CONFIG_LENOVO_WMI_CAMERA_MODULE: u32 = 1;
pub const CONFIG_HID_SONY_MODULE: u32 = 1;
pub const CONFIG_FRAMER_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_PCRYPT_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_CHELSIO: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_CMEDIA_MODULE: u32 = 1;
pub const CONFIG_PHANTOM_MODULE: u32 = 1;
pub const CONFIG_TQMX86_WDT_MODULE: u32 = 1;
pub const CONFIG_NF_DEFRAG_IPV6_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADP1050_MODULE: u32 = 1;
pub const CONFIG_SSFDC_MODULE: u32 = 1;
pub const CONFIG_ACPI_DPTF: u32 = 1;
pub const CONFIG_FB_TFT_S6D02A1_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_BPCK_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_HX8340BN_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADAU17X1_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SSM2518_MODULE: u32 = 1;
pub const CONFIG_NTB_INTEL_MODULE: u32 = 1;
pub const CONFIG_SERIAL_SC16IS7XX_SPI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX98390_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_BU21029_MODULE: u32 = 1;
pub const CONFIG_SECURITY_SAFESETID: u32 = 1;
pub const CONFIG_IXGBE_IPSEC: u32 = 1;
pub const CONFIG_ZSMALLOC: u32 = 1;
pub const CONFIG_CRYPTO_RNG: u32 = 1;
pub const CONFIG_SND_SOC_SOF_ALDERLAKE_MODULE: u32 = 1;
pub const CONFIG_MFD_WM8400: u32 = 1;
pub const CONFIG_HID_SENSOR_ALS_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_DCTCP_MODULE: u32 = 1;
pub const CONFIG_FB_NEOMAGIC_MODULE: u32 = 1;
pub const CONFIG_CHARGER_88PM860X_MODULE: u32 = 1;
pub const CONFIG_NLMON_MODULE: u32 = 1;
pub const CONFIG_FILE_LOCKING: u32 = 1;
pub const CONFIG_LEDS_88PM860X_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_ST33ZP24_SPI_MODULE: u32 = 1;
pub const CONFIG_USB_U_AUDIO_MODULE: u32 = 1;
pub const CONFIG_NOUVEAU_DEBUG: u32 = 5;
pub const CONFIG_MAG3110_MODULE: u32 = 1;
pub const CONFIG_PATA_IT8213_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TFA989X_MODULE: u32 = 1;
pub const CONFIG_MAX6959_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ADV7511_MODULE: u32 = 1;
pub const CONFIG_I2C_AMD756_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_BOARD_HELPERS_MODULE: u32 = 1;
pub const CONFIG_FB_N411_MODULE: u32 = 1;
pub const CONFIG_PATA_SIS: u32 = 1;
pub const CONFIG_RTC_DRV_ABEOZ9_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_HMAC: u32 = 1;
pub const CONFIG_TEE_MODULE: u32 = 1;
pub const CONFIG_ADXL355_I2C_MODULE: u32 = 1;
pub const CONFIG_DVB_LNBH29_MODULE: u32 = 1;
pub const CONFIG_DMA_VIRTUAL_CHANNELS: u32 = 1;
pub const CONFIG_DRM_PANEL_ILITEK_ILI9341_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_ATC260X_MODULE: u32 = 1;
pub const CONFIG_SCSI_INITIO_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE: u32 = 1;
pub const CONFIG_GP_PCI1XXXX_MODULE: u32 = 1;
pub const CONFIG_GPIO_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_PGTABLE_HAS_HUGE_LEAVES: u32 = 1;
pub const CONFIG_TI_DAC082S085_MODULE: u32 = 1;
pub const CONFIG_USB_HACKRF_MODULE: u32 = 1;
pub const CONFIG_FS_ENCRYPTION_ALGS: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CYTTSP5_MODULE: u32 = 1;
pub const CONFIG_AD7766_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_USER_API_SKCIPHER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC32X4_SPI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_FCRYPT_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_SENSORHUB_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ACPI_INTEL_MATCH_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_CC2520_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_AES: u32 = 1;
pub const CONFIG_SND_HDA_PREALLOC_SIZE: u32 = 0;
pub const CONFIG_MFD_ARIZONA_I2C_MODULE: u32 = 1;
pub const CONFIG_USB_XUSBATM_MODULE: u32 = 1;
pub const CONFIG_PAGE_SIZE_4KB: u32 = 1;
pub const CONFIG_CAN_EMS_PCI_MODULE: u32 = 1;
pub const CONFIG_GPIO_SCH_MODULE: u32 = 1;
pub const CONFIG_I2C_CHARDEV: u32 = 1;
pub const CONFIG_BCM_NET_PHYPTP_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX31760_MODULE: u32 = 1;
pub const CONFIG_STM_PROTO_BASIC_MODULE: u32 = 1;
pub const CONFIG_VIDEO_VIM2M_MODULE: u32 = 1;
pub const CONFIG_AF_UNIX_OOB: u32 = 1;
pub const CONFIG_QCOM_NET_PHYLIB_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_LP3971_MODULE: u32 = 1;
pub const CONFIG_SERIAL_RP2_NR_UARTS: u32 = 32;
pub const CONFIG_MMC_SPI_MODULE: u32 = 1;
pub const CONFIG_INPUT_JOYDEV_MODULE: u32 = 1;
pub const CONFIG_ENCX24J600_MODULE: u32 = 1;
pub const CONFIG_DVB_MN88472_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TW9900_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_CCP_DD_MODULE: u32 = 1;
pub const CONFIG_KVM_SW_PROTECTED_VM: u32 = 1;
pub const CONFIG_DMI: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE: u32 = 1;
pub const CONFIG_SECURITY_APPARMOR_EXPORT_BINARY: u32 = 1;
pub const CONFIG_AFS_FS_MODULE: u32 = 1;
pub const CONFIG_BT_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CRASH_DUMP: u32 = 1;
pub const CONFIG_VIRTIO_CONSOLE: u32 = 1;
pub const CONFIG_DRM_I915_PREEMPT_TIMEOUT: u32 = 640;
pub const CONFIG_MDIO_I2C_MODULE: u32 = 1;
pub const CONFIG_PATA_ATP867X_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_SLS: u32 = 1;
pub const CONFIG_VIDEO_OV13858_MODULE: u32 = 1;
pub const CONFIG_IPW2200_MODULE: u32 = 1;
pub const CONFIG_SMC_MODULE: u32 = 1;
pub const CONFIG_ITG3200_MODULE: u32 = 1;
pub const CONFIG_IDPF_MODULE: u32 = 1;
pub const CONFIG_RPMSG_WWAN_CTRL_MODULE: u32 = 1;
pub const CONFIG_DVB_OR51211_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MAX6916_MODULE: u32 = 1;
pub const CONFIG_CHARGER_BQ2415X_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SUN: u32 = 1;
pub const CONFIG_SENSORS_MAX127_MODULE: u32 = 1;
pub const CONFIG_STK8312_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_UPD78F0730_MODULE: u32 = 1;
pub const CONFIG_HID_ROCCAT_MODULE: u32 = 1;
pub const CONFIG_MAX34408_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CRCT10DIF: u32 = 1;
pub const CONFIG_CRYPTO_TWOFISH_X86_64_MODULE: u32 = 1;
pub const CONFIG_ATH10K_DEBUGFS: u32 = 1;
pub const CONFIG_SND_SOC_IMG_SPDIF_OUT_MODULE: u32 = 1;
pub const CONFIG_SDR_PLATFORM_DRIVERS: u32 = 1;
pub const CONFIG_TCM_PSCSI_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_EPIA_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_TARGET_SYNPROXY_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV5647_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_HFSC_MODULE: u32 = 1;
pub const CONFIG_PD6729_MODULE: u32 = 1;
pub const CONFIG_SENSORS_DRIVETEMP_MODULE: u32 = 1;
pub const CONFIG_IDEAPAD_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_GENERIC_MSI_IRQ: u32 = 1;
pub const CONFIG_FB_SYS_COPYAREA: u32 = 1;
pub const CONFIG_POWER_SUPPLY: u32 = 1;
pub const CONFIG_HAVE_MOD_ARCH_SPECIFIC: u32 = 1;
pub const CONFIG_ROCKER_MODULE: u32 = 1;
pub const CONFIG_CROS_TYPEC_SWITCH_MODULE: u32 = 1;
pub const CONFIG_FPGA_DFL_EMIF_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ATMEL: u32 = 1;
pub const CONFIG_DEVTMPFS: u32 = 1;
pub const CONFIG_SURFACE_PLATFORMS: u32 = 1;
pub const CONFIG_HAVE_DEBUG_KMEMLEAK: u32 = 1;
pub const CONFIG_NET_VENDOR_CORTINA: u32 = 1;
pub const CONFIG_BLK_DEV_BSG: u32 = 1;
pub const CONFIG_MEDIA_PCI_SUPPORT: u32 = 1;
pub const CONFIG_PCMCIA_QLOGIC_MODULE: u32 = 1;
pub const CONFIG_AT803X_PHY_MODULE: u32 = 1;
pub const CONFIG_RFD_FTL_MODULE: u32 = 1;
pub const CONFIG_MACVTAP_MODULE: u32 = 1;
pub const CONFIG_IPV6_FOU_MODULE: u32 = 1;
pub const CONFIG_DRM_DISPLAY_HDMI_HELPER: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_PHYSDEV_MODULE: u32 = 1;
pub const CONFIG_USB_ANNOUNCE_NEW_DEVICES: u32 = 1;
pub const CONFIG_USB_NET_QMI_WWAN_MODULE: u32 = 1;
pub const CONFIG_RT2800PCI_RT53XX: u32 = 1;
pub const CONFIG_SND_SOC_TSCS454_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_PROBES_MODULE: u32 = 1;
pub const CONFIG_USB_USBNET_MODULE: u32 = 1;
pub const CONFIG_INPUT_EVDEV: u32 = 1;
pub const CONFIG_IPV6_ROUTE_INFO: u32 = 1;
pub const CONFIG_TI_ADS1015_MODULE: u32 = 1;
pub const CONFIG_HZ_1000: u32 = 1;
pub const CONFIG_MOST_VIDEO_MODULE: u32 = 1;
pub const CONFIG_HUGETLBFS: u32 = 1;
pub const CONFIG_INTEGRITY_PLATFORM_KEYRING: u32 = 1;
pub const CONFIG_EDAC_I7300_MODULE: u32 = 1;
pub const CONFIG_CIFS_XATTR: u32 = 1;
pub const CONFIG_MHI_BUS_MODULE: u32 = 1;
pub const CONFIG_MLX5_CORE_EN_DCB: u32 = 1;
pub const CONFIG_SENSORS_NPCM7XX_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_WM9713: u32 = 1;
pub const CONFIG_PATA_SERVERWORKS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TS3A227E_MODULE: u32 = 1;
pub const CONFIG_USB_NET_RNDIS_HOST_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_ST33ZP24_MODULE: u32 = 1;
pub const CONFIG_NETWORK_FILESYSTEMS: u32 = 1;
pub const CONFIG_PATA_SIL680_MODULE: u32 = 1;
pub const CONFIG_MISC_RTSX_PCI_MODULE: u32 = 1;
pub const CONFIG_XFS_QUOTA: u32 = 1;
pub const CONFIG_REGULATOR_SKY81452_MODULE: u32 = 1;
pub const CONFIG_TELCLOCK_MODULE: u32 = 1;
pub const CONFIG_INTEL_IDXD_SVM: u32 = 1;
pub const CONFIG_CRYPTO_DEV_SP_PSP: u32 = 1;
pub const CONFIG_SND_OXFW_MODULE: u32 = 1;
pub const CONFIG_COMPACT_UNEVICTABLE_DEFAULT: u32 = 1;
pub const CONFIG_NFC_ST_NCI_SPI_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_WX: u32 = 1;
pub const CONFIG_VIDEO_HI556_MODULE: u32 = 1;
pub const CONFIG_NET_EGRESS: u32 = 1;
pub const CONFIG_SND_USB_CAIAQ_MODULE: u32 = 1;
pub const CONFIG_MLX5_SW_STEERING: u32 = 1;
pub const CONFIG_W1_MASTER_DS2490_MODULE: u32 = 1;
pub const CONFIG_USB_XHCI_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC32X4_I2C_MODULE: u32 = 1;
pub const CONFIG_CROSS_MEMORY_ATTACH: u32 = 1;
pub const CONFIG_LD_ORPHAN_WARN: u32 = 1;
pub const CONFIG_USB_SERIAL_CH341_MODULE: u32 = 1;
pub const CONFIG_YENTA_TI: u32 = 1;
pub const CONFIG_REGULATOR_DA9211_MODULE: u32 = 1;
pub const CONFIG_INET_TCP_DIAG_MODULE: u32 = 1;
pub const CONFIG_DRM_EXEC_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_ATKBD: u32 = 1;
pub const CONFIG_SENSORS_ASC7621_MODULE: u32 = 1;
pub const CONFIG_MXC6255_MODULE: u32 = 1;
pub const CONFIG_TMP006_MODULE: u32 = 1;
pub const CONFIG_VIDEO_AK881X_MODULE: u32 = 1;
pub const CONFIG_HID_NTRIG_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_LD_ORPHAN_WARN: u32 = 1;
pub const CONFIG_EROFS_FS_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7164_MODULE: u32 = 1;
pub const CONFIG_QCOM_VADC_COMMON_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_STK17TA8_MODULE: u32 = 1;
pub const CONFIG_USB_NET_CDC_SUBSET_ENABLE_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_TFTP_MODULE: u32 = 1;
pub const CONFIG_AD7606_MODULE: u32 = 1;
pub const CONFIG_MFD_INTEL_QUARK_I2C_GPIO_MODULE: u32 = 1;
pub const CONFIG_XEN_PRIVCMD_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC23_SPI_MODULE: u32 = 1;
pub const CONFIG_I2C_NVIDIA_GPU_MODULE: u32 = 1;
pub const CONFIG_OBJAGG_MODULE: u32 = 1;
pub const CONFIG_SND_GINA20_MODULE: u32 = 1;
pub const CONFIG_DVB_BUDGET_CORE_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_INTEGRITY: u32 = 1;
pub const CONFIG_EDAC_I5400_MODULE: u32 = 1;
pub const CONFIG_DM_INIT: u32 = 1;
pub const CONFIG_USB_CDNS3_GADGET: u32 = 1;
pub const CONFIG_USB_G_HID_MODULE: u32 = 1;
pub const CONFIG_PPPOL2TP_MODULE: u32 = 1;
pub const CONFIG_ACPI_DEBUG: u32 = 1;
pub const CONFIG_ARCNET_RIM_I_MODULE: u32 = 1;
pub const CONFIG_FB_SAVAGE_MODULE: u32 = 1;
pub const CONFIG_IOMMU_SVA: u32 = 1;
pub const CONFIG_BACKLIGHT_ARCXCNN_MODULE: u32 = 1;
pub const CONFIG_SENSORS_DPS920AB_MODULE: u32 = 1;
pub const CONFIG_SENSORS_IR38064_REGULATOR: u32 = 1;
pub const CONFIG_X86_MCE_INJECT_MODULE: u32 = 1;
pub const CONFIG_VIDEO: u32 = 1;
pub const CONFIG_VIDEO_MT9M114_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L73_MODULE: u32 = 1;
pub const CONFIG_THERMAL_GOV_BANG_BANG: u32 = 1;
pub const CONFIG_VGA_CONSOLE: u32 = 1;
pub const CONFIG_ALIM7101_WDT_MODULE: u32 = 1;
pub const CONFIG_PSTORE_ZONE_MODULE: u32 = 1;
pub const CONFIG_RADIO_SAA7706H_MODULE: u32 = 1;
pub const CONFIG_XEN_PRIVCMD_EVENTFD: u32 = 1;
pub const CONFIG_MFD_SI476X_CORE_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_CONNMARK_MODULE: u32 = 1;
pub const CONFIG_GENERIC_EARLY_IOREMAP: u32 = 1;
pub const CONFIG_SND_SOC_MAX98363_MODULE: u32 = 1;
pub const CONFIG_USB_SL811_CS_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TSC2005_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM5102A_MODULE: u32 = 1;
pub const CONFIG_RTL8821AE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADAU7118_MODULE: u32 = 1;
pub const CONFIG_BT_RFCOMM_MODULE: u32 = 1;
pub const CONFIG_USB_ROLES_INTEL_XHCI_MODULE: u32 = 1;
pub const CONFIG_XFRM_ESP_MODULE: u32 = 1;
pub const CONFIG_XEN_NETDEV_BACKEND_MODULE: u32 = 1;
pub const CONFIG_MAXSMP: u32 = 1;
pub const CONFIG_PATA_OPTIDMA_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_BCM590XX_MODULE: u32 = 1;
pub const CONFIG_USB_CDC_COMPOSITE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L42_SDW_MODULE: u32 = 1;
pub const CONFIG_AMD_XGBE_DCB: u32 = 1;
pub const CONFIG_KEYBOARD_TM2_TOUCHKEY_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_PAGE_TABLE_CHECK: u32 = 1;
pub const CONFIG_RTL8188EE_MODULE: u32 = 1;
pub const CONFIG_CXL_SUSPEND: u32 = 1;
pub const CONFIG_CAN_SLCAN_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_NW80X_MODULE: u32 = 1;
pub const CONFIG_SND_USB_CAIAQ_INPUT: u32 = 1;
pub const CONFIG_RT2800USB_RT35XX: u32 = 1;
pub const CONFIG_I2C_ALI15X3_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_MAGELLAN_MODULE: u32 = 1;
pub const CONFIG_WINMATE_FM07_KEYS_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_SOFT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_NAU8825_MODULE: u32 = 1;
pub const CONFIG_IP_NF_MATCH_ECN_MODULE: u32 = 1;
pub const CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT: u32 = 1;
pub const CONFIG_REGULATOR_MT6331_MODULE: u32 = 1;
pub const CONFIG_DVB_B2C2_FLEXCOP_PCI_MODULE: u32 = 1;
pub const CONFIG_SND_USB_VARIAX_MODULE: u32 = 1;
pub const CONFIG_SERIAL_DEV_BUS: u32 = 1;
pub const CONFIG_USB_RTL8150_MODULE: u32 = 1;
pub const CONFIG_XEN_GRANT_DEV_ALLOC_MODULE: u32 = 1;
pub const CONFIG_L2TP_MODULE: u32 = 1;
pub const CONFIG_COMPAT_BINFMT_ELF: u32 = 1;
pub const CONFIG_WWAN_DEBUGFS: u32 = 1;
pub const CONFIG_CAN_ESD_USB_MODULE: u32 = 1;
pub const CONFIG_USB_SEVSEG_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CY8CTMG110_MODULE: u32 = 1;
pub const CONFIG_NETROM_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_SET_MODULE: u32 = 1;
pub const CONFIG_NF_TABLES_IPV6: u32 = 1;
pub const CONFIG_UIO_MF624_MODULE: u32 = 1;
pub const CONFIG_BSD_PROCESS_ACCT: u32 = 1;
pub const CONFIG_GAMEPORT_EMU10K1_MODULE: u32 = 1;
pub const CONFIG_SND_SEQ_MIDI_MODULE: u32 = 1;
pub const CONFIG_SCSI_STEX_MODULE: u32 = 1;
pub const CONFIG_DVB_MN88473_MODULE: u32 = 1;
pub const CONFIG_INPUT_FF_MEMLESS_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC_SPARC: u32 = 1;
pub const CONFIG_TYPEC_ANX7411_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV64A40_MODULE: u32 = 1;
pub const CONFIG_B43_LEDS: u32 = 1;
pub const CONFIG_SND_SOC_TAS2781_COMLIB_MODULE: u32 = 1;
pub const CONFIG_NF_REJECT_IPV4_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_ATMIO16D_MODULE: u32 = 1;
pub const CONFIG_MEMSTICK_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TSC2007_IIO: u32 = 1;
pub const CONFIG_MWIFIEX_PCIE_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_MAX11801_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_PRETIMEOUT_DEFAULT_GOV_NOOP: u32 = 1;
pub const CONFIG_W1_SLAVE_DS28E17_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_INPUT_EVENTS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK4642_MODULE: u32 = 1;
pub const CONFIG_TEST_BPF_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_EXTENDED: u32 = 1;
pub const CONFIG_LEDS_SIEMENS_SIMATIC_IPC_F7188X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM3168A_SPI_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_AHA152X_MODULE: u32 = 1;
pub const CONFIG_KVM_COMPAT: u32 = 1;
pub const CONFIG_AMD_PMF_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_NO_PROFILE_FN_ATTR: u32 = 1;
pub const CONFIG_X86_64_ACPI_NUMA: u32 = 1;
pub const CONFIG_ATM_NICSTAR_MODULE: u32 = 1;
pub const CONFIG_MTD_REDBOOT_DIRECTORY_BLOCK: i32 = -1;
pub const CONFIG_SND_SOC_ADAU1372_I2C_MODULE: u32 = 1;
pub const CONFIG_MDIO_CAVIUM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_ACPI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TPA6130A2_MODULE: u32 = 1;
pub const CONFIG_SENSORS_EMC1403_MODULE: u32 = 1;
pub const CONFIG_USB_U_SERIAL_MODULE: u32 = 1;
pub const CONFIG_ACPI_SPCR_TABLE: u32 = 1;
pub const CONFIG_MMC_CRYPTO: u32 = 1;
pub const CONFIG_NET_DSA_MV88E6060_MODULE: u32 = 1;
pub const CONFIG_CGROUP_MISC: u32 = 1;
pub const CONFIG_NATSEMI_MODULE: u32 = 1;
pub const CONFIG_NET_IPVTI_MODULE: u32 = 1;
pub const CONFIG_GENERIC_IOMAP: u32 = 1;
pub const CONFIG_JFFS2_COMPRESSION_OPTIONS: u32 = 1;
pub const CONFIG_LEDS_SIEMENS_SIMATIC_IPC_ELKHARTLAKE_MODULE: u32 = 1;
pub const CONFIG_SND_X86: u32 = 1;
pub const CONFIG_KXSD9_SPI_MODULE: u32 = 1;
pub const CONFIG_TYPEC_WUSB3801_MODULE: u32 = 1;
pub const CONFIG_COMEDI_TESTS_NI_ROUTES_MODULE: u32 = 1;
pub const CONFIG_IOSF_MBI_DEBUG: u32 = 1;
pub const CONFIG_I2C_VIPERBOARD_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_USERSPACE_CONSUMER_MODULE: u32 = 1;
pub const CONFIG_LTR390_MODULE: u32 = 1;
pub const CONFIG_MMA7660_MODULE: u32 = 1;
pub const CONFIG_GPIO_104_IDIO_16_MODULE: u32 = 1;
pub const CONFIG_MPRLS0025PA_MODULE: u32 = 1;
pub const CONFIG_MISC_RTSX_USB_MODULE: u32 = 1;
pub const CONFIG_BYTCRC_PMIC_OPREGION: u32 = 1;
pub const CONFIG_TI_DAC5571_MODULE: u32 = 1;
pub const CONFIG_DVB_MB86A20S_MODULE: u32 = 1;
pub const CONFIG_USB_ISP116X_HCD_MODULE: u32 = 1;
pub const CONFIG_OCTEON_EP_MODULE: u32 = 1;
pub const CONFIG_LIBERTAS_USB_MODULE: u32 = 1;
pub const CONFIG_RCU_CPU_STALL_TIMEOUT: u32 = 60;
pub const CONFIG_NF_DUP_IPV6_MODULE: u32 = 1;
pub const CONFIG_PMIC_ADP5520: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_KBL_DA7219_MAX98357A_MACH_MODULE: u32 = 1;
pub const CONFIG_FTL_MODULE: u32 = 1;
pub const CONFIG_IP_MROUTE_COMMON: u32 = 1;
pub const CONFIG_USB_GADGET_TARGET_MODULE: u32 = 1;
pub const CONFIG_USB_EHCI_HCD: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_EASYTOUCH: u32 = 1;
pub const CONFIG_RTL8192DU_MODULE: u32 = 1;
pub const CONFIG_IRQ_REMAP: u32 = 1;
pub const CONFIG_PHY_QCOM_USB_HSIC_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ANSI_CPRNG_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP_LEGACY_COMMON_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_QCOM_LABIBB_MODULE: u32 = 1;
pub const CONFIG_XILINX_EMACLITE_MODULE: u32 = 1;
pub const CONFIG_STRICT_KERNEL_RWX: u32 = 1;
pub const CONFIG_EDD: u32 = 1;
pub const CONFIG_MAX5821_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_ON_DEMAND_PAGING: u32 = 1;
pub const CONFIG_FB_TFT_ILI9163_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_OBEX: u32 = 1;
pub const CONFIG_USB_SERIAL_QUALCOMM_MODULE: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_MIN_ADJUST: u32 = 1;
pub const CONFIG_FB_TFT_TLS8204_MODULE: u32 = 1;
pub const CONFIG_RTW88_SDIO_MODULE: u32 = 1;
pub const CONFIG_LZO_COMPRESS: u32 = 1;
pub const CONFIG_SPARSEMEM_VMEMMAP: u32 = 1;
pub const CONFIG_LEDS_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MT2266_MODULE: u32 = 1;
pub const CONFIG_I2C_NFORCE2_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_STREEBOG_MODULE: u32 = 1;
pub const CONFIG_CXL_PMEM_MODULE: u32 = 1;
pub const CONFIG_HID_SUPPORT: u32 = 1;
pub const CONFIG_USB_CDC_PHONET_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_CHELSIO_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS08_ISA_MODULE: u32 = 1;
pub const CONFIG_IP_NF_ARPFILTER_MODULE: u32 = 1;
pub const CONFIG_MACB_MODULE: u32 = 1;
pub const CONFIG_EXTCON_MAX77693_MODULE: u32 = 1;
pub const CONFIG_CLOCKSOURCE_WATCHDOG_MAX_SKEW_US: u32 = 100;
pub const CONFIG_GPIO_ICH_MODULE: u32 = 1;
pub const CONFIG_HID_SMARTJOYPLUS_MODULE: u32 = 1;
pub const CONFIG_I2C_CCGX_UCSI_MODULE: u32 = 1;
pub const CONFIG_ASYNC_PQ_MODULE: u32 = 1;
pub const CONFIG_HX711_MODULE: u32 = 1;
pub const CONFIG_VFAT_FS: u32 = 1;
pub const CONFIG_LCD_CLASS_DEVICE_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_ROCKER: u32 = 1;
pub const CONFIG_FONT_8x8: u32 = 1;
pub const CONFIG_EFIVAR_FS: u32 = 1;
pub const CONFIG_SND_SOC_WCD_MBHC_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC_FULL: u32 = 1;
pub const CONFIG_NFC_MICROREAD_I2C_MODULE: u32 = 1;
pub const CONFIG_UBIFS_FS_XATTR: u32 = 1;
pub const CONFIG_SECURITY_DMESG_RESTRICT: u32 = 1;
pub const CONFIG_INSPUR_PLATFORM_PROFILE_MODULE: u32 = 1;
pub const CONFIG_LEDS_GPIO_MODULE: u32 = 1;
pub const CONFIG_CHELSIO_T1_1G: u32 = 1;
pub const CONFIG_DVB_HOPPER_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEFLATE: u32 = 1;
pub const CONFIG_LTR501_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ICP_MULTI_MODULE: u32 = 1;
pub const CONFIG_E100_MODULE: u32 = 1;
pub const CONFIG_MACSEC_MODULE: u32 = 1;
pub const CONFIG_IP_ROUTE_MULTIPATH: u32 = 1;
pub const CONFIG_MFD_RT4831_MODULE: u32 = 1;
pub const CONFIG_KFENCE_STRESS_TEST_FAULTS: u32 = 0;
pub const CONFIG_SND_SOC_RT5663_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ADMTEK: u32 = 1;
pub const CONFIG_COMEDI_NI_LABPC_CS_MODULE: u32 = 1;
pub const CONFIG_TIME_NS: u32 = 1;
pub const CONFIG_TMP007_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_IMG_I2S_IN_MODULE: u32 = 1;
pub const CONFIG_QEDI_MODULE: u32 = 1;
pub const CONFIG_UCS2_STRING: u32 = 1;
pub const CONFIG_DM_MULTIPATH_QL_MODULE: u32 = 1;
pub const CONFIG_GENERIC_PTDUMP: u32 = 1;
pub const CONFIG_SND_SOC_PCM6240_MODULE: u32 = 1;
pub const CONFIG_FUNCTION_PADDING_BYTES: u32 = 16;
pub const CONFIG_MFD_ATC260X_I2C_MODULE: u32 = 1;
pub const CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE: u32 = 438;
pub const CONFIG_VIDEO_MT9M001_MODULE: u32 = 1;
pub const CONFIG_PACKET: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_TRANSIENT_MODULE: u32 = 1;
pub const CONFIG_VGA_ARB_MAX_GPUS: u32 = 16;
pub const CONFIG_KVM_GENERIC_PRE_FAULT_MEMORY: u32 = 1;
pub const CONFIG_VF610_DAC_MODULE: u32 = 1;
pub const CONFIG_NO_HZ_COMMON: u32 = 1;
pub const CONFIG_SND_FIREFACE_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_METRO_MODULE: u32 = 1;
pub const CONFIG_USB_LJCA_MODULE: u32 = 1;
pub const CONFIG_SCSI_ESAS2R_MODULE: u32 = 1;
pub const CONFIG_MEMTEST: u32 = 1;
pub const CONFIG_COMEDI_ISA_DRIVERS: u32 = 1;
pub const CONFIG_IIO_HRTIMER_TRIGGER_MODULE: u32 = 1;
pub const CONFIG_DRM_VIRTIO_GPU_MODULE: u32 = 1;
pub const CONFIG_MFD_TPS65086_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_MXUPORT_MODULE: u32 = 1;
pub const CONFIG_MTD_UBI_GLUEBI_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_SDDR55_MODULE: u32 = 1;
pub const CONFIG_MISDN_HFCMULTI_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_SANE_FUNCTION_ALIGNMENT: u32 = 1;
pub const CONFIG_SENSORS_LM95234_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_FMVJ18X_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCMAD_MODULE: u32 = 1;
pub const CONFIG_I8253_LOCK: u32 = 1;
pub const CONFIG_STACKDEPOT_MAX_FRAMES: u32 = 64;
pub const CONFIG_CHARLCD_BL_FLASH: u32 = 1;
pub const CONFIG_BRIDGE_EBT_ARP_MODULE: u32 = 1;
pub const CONFIG_SND_SERIAL_U16550_MODULE: u32 = 1;
pub const CONFIG_FPGA_DFL_PCI_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX20086_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_KVM_MODULE: u32 = 1;
pub const CONFIG_QFMT_V1_MODULE: u32 = 1;
pub const CONFIG_FB_CFB_FILLRECT: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_RT286_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_T_NAT_MODULE: u32 = 1;
pub const CONFIG_NF_DEFRAG_IPV4_MODULE: u32 = 1;
pub const CONFIG_FAIR_GROUP_SCHED: u32 = 1;
pub const CONFIG_LEDS_MC13783_MODULE: u32 = 1;
pub const CONFIG_QCOM_SPMI_IADC_MODULE: u32 = 1;
pub const CONFIG_ZSTD_DECOMPRESS: u32 = 1;
pub const CONFIG_NETFILTER_ADVANCED: u32 = 1;
pub const CONFIG_FAT_FS: u32 = 1;
pub const CONFIG_USB_CONFIGFS_NCM: u32 = 1;
pub const CONFIG_REGULATOR_MAX77503_MODULE: u32 = 1;
pub const CONFIG_WM831X_POWER_MODULE: u32 = 1;
pub const CONFIG_N_GSM_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TSC2004_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT274_MODULE: u32 = 1;
pub const CONFIG_VDPA_USER_MODULE: u32 = 1;
pub const CONFIG_NVME_MULTIPATH: u32 = 1;
pub const CONFIG_B43LEGACY_DMA_AND_PIO_MODE: u32 = 1;
pub const CONFIG_PSTORE_DEFAULT_KMSG_BYTES: u32 = 10240;
pub const CONFIG_VIDEO_CX231XX_RC: u32 = 1;
pub const CONFIG_X86_PMEM_LEGACY: u32 = 1;
pub const CONFIG_IP6_NF_TARGET_REJECT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_LPASS_MACRO_COMMON_MODULE: u32 = 1;
pub const CONFIG_AIC79XX_CMDS_PER_DEVICE: u32 = 32;
pub const CONFIG_MLX5_BRIDGE: u32 = 1;
pub const CONFIG_GENERIC_TIME_VSYSCALL: u32 = 1;
pub const CONFIG_MMU_GATHER_RCU_TABLE_FREE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_PER_VMA_LOCK: u32 = 1;
pub const CONFIG_FB_SIS_MODULE: u32 = 1;
pub const CONFIG_AS73211_MODULE: u32 = 1;
pub const CONFIG_SND_CS46XX_NEW_DSP: u32 = 1;
pub const CONFIG_BT_HCIBLUECARD_MODULE: u32 = 1;
pub const CONFIG_DVB_AS102_FE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP5x_MODULE: u32 = 1;
pub const CONFIG_IR_IMON_DECODER_MODULE: u32 = 1;
pub const CONFIG_EISA_PCI_EISA: u32 = 1;
pub const CONFIG_CRYPTO_VMAC_MODULE: u32 = 1;
pub const CONFIG_DLN2_ADC_MODULE: u32 = 1;
pub const CONFIG_DS1682_MODULE: u32 = 1;
pub const CONFIG_NR_CPUS: u32 = 8192;
pub const CONFIG_V4L2_CCI_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_KTTI_MODULE: u32 = 1;
pub const CONFIG_ARCH_HIBERNATION_POSSIBLE: u32 = 1;
pub const CONFIG_HID_ACCUTOUCH_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_E2I: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_TRACER: u32 = 1;
pub const CONFIG_DW_I3C_MASTER_MODULE: u32 = 1;
pub const CONFIG_ASYNC_MEMCPY_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CRCT10DIF_PCLMUL_MODULE: u32 = 1;
pub const CONFIG_MLXSW_PCI_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_S6D1121_MODULE: u32 = 1;
pub const CONFIG_SPI_OC_TINY_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_NAU8824_MODULE: u32 = 1;
pub const CONFIG_GPIO_MAX7301_MODULE: u32 = 1;
pub const CONFIG_SX9500_MODULE: u32 = 1;
pub const CONFIG_LOG_BUF_SHIFT: u32 = 18;
pub const CONFIG_REGULATOR_MT6332_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_DEFAULT_ON_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX98927_MODULE: u32 = 1;
pub const CONFIG_AUDIT: u32 = 1;
pub const CONFIG_SQUASHFS_XATTR: u32 = 1;
pub const CONFIG_NET_9P_MODULE: u32 = 1;
pub const CONFIG_BATTERY_DA9052_MODULE: u32 = 1;
pub const CONFIG_SECURITY_SMACK_APPEND_SIGNALS: u32 = 1;
pub const CONFIG_USB_F_MIDI_MODULE: u32 = 1;
pub const CONFIG_BT_HCIBTUSB_MODULE: u32 = 1;
pub const CONFIG_XEN_ACPI: u32 = 1;
pub const CONFIG_GPIO_DA9052_MODULE: u32 = 1;
pub const CONFIG_DRM_XE_JOB_TIMEOUT_MAX: u32 = 10000;
pub const CONFIG_USB_HUB_USB251XB_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_CANNONLAKE_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_SCALABLE_MODULE: u32 = 1;
pub const CONFIG_SND_SEQ_DEVICE_MODULE: u32 = 1;
pub const CONFIG_DVB_DRX39XYJ_MODULE: u32 = 1;
pub const CONFIG_RTW88_USB_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CROS_EC_CODEC_MODULE: u32 = 1;
pub const CONFIG_MOUSE_CYAPA_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TW9906_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MT6323_MODULE: u32 = 1;
pub const CONFIG_QED_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CYTTSP4_SPI_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CONNTRACK_MODULE: u32 = 1;
pub const CONFIG_NF_SOCKET_IPV4_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ARIA_AESNI_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_CAN_DEV_MODULE: u32 = 1;
pub const CONFIG_SND_SEQ_HRTIMER_DEFAULT: u32 = 1;
pub const CONFIG_YELLOWFIN_MODULE: u32 = 1;
pub const CONFIG_MSE102X_MODULE: u32 = 1;
pub const CONFIG_HW_RANDOM_INTEL_MODULE: u32 = 1;
pub const CONFIG_NVME_TCP_TLS: u32 = 1;
pub const CONFIG_COMPAT_NETLINK_MESSAGES: u32 = 1;
pub const CONFIG_SND_SOC_IMG_PISTACHIO_INTERNAL_DAC_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_TWIDJOY_MODULE: u32 = 1;
pub const CONFIG_USB_ATM_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_AXP20X_MODULE: u32 = 1;
pub const CONFIG_VSOCKETS_DIAG_MODULE: u32 = 1;
pub const CONFIG_USB_LED_TRIG: u32 = 1;
pub const CONFIG_NET_SCH_GRED_MODULE: u32 = 1;
pub const CONFIG_DM_MULTIPATH_MODULE: u32 = 1;
pub const CONFIG_AFE4403_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_YC_MACH_MODULE: u32 = 1;
pub const CONFIG_MDIO_DEVICE: u32 = 1;
pub const CONFIG_KVM_INTEL_MODULE: u32 = 1;
pub const CONFIG_CAN_J1939_MODULE: u32 = 1;
pub const CONFIG_RDS_RDMA_MODULE: u32 = 1;
pub const CONFIG_EVENT_TRACING: u32 = 1;
pub const CONFIG_KRETPROBES: u32 = 1;
pub const CONFIG_STM_DUMMY_MODULE: u32 = 1;
pub const CONFIG_BCM_NET_PHYLIB_MODULE: u32 = 1;
pub const CONFIG_PAGE_POISONING: u32 = 1;
pub const CONFIG_FB_RADEON_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_AS3711_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_CE6230_MODULE: u32 = 1;
pub const CONFIG_PATA_CMD640_PCI_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_SHARE_IRQ: u32 = 1;
pub const CONFIG_NETFS_DEBUG: u32 = 1;
pub const CONFIG_THINKPAD_ACPI_DEBUGFACILITIES: u32 = 1;
pub const CONFIG_LOCKD_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_CYPRESS_M8_MODULE: u32 = 1;
pub const CONFIG_RPMSG_CTRL_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_UAC1: u32 = 1;
pub const CONFIG_HID_CREATIVE_SB0540_MODULE: u32 = 1;
pub const CONFIG_BPF_LSM: u32 = 1;
pub const CONFIG_BACKLIGHT_RT4831_MODULE: u32 = 1;
pub const CONFIG_NVME_TARGET_RDMA_MODULE: u32 = 1;
pub const CONFIG_IP_ROUTE_VERBOSE: u32 = 1;
pub const CONFIG_COMPACTION: u32 = 1;
pub const CONFIG_REGULATOR_RT4801_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_ALDERLAKE_MODULE: u32 = 1;
pub const CONFIG_FB_CFB_IMAGEBLIT: u32 = 1;
pub const CONFIG_PATA_SCH_MODULE: u32 = 1;
pub const CONFIG_SCSI_BFA_FC_MODULE: u32 = 1;
pub const CONFIG_HWPOISON_INJECT_MODULE: u32 = 1;
pub const CONFIG_BRANCH_PROFILE_NONE: u32 = 1;
pub const CONFIG_VIDEOBUF2_VMALLOC_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_UC1701_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_IP_MODULE: u32 = 1;
pub const CONFIG_INPUT: u32 = 1;
pub const CONFIG_SENSORS_OCC_P8_I2C_MODULE: u32 = 1;
pub const CONFIG_TI_ADS131E08_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_FSL_EASRC_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_RSI: u32 = 1;
pub const CONFIG_SND_SOC_RT711_MODULE: u32 = 1;
pub const CONFIG_USB_MAX3420_UDC_MODULE: u32 = 1;
pub const CONFIG_USB_NET_PLUSB_MODULE: u32 = 1;
pub const CONFIG_BLK_MQ_VIRTIO: u32 = 1;
pub const CONFIG_SPI_MICROCHIP_CORE_MODULE: u32 = 1;
pub const CONFIG_NFT_LOG_MODULE: u32 = 1;
pub const CONFIG_HAVE_MMIOTRACE_SUPPORT: u32 = 1;
pub const CONFIG_GENWQE_PLATFORM_ERROR_RECOVERY: u32 = 0;
pub const CONFIG_RADIO_ADAPTERS_MODULE: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL_MCOUNT: u32 = 1;
pub const CONFIG_SND_SOC_MT6358_MODULE: u32 = 1;
pub const CONFIG_CAPI_TRACE: u32 = 1;
pub const CONFIG_SMPRO_MISC_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_REDIRECT_MODULE: u32 = 1;
pub const CONFIG_FPGA_BRIDGE_MODULE: u32 = 1;
pub const CONFIG_TCG_TPM2_HMAC: u32 = 1;
pub const CONFIG_ROHM_BM1390_MODULE: u32 = 1;
pub const CONFIG_FUEL_GAUGE_MM8013_MODULE: u32 = 1;
pub const CONFIG_VXLAN_MODULE: u32 = 1;
pub const CONFIG_RXKAD: u32 = 1;
pub const CONFIG_SONY_FF: u32 = 1;
pub const CONFIG_MS5611_I2C_MODULE: u32 = 1;
pub const CONFIG_CAN_M_CAN_PCI_MODULE: u32 = 1;
pub const CONFIG_MTD_CK804XROM_MODULE: u32 = 1;
pub const CONFIG_RTW88_8723DE_MODULE: u32 = 1;
pub const CONFIG_DEV_COREDUMP: u32 = 1;
pub const CONFIG_SLAB_MERGE_DEFAULT: u32 = 1;
pub const CONFIG_XEN: u32 = 1;
pub const CONFIG_DVB_USB_MODULE: u32 = 1;
pub const CONFIG_RCU_CPU_STALL_CPUTIME: u32 = 1;
pub const CONFIG_QAT_VFIO_PCI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_POLYVAL_MODULE: u32 = 1;
pub const CONFIG_TYPEC_MUX_PTN36502_MODULE: u32 = 1;
pub const CONFIG_USB_MIDI_GADGET_MODULE: u32 = 1;
pub const CONFIG_DVB_B2C2_FLEXCOP_MODULE: u32 = 1;
pub const CONFIG_GPIO_PCF857X_MODULE: u32 = 1;
pub const CONFIG_FUNCTION_ERROR_INJECTION: u32 = 1;
pub const CONFIG_TABLET_USB_HANWANG_MODULE: u32 = 1;
pub const CONFIG_E1000_MODULE: u32 = 1;
pub const CONFIG_FRAMEBUFFER_CONSOLE: u32 = 1;
pub const CONFIG_SND_INDIGO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP6x_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5660_MODULE: u32 = 1;
pub const CONFIG_ADT7316_SPI_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_GENERIC_CRASHKERNEL_RESERVATION: u32 = 1;
pub const CONFIG_GPIO_LP873X_MODULE: u32 = 1;
pub const CONFIG_RADIO_SI476X_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS6507X_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_ECC_SW_BCH: u32 = 1;
pub const CONFIG_JOYSTICK_XPAD_FF: u32 = 1;
pub const CONFIG_CRYPTO_ENGINE_MODULE: u32 = 1;
pub const CONFIG_COUNTER_MODULE: u32 = 1;
pub const CONFIG_POLYNOMIAL_MODULE: u32 = 1;
pub const CONFIG_BLK_ICQ: u32 = 1;
pub const CONFIG_MPL115_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_MARK: u32 = 1;
pub const CONFIG_VFIO_PCI_VGA: u32 = 1;
pub const CONFIG_ATP_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MSM6242_MODULE: u32 = 1;
pub const CONFIG_HAVE_GCC_PLUGINS: u32 = 1;
pub const CONFIG_X86_CMPXCHG64: u32 = 1;
pub const CONFIG_USB_NET_SMSC95XX_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NCT6683_MODULE: u32 = 1;
pub const CONFIG_PATA_ARTOP_MODULE: u32 = 1;
pub const CONFIG_FUSION_LAN_MODULE: u32 = 1;
pub const CONFIG_MEMSTICK_TIFM_MS_MODULE: u32 = 1;
pub const CONFIG_DVB_AF9033_MODULE: u32 = 1;
pub const CONFIG_SND_DESIGNWARE_PCM: u32 = 1;
pub const CONFIG_NO_HZ: u32 = 1;
pub const CONFIG_VIDEO_GO7007_USB_MODULE: u32 = 1;
pub const CONFIG_IQS624_POS_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_USB6501_MODULE: u32 = 1;
pub const CONFIG_DP83869_PHY_MODULE: u32 = 1;
pub const CONFIG_TPL0102_MODULE: u32 = 1;
pub const CONFIG_GPIO_PALMAS: u32 = 1;
pub const CONFIG_PWM_CLK_MODULE: u32 = 1;
pub const CONFIG_CEPH_FSCACHE: u32 = 1;
pub const CONFIG_INPUT_GPIO_DECODER_MODULE: u32 = 1;
pub const CONFIG_RING_BUFFER: u32 = 1;
pub const CONFIG_W1_MASTER_GPIO_MODULE: u32 = 1;
pub const CONFIG_I2C_MUX_PCA954x_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_MTK_MODULE: u32 = 1;
pub const CONFIG_I2C_SIS96X_MODULE: u32 = 1;
pub const CONFIG_USB_HSIC_USB4604_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TSC2007_MODULE: u32 = 1;
pub const CONFIG_DM_SNAPSHOT_MODULE: u32 = 1;
pub const CONFIG_MCP4821_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_TINYLCD_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_IUU_MODULE: u32 = 1;
pub const CONFIG_EDAC_E752X_MODULE: u32 = 1;
pub const CONFIG_NET_PKTGEN_MODULE: u32 = 1;
pub const CONFIG_LLC_MODULE: u32 = 1;
pub const CONFIG_IMA_NG_TEMPLATE: u32 = 1;
pub const CONFIG_VIDEO_AU0828_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_FTRACE_WITH_REGS: u32 = 1;
pub const CONFIG_LEDS_LM36274_MODULE: u32 = 1;
pub const CONFIG_MFD_SYSCON: u32 = 1;
pub const CONFIG_REGULATOR_PCAP_MODULE: u32 = 1;
pub const CONFIG_VIDEO_STK1160_MODULE: u32 = 1;
pub const CONFIG_USB_CYTHERM_MODULE: u32 = 1;
pub const CONFIG_INPUT_PCF8574_MODULE: u32 = 1;
pub const CONFIG_GPIOLIB_FASTPATH_LIMIT: u32 = 512;
pub const CONFIG_MAC80211_LEDS: u32 = 1;
pub const CONFIG_EXTCON_FSA9480_MODULE: u32 = 1;
pub const CONFIG_SCHED_MC_PRIO: u32 = 1;
pub const CONFIG_USB_NET_AQC111_MODULE: u32 = 1;
pub const CONFIG_NFC_ST_NCI_I2C_MODULE: u32 = 1;
pub const CONFIG_EZX_PCAP: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_BOOTPARAM: u32 = 1;
pub const CONFIG_JFS_SECURITY: u32 = 1;
pub const CONFIG_PCIPCWATCHDOG_MODULE: u32 = 1;
pub const CONFIG_NFC_MRVL_USB_MODULE: u32 = 1;
pub const CONFIG_XEN_MCE_LOG: u32 = 1;
pub const CONFIG_RT2800USB_MODULE: u32 = 1;
pub const CONFIG_BT_BNEP_PROTO_FILTER: u32 = 1;
pub const CONFIG_RESET_CONTROLLER: u32 = 1;
pub const CONFIG_SND_SOC_SOF_GEMINILAKE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_AT_A2150_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_M41T80_WDT: u32 = 1;
pub const CONFIG_VIDEO_MEM2MEM_DEINTERLACE_MODULE: u32 = 1;
pub const CONFIG_SURFACE_AGGREGATOR_HUB_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADL_PCI9111_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MCP795_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SM4_AESNI_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_PID_NS: u32 = 1;
pub const CONFIG_SND_SOC_IMG_PARALLEL_OUT_MODULE: u32 = 1;
pub const CONFIG_DRM_GPUVM_MODULE: u32 = 1;
pub const CONFIG_XFRM_USER_COMPAT_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TC358743_MODULE: u32 = 1;
pub const CONFIG_GPIO_MAX7300_MODULE: u32 = 1;
pub const CONFIG_NVME_HWMON: u32 = 1;
pub const CONFIG_IP6_NF_TARGET_NPT_MODULE: u32 = 1;
pub const CONFIG_LEDS_RT8515_MODULE: u32 = 1;
pub const CONFIG_MB1232_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MICROCHIP_KSZ8863_SMI_MODULE: u32 = 1;
pub const CONFIG_TINYDRM_ILI9163_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_DIRTY_RING: u32 = 1;
pub const CONFIG_PM_ADVANCED_DEBUG: u32 = 1;
pub const CONFIG_ROHM_BU27034_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_PCF50633_MODULE: u32 = 1;
pub const CONFIG_AS3935_MODULE: u32 = 1;
pub const CONFIG_CGROUP_PERF: u32 = 1;
pub const CONFIG_INET6_ESP_OFFLOAD_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO_MPORT_CDEV_MODULE: u32 = 1;
pub const CONFIG_L2TP_ETH_MODULE: u32 = 1;
pub const CONFIG_IGC_LEDS: u32 = 1;
pub const CONFIG_VIDEO_MSP3400_MODULE: u32 = 1;
pub const CONFIG_USB_PWC_MODULE: u32 = 1;
pub const CONFIG_HARDIRQS_SW_RESEND: u32 = 1;
pub const CONFIG_IIO_CONSUMERS_PER_TRIGGER: u32 = 2;
pub const CONFIG_FRAMEBUFFER_CONSOLE_ROTATION: u32 = 1;
pub const CONFIG_BNX2X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_NAU8810_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_GLUE_CT: u32 = 1;
pub const CONFIG_SENSORS_XDPE122_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_FINTEK: u32 = 1;
pub const CONFIG_ENIC_MODULE: u32 = 1;
pub const CONFIG_SCSI_MPT2SAS_MAX_SGE: u32 = 128;
pub const CONFIG_FREEZER: u32 = 1;
pub const CONFIG_RFD77402_MODULE: u32 = 1;
pub const CONFIG_XEN_GNTDEV_DMABUF: u32 = 1;
pub const CONFIG_INFINIBAND_USER_MEM: u32 = 1;
pub const CONFIG_PINCTRL_CS47L35: u32 = 1;
pub const CONFIG_SND_SOC_SSM2602_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_V2_MODULE: u32 = 1;
pub const CONFIG_AMD_PTDMA_MODULE: u32 = 1;
pub const CONFIG_MYRI10GE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_SOUNDWIRE_LINK_BASELINE_MODULE: u32 = 1;
pub const CONFIG_VM_EVENT_COUNTERS: u32 = 1;
pub const CONFIG_SQUASHFS_CHOICE_DECOMP_BY_MOUNT: u32 = 1;
pub const CONFIG_PAGE_SIZE_LESS_THAN_64KB: u32 = 1;
pub const CONFIG_VLAN_8021Q_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_MIO_CS_MODULE: u32 = 1;
pub const CONFIG_AQTION_MODULE: u32 = 1;
pub const CONFIG_ASSOCIATIVE_ARRAY: u32 = 1;
pub const CONFIG_PNFS_FILE_LAYOUT_MODULE: u32 = 1;
pub const CONFIG_RTL8723_COMMON_MODULE: u32 = 1;
pub const CONFIG_AXP288_ADC_MODULE: u32 = 1;
pub const CONFIG_SI7005_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_SPACEBALL_MODULE: u32 = 1;
pub const CONFIG_EFI_EARLYCON: u32 = 1;
pub const CONFIG_MINIX_SUBPARTITION: u32 = 1;
pub const CONFIG_LEDS_MLXCPLD_MODULE: u32 = 1;
pub const CONFIG_EXT4_FS_SECURITY: u32 = 1;
pub const CONFIG_SENSORS_SHT3x_MODULE: u32 = 1;
pub const CONFIG_BRCMFMAC_USB: u32 = 1;
pub const CONFIG_SUNRPC_SWAP: u32 = 1;
pub const CONFIG_XFS_SUPPORT_V4: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_DMC_TSC10: u32 = 1;
pub const CONFIG_BRIDGE_EBT_VLAN_MODULE: u32 = 1;
pub const CONFIG_SENSORS_G760A_MODULE: u32 = 1;
pub const CONFIG_CRASH_RESERVE: u32 = 1;
pub const CONFIG_SND_VIRTUOSO_MODULE: u32 = 1;
pub const CONFIG_ATH_COMMON_MODULE: u32 = 1;
pub const CONFIG_AD7816_MODULE: u32 = 1;
pub const CONFIG_UACCE_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV: u32 = 1;
pub const CONFIG_MISDN_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SIG: u32 = 1;
pub const CONFIG_RT61PCI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM179X_SPI_MODULE: u32 = 1;
pub const CONFIG_EFI_COCO_SECRET: u32 = 1;
pub const CONFIG_DRM_BUDDY_MODULE: u32 = 1;
pub const CONFIG_MAX8925_POWER_MODULE: u32 = 1;
pub const CONFIG_POWER_SEQUENCING_MODULE: u32 = 1;
pub const CONFIG_BT_HCIBTUSB_POLL_SYNC: u32 = 1;
pub const CONFIG_GPIO_DS4520_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_PL2303_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_MSG2638_MODULE: u32 = 1;
pub const CONFIG_TYPEC_MT6360_MODULE: u32 = 1;
pub const CONFIG_9P_FSCACHE: u32 = 1;
pub const CONFIG_AD5449_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_PROX_MODULE: u32 = 1;
pub const CONFIG_CGROUP_PIDS: u32 = 1;
pub const CONFIG_X86_UMIP: u32 = 1;
pub const CONFIG_VIDEO_CX88_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_CAFE_MODULE: u32 = 1;
pub const CONFIG_RMI4_F30: u32 = 1;
pub const CONFIG_SND_HDA_INTEL_HDMI_SILENT_STREAM: u32 = 1;
pub const CONFIG_PWM_IQS620A_MODULE: u32 = 1;
pub const CONFIG_NVDIMM_KEYS: u32 = 1;
pub const CONFIG_IMA_ARCH_POLICY: u32 = 1;
pub const CONFIG_SENSORS_IBMAEM_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83L786NG_MODULE: u32 = 1;
pub const CONFIG_SOCK_VALIDATE_XMIT: u32 = 1;
pub const CONFIG_NFC_S3FWRN5_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_AZ6007_MODULE: u32 = 1;
pub const CONFIG_INTEGRITY_ASYMMETRIC_KEYS: u32 = 1;
pub const CONFIG_INSTRUCTION_DECODER: u32 = 1;
pub const CONFIG_INPUT_AD714X_I2C_MODULE: u32 = 1;
pub const CONFIG_INET6_ESP_MODULE: u32 = 1;
pub const CONFIG_HPWDT_NMI_DECODING: u32 = 1;
pub const CONFIG_FCOE_FNIC_MODULE: u32 = 1;
pub const CONFIG_FPROBE: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_DIO200_PCI_MODULE: u32 = 1;
pub const CONFIG_CAN_GW_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_SIP_MODULE: u32 = 1;
pub const CONFIG_NET_RX_BUSY_POLL: u32 = 1;
pub const CONFIG_PHYSICAL_START: u32 = 16777216;
pub const CONFIG_MTD_ONENAND_2X_PROGRAM: u32 = 1;
pub const CONFIG_INPUT_ATI_REMOTE2_MODULE: u32 = 1;
pub const CONFIG_EDAC: u32 = 1;
pub const CONFIG_USB_CHIPIDEA_HOST: u32 = 1;
pub const CONFIG_PAHOLE_VERSION: u32 = 0;
pub const CONFIG_HTS221_SPI_MODULE: u32 = 1;
pub const CONFIG_SPI_AXI_SPI_ENGINE_MODULE: u32 = 1;
pub const CONFIG_LEDS_DAC124S085_MODULE: u32 = 1;
pub const CONFIG_SND_MPU401_MODULE: u32 = 1;
pub const CONFIG_PKCS7_MESSAGE_PARSER: u32 = 1;
pub const CONFIG_VIDEO_TVP514X_MODULE: u32 = 1;
pub const CONFIG_REGMAP_SLIMBUS_MODULE: u32 = 1;
pub const CONFIG_LRU_GEN_ENABLED: u32 = 1;
pub const CONFIG_ADXL355_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_SILEAD_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_IDT82P33_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_GOODIX_BERLIN_SPI_MODULE: u32 = 1;
pub const CONFIG_PWM_CRC: u32 = 1;
pub const CONFIG_B43LEGACY_PCICORE_AUTOSELECT: u32 = 1;
pub const CONFIG_USB_CONFIGFS_PHONET: u32 = 1;
pub const CONFIG_LCD_AMS369FG06_MODULE: u32 = 1;
pub const CONFIG_MEDIA_SUPPORT_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_LOGIPS2PP: u32 = 1;
pub const CONFIG_I2C_DESIGNWARE_PLATFORM: u32 = 1;
pub const CONFIG_ISA_BUS: u32 = 1;
pub const CONFIG_SENSORS_TSL2550_MODULE: u32 = 1;
pub const CONFIG_BPQETHER_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_ENTRY_PADDING: u32 = 1;
pub const CONFIG_NET_VENDOR_SMSC: u32 = 1;
pub const CONFIG_TRACE_CLOCK: u32 = 1;
pub const CONFIG_R6040_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_I2C_INFINEON_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_IRQ_BYPASS: u32 = 1;
pub const CONFIG_EXTCON_SM5502_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO_ENUM_BASIC_MODULE: u32 = 1;
pub const CONFIG_ACPI_BUTTON: u32 = 1;
pub const CONFIG_AUXDISPLAY: u32 = 1;
pub const CONFIG_USB_SERIAL_TI_MODULE: u32 = 1;
pub const CONFIG_FPGA_MGR_XILINX_CORE_MODULE: u32 = 1;
pub const CONFIG_CAVIUM_PTP_MODULE: u32 = 1;
pub const CONFIG_BATTERY_MAX1720X_MODULE: u32 = 1;
pub const CONFIG_NOZOMI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_GC0308_MODULE: u32 = 1;
pub const CONFIG_BCMA_HOST_SOC: u32 = 1;
pub const CONFIG_DELL_WMI_LED_MODULE: u32 = 1;
pub const CONFIG_RTC_INTF_SYSFS: u32 = 1;
pub const CONFIG_MOUSE_PS2_FOCALTECH: u32 = 1;
pub const CONFIG_ATM_IDT77252_USE_SUNI: u32 = 1;
pub const CONFIG_PATA_HPT3X3_MODULE: u32 = 1;
pub const CONFIG_FB_NOTIFY: u32 = 1;
pub const CONFIG_SUN_PARTITION: u32 = 1;
pub const CONFIG_QUOTA: u32 = 1;
pub const CONFIG_VIA_RHINE_MODULE: u32 = 1;
pub const CONFIG_ACPI_PRMT: u32 = 1;
pub const CONFIG_RCU_LAZY: u32 = 1;
pub const CONFIG_CRYPTO_NHPOLY1305_SSE2_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_SKY81452_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_I2C_CR50_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_TCPMSS_MODULE: u32 = 1;
pub const CONFIG_NFT_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_ADMV4420_MODULE: u32 = 1;
pub const CONFIG_ACPI_TABLE_UPGRADE: u32 = 1;
pub const CONFIG_SENSORS_LTC4282_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC3X_I2C_MODULE: u32 = 1;
pub const CONFIG_DVB_L64781_MODULE: u32 = 1;
pub const CONFIG_MT7663U_MODULE: u32 = 1;
pub const CONFIG_TASKS_RCU_GENERIC: u32 = 1;
pub const CONFIG_PATA_PARPORT_BPCK6_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SHA1: u32 = 1;
pub const CONFIG_IP_SET_HASH_IPPORT_MODULE: u32 = 1;
pub const CONFIG_PREEMPT_NOTIFIERS: u32 = 1;
pub const CONFIG_UBIFS_FS_SECURITY: u32 = 1;
pub const CONFIG_INTEL_BXTWC_PMIC_TMU_MODULE: u32 = 1;
pub const CONFIG_NFC_MRVL_SPI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_VP27SMPX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ES83XX_DSM_COMMON_MODULE: u32 = 1;
pub const CONFIG_SND_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_FUSION_LOGGING: u32 = 1;
pub const CONFIG_NFT_DUP_IPV6_MODULE: u32 = 1;
pub const CONFIG_FS_VERITY: u32 = 1;
pub const CONFIG_RC_ATI_REMOTE_MODULE: u32 = 1;
pub const CONFIG_PATA_ACPI_MODULE: u32 = 1;
pub const CONFIG_FB_BACKLIGHT_MODULE: u32 = 1;
pub const CONFIG_SMC_DIAG_MODULE: u32 = 1;
pub const CONFIG_CLOCKSOURCE_VALIDATE_LAST_CYCLE: u32 = 1;
pub const CONFIG_JOYSTICK_PXRC_MODULE: u32 = 1;
pub const CONFIG_CONTEXT_TRACKING: u32 = 1;
pub const CONFIG_USB_CHAOSKEY_MODULE: u32 = 1;
pub const CONFIG_AGP_AMD64: u32 = 1;
pub const CONFIG_NI_XGE_MANAGEMENT_ENET_MODULE: u32 = 1;
pub const CONFIG_CPU_IDLE_GOV_TEO: u32 = 1;
pub const CONFIG_ULI526X_MODULE: u32 = 1;
pub const CONFIG_DEVTMPFS_SAFE: u32 = 1;
pub const CONFIG_NET_EMATCH_U32_MODULE: u32 = 1;
pub const CONFIG_UBSAN_BOOL: u32 = 1;
pub const CONFIG_MEDIA_CEC_RC: u32 = 1;
pub const CONFIG_USB_SERIAL_CYBERJACK_MODULE: u32 = 1;
pub const CONFIG_VIDEO_BT866_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_SIS_I2C_MODULE: u32 = 1;
pub const CONFIG_VIDEO_UPD64083_MODULE: u32 = 1;
pub const CONFIG_AL3320A_MODULE: u32 = 1;
pub const CONFIG_DVB_LGDT3305_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SEEQ: u32 = 1;
pub const CONFIG_IP6_NF_MANGLE_MODULE: u32 = 1;
pub const CONFIG_GPIO_MAX732X_MODULE: u32 = 1;
pub const CONFIG_PARAVIRT_CLOCK: u32 = 1;
pub const CONFIG_LEDS_PCA955X_GPIO: u32 = 1;
pub const CONFIG_PAGE_IDLE_FLAG: u32 = 1;
pub const CONFIG_CRYPTO_LZ4HC_MODULE: u32 = 1;
pub const CONFIG_UBSAN_SIGNED_WRAP: u32 = 1;
pub const CONFIG_GPIO_TPS65912_MODULE: u32 = 1;
pub const CONFIG_TASK_IO_ACCOUNTING: u32 = 1;
pub const CONFIG_PSTORE_BLK_KMSG_SIZE: u32 = 64;
pub const CONFIG_USB_MOUSE_MODULE: u32 = 1;
pub const CONFIG_WLAN: u32 = 1;
pub const CONFIG_PTP_DFL_TOD_MODULE: u32 = 1;
pub const CONFIG_INET6_AH_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS: u32 = 1;
pub const CONFIG_SND_SOC_FSL_ESAI_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_6LOWPAN_MODULE: u32 = 1;
pub const CONFIG_GPIO_I8255_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_AR9331_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TSC200X_CORE_MODULE: u32 = 1;
pub const CONFIG_DRM_PANEL_ORIENTATION_QUIRKS: u32 = 1;
pub const CONFIG_USB_DWC2_HOST: u32 = 1;
pub const CONFIG_ATH10K_USB_MODULE: u32 = 1;
pub const CONFIG_CPU_SUP_CENTAUR: u32 = 1;
pub const CONFIG_FB_TFT_RA8875_MODULE: u32 = 1;
pub const CONFIG_I2C_VIA_MODULE: u32 = 1;
pub const CONFIG_SOFTLOCKUP_DETECTOR: u32 = 1;
pub const CONFIG_MPRLS0025PA_SPI_MODULE: u32 = 1;
pub const CONFIG_MTD_GEN_PROBE_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_BCSP: u32 = 1;
pub const CONFIG_ASUS_TF103C_DOCK_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_INTERSIL: u32 = 1;
pub const CONFIG_ISL29501_MODULE: u32 = 1;
pub const CONFIG_USB4_MODULE: u32 = 1;
pub const CONFIG_MS5637_MODULE: u32 = 1;
pub const CONFIG_IP_NF_TARGET_TTL_MODULE: u32 = 1;
pub const CONFIG_8139TOO_PIO: u32 = 1;
pub const CONFIG_FB_UDL_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK_PWM_MODULE: u32 = 1;
pub const CONFIG_LIB80211_CRYPT_CCMP_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_NFQUEUE_MODULE: u32 = 1;
pub const CONFIG_KVM_GENERIC_HARDWARE_ENABLING: u32 = 1;
pub const CONFIG_DVB_SP2_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NCT7802_MODULE: u32 = 1;
pub const CONFIG_SPI_ZYNQMP_GQSPI_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_ISL9305_MODULE: u32 = 1;
pub const CONFIG_DVB_AU8522_MODULE: u32 = 1;
pub const CONFIG_RTL8192CE_MODULE: u32 = 1;
pub const CONFIG_FB_RIVA_MODULE: u32 = 1;
pub const CONFIG_SFC_SRIOV: u32 = 1;
pub const CONFIG_GREYBUS_SPI_MODULE: u32 = 1;
pub const CONFIG_IR_FINTEK_MODULE: u32 = 1;
pub const CONFIG_DVB_CXD2820R_MODULE: u32 = 1;
pub const CONFIG_NF_SOCKET_IPV6_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_PINEPHONE_MODULE: u32 = 1;
pub const CONFIG_PCIE_DW_HOST: u32 = 1;
pub const CONFIG_ARCH_WANT_COMPAT_IPC_PARSE_VERSION: u32 = 1;
pub const CONFIG_USB_MON_MODULE: u32 = 1;
pub const CONFIG_SND_SONICVIBES_MODULE: u32 = 1;
pub const CONFIG_EXTCON_GPIO_MODULE: u32 = 1;
pub const CONFIG_TIPC_DIAG_MODULE: u32 = 1;
pub const CONFIG_INTEL_IFS_MODULE: u32 = 1;
pub const CONFIG_DAVICOM_PHY_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_FENCE_TIMEOUT: u32 = 10000;
pub const CONFIG_INET6_XFRM_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_TSNEP_MODULE: u32 = 1;
pub const CONFIG_NETWORK_SECMARK: u32 = 1;
pub const CONFIG_MFD_DLN2_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SY7636A_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_NEXIO: u32 = 1;
pub const CONFIG_AMD_PMC_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_IO_TRACE: u32 = 1;
pub const CONFIG_SND_TRIDENT_MODULE: u32 = 1;
pub const CONFIG_SND_OSSEMUL: u32 = 1;
pub const CONFIG_ISDN: u32 = 1;
pub const CONFIG_IP_DCCP_MODULE: u32 = 1;
pub const CONFIG_SCSI_UFS_DWC_TC_PCI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK4458_MODULE: u32 = 1;
pub const CONFIG_FB_RIVA_BACKLIGHT: u32 = 1;
pub const CONFIG_HW_RANDOM_BA431_MODULE: u32 = 1;
pub const CONFIG_MLXSW_CORE_MODULE: u32 = 1;
pub const CONFIG_X86_INTEL_TSX_MODE_OFF: u32 = 1;
pub const CONFIG_IOMMU_HELPER: u32 = 1;
pub const CONFIG_SND_CMIPCI_MODULE: u32 = 1;
pub const CONFIG_PCCARD_NONSTATIC: u32 = 1;
pub const CONFIG_CRYPTO_ECDSA_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK_SI544_MODULE: u32 = 1;
pub const CONFIG_DVB_DUMMY_FE_MODULE: u32 = 1;
pub const CONFIG_KVM_MODULE: u32 = 1;
pub const CONFIG_NFT_FLOW_OFFLOAD_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_MODULE: u32 = 1;
pub const CONFIG_DEFAULT_MMAP_MIN_ADDR: u32 = 65536;
pub const CONFIG_SENSORS_LM95241_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_936_MODULE: u32 = 1;
pub const CONFIG_GPIO_PCA953X_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CMAC_MODULE: u32 = 1;
pub const CONFIG_TRANSPARENT_HUGEPAGE: u32 = 1;
pub const CONFIG_AIC7XXX_REG_PRETTY_PRINT: u32 = 1;
pub const CONFIG_BT_MSFTEXT: u32 = 1;
pub const CONFIG_REGULATOR_RT4803_MODULE: u32 = 1;
pub const CONFIG_TYPEC_RT1711H_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_BROADCOM: u32 = 1;
pub const CONFIG_NET_SCH_MULTIQ_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ZET6223_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_HYNITRON_CSTXXX_MODULE: u32 = 1;
pub const CONFIG_BPF_JIT_DEFAULT_ON: u32 = 1;
pub const CONFIG_LEDS_LT3593_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_EXAR_MODULE: u32 = 1;
pub const CONFIG_SPI_DW_DMA: u32 = 1;
pub const CONFIG_QLCNIC_SRIOV: u32 = 1;
pub const CONFIG_ZRAM_WRITEBACK: u32 = 1;
pub const CONFIG_NFS_V4_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_IMX_AUDMUX_MODULE: u32 = 1;
pub const CONFIG_INTEL_ISHTP_ECLITE_MODULE: u32 = 1;
pub const CONFIG_DVB_TUNER_ITD1000_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ES7134_MODULE: u32 = 1;
pub const CONFIG_NET_NSH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV4689_MODULE: u32 = 1;
pub const CONFIG_HID_GOOGLE_STADIA_FF_MODULE: u32 = 1;
pub const CONFIG_HID_LCPOWER_MODULE: u32 = 1;
pub const CONFIG_F2FS_FS_SECURITY: u32 = 1;
pub const CONFIG_SND_AC97_CODEC_MODULE: u32 = 1;
pub const CONFIG_GENEVE_MODULE: u32 = 1;
pub const CONFIG_DVB_NXT6000_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_NBD_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_CUSTOM_SENSOR_MODULE: u32 = 1;
pub const CONFIG_ATH9K_WOW: u32 = 1;
pub const CONFIG_IIO_ST_GYRO_SPI_3AXIS_MODULE: u32 = 1;
pub const CONFIG_KFENCE_NUM_OBJECTS: u32 = 255;
pub const CONFIG_IP_SET_HASH_NET_MODULE: u32 = 1;
pub const CONFIG_ZPA2326_SPI_MODULE: u32 = 1;
pub const CONFIG_I2C_ISMT_MODULE: u32 = 1;
pub const CONFIG_KCMP: u32 = 1;
pub const CONFIG_RTC_DRV_DS1742_MODULE: u32 = 1;
pub const CONFIG_COMEDI_TESTS_EXAMPLE_MODULE: u32 = 1;
pub const CONFIG_KDB_CONTINUE_CATASTROPHIC: u32 = 0;
pub const CONFIG_SENSORS_ACPI_POWER_MODULE: u32 = 1;
pub const CONFIG_XFRM_ALGO_MODULE: u32 = 1;
pub const CONFIG_SD_ADC_MODULATOR_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_STMICRO: u32 = 1;
pub const CONFIG_VIDEO_INTEL_IPU6_MODULE: u32 = 1;
pub const CONFIG_IPWIRELESS_MODULE: u32 = 1;
pub const CONFIG_AX88796B_PHY_MODULE: u32 = 1;
pub const CONFIG_EDAC_SKX_MODULE: u32 = 1;
pub const CONFIG_AMD_NB: u32 = 1;
pub const CONFIG_PWM_LPSS_PCI: u32 = 1;
pub const CONFIG_IPU_BRIDGE_MODULE: u32 = 1;
pub const CONFIG_FTRACE_MCOUNT_RECORD: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_TTY_MODULE: u32 = 1;
pub const CONFIG_BUILD_SALT: &[u8; 1] = b"\0";
pub const CONFIG_LG_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_MFD_CS47L35: u32 = 1;
pub const CONFIG_ATH9K_COMMON_SPECTRAL: u32 = 1;
pub const CONFIG_SND_BT87X_MODULE: u32 = 1;
pub const CONFIG_DRM_XE_PREEMPT_TIMEOUT: u32 = 640000;
pub const CONFIG_HID_NINTENDO_MODULE: u32 = 1;
pub const CONFIG_X86_INTERNODE_CACHE_SHIFT: u32 = 6;
pub const CONFIG_SND_HDA_CODEC_CIRRUS_MODULE: u32 = 1;
pub const CONFIG_BH1780_MODULE: u32 = 1;
pub const CONFIG_GPIO_EXAR_MODULE: u32 = 1;
pub const CONFIG_DUMMY_CONSOLE_ROWS: u32 = 25;
pub const CONFIG_GPIO_VX855_MODULE: u32 = 1;
pub const CONFIG_NVME_FABRICS_MODULE: u32 = 1;
pub const CONFIG_FUNCTION_TRACER: u32 = 1;
pub const CONFIG_SURFACE_AGGREGATOR_TABLET_SWITCH_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_TCA8418_MODULE: u32 = 1;
pub const CONFIG_MEDIA_CONTROLLER_DVB: u32 = 1;
pub const CONFIG_AD5272_MODULE: u32 = 1;
pub const CONFIG_MODPROBE_PATH: &[u8; 15] = b"/sbin/modprobe\0";
pub const CONFIG_MLXSW_CORE_HWMON: u32 = 1;
pub const CONFIG_RTL8187_MODULE: u32 = 1;
pub const CONFIG_HID_MEGAWORLD_FF_MODULE: u32 = 1;
pub const CONFIG_MCB_LPC_MODULE: u32 = 1;
pub const CONFIG_POSIX_MQUEUE: u32 = 1;
pub const CONFIG_NV_TCO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_POWR1220_MODULE: u32 = 1;
pub const CONFIG_TEXTSEARCH_FSM_MODULE: u32 = 1;
pub const CONFIG_VHOST_SCSI_MODULE: u32 = 1;
pub const CONFIG_PSTORE_BLK_MODULE: u32 = 1;
pub const CONFIG_NFSD_SCSILAYOUT: u32 = 1;
pub const CONFIG_RMI4_SMB_MODULE: u32 = 1;
pub const CONFIG_AMD_ATL_MODULE: u32 = 1;
pub const CONFIG_POWER_RESET_ATC260X_MODULE: u32 = 1;
pub const CONFIG_MQ_IOSCHED_DEADLINE: u32 = 1;
pub const CONFIG_HAVE_KVM_ARCH_GMEM_INVALIDATE: u32 = 1;
pub const CONFIG_HAVE_CLK: u32 = 1;
pub const CONFIG_USB_SERIAL_SIERRAWIRELESS_MODULE: u32 = 1;
pub const CONFIG_MAC_PARTITION: u32 = 1;
pub const CONFIG_SECURITY_APPARMOR_HASH: u32 = 1;
pub const CONFIG_SND_SOC_SIMPLE_AMPLIFIER_MODULE: u32 = 1;
pub const CONFIG_DRM_AMD_SECURE_DISPLAY: u32 = 1;
pub const CONFIG_BATTERY_DA9030_MODULE: u32 = 1;
pub const CONFIG_DEBUG_FS: u32 = 1;
pub const CONFIG_MEDIA_CEC_SUPPORT: u32 = 1;
pub const CONFIG_SND_SOC_RT5677_MODULE: u32 = 1;
pub const CONFIG_RTLLIB_CRYPTO_CCMP_MODULE: u32 = 1;
pub const CONFIG_CROS_KBD_LED_BACKLIGHT_MODULE: u32 = 1;
pub const CONFIG_X86_64_SMP: u32 = 1;
pub const CONFIG_RTC_DRV_DS1307_MODULE: u32 = 1;
pub const CONFIG_PPTP_MODULE: u32 = 1;
pub const CONFIG_INTEL_MEI_TXE_MODULE: u32 = 1;
pub const CONFIG_FUTEX: u32 = 1;
pub const CONFIG_DM_VDO_MODULE: u32 = 1;
pub const CONFIG_USB_ETH_EEM: u32 = 1;
pub const CONFIG_HID_GLORIOUS_MODULE: u32 = 1;
pub const CONFIG_TSYS01_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_WACOM_W8001_MODULE: u32 = 1;
pub const CONFIG_IP_SET_MAX: u32 = 256;
pub const CONFIG_ASYNC_CORE_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO_CHMAN_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SM4_MODULE: u32 = 1;
pub const CONFIG_RTW88_DEBUG: u32 = 1;
pub const CONFIG_ADIS16475_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX98504_MODULE: u32 = 1;
pub const CONFIG_MODULE_SIG_KEY_TYPE_RSA: u32 = 1;
pub const CONFIG_ATALK_MODULE: u32 = 1;
pub const CONFIG_NF_TABLES_INET: u32 = 1;
pub const CONFIG_TCM_USER2_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TDA9840_MODULE: u32 = 1;
pub const CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK: u32 = 1;
pub const CONFIG_RTC_DRV_TPS65910_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ZL38060_MODULE: u32 = 1;
pub const CONFIG_MTD_MCHP48L640_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_XPAD_LEDS: u32 = 1;
pub const CONFIG_RTC_DRV_DS1685: u32 = 1;
pub const CONFIG_USB_LCD_MODULE: u32 = 1;
pub const CONFIG_NTB_MSI: u32 = 1;
pub const CONFIG_CM3232_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_CURRENT_STACK_POINTER: u32 = 1;
pub const CONFIG_USB_SL811_HCD_ISO: u32 = 1;
pub const CONFIG_SENSORS_CHIPCAP2_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO: u32 = 1;
pub const CONFIG_FB_SYSMEM_HELPERS: u32 = 1;
pub const CONFIG_REGULATOR_LP8755_MODULE: u32 = 1;
pub const CONFIG_MAX63XX_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADL_PCI7X3X_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_PNP: u32 = 1;
pub const CONFIG_USBIP_VHCI_NR_HCS: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP_PCI_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_SYM53C500_MODULE: u32 = 1;
pub const CONFIG_MTD_SLRAM_MODULE: u32 = 1;
pub const CONFIG_DELL_WMI_DDV_MODULE: u32 = 1;
pub const CONFIG_BE2NET_LANCER: u32 = 1;
pub const CONFIG_AD2S90_MODULE: u32 = 1;
pub const CONFIG_USB_ETH_RNDIS: u32 = 1;
pub const CONFIG_ADIS16460_MODULE: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_ERROR_INJECTION: u32 = 1;
pub const CONFIG_CAN_CTUCANFD_PCI_MODULE: u32 = 1;
pub const CONFIG_RADIO_SHARK_MODULE: u32 = 1;
pub const CONFIG_LEDS_BD2606MVV_MODULE: u32 = 1;
pub const CONFIG_XILINX_XADC_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_DENVERTON_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_PIXCIR_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CX2072X_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_SENSEHAT_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DMM32AT_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX1668_MODULE: u32 = 1;
pub const CONFIG_MEGARAID_MM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADAU7118_I2C_MODULE: u32 = 1;
pub const CONFIG_MISDN_L1OIP_MODULE: u32 = 1;
pub const CONFIG_HAS_DMA: u32 = 1;
pub const CONFIG_SOFTIRQ_ON_OWN_STACK: u32 = 1;
pub const CONFIG_OPT3001_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TDA38640_MODULE: u32 = 1;
pub const CONFIG_SND_MONA_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2413_MODULE: u32 = 1;
pub const CONFIG_MLX4_EN_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH: u32 = 1;
pub const CONFIG_SX9324_MODULE: u32 = 1;
pub const CONFIG_DRM_XEN_FRONTEND_MODULE: u32 = 1;
pub const CONFIG_USE_X86_SEG_SUPPORT: u32 = 1;
pub const CONFIG_CRYPTO_USER_API_MODULE: u32 = 1;
pub const CONFIG_AUDITSYSCALL: u32 = 1;
pub const CONFIG_REGULATOR_MAX8907_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ST_ES8336_MACH_MODULE: u32 = 1;
pub const CONFIG_STACKDEPOT: u32 = 1;
pub const CONFIG_CHARGER_LTC4162L_MODULE: u32 = 1;
pub const CONFIG_IP_SET_BITMAP_IPMAC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC3X_MODULE: u32 = 1;
pub const CONFIG_PHY_PXA_28NM_HSIC_MODULE: u32 = 1;
pub const CONFIG_USB_USS720_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_OCP_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DT2814_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_ACPI_TABLE_UPGRADE: u32 = 1;
pub const CONFIG_MAX11100_MODULE: u32 = 1;
pub const CONFIG_USB_CDNS_SUPPORT_MODULE: u32 = 1;
pub const CONFIG_COMEDI_USB_DRIVERS_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TOUCHIT213_MODULE: u32 = 1;
pub const CONFIG_GENERIC_BUG: u32 = 1;
pub const CONFIG_IP_VS_MODULE: u32 = 1;
pub const CONFIG_SND_LOLA_MODULE: u32 = 1;
pub const CONFIG_MOUSE_ELAN_I2C_I2C: u32 = 1;
pub const CONFIG_USB_WDM_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_ILLINOIS_MODULE: u32 = 1;
pub const CONFIG_THERMAL_EMULATION: u32 = 1;
pub const CONFIG_GPIO_PISOSR_MODULE: u32 = 1;
pub const CONFIG_BT_RFCOMM_TTY: u32 = 1;
pub const CONFIG_BT_ATH3K_MODULE: u32 = 1;
pub const CONFIG_AD3552R_MODULE: u32 = 1;
pub const CONFIG_USBIP_CORE_MODULE: u32 = 1;
pub const CONFIG_BRCMUTIL_MODULE: u32 = 1;
pub const CONFIG_BTRFS_FS_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SHA512_SSSE3: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_REALTEK_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_GVT: u32 = 1;
pub const CONFIG_MFD_INTEL_PMC_BXT_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TW9910_MODULE: u32 = 1;
pub const CONFIG_IP_VS_IPV6: u32 = 1;
pub const CONFIG_REGULATOR_TPS65910_MODULE: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_COMMON: u32 = 1;
pub const CONFIG_PPP_MPPE_MODULE: u32 = 1;
pub const CONFIG_SCSI_QLA_FC_MODULE: u32 = 1;
pub const CONFIG_HAVE_ALIGNED_STRUCT_PAGE: u32 = 1;
pub const CONFIG_THUNDER_NIC_VF_MODULE: u32 = 1;
pub const CONFIG_CB710_CORE_MODULE: u32 = 1;
pub const CONFIG_SCHED_OMIT_FRAME_POINTER: u32 = 1;
pub const CONFIG_CEPH_LIB_MODULE: u32 = 1;
pub const CONFIG_LEGACY_DIRECT_IO: u32 = 1;
pub const CONFIG_BATMAN_ADV_MCAST: u32 = 1;
pub const CONFIG_LOCK_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_HAVE_PERF_USER_STACK_DUMP: u32 = 1;
pub const CONFIG_SENSORS_ASB100_MODULE: u32 = 1;
pub const CONFIG_GPIO_IDIO_16_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ADV7842_MODULE: u32 = 1;
pub const CONFIG_NVME_CORE_MODULE: u32 = 1;
pub const CONFIG_SVC_I3C_MASTER_MODULE: u32 = 1;
pub const CONFIG_AMD_PHY_MODULE: u32 = 1;
pub const CONFIG_USB_PCI_AMD: u32 = 1;
pub const CONFIG_VIDEO_OV13B10_MODULE: u32 = 1;
pub const CONFIG_SENSORS_AXI_FAN_CONTROL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_GLK_MODULE: u32 = 1;
pub const CONFIG_NF_CT_NETLINK_TIMEOUT_MODULE: u32 = 1;
pub const CONFIG_OPTPROBES: u32 = 1;
pub const CONFIG_B43LEGACY_DMA: u32 = 1;
pub const CONFIG_SKB_EXTENSIONS: u32 = 1;
pub const CONFIG_HUGETLB_PAGE: u32 = 1;
pub const CONFIG_SND_SOC_TAS5805M_MODULE: u32 = 1;
pub const CONFIG_HMEM_REPORTING: u32 = 1;
pub const CONFIG_SND_SOC_ES8328_SPI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX98088_MODULE: u32 = 1;
pub const CONFIG_XFRM_INTERFACE_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_RANDOMIZE_KSTACK_OFFSET: u32 = 1;
pub const CONFIG_LEDS_LP8788_MODULE: u32 = 1;
pub const CONFIG_SERIAL_CORE: u32 = 1;
pub const CONFIG_SND_SOC_WM8580_MODULE: u32 = 1;
pub const CONFIG_DVB_DIB9000_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_GP8PSK_MODULE: u32 = 1;
pub const CONFIG_ROSE_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_PCI_PCIE: u32 = 1;
pub const CONFIG_NFS_USE_KERNEL_DNS: u32 = 1;
pub const CONFIG_MLX_WDT_MODULE: u32 = 1;
pub const CONFIG_SPI_LOOPBACK_TEST_MODULE: u32 = 1;
pub const CONFIG_USB_OXU210HP_HCD_MODULE: u32 = 1;
pub const CONFIG_NO_HZ_FULL: u32 = 1;
pub const CONFIG_PINCTRL_CS47L15: u32 = 1;
pub const CONFIG_CAN_SOFTING_CS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP5023_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_CAPTURE_ERROR: u32 = 1;
pub const CONFIG_TAHVO_USB_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L45_I2C_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGERS: u32 = 1;
pub const CONFIG_NET_SCH_TBF_MODULE: u32 = 1;
pub const CONFIG_SECURITY_NETWORK_XFRM: u32 = 1;
pub const CONFIG_BRCMSMAC_MODULE: u32 = 1;
pub const CONFIG_CAN_MCP251X_MODULE: u32 = 1;
pub const CONFIG_UBIFS_FS_LZO: u32 = 1;
pub const CONFIG_SND_SOC_WM8731_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC2945_MODULE: u32 = 1;
pub const CONFIG_INTEL_TDX_GUEST: u32 = 1;
pub const CONFIG_INTEL_ISH_HID_MODULE: u32 = 1;
pub const CONFIG_TI_ADS1119_MODULE: u32 = 1;
pub const CONFIG_MLX5_CORE_MODULE: u32 = 1;
pub const CONFIG_NET_KEY_MODULE: u32 = 1;
pub const CONFIG_REMOTE_TARGET_MODULE: u32 = 1;
pub const CONFIG_SERIAL_MCTRL_GPIO: u32 = 1;
pub const CONFIG_ZIIRAVE_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SIGMADSP_I2C_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_HELLCREEK_MODULE: u32 = 1;
pub const CONFIG_THERMAL_GOV_POWER_ALLOCATOR: u32 = 1;
pub const CONFIG_SERIO_PARKBD_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_ZC3XX_MODULE: u32 = 1;
pub const CONFIG_MMC_TOSHIBA_PCI_MODULE: u32 = 1;
pub const CONFIG_X86_MSR_MODULE: u32 = 1;
pub const CONFIG_USER_DECRYPTED_DATA: u32 = 1;
pub const CONFIG_CRYPTO_CCM_MODULE: u32 = 1;
pub const CONFIG_SATA_PROMISE_MODULE: u32 = 1;
pub const CONFIG_SCSI_INIA100_MODULE: u32 = 1;
pub const CONFIG_QLCNIC_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_ZIP_DEFLATE: u32 = 1;
pub const CONFIG_IP_VS_NQ_MODULE: u32 = 1;
pub const CONFIG_PRESTERA_PCI_MODULE: u32 = 1;
pub const CONFIG_CODA_FS_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_AUDPTR_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_IQS62X_MODULE: u32 = 1;
pub const CONFIG_XEN_DEV_EVTCHN_MODULE: u32 = 1;
pub const CONFIG_DWC_XLGMAC_PCI_MODULE: u32 = 1;
pub const CONFIG_INTEL_CHTWC_INT33FE_MODULE: u32 = 1;
pub const CONFIG_SND_RAWMIDI_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_SIDEWINDER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_PCM512x_MACH_MODULE: u32 = 1;
pub const CONFIG_GENERIC_GETTIMEOFDAY: u32 = 1;
pub const CONFIG_COMEDI_QUATECH_DAQP_CS_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_WM9705: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_JUMP: u32 = 1;
pub const CONFIG_IP_SET_HASH_IPMARK_MODULE: u32 = 1;
pub const CONFIG_IIO_CROS_EC_SENSORS_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_JASPERLAKE_MODULE: u32 = 1;
pub const CONFIG_FW_UPLOAD: u32 = 1;
pub const CONFIG_HAVE_KVM_NO_POLL: u32 = 1;
pub const CONFIG_ATM_SOLOS_MODULE: u32 = 1;
pub const CONFIG_QEDE_MODULE: u32 = 1;
pub const CONFIG_SND_USB: u32 = 1;
pub const CONFIG_GART_IOMMU: u32 = 1;
pub const CONFIG_NET_DSA_SJA1105_PTP: u32 = 1;
pub const CONFIG_NET_ACT_CT_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX18_ALSA_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_TV8532_MODULE: u32 = 1;
pub const CONFIG_DPTF_POWER_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_RTL28XXU_MODULE: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_ACPI_PDC: u32 = 1;
pub const CONFIG_PCS_XPCS_MODULE: u32 = 1;
pub const CONFIG_IMA_DEFAULT_TEMPLATE: &[u8; 7] = b"ima-ng\0";
pub const CONFIG_CAN_C_CAN_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_DA7219_MACH_MODULE: u32 = 1;
pub const CONFIG_ND_CLAIM: u32 = 1;
pub const CONFIG_BRCMFMAC_PROTO_MSGBUF: u32 = 1;
pub const CONFIG_GPIO_CDEV_V1: u32 = 1;
pub const CONFIG_SYN_COOKIES: u32 = 1;
pub const CONFIG_SND_SOC_SIGMADSP_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_ILI9341_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_IPOIB_CM: u32 = 1;
pub const CONFIG_ARCH_HAS_FORTIFY_SOURCE: u32 = 1;
pub const CONFIG_MT7663S_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_SCTP_MODULE: u32 = 1;
pub const CONFIG_HID_GEMBIRD_MODULE: u32 = 1;
pub const CONFIG_NF_FLOW_TABLE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SHA3: u32 = 1;
pub const CONFIG_CRYPTO_CRC64_ROCKSOFT: u32 = 1;
pub const CONFIG_NFC_SIM_MODULE: u32 = 1;
pub const CONFIG_SND_PCMTEST_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_QUALCOMM: u32 = 1;
pub const CONFIG_ZRAM_DEF_COMP_LZORLE: u32 = 1;
pub const CONFIG_STACKTRACE_SUPPORT: u32 = 1;
pub const CONFIG_WIRELESS_EXT: u32 = 1;
pub const CONFIG_JOYSTICK_ADC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_HDA_MODULE: u32 = 1;
pub const CONFIG_NFT_DUP_IPV4_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CONNMARK_MODULE: u32 = 1;
pub const CONFIG_PCI_ENDPOINT_CONFIGFS: u32 = 1;
pub const CONFIG_PCIEASPM_DEFAULT: u32 = 1;
pub const CONFIG_USB_EHSET_TEST_FIXTURE_MODULE: u32 = 1;
pub const CONFIG_FPGA_MODULE: u32 = 1;
pub const CONFIG_SND_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83627EHF_MODULE: u32 = 1;
pub const CONFIG_SENSORS_IR38064_MODULE: u32 = 1;
pub const CONFIG_MEGARAID_LEGACY_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_HDA_DSP_COMMON_MODULE: u32 = 1;
pub const CONFIG_KVM_WERROR: u32 = 1;
pub const CONFIG_CRYPTO_AEAD: u32 = 1;
pub const CONFIG_TRACE_EVENT_INJECT: u32 = 1;
pub const CONFIG_IEEE802154_MRF24J40_MODULE: u32 = 1;
pub const CONFIG_BCMGENET_MODULE: u32 = 1;
pub const CONFIG_MAX31856_MODULE: u32 = 1;
pub const CONFIG_CHARGER_RT9471_MODULE: u32 = 1;
pub const CONFIG_ACPI_QUICKSTART_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_THROTTLING: u32 = 1;
pub const CONFIG_COMEDI_ADV_PCI_DIO_MODULE: u32 = 1;
pub const CONFIG_PDS_VFIO_PCI_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_LAN9303_MODULE: u32 = 1;
pub const CONFIG_CHTCRC_PMIC_OPREGION: u32 = 1;
pub const CONFIG_SND_SOC_ADAU_UTILS_MODULE: u32 = 1;
pub const CONFIG_SECTION_MISMATCH_WARN_ONLY: u32 = 1;
pub const CONFIG_ASYNC_XOR_MODULE: u32 = 1;
pub const CONFIG_INTEL_IOMMU: u32 = 1;
pub const CONFIG_PROC_CHILDREN: u32 = 1;
pub const CONFIG_INET_MPTCP_DIAG_MODULE: u32 = 1;
pub const CONFIG_FPGA_DFL_AFU_MODULE: u32 = 1;
pub const CONFIG_DRM_DISPLAY_HDCP_HELPER: u32 = 1;
pub const CONFIG_CC_IS_GCC: u32 = 1;
pub const CONFIG_SQUASHFS_FILE_DIRECT: u32 = 1;
pub const CONFIG_GPIO_TPS65910: u32 = 1;
pub const CONFIG_NFTL_MODULE: u32 = 1;
pub const CONFIG_AX25_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_NAU8825_MACH_MODULE: u32 = 1;
pub const CONFIG_VSOCKETS_LOOPBACK_MODULE: u32 = 1;
pub const CONFIG_MPL115_SPI_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_SUNKBD_MODULE: u32 = 1;
pub const CONFIG_VIDEO_MXB_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_UBLK_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_SYNC_CORE_BEFORE_USERMODE: u32 = 1;
pub const CONFIG_CARDBUS: u32 = 1;
pub const CONFIG_RTW89_DEBUGFS: u32 = 1;
pub const CONFIG_SENSORS_IIO_HWMON_MODULE: u32 = 1;
pub const CONFIG_HAVE_CMPXCHG_LOCAL: u32 = 1;
pub const CONFIG_JOYSTICK_COBRA_MODULE: u32 = 1;
pub const CONFIG_INITRAMFS_PRESERVE_MTIME: u32 = 1;
pub const CONFIG_DELL_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_X86_HV_CALLBACK_VECTOR: u32 = 1;
pub const CONFIG_MLXREG_IO_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_3W_XXXX_RAID_MODULE: u32 = 1;
pub const CONFIG_X86_X2APIC: u32 = 1;
pub const CONFIG_FPGA_MGR_ALTERA_PS_SPI_MODULE: u32 = 1;
pub const CONFIG_ADIS16260_MODULE: u32 = 1;
pub const CONFIG_IPV6_ROUTER_PREF: u32 = 1;
pub const CONFIG_COMEDI_ADV_PCI1760_MODULE: u32 = 1;
pub const CONFIG_CGROUP_SCHED: u32 = 1;
pub const CONFIG_INTEL_TXT: u32 = 1;
pub const CONFIG_DMA_ENGINE: u32 = 1;
pub const CONFIG_WAN: u32 = 1;
pub const CONFIG_FPGA_REGION_MODULE: u32 = 1;
pub const CONFIG_DA280_MODULE: u32 = 1;
pub const CONFIG_SENSORS_RM3100_SPI_MODULE: u32 = 1;
pub const CONFIG_FB_VIA_X_COMPATIBILITY: u32 = 1;
pub const CONFIG_XEN_WDT_MODULE: u32 = 1;
pub const CONFIG_MAX44009_MODULE: u32 = 1;
pub const CONFIG_SND_VIA82XX_MODULE: u32 = 1;
pub const CONFIG_DVB_TDA10048_MODULE: u32 = 1;
pub const CONFIG_SENSIRION_SGP30_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DT2815_MODULE: u32 = 1;
pub const CONFIG_EARLY_PRINTK: u32 = 1;
pub const CONFIG_F2FS_FS_COMPRESSION: u32 = 1;
pub const CONFIG_COMEDI_NI_ATMIO_MODULE: u32 = 1;
pub const CONFIG_FW_LOADER_USER_HELPER: u32 = 1;
pub const CONFIG_IP_SET_HASH_MAC_MODULE: u32 = 1;
pub const CONFIG_MFD_CS47L85: u32 = 1;
pub const CONFIG_CRYPTO_CRC32C: u32 = 1;
pub const CONFIG_PM_STD_PARTITION: &[u8; 1] = b"\0";
pub const CONFIG_DVB_S5H1432_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_ELANTECH_SMBUS: u32 = 1;
pub const CONFIG_L2TP_IP_MODULE: u32 = 1;
pub const CONFIG_DM_ZONED_MODULE: u32 = 1;
pub const CONFIG_SND_INDIGODJ_MODULE: u32 = 1;
pub const CONFIG_VIDEO_COBALT_MODULE: u32 = 1;
pub const CONFIG_CHARGER_SBS_MODULE: u32 = 1;
pub const CONFIG_RD_BZIP2: u32 = 1;
pub const CONFIG_SCSI_3W_9XXX_MODULE: u32 = 1;
pub const CONFIG_WILCO_EC_TELEMETRY_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_1250_MODULE: u32 = 1;
pub const CONFIG_GPIO_IT87_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MAX2165_MODULE: u32 = 1;
pub const CONFIG_SOFT_WATCHDOG_PRETIMEOUT: u32 = 1;
pub const CONFIG_DVB_LNBP22_MODULE: u32 = 1;
pub const CONFIG_FB_KYRO_MODULE: u32 = 1;
pub const CONFIG_ECRYPT_FS: u32 = 1;
pub const CONFIG_FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER: u32 = 1;
pub const CONFIG_PHYS_ADDR_T_64BIT: u32 = 1;
pub const CONFIG_USB_F_NCM_MODULE: u32 = 1;
pub const CONFIG_UVC_COMMON_MODULE: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_GRAPH_TRACER: u32 = 1;
pub const CONFIG_BPF_UNPRIV_DEFAULT_OFF: u32 = 1;
pub const CONFIG_FB_MODE_HELPERS: u32 = 1;
pub const CONFIG_USB_GSPCA_OV534_9_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_MID: u32 = 1;
pub const CONFIG_MFD_TPS6594_I2C_MODULE: u32 = 1;
pub const CONFIG_SCSI_IPR_TRACE: u32 = 1;
pub const CONFIG_BAYCOM_PAR_MODULE: u32 = 1;
pub const CONFIG_CGROUP_BPF: u32 = 1;
pub const CONFIG_MT76_LEDS: u32 = 1;
pub const CONFIG_IIO_ST_LSM9DS0_SPI_MODULE: u32 = 1;
pub const CONFIG_BT_AOSPEXT: u32 = 1;
pub const CONFIG_NET_SCH_CBS_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_ERDMA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TDA7419_MODULE: u32 = 1;
pub const CONFIG_HIDRAW: u32 = 1;
pub const CONFIG_X86_MCE: u32 = 1;
pub const CONFIG_MSPRO_BLOCK_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_AF9005_REMOTE_MODULE: u32 = 1;
pub const CONFIG_SRAM: u32 = 1;
pub const CONFIG_CRYPTO_DES_MODULE: u32 = 1;
pub const CONFIG_ARCNET_COM20020_PCI_MODULE: u32 = 1;
pub const CONFIG_IR_NEC_DECODER_MODULE: u32 = 1;
pub const CONFIG_LOCK_DEBUGGING_SUPPORT: u32 = 1;
pub const CONFIG_VIDEOBUF2_DMA_CONTIG_MODULE: u32 = 1;
pub const CONFIG_ATH10K_PCI_MODULE: u32 = 1;
pub const CONFIG_MCTP: u32 = 1;
pub const CONFIG_SBC_EPX_C3_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_SCSI_ISCSI_ATTRS_MODULE: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_SID2STR_CACHE_SIZE: u32 = 256;
pub const CONFIG_TWL6030_GPADC_MODULE: u32 = 1;
pub const CONFIG_SERIAL_UARTLITE_NR_UARTS: u32 = 1;
pub const CONFIG_P54_LEDS: u32 = 1;
pub const CONFIG_BUG: u32 = 1;
pub const CONFIG_USB_EG20T_MODULE: u32 = 1;
pub const CONFIG_JFFS2_RTIME: u32 = 1;
pub const CONFIG_DVB_AU8522_V4L_MODULE: u32 = 1;
pub const CONFIG_X86_5LEVEL: u32 = 1;
pub const CONFIG_IPVTAP_MODULE: u32 = 1;
pub const CONFIG_SPI_LM70_LLP_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_WM8804_MACH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_MT9P031_MODULE: u32 = 1;
pub const CONFIG_M62332_MODULE: u32 = 1;
pub const CONFIG_MEMORY: u32 = 1;
pub const CONFIG_GDB_SCRIPTS: u32 = 1;
pub const CONFIG_SENSORS_ABITUGURU_MODULE: u32 = 1;
pub const CONFIG_TTPCI_EEPROM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT715_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SYNOPSYS: u32 = 1;
pub const CONFIG_ARCH_HAS_GCOV_PROFILE_ALL: u32 = 1;
pub const CONFIG_DMARD09_MODULE: u32 = 1;
pub const CONFIG_AF_KCM_MODULE: u32 = 1;
pub const CONFIG_SND_SYNTH_EMUX_MODULE: u32 = 1;
pub const CONFIG_INPUT_MMA8450_MODULE: u32 = 1;
pub const CONFIG_INTEL_RST_MODULE: u32 = 1;
pub const CONFIG_MFD_MAX8907_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_SSP_AMP_MACH_MODULE: u32 = 1;
pub const CONFIG_PATA_RADISYS_MODULE: u32 = 1;
pub const CONFIG_NFC_SHDLC: u32 = 1;
pub const CONFIG_VIDEO_KS0127_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC_BCJ: u32 = 1;
pub const CONFIG_USB_SERIAL_OTI6858_MODULE: u32 = 1;
pub const CONFIG_MTD_CMDLINE_PARTS_MODULE: u32 = 1;
pub const CONFIG_QRTR_TUN_MODULE: u32 = 1;
pub const CONFIG_DRM_KMS_HELPER: u32 = 1;
pub const CONFIG_MOUSE_PS2_BYD: u32 = 1;
pub const CONFIG_CHELSIO_T4_DCB: u32 = 1;
pub const CONFIG_MISDN_ISAR_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_HDAC_HDA_MODULE: u32 = 1;
pub const CONFIG_SENSORS_DA9055_MODULE: u32 = 1;
pub const CONFIG_TCS3472_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_USERFAULTFD_WP: u32 = 1;
pub const CONFIG_FB_SYSMEM_FOPS: u32 = 1;
pub const CONFIG_X86_MCE_INTEL: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_CNL_MODULE: u32 = 1;
pub const CONFIG_PAGE_REPORTING: u32 = 1;
pub const CONFIG_MOUSE_PS2_TRACKPOINT: u32 = 1;
pub const CONFIG_HDLC_RAW_MODULE: u32 = 1;
pub const CONFIG_SCHED_HRTICK: u32 = 1;
pub const CONFIG_IMA_APPRAISE_BOOTPARAM: u32 = 1;
pub const CONFIG_TRACING_SUPPORT: u32 = 1;
pub const CONFIG_INFINIBAND_BNXT_RE_MODULE: u32 = 1;
pub const CONFIG_QCOM_PBS_MODULE: u32 = 1;
pub const CONFIG_WILCO_EC_EVENTS_MODULE: u32 = 1;
pub const CONFIG_IOMMU_MM_DATA: u32 = 1;
pub const CONFIG_MPLS: u32 = 1;
pub const CONFIG_SERIAL_SC16IS7XX_I2C_MODULE: u32 = 1;
pub const CONFIG_STACK_TRACER: u32 = 1;
pub const CONFIG_SND_UMP_LEGACY_RAWMIDI: u32 = 1;
pub const CONFIG_MAX1118_MODULE: u32 = 1;
pub const CONFIG_USB_F_SS_LB_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_HL_MODULE: u32 = 1;
pub const CONFIG_ISA_DMA_API: u32 = 1;
pub const CONFIG_NET_ACT_SKBMOD_MODULE: u32 = 1;
pub const CONFIG_LEDS_LP50XX_MODULE: u32 = 1;
pub const CONFIG_SCTP_DEFAULT_COOKIE_HMAC_SHA1: u32 = 1;
pub const CONFIG_USB_EHCI_PCI: u32 = 1;
pub const CONFIG_EDAC_PND2_MODULE: u32 = 1;
pub const CONFIG_CHARGER_ADP5061_MODULE: u32 = 1;
pub const CONFIG_MFD_RT5033_MODULE: u32 = 1;
pub const CONFIG_DRM_DISPLAY_DP_TUNNEL: u32 = 1;
pub const CONFIG_ACPI_HMAT: u32 = 1;
pub const CONFIG_VIDEO_ADV7604_CEC: u32 = 1;
pub const CONFIG_REGULATOR_RT5120_MODULE: u32 = 1;
pub const CONFIG_GNSS_SIRF_SERIAL_MODULE: u32 = 1;
pub const CONFIG_IP_SET_HASH_IP_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_MENU: u32 = 1;
pub const CONFIG_RTC_DRV_RX8581_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_AUDIO_CODEC: u32 = 1;
pub const CONFIG_SND_SOC_AMD_PS_MACH_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_MRP: u32 = 1;
pub const CONFIG_FB_TFT_ILI9340_MODULE: u32 = 1;
pub const CONFIG_NVME_TARGET_TCP_TLS: u32 = 1;
pub const CONFIG_SURFACE_PRO3_BUTTON_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_CADENCE: u32 = 1;
pub const CONFIG_NFT_BRIDGE_META_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT9120_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_WRITE_MOUNTED: u32 = 1;
pub const CONFIG_CRYPTO_DEV_NITROX_CNN55XX_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_BROCADE: u32 = 1;
pub const CONFIG_USB_AIRSPY_MODULE: u32 = 1;
pub const CONFIG_MT76x02_USB_MODULE: u32 = 1;
pub const CONFIG_USB_NET_SMSC75XX_MODULE: u32 = 1;
pub const CONFIG_ROMFS_BACKED_BY_BLOCK: u32 = 1;
pub const CONFIG_AMD_PMF_DEBUG: u32 = 1;
pub const CONFIG_SENSORS_K10TEMP_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1305_MODULE: u32 = 1;
pub const CONFIG_SENSORS_BH1770_MODULE: u32 = 1;
pub const CONFIG_ALTERA_PR_IP_CORE_MODULE: u32 = 1;
pub const CONFIG_ADXL372_MODULE: u32 = 1;
pub const CONFIG_SURFACE_ACPI_NOTIFY_MODULE: u32 = 1;
pub const CONFIG_MCB_PCI_MODULE: u32 = 1;
pub const CONFIG_HAVE_IOREMAP_PROT: u32 = 1;
pub const CONFIG_CC_NO_STRINGOP_OVERFLOW: u32 = 1;
pub const CONFIG_SECURITY_APPARMOR: u32 = 1;
pub const CONFIG_DRM_UDL_MODULE: u32 = 1;
pub const CONFIG_EISA_VIRTUAL_ROOT: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_TIMER_MODULE: u32 = 1;
pub const CONFIG_MMC_REALTEK_USB_MODULE: u32 = 1;
pub const CONFIG_PECI_MODULE: u32 = 1;
pub const CONFIG_COMEDI_VMK80XX_MODULE: u32 = 1;
pub const CONFIG_INTEGRITY_AUDIT: u32 = 1;
pub const CONFIG_VIRTIO_FS_MODULE: u32 = 1;
pub const CONFIG_B53_MMAP_DRIVER_MODULE: u32 = 1;
pub const CONFIG_SECURITY_SMACK_NETFILTER: u32 = 1;
pub const CONFIG_TOUCHSCREEN_AD7879_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_MODULE: u32 = 1;
pub const CONFIG_NET_SELFTESTS: u32 = 1;
pub const CONFIG_PANEL_PROFILE: u32 = 5;
pub const CONFIG_ARCH_SUPPORTS_MEMORY_FAILURE: u32 = 1;
pub const CONFIG_CRASH_HOTPLUG: u32 = 1;
pub const CONFIG_DW_DMAC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_SOUNDWIRE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_GL520SM_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_LB_SS: u32 = 1;
pub const CONFIG_CRYPTO_DEV_ATMEL_I2C_MODULE: u32 = 1;
pub const CONFIG_CC10001_ADC_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_PMD_MKWRITE: u32 = 1;
pub const CONFIG_USB_SERIAL_QCAUX_MODULE: u32 = 1;
pub const CONFIG_SENSORS_AD7314_MODULE: u32 = 1;
pub const CONFIG_I2C_STUB_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MSCC_FELIX_DSA_LIB_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_MACH_COMMON_MODULE: u32 = 1;
pub const CONFIG_MOST_MODULE: u32 = 1;
pub const CONFIG_BATTERY_DA9150_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_GARMIN_MODULE: u32 = 1;
pub const CONFIG_MITIGATION_RFDS: u32 = 1;
pub const CONFIG_LCD_TDO24M_MODULE: u32 = 1;
pub const CONFIG_GPIO_GPIO_MM_MODULE: u32 = 1;
pub const CONFIG_SIEMENS_SIMATIC_IPC_BATT_ELKHARTLAKE_MODULE: u32 = 1;
pub const CONFIG_CHT_DC_TI_PMIC_OPREGION: u32 = 1;
pub const CONFIG_INTEL_PMT_TELEMETRY_MODULE: u32 = 1;
pub const CONFIG_USB_CYPRESS_CY7C63_MODULE: u32 = 1;
pub const CONFIG_QLA3XXX_MODULE: u32 = 1;
pub const CONFIG_AS_HAS_NON_CONST_ULEB128: u32 = 1;
pub const CONFIG_AD525X_DPOT_SPI_MODULE: u32 = 1;
pub const CONFIG_RTL8187_LEDS: u32 = 1;
pub const CONFIG_F2FS_UNFAIR_RWSEM: u32 = 1;
pub const CONFIG_US5182D_MODULE: u32 = 1;
pub const CONFIG_INTEL_SOC_DTS_IOSF_CORE_MODULE: u32 = 1;
pub const CONFIG_MISDN_AVMFRITZ_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_POLY1305_X86_64_MODULE: u32 = 1;
pub const CONFIG_EVM_ADD_XATTRS: u32 = 1;
pub const CONFIG_CHARGER_RT9467_MODULE: u32 = 1;
pub const CONFIG_LLD_VERSION: u32 = 0;
pub const CONFIG_PINCTRL_CHERRYVIEW: u32 = 1;
pub const CONFIG_USB_STORAGE_ONETOUCH_MODULE: u32 = 1;
pub const CONFIG_REMOTEPROC: u32 = 1;
pub const CONFIG_I2C_VIAPRO_MODULE: u32 = 1;
pub const CONFIG_OCFS2_FS_O2CB_MODULE: u32 = 1;
pub const CONFIG_MTD_PHYSMAP_GPIO_ADDR: u32 = 1;
pub const CONFIG_6LOWPAN_NHC_DEST_MODULE: u32 = 1;
pub const CONFIG_W1_MODULE: u32 = 1;
pub const CONFIG_ALTERA_MBOX_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_HASH: u32 = 1;
pub const CONFIG_MOST_NET_MODULE: u32 = 1;
pub const CONFIG_SND_USB_UA101_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_RENOIR_MODULE: u32 = 1;
pub const CONFIG_MLXSW_CORE_THERMAL: u32 = 1;
pub const CONFIG_CRYPTO_AUTHENC_MODULE: u32 = 1;
pub const CONFIG_ARCH_ENABLE_MEMORY_HOTPLUG: u32 = 1;
pub const CONFIG_JFFS2_CMODE_FAVOURLZO: u32 = 1;
pub const CONFIG_NET_ACT_GACT_MODULE: u32 = 1;
pub const CONFIG_MEDIA_ATTACH: u32 = 1;
pub const CONFIG_IIO_ST_SENSORS_SPI_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ATMEL_MXT_T37: u32 = 1;
pub const CONFIG_DRM_XE_DISPLAY: u32 = 1;
pub const CONFIG_VIDEO_VICODEC_MODULE: u32 = 1;
pub const CONFIG_IP_NF_TARGET_NETMAP_MODULE: u32 = 1;
pub const CONFIG_USB_DWC3_HAPS_MODULE: u32 = 1;
pub const CONFIG_IP_NF_MANGLE_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_ACCEL_I2C_3AXIS_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_SANE_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_DEVGROUP_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_EUI64_MODULE: u32 = 1;
pub const CONFIG_SERIAL_ARC_MODULE: u32 = 1;
pub const CONFIG_THUNDER_NIC_RGX_MODULE: u32 = 1;
pub const CONFIG_ATL1_MODULE: u32 = 1;
pub const CONFIG_RPMSG_QCOM_GLINK_RPM_MODULE: u32 = 1;
pub const CONFIG_SND_AMD_SOUNDWIRE_ACPI_MODULE: u32 = 1;
pub const CONFIG_DAX: u32 = 1;
pub const CONFIG_MEMREGION: u32 = 1;
pub const CONFIG_SW_SYNC: u32 = 1;
pub const CONFIG_INTEL_RAPL_CORE_MODULE: u32 = 1;
pub const CONFIG_LEDS_SGM3140_MODULE: u32 = 1;
pub const CONFIG_IOSM_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_WESTWOOD_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TAS2764_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_EGRESS: u32 = 1;
pub const CONFIG_NFC_S3FWRN82_UART_MODULE: u32 = 1;
pub const CONFIG_IR_NUVOTON_MODULE: u32 = 1;
pub const CONFIG_L2TP_V3: u32 = 1;
pub const CONFIG_USB_G_ACM_MS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX15301_MODULE: u32 = 1;
pub const CONFIG_I2C_HID_OF_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_AU6610_MODULE: u32 = 1;
pub const CONFIG_SYSTEM_TRUSTED_KEYS: &[u8; 27] = b"debian/canonical-certs.pem\0";
pub const CONFIG_LEDS_MT6323_MODULE: u32 = 1;
pub const CONFIG_CHARGER_SMB347_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_VANGOGH_MACH_MODULE: u32 = 1;
pub const CONFIG_IP_MROUTE_MULTIPLE_TABLES: u32 = 1;
pub const CONFIG_NET_DSA_TAG_BRCM_COMMON_MODULE: u32 = 1;
pub const CONFIG_FPGA_MGR_ALTERA_CVP_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_1251_MODULE: u32 = 1;
pub const CONFIG_HID_PRODIKEYS_MODULE: u32 = 1;
pub const CONFIG_DRM_SSD130X_SPI_MODULE: u32 = 1;
pub const CONFIG_NTB_EPF_MODULE: u32 = 1;
pub const CONFIG_NVIDIA_WMI_EC_BACKLIGHT_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS65912_MODULE: u32 = 1;
pub const CONFIG_PMIC_DA9052: u32 = 1;
pub const CONFIG_LEDS_PCA9532_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_CHT_BSW_NAU8824_MACH_MODULE: u32 = 1;
pub const CONFIG_GPIOLIB_IRQCHIP: u32 = 1;
pub const CONFIG_XILLYBUS_CLASS_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_DLINK_DIR685_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_ACNTSA_MODULE: u32 = 1;
pub const CONFIG_TINYDRM_ILI9341_MODULE: u32 = 1;
pub const CONFIG_COMEDI_CB_PCIDAS64_MODULE: u32 = 1;
pub const CONFIG_HYPERV_BALLOON_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_SFQ_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_APOLLOLAKE_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_BNS_MODULE: u32 = 1;
pub const CONFIG_SCSI_SAS_ATTRS_MODULE: u32 = 1;
pub const CONFIG_ATM_LANAI_MODULE: u32 = 1;
pub const CONFIG_LEDS_WM8350_MODULE: u32 = 1;
pub const CONFIG_EFI: u32 = 1;
pub const CONFIG_VBOXSF_FS_MODULE: u32 = 1;
pub const CONFIG_SUNRPC_MODULE: u32 = 1;
pub const CONFIG_NLS_MAC_CELTIC_MODULE: u32 = 1;
pub const CONFIG_TI_DAC7311_MODULE: u32 = 1;
pub const CONFIG_INTEL_SCU_IPC_UTIL_MODULE: u32 = 1;
pub const CONFIG_THERMAL_EMERGENCY_POWEROFF_DELAY_MS: u32 = 0;
pub const CONFIG_NF_CONNTRACK_NETBIOS_NS_MODULE: u32 = 1;
pub const CONFIG_NF_NAT_OVS: u32 = 1;
pub const CONFIG_TYPEC_RT1719_MODULE: u32 = 1;
pub const CONFIG_DVB_STV0900_MODULE: u32 = 1;
pub const CONFIG_USB_CDNS_HOST: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_HDAUDIO_MODULE: u32 = 1;
pub const CONFIG_RMI4_F34: u32 = 1;
pub const CONFIG_SND_PDAUDIOCF_MODULE: u32 = 1;
pub const CONFIG_CHELSIO_LIB_MODULE: u32 = 1;
pub const CONFIG_FS_STACK: u32 = 1;
pub const CONFIG_BMI088_ACCEL_MODULE: u32 = 1;
pub const CONFIG_LEDS_BRIGHTNESS_HW_CHANGED: u32 = 1;
pub const CONFIG_SENSORS_LTC2947_MODULE: u32 = 1;
pub const CONFIG_MT76x2E_MODULE: u32 = 1;
pub const CONFIG_VIDEO_MGB4_MODULE: u32 = 1;
pub const CONFIG_YENTA_MODULE: u32 = 1;
pub const CONFIG_AD7091R_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_88PM860X_MODULE: u32 = 1;
pub const CONFIG_COMEDI_C6XDIGIO_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_AGM1264K_FL_MODULE: u32 = 1;
pub const CONFIG_SENSORS_PECI_CPUTEMP_MODULE: u32 = 1;
pub const CONFIG_X86_SUPPORTS_MEMORY_FAILURE: u32 = 1;
pub const CONFIG_ARCH_SELECTS_KEXEC_FILE: u32 = 1;
pub const CONFIG_GENERIC_CPU_DEVICES: u32 = 1;
pub const CONFIG_LEDS_PCA963X_MODULE: u32 = 1;
pub const CONFIG_CONNECTOR: u32 = 1;
pub const CONFIG_SND_SOC_ARIZONA_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TC654_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MC13XXX_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_PCI_LIB: u32 = 1;
pub const CONFIG_HVC_XEN_FRONTEND: u32 = 1;
pub const CONFIG_GPIO_RDC321X_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_FRAME_POINTERS: u32 = 1;
pub const CONFIG_DRM_VGEM_MODULE: u32 = 1;
pub const CONFIG_HSR_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS6586X_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_INTEL_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_TCP_MD5SIG: u32 = 1;
pub const CONFIG_MCTP_TRANSPORT_I3C_MODULE: u32 = 1;
pub const CONFIG_TSL2591_MODULE: u32 = 1;
pub const CONFIG_INTEL_PUNIT_IPC_MODULE: u32 = 1;
pub const CONFIG_INPUT_REGULATOR_HAPTIC_MODULE: u32 = 1;
pub const CONFIG_SSB_BLOCKIO: u32 = 1;
pub const CONFIG_DM_UEVENT: u32 = 1;
pub const CONFIG_UBIFS_FS_ZSTD: u32 = 1;
pub const CONFIG_MEMORY_HOTREMOVE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_CHACHA_MODULE: u32 = 1;
pub const CONFIG_SMSC_SCH311X_WDT_MODULE: u32 = 1;
pub const CONFIG_PAC1934_MODULE: u32 = 1;
pub const CONFIG_EDAC_I82975X_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_LOG_MODULE: u32 = 1;
pub const CONFIG_SFP_MODULE: u32 = 1;
pub const CONFIG_CPU_IDLE: u32 = 1;
pub const CONFIG_OBJTOOL: u32 = 1;
pub const CONFIG_CGROUP_FREEZER: u32 = 1;
pub const CONFIG_MTD_CFI_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_ZIP_ZSTD: u32 = 1;
pub const CONFIG_RT2X00_MODULE: u32 = 1;
pub const CONFIG_PREEMPT_COUNT: u32 = 1;
pub const CONFIG_LEDS_MENF21BMC_MODULE: u32 = 1;
pub const CONFIG_KXSD9_I2C_MODULE: u32 = 1;
pub const CONFIG_VGA_SWITCHEROO: u32 = 1;
pub const CONFIG_CAN_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_LAKEFIELD_MODULE: u32 = 1;
pub const CONFIG_AD7150_MODULE: u32 = 1;
pub const CONFIG_TI_ADS1100_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TAS571X_MODULE: u32 = 1;
pub const CONFIG_GVE_MODULE: u32 = 1;
pub const CONFIG_IIO_CONFIGFS_MODULE: u32 = 1;
pub const CONFIG_SCSI_LOWLEVEL_PCMCIA: u32 = 1;
pub const CONFIG_IP6_NF_IPTABLES_LEGACY_MODULE: u32 = 1;
pub const CONFIG_MLX5_CLS_ACT: u32 = 1;
pub const CONFIG_SWIOTLB_XEN: u32 = 1;
pub const CONFIG_HID_BATTERY_STRENGTH: u32 = 1;
pub const CONFIG_DVB_NXT200X_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_HHF_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_VMW_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_TIOCMD_MODULE: u32 = 1;
pub const CONFIG_LEDS_CLASS_MULTICOLOR_MODULE: u32 = 1;
pub const CONFIG_DW_EDMA_PCIE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_XTENSA_MODULE: u32 = 1;
pub const CONFIG_CHARGER_TPS65090_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_TEMP_MODULE: u32 = 1;
pub const CONFIG_IOMMU_DEFAULT_DMA_LAZY: u32 = 1;
pub const CONFIG_HID_SENSOR_HUB_MODULE: u32 = 1;
pub const CONFIG_IPW2200_QOS: u32 = 1;
pub const CONFIG_HID_PICOLCD_CIR: u32 = 1;
pub const CONFIG_PM_CLK: u32 = 1;
pub const CONFIG_MC3230_MODULE: u32 = 1;
pub const CONFIG_NET_XGRESS: u32 = 1;
pub const CONFIG_ARCNET_CAP_MODULE: u32 = 1;
pub const CONFIG_XEN_GNTDEV_MODULE: u32 = 1;
pub const CONFIG_SND_VX222_MODULE: u32 = 1;
pub const CONFIG_KVM_XEN: u32 = 1;
pub const CONFIG_LMK04832_MODULE: u32 = 1;
pub const CONFIG_SATA_HOST: u32 = 1;
pub const CONFIG_DUMMY_IRQ_MODULE: u32 = 1;
pub const CONFIG_SND_PCM_TIMER: u32 = 1;
pub const CONFIG_INV_MPU6050_SPI_MODULE: u32 = 1;
pub const CONFIG_SCSI_PROC_FS: u32 = 1;
pub const CONFIG_SND_SOC_RT5670_MODULE: u32 = 1;
pub const CONFIG_DVB_STB6000_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC4286: u32 = 1;
pub const CONFIG_QED_ISCSI: u32 = 1;
pub const CONFIG_CRYPTO_HW: u32 = 1;
pub const CONFIG_FB_TFT_SSD1331_MODULE: u32 = 1;
pub const CONFIG_LTC1660_MODULE: u32 = 1;
pub const CONFIG_TIPC_MODULE: u32 = 1;
pub const CONFIG_ATM_MPOA_MODULE: u32 = 1;
pub const CONFIG_X86_PLATFORM_DEVICES: u32 = 1;
pub const CONFIG_REGULATOR_MT6358_MODULE: u32 = 1;
pub const CONFIG_MACINTOSH_DRIVERS: u32 = 1;
pub const CONFIG_NFT_SOCKET_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_QUEUE_MODULE: u32 = 1;
pub const CONFIG_CFG80211_REQUIRE_SIGNED_REGDB: u32 = 1;
pub const CONFIG_MPU3050_MODULE: u32 = 1;
pub const CONFIG_KALLSYMS_ALL: u32 = 1;
pub const CONFIG_USB_F_MASS_STORAGE_MODULE: u32 = 1;
pub const CONFIG_COREDUMP: u32 = 1;
pub const CONFIG_RELOCATABLE: u32 = 1;
pub const CONFIG_DRM_I2C_NXP_TDA9950_MODULE: u32 = 1;
pub const CONFIG_SERIAL_JSM_MODULE: u32 = 1;
pub const CONFIG_ACPI_CONFIGFS_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_MEM_MODULE: u32 = 1;
pub const CONFIG_HDLC_X25_MODULE: u32 = 1;
pub const CONFIG_SATA_ACARD_AHCI_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_MSI: u32 = 1;
pub const CONFIG_CC_HAS_ZERO_CALL_USED_REGS: u32 = 1;
pub const CONFIG_BRIDGE_EBT_PKTTYPE_MODULE: u32 = 1;
pub const CONFIG_IMG_ASCII_LCD_MODULE: u32 = 1;
pub const CONFIG_RC_DEVICES: u32 = 1;
pub const CONFIG_B43_BUSES_BCMA_AND_SSB: u32 = 1;
pub const CONFIG_MTD_NAND_GPIO_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_GUILLEMOT_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_HASH2: u32 = 1;
pub const CONFIG_SECCOMP: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_PC263_ISA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8978_MODULE: u32 = 1;
pub const CONFIG_SNET_VDPA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L56_I2C_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MV88E6XXX_PTP: u32 = 1;
pub const CONFIG_TIFM_CORE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_GF128MUL: u32 = 1;
pub const CONFIG_SOUNDWIRE_INTEL_MODULE: u32 = 1;
pub const CONFIG_ACPI_SBS_MODULE: u32 = 1;
pub const CONFIG_HID_MICROSOFT_MODULE: u32 = 1;
pub const CONFIG_LIBERTAS_MESH: u32 = 1;
pub const CONFIG_SGETMASK_SYSCALL: u32 = 1;
pub const CONFIG_USB_MUSB_DUAL_ROLE: u32 = 1;
pub const CONFIG_SND_ATMEL_SOC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM3060_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_IPTABLES_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_SH1106_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_RT274_MODULE: u32 = 1;
pub const CONFIG_MAX1027_MODULE: u32 = 1;
pub const CONFIG_SHMEM: u32 = 1;
pub const CONFIG_INTEL_IOMMU_DEFAULT_ON: u32 = 1;
pub const CONFIG_IWLWIFI_OPMODE_MODULAR: u32 = 1;
pub const CONFIG_VIDEO_TC358746_MODULE: u32 = 1;
pub const CONFIG_FPGA_MGR_MACHXO2_SPI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L56_MODULE: u32 = 1;
pub const CONFIG_WIZNET_W5300_MODULE: u32 = 1;
pub const CONFIG_IIO_BUFFER_DMAENGINE_MODULE: u32 = 1;
pub const CONFIG_LEDS_IS31FL319X_MODULE: u32 = 1;
pub const CONFIG_NFT_CT_MODULE: u32 = 1;
pub const CONFIG_RTL8723BS_MODULE: u32 = 1;
pub const CONFIG_SND_ALS4000_MODULE: u32 = 1;
pub const CONFIG_BCACHEFS_POSIX_ACL: u32 = 1;
pub const CONFIG_VSOCKMON_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_NMI_SAFE_THIS_CPU_OPS: u32 = 1;
pub const CONFIG_DVB_MN88443X_MODULE: u32 = 1;
pub const CONFIG_DVB_DIB3000MC_MODULE: u32 = 1;
pub const CONFIG_I2C_BOARDINFO: u32 = 1;
pub const CONFIG_MTD_ABSENT_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DT2817_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_FSL_MICFIL_MODULE: u32 = 1;
pub const CONFIG_SPI_LANTIQ_SSC_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV7740_MODULE: u32 = 1;
pub const CONFIG_SERIO_ALTERA_PS2_MODULE: u32 = 1;
pub const CONFIG_ATL2_MODULE: u32 = 1;
pub const CONFIG_GPIO_BD9571MWV_MODULE: u32 = 1;
pub const CONFIG_UIO_MODULE: u32 = 1;
pub const CONFIG_KEXEC_SIG: u32 = 1;
pub const CONFIG_SSB_PCIHOST: u32 = 1;
pub const CONFIG_NET_VENDOR_ALTEON: u32 = 1;
pub const CONFIG_ATA_VERBOSE_ERROR: u32 = 1;
pub const CONFIG_SECURITY_APPARMOR_HASH_DEFAULT: u32 = 1;
pub const CONFIG_WEXT_CORE: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_CONEXANT_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_R9701_MODULE: u32 = 1;
pub const CONFIG_DRM_PANEL_WIDECHIPS_WS2401_MODULE: u32 = 1;
pub const CONFIG_MFD_WM8998: u32 = 1;
pub const CONFIG_PLDMFW: u32 = 1;
pub const CONFIG_VIDEO_MAX9271_LIB_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TPS40422_MODULE: u32 = 1;
pub const CONFIG_MS_BLOCK_MODULE: u32 = 1;
pub const CONFIG_THERMAL_NETLINK: u32 = 1;
pub const CONFIG_BACKLIGHT_LM3639_MODULE: u32 = 1;
pub const CONFIG_PSE_PD692X0_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_ANCHOR: u32 = 1;
pub const CONFIG_SKGE_MODULE: u32 = 1;
pub const CONFIG_RMI4_SPI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ES8328_I2C_MODULE: u32 = 1;
pub const CONFIG_MT76_SDIO_MODULE: u32 = 1;
pub const CONFIG_COMEDI_KE_COUNTER_MODULE: u32 = 1;
pub const CONFIG_CHELSIO_T3_MODULE: u32 = 1;
pub const CONFIG_SATA_SIL_MODULE: u32 = 1;
pub const CONFIG_SND_TIMER_MODULE: u32 = 1;
pub const CONFIG_INTEL_SMARTCONNECT_MODULE: u32 = 1;
pub const CONFIG_NETLINK_DIAG_MODULE: u32 = 1;
pub const CONFIG_NLS_MAC_ICELAND_MODULE: u32 = 1;
pub const CONFIG_SMS_SIANO_RC: u32 = 1;
pub const CONFIG_HAVE_POSIX_CPU_TIMERS_TASK_WORK: u32 = 1;
pub const CONFIG_RPCSEC_GSS_KRB5_ENCTYPES_AES_SHA2: u32 = 1;
pub const CONFIG_COMEDI_USBDUXSIGMA_MODULE: u32 = 1;
pub const CONFIG_DRM_I2C_SIL164_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_949_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83L785TS_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_LIGHTBAR_MODULE: u32 = 1;
pub const CONFIG_SENSORS_XDPE152_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_BLK: u32 = 1;
pub const CONFIG_CPU_SUP_INTEL: u32 = 1;
pub const CONFIG_BCH_MODULE: u32 = 1;
pub const CONFIG_RTLWIFI_PCI_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_MODULE: u32 = 1;
pub const CONFIG_IRQ_FORCED_THREADING: u32 = 1;
pub const CONFIG_HARDLOCKUP_DETECTOR: u32 = 1;
pub const CONFIG_VIDEO_GO7007_LOADER_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_MANAGER2: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROCHIP: u32 = 1;
pub const CONFIG_MESSAGE_LOGLEVEL_DEFAULT: u32 = 4;
pub const CONFIG_KEYBOARD_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1343_MODULE: u32 = 1;
pub const CONFIG_LCD_OTM3225A_MODULE: u32 = 1;
pub const CONFIG_INTEL_BXT_PMIC_THERMAL_MODULE: u32 = 1;
pub const CONFIG_SCSI_CXGB4_ISCSI_MODULE: u32 = 1;
pub const CONFIG_IP_NF_FILTER_MODULE: u32 = 1;
pub const CONFIG_SQUASHFS: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ATH: u32 = 1;
pub const CONFIG_SND_DUMMY_MODULE: u32 = 1;
pub const CONFIG_SPI_AMD_MODULE: u32 = 1;
pub const CONFIG_ITCO_WDT_MODULE: u32 = 1;
pub const CONFIG_CFG80211_WEXT: u32 = 1;
pub const CONFIG_MLXREG_LC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_VIA_CPUTEMP_MODULE: u32 = 1;
pub const CONFIG_DVB_S921_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM95245_MODULE: u32 = 1;
pub const CONFIG_DA9062_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_FPGA_DFL_FME_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_932_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MARVELL: u32 = 1;
pub const CONFIG_NET_SCH_MQPRIO_LIB_MODULE: u32 = 1;
pub const CONFIG_MTD_BLOCK_RO_MODULE: u32 = 1;
pub const CONFIG_KVM_HYPERV: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_NO_PATCHABLE: u32 = 1;
pub const CONFIG_SOCK_RX_QUEUE_MAPPING: u32 = 1;
pub const CONFIG_X86_MCE_THRESHOLD: u32 = 1;
pub const CONFIG_AUXILIARY_BUS: u32 = 1;
pub const CONFIG_RTC_DRV_RX8111_MODULE: u32 = 1;
pub const CONFIG_ARCH_HIBERNATION_HEADER: u32 = 1;
pub const CONFIG_DECOMPRESS_LZ4: u32 = 1;
pub const CONFIG_VFIO_CONTAINER: u32 = 1;
pub const CONFIG_RTC_DRV_LP8788_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_PCAP_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TDA1997X_MODULE: u32 = 1;
pub const CONFIG_SENSORS_VT1211_MODULE: u32 = 1;
pub const CONFIG_DVB_CX24117_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_ETOMS_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_DEFAULT_BPF_JIT: u32 = 1;
pub const CONFIG_GPIO_SIM_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_1_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CHV3_CODEC_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_KCOV: u32 = 1;
pub const CONFIG_HID_TOPSEED_MODULE: u32 = 1;
pub const CONFIG_NET_EMATCH_META_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_FTRACE_WITH_DIRECT_CALLS: u32 = 1;
pub const CONFIG_MPLS_IPTUNNEL_MODULE: u32 = 1;
pub const CONFIG_PM_SLEEP_DEBUG: u32 = 1;
pub const CONFIG_BT_HCIUART_RTL: u32 = 1;
pub const CONFIG_AFS_FSCACHE: u32 = 1;
pub const CONFIG_HSC030PA_I2C_MODULE: u32 = 1;
pub const CONFIG_IMA_LSM_RULES: u32 = 1;
pub const CONFIG_USB_TRANCEVIBRATOR_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_CAVIUM: u32 = 1;
pub const CONFIG_LEDS_TCA6507_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ZYDAS: u32 = 1;
pub const CONFIG_LIBERTAS_SDIO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SHT21_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_MR97310A_MODULE: u32 = 1;
pub const CONFIG_PCNET32_MODULE: u32 = 1;
pub const CONFIG_BCACHE_ASYNC_REGISTRATION: u32 = 1;
pub const CONFIG_GREYBUS_UART_MODULE: u32 = 1;
pub const CONFIG_INTEL_SAR_INT1092_MODULE: u32 = 1;
pub const CONFIG_INPUT_EVBUG_MODULE: u32 = 1;
pub const CONFIG_PATA_TIMINGS: u32 = 1;
pub const CONFIG_NETFILTER_XT_MARK_MODULE: u32 = 1;
pub const CONFIG_COMPAT: u32 = 1;
pub const CONFIG_VIRT_CPU_ACCOUNTING: u32 = 1;
pub const CONFIG_SND_SOC_SOF_ELKHARTLAKE_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_DIGI_ACCELEPORT_MODULE: u32 = 1;
pub const CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION: u32 = 1;
pub const CONFIG_PSTORE: u32 = 1;
pub const CONFIG_IIO_ST_LSM6DSX_SPI_MODULE: u32 = 1;
pub const CONFIG_HID_VRC2_MODULE: u32 = 1;
pub const CONFIG_NET_CLS_ROUTE4_MODULE: u32 = 1;
pub const CONFIG_TMPFS_INODE64: u32 = 1;
pub const CONFIG_TI_TSC2046_MODULE: u32 = 1;
pub const CONFIG_SCSI_UFS_CRYPTO: u32 = 1;
pub const CONFIG_IIO_TRIGGERED_EVENT_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_AF9035_MODULE: u32 = 1;
pub const CONFIG_RESET_SIMPLE: u32 = 1;
pub const CONFIG_SND_BCD2000_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_CHOKE_MODULE: u32 = 1;
pub const CONFIG_MXM_WMI_MODULE: u32 = 1;
pub const CONFIG_NIC7018_WDT_MODULE: u32 = 1;
pub const CONFIG_SCSI_3W_SAS_MODULE: u32 = 1;
pub const CONFIG_WILC1000_MODULE: u32 = 1;
pub const CONFIG_INTEL_XWAY_PHY_MODULE: u32 = 1;
pub const CONFIG_MICREL_KS8995MA_MODULE: u32 = 1;
pub const CONFIG_RMI4_F55: u32 = 1;
pub const CONFIG_EXCLUSIVE_SYSTEM_RAM: u32 = 1;
pub const CONFIG_FW_LOADER_COMPRESS: u32 = 1;
pub const CONFIG_CRYPTO_LIB_POLY1305_RSIZE: u32 = 11;
pub const CONFIG_INIT_ENV_ARG_LIMIT: u32 = 32;
pub const CONFIG_ZERO_CALL_USED_REGS: u32 = 1;
pub const CONFIG_CACHEFILES_MODULE: u32 = 1;
pub const CONFIG_QEDF_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_RT298_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS16M1_MODULE: u32 = 1;
pub const CONFIG_BCM_KONA_USB2_PHY_MODULE: u32 = 1;
pub const CONFIG_ADMV1013_MODULE: u32 = 1;
pub const CONFIG_XEN_PV_MSR_SAFE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_EEM: u32 = 1;
pub const CONFIG_TEHUTI_TN40_MODULE: u32 = 1;
pub const CONFIG_SND_DYNAMIC_MINORS: u32 = 1;
pub const CONFIG_IP_PIMSM_V1: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_C62X_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO: u32 = 1;
pub const CONFIG_SCSI_VIRTIO: u32 = 1;
pub const CONFIG_FPGA_DFL_NIOS_INTEL_PAC_N3000_MODULE: u32 = 1;
pub const CONFIG_MTD_ONENAND_GENERIC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_LPASS_TX_MACRO_MODULE: u32 = 1;
pub const CONFIG_DM_FLAKEY_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_PCI_CPCI: u32 = 1;
pub const CONFIG_ZD1211RW_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_PARALLEL: u32 = 1;
pub const CONFIG_LIVEPATCH: u32 = 1;
pub const CONFIG_CHARGER_MAX8997_MODULE: u32 = 1;
pub const CONFIG_SECURITY_INFINIBAND: u32 = 1;
pub const CONFIG_VIDEO_GO7007_USB_S2250_BOARD_MODULE: u32 = 1;
pub const CONFIG_FUN_CORE_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_XIRLINK_CIT_MODULE: u32 = 1;
pub const CONFIG_DVB_DRXK_MODULE: u32 = 1;
pub const CONFIG_JFFS2_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_REGULATOR_MT6359_MODULE: u32 = 1;
pub const CONFIG_I2C_PCA_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_SECURITY: u32 = 1;
pub const CONFIG_I2C_HID_MODULE: u32 = 1;
pub const CONFIG_PREEMPT_BUILD: u32 = 1;
pub const CONFIG_BT_HCIUART_MRVL: u32 = 1;
pub const CONFIG_TPS6594_ESM_MODULE: u32 = 1;
pub const CONFIG_MEM_SOFT_DIRTY: u32 = 1;
pub const CONFIG_LOGIWHEELS_FF: u32 = 1;
pub const CONFIG_DRM_AMDGPU_MODULE: u32 = 1;
pub const CONFIG_YENTA_O2: u32 = 1;
pub const CONFIG_RTC_DRV_MAX8997_MODULE: u32 = 1;
pub const CONFIG_SND_EMU10K1X_MODULE: u32 = 1;
pub const CONFIG_MANAGER_SBS_MODULE: u32 = 1;
pub const CONFIG_AF_RXRPC_MODULE: u32 = 1;
pub const CONFIG_842_COMPRESS_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_STINGER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM186X_MODULE: u32 = 1;
pub const CONFIG_SERIAL_ARC_NR_PORTS: u32 = 1;
pub const CONFIG_DVB_USB_ANYSEE_MODULE: u32 = 1;
pub const CONFIG_DEFAULT_TCP_CONG: &[u8; 6] = b"cubic\0";
pub const CONFIG_VL53L0X_I2C_MODULE: u32 = 1;
pub const CONFIG_PROC_PID_CPUSET: u32 = 1;
pub const CONFIG_DRM_XE_PREEMPT_TIMEOUT_MIN: u32 = 1;
pub const CONFIG_I2C_TINY_USB_MODULE: u32 = 1;
pub const CONFIG_IR_TTUSBIR_MODULE: u32 = 1;
pub const CONFIG_MPTCP_IPV6: u32 = 1;
pub const CONFIG_BATTERY_SAMSUNG_SDI: u32 = 1;
pub const CONFIG_MTD_LPDDR_MODULE: u32 = 1;
pub const CONFIG_USER_EVENTS: u32 = 1;
pub const CONFIG_MTD_CFI_UTIL_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_ACCT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP_PCM_MODULE: u32 = 1;
pub const CONFIG_MWAVE_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_SILABS: u32 = 1;
pub const CONFIG_IPW2100_MONITOR: u32 = 1;
pub const CONFIG_VORTEX_MODULE: u32 = 1;
pub const CONFIG_HAVE_KERNEL_ZSTD: u32 = 1;
pub const CONFIG_CRAMFS_BLOCKDEV: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_LTO_CLANG: u32 = 1;
pub const CONFIG_PHY_CAN_TRANSCEIVER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT715_SDW_MODULE: u32 = 1;
pub const CONFIG_MTD_PCI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AC97_BUS: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_L2TP_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_COMMON_MODULE: u32 = 1;
pub const CONFIG_MIPI_I3C_HCI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_PVRUSB2_SYSFS: u32 = 1;
pub const CONFIG_MFD_DA9063: u32 = 1;
pub const CONFIG_IP6_NF_SECURITY_MODULE: u32 = 1;
pub const CONFIG_MEN_Z188_ADC_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_REALTEK_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_OKI: u32 = 1;
pub const CONFIG_RTW88_8821CS_MODULE: u32 = 1;
pub const CONFIG_WIL6210_MODULE: u32 = 1;
pub const CONFIG_I2C_TAOS_EVM_MODULE: u32 = 1;
pub const CONFIG_BLK_INLINE_ENCRYPTION_FALLBACK: u32 = 1;
pub const CONFIG_CRYPTO_CRC32_MODULE: u32 = 1;
pub const CONFIG_IQS620AT_TEMP_MODULE: u32 = 1;
pub const CONFIG_TPS6594_PFSM_MODULE: u32 = 1;
pub const CONFIG_SPI_MEM: u32 = 1;
pub const CONFIG_INTEL_UNCORE_FREQ_CONTROL_MODULE: u32 = 1;
pub const CONFIG_UCSI_ACPI_MODULE: u32 = 1;
pub const CONFIG_MMC_BLOCK_MODULE: u32 = 1;
pub const CONFIG_MFD_MENF21BMC_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_RX8025_MODULE: u32 = 1;
pub const CONFIG_GCC_NO_STRINGOP_OVERFLOW: u32 = 1;
pub const CONFIG_PC300TOO_MODULE: u32 = 1;
pub const CONFIG_ATM_FORE200E_TX_RETRY: u32 = 16;
pub const CONFIG_CONTIG_ALLOC: u32 = 1;
pub const CONFIG_VIDEO_MT9V111_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_HIFI_EP_IPC_MODULE: u32 = 1;
pub const CONFIG_SMBFS_MODULE: u32 = 1;
pub const CONFIG_LIBCRC32C_MODULE: u32 = 1;
pub const CONFIG_PCI_DIRECT: u32 = 1;
pub const CONFIG_SYSTEM_EXTRA_CERTIFICATE_SIZE: u32 = 4096;
pub const CONFIG_USB_DWC3_PCI_MODULE: u32 = 1;
pub const CONFIG_USB_SI4713_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_AS5011_MODULE: u32 = 1;
pub const CONFIG_AX25_DAMA_SLAVE: u32 = 1;
pub const CONFIG_COMEDI_CB_PCIDAS_MODULE: u32 = 1;
pub const CONFIG_CAN_PEAK_PCIEC: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_ATTR_SET: u32 = 1;
pub const CONFIG_SGI_GRU_MODULE: u32 = 1;
pub const CONFIG_P2SB: u32 = 1;
pub const CONFIG_RWSEM_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_HAVE_BOOTMEM_INFO_NODE: u32 = 1;
pub const CONFIG_HOTPLUG_PCI_CPCI_ZT5550_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_STRICT_MODULE_RWX: u32 = 1;
pub const CONFIG_DRM_PRIVACY_SCREEN: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP63_TOPLEVEL_MODULE: u32 = 1;
pub const CONFIG_SCSI_ACARD_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ES7241_MODULE: u32 = 1;
pub const CONFIG_DVB_DIB3000MB_MODULE: u32 = 1;
pub const CONFIG_DVB_TS2020_MODULE: u32 = 1;
pub const CONFIG_MFD_TPS6594_SPI_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_PRETIMEOUT_GOV_PANIC_MODULE: u32 = 1;
pub const CONFIG_LRU_GEN: u32 = 1;
pub const CONFIG_PROC_PID_ARCH_STATUS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_BZIMAGE_VERIFY_SIG: u32 = 1;
pub const CONFIG_EXAR_WDT_MODULE: u32 = 1;
pub const CONFIG_GPIO_WHISKEY_COVE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TPS23861_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_INTEL: u32 = 1;
pub const CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK: u32 = 1;
pub const CONFIG_COMEDI_MISC_DRIVERS: u32 = 1;
pub const CONFIG_HDLC_RAW_ETH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX88_MPEG_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_METEORPOINT_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ESSIV_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_SPCP8X5_MODULE: u32 = 1;
pub const CONFIG_FPGA_MGR_XILINX_SELECTMAP_MODULE: u32 = 1;
pub const CONFIG_HINIC_MODULE: u32 = 1;
pub const CONFIG_BATTERY_GAUGE_LTC2941_MODULE: u32 = 1;
pub const CONFIG_GPIO_GENERIC_PLATFORM: u32 = 1;
pub const CONFIG_MITIGATION_IBRS_ENTRY: u32 = 1;
pub const CONFIG_FB_I740_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_KERNEL_FPU_SUPPORT: u32 = 1;
pub const CONFIG_KEYBOARD_QT1070_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_GLK_DA7219_MAX98357A_MACH_MODULE: u32 = 1;
pub const CONFIG_RPMSG_TTY_MODULE: u32 = 1;
pub const CONFIG_AFE4404_MODULE: u32 = 1;
pub const CONFIG_EUROTECH_WDT_MODULE: u32 = 1;
pub const CONFIG_HID_CMEDIA_MODULE: u32 = 1;
pub const CONFIG_DVB_LNBP21_MODULE: u32 = 1;
pub const CONFIG_RPCSEC_GSS_KRB5_ENCTYPES_AES_SHA1: u32 = 1;
pub const CONFIG_HAVE_RELIABLE_STACKTRACE: u32 = 1;
pub const CONFIG_INPUT_PCSPKR_MODULE: u32 = 1;
pub const CONFIG_MFD_MC13XXX_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC: u32 = 1;
pub const CONFIG_MFD_ATC260X_MODULE: u32 = 1;
pub const CONFIG_DVB_AV7110_IR: u32 = 1;
pub const CONFIG_HID_ICADE_MODULE: u32 = 1;
pub const CONFIG_DVB_AU8522_DTV_MODULE: u32 = 1;
pub const CONFIG_MELLANOX_PLATFORM: u32 = 1;
pub const CONFIG_RTC_DRV_TPS6594_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_ATHEROS: u32 = 1;
pub const CONFIG_DVB_SP887X_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_CAMERA_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RTMV20_MODULE: u32 = 1;
pub const CONFIG_FB_MATROX_MYSTIQUE: u32 = 1;
pub const CONFIG_DVB_TDA10021_MODULE: u32 = 1;
pub const CONFIG_PATA_RZ1000_MODULE: u32 = 1;
pub const CONFIG_VMD_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_MMIO: u32 = 1;
pub const CONFIG_ELFCORE: u32 = 1;
pub const CONFIG_I2C_ALI1563_MODULE: u32 = 1;
pub const CONFIG_CARL9170_WPC: u32 = 1;
pub const CONFIG_IOSF_MBI: u32 = 1;
pub const CONFIG_BLK_PM: u32 = 1;
pub const CONFIG_X86_PM_TIMER: u32 = 1;
pub const CONFIG_SPI_ALTERA_DFL_MODULE: u32 = 1;
pub const CONFIG_HDC2010_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_SKL_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ASUS_WMI_MODULE: u32 = 1;
pub const CONFIG_SND_VMASTER: u32 = 1;
pub const CONFIG_SERIAL_8250_RSA: u32 = 1;
pub const CONFIG_INFINIBAND_QIB_DCA: u32 = 1;
pub const CONFIG_PPS_CLIENT_PARPORT_MODULE: u32 = 1;
pub const CONFIG_SENSORS_STTS751_MODULE: u32 = 1;
pub const CONFIG_MLX5_CORE_EN: u32 = 1;
pub const CONFIG_REGULATOR_MAX77541_MODULE: u32 = 1;
pub const CONFIG_CIFS_DEBUG: u32 = 1;
pub const CONFIG_LEGACY_PTY_COUNT: u32 = 0;
pub const CONFIG_USBIP_VHCI_HCD_MODULE: u32 = 1;
pub const CONFIG_DVB_CX24116_MODULE: u32 = 1;
pub const CONFIG_ISDN_CAPI: u32 = 1;
pub const CONFIG_BRIDGE_EBT_DNAT_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SILAN: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MXL5005S_MODULE: u32 = 1;
pub const CONFIG_HID_MULTITOUCH_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_SI3054_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_SIGFRAME: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ELO_MODULE: u32 = 1;
pub const CONFIG_BMG160_SPI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_COMETLAKE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_UCD9000_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM3168A_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCMCIA_DRIVERS_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ZINITIX_MODULE: u32 = 1;
pub const CONFIG_GNSS_MODULE: u32 = 1;
pub const CONFIG_IMA_APPRAISE_MODSIG: u32 = 1;
pub const CONFIG_SND_VERBOSE_PROCFS: u32 = 1;
pub const CONFIG_GADGET_UAC1: u32 = 1;
pub const CONFIG_INPUT_MAX8997_HAPTIC_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_INGRESS_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_AMONG_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TDA827X_MODULE: u32 = 1;
pub const CONFIG_SENSORS_HMC5843_MODULE: u32 = 1;
pub const CONFIG_LEDS_KTD202X_MODULE: u32 = 1;
pub const CONFIG_GENERIC_CPU_AUTOPROBE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ST: u32 = 1;
pub const CONFIG_SOLARIS_X86_PARTITION: u32 = 1;
pub const CONFIG_NIU_MODULE: u32 = 1;
pub const CONFIG_VMGENID_MODULE: u32 = 1;
pub const CONFIG_ADIN_PHY_MODULE: u32 = 1;
pub const CONFIG_RETHOOK: u32 = 1;
pub const CONFIG_JFFS2_ZLIB: u32 = 1;
pub const CONFIG_NFC_MICROREAD_MODULE: u32 = 1;
pub const CONFIG_INPUT_MOUSEDEV: u32 = 1;
pub const CONFIG_NET_SCH_CAKE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_CONTEC_PCI_DIO_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS800_MODULE: u32 = 1;
pub const CONFIG_NETDEVICES: u32 = 1;
pub const CONFIG_FW_CS_DSP_MODULE: u32 = 1;
pub const CONFIG_LAN743X_MODULE: u32 = 1;
pub const CONFIG_RMI4_F54: u32 = 1;
pub const CONFIG_IIO_BUFFER_DMA_MODULE: u32 = 1;
pub const CONFIG_WILCO_EC_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_874_MODULE: u32 = 1;
pub const CONFIG_NR_CPUS_RANGE_END: u32 = 8192;
pub const CONFIG_VIDEO_TEA6415C_MODULE: u32 = 1;
pub const CONFIG_RTL8180_MODULE: u32 = 1;
pub const CONFIG_SPI_XILINX_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_BENQ_MODULE: u32 = 1;
pub const CONFIG_BMP280_MODULE: u32 = 1;
pub const CONFIG_BLK_RQ_ALLOC_TIME: u32 = 1;
pub const CONFIG_MFD_TI_LP873X_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ADV7393_MODULE: u32 = 1;
pub const CONFIG_ARCH_CLOCKSOURCE_INIT: u32 = 1;
pub const CONFIG_INET_XFRM_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_INPUT_MISC: u32 = 1;
pub const CONFIG_SENSORS_PXE1610_MODULE: u32 = 1;
pub const CONFIG_UBIFS_FS_ZLIB: u32 = 1;
pub const CONFIG_NF_NAT_H323_MODULE: u32 = 1;
pub const CONFIG_IP_PIMSM_V2: u32 = 1;
pub const CONFIG_MFD_OCELOT_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_EPAT_MODULE: u32 = 1;
pub const CONFIG_KGDB_HONOUR_BLOCKLIST: u32 = 1;
pub const CONFIG_ETHTOOL_NETLINK: u32 = 1;
pub const CONFIG_AD7606_IFACE_SPI_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_PRETIMEOUT_GOV_SEL_MODULE: u32 = 1;
pub const CONFIG_NVME_TARGET_LOOP_MODULE: u32 = 1;
pub const CONFIG_GPIO_MAX730X_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_PCI_LIB_LEGACY: u32 = 1;
pub const CONFIG_SND_HDA_CS_DSP_CONTROLS_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK: u32 = 1;
pub const CONFIG_COMEDI_RTI800_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320ADC3XXX_MODULE: u32 = 1;
pub const CONFIG_USBPCWATCHDOG_MODULE: u32 = 1;
pub const CONFIG_INPUT_PCF50633_PMU_MODULE: u32 = 1;
pub const CONFIG_DEBUG_INFO: u32 = 1;
pub const CONFIG_KXSD9_MODULE: u32 = 1;
pub const CONFIG_SND_RME96_MODULE: u32 = 1;
pub const CONFIG_ACRN_HSM_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX2341X_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1302_MODULE: u32 = 1;
pub const CONFIG_ACPI_APEI_EINJ_MODULE: u32 = 1;
pub const CONFIG_RMI4_F3A: u32 = 1;
pub const CONFIG_RT2X00_LIB_LEDS: u32 = 1;
pub const CONFIG_FB_IOMEM_HELPERS_DEFERRED: u32 = 1;
pub const CONFIG_MD_CLUSTER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_LINK_BASELINE_MODULE: u32 = 1;
pub const CONFIG_X86_AMD_FREQ_SENSITIVITY_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1374_WDT: u32 = 1;
pub const CONFIG_POWER_RESET_MT6323: u32 = 1;
pub const CONFIG_VIDEO_CADENCE_CSI2TX_MODULE: u32 = 1;
pub const CONFIG_MAX31865_MODULE: u32 = 1;
pub const CONFIG_HID_PICOLCD_FB: u32 = 1;
pub const CONFIG_SCSI_SCAN_ASYNC: u32 = 1;
pub const CONFIG_RTC_DRV_M48T86_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BDW_RT5677_MACH_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_BLOWFISH_MODULE: u32 = 1;
pub const CONFIG_BCM54140_PHY_MODULE: u32 = 1;
pub const CONFIG_RTW89_PCI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SM3_MODULE: u32 = 1;
pub const CONFIG_SENSORS_IBM_CFFPS_MODULE: u32 = 1;
pub const CONFIG_USB_PULSE8_CEC_MODULE: u32 = 1;
pub const CONFIG_NOTIFIER_ERROR_INJECTION_MODULE: u32 = 1;
pub const CONFIG_PHYLINK_MODULE: u32 = 1;
pub const CONFIG_EFI_SOFT_RESERVE: u32 = 1;
pub const CONFIG_SENSORS_MPQ7932_REGULATOR: u32 = 1;
pub const CONFIG_SENSORS_ISL29028_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MAX8998_MODULE: u32 = 1;
pub const CONFIG_SATA_PMP: u32 = 1;
pub const CONFIG_DMA_SHARED_BUFFER: u32 = 1;
pub const CONFIG_MODULES: u32 = 1;
pub const CONFIG_MLX5_VDPA: u32 = 1;
pub const CONFIG_SND_SOC_AMD_RENOIR_MACH_MODULE: u32 = 1;
pub const CONFIG_RT2800PCI_RT35XX: u32 = 1;
pub const CONFIG_IPV6_SEG6_HMAC: u32 = 1;
pub const CONFIG_SND_SEQ_VIRMIDI_MODULE: u32 = 1;
pub const CONFIG_QCOM_SPMI_VADC_MODULE: u32 = 1;
pub const CONFIG_SND_SIMPLE_CARD_UTILS_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_ADP8870_MODULE: u32 = 1;
pub const CONFIG_IDLE_INJECT: u32 = 1;
pub const CONFIG_GPIO_TWL4030_MODULE: u32 = 1;
pub const CONFIG_NF_NAT_MODULE: u32 = 1;
pub const CONFIG_CACHESTAT_SYSCALL: u32 = 1;
pub const CONFIG_CROS_EC_SPI_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_INPUT_BEEP: u32 = 1;
pub const CONFIG_REGULATOR_TPS65023_MODULE: u32 = 1;
pub const CONFIG_CAN_MCP251XFD_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_65XX_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_ACM: u32 = 1;
pub const CONFIG_PVH: u32 = 1;
pub const CONFIG_SPI_SIFIVE_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_ACCEL_SPI_3AXIS_MODULE: u32 = 1;
pub const CONFIG_NFS_DISABLE_UDP_SUPPORT: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_COMMON_MODULE: u32 = 1;
pub const CONFIG_MAX_SKB_FRAGS: u32 = 17;
pub const CONFIG_USERFAULTFD: u32 = 1;
pub const CONFIG_MFD_DA9062_MODULE: u32 = 1;
pub const CONFIG_X86_ACPI_CPUFREQ: u32 = 1;
pub const CONFIG_SENSORS_PC87427_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_SOUNDWIRE_MODULE: u32 = 1;
pub const CONFIG_BOOT_PRINTK_DELAY: u32 = 1;
pub const CONFIG_AD5360_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ACOMP2: u32 = 1;
pub const CONFIG_SND_CA0106_MODULE: u32 = 1;
pub const CONFIG_LEDS_EXPRESSWIRE: u32 = 1;
pub const CONFIG_VIDEO_AU0828_V4L2: u32 = 1;
pub const CONFIG_DM_WRITECACHE_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_PCI_ACPI_IBM_MODULE: u32 = 1;
pub const CONFIG_VIDEO_APTINA_PLL_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADL_PCI9118_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_TIMESLICE_DURATION: u32 = 1;
pub const CONFIG_SND_SOC_ADAU7002_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83773G_MODULE: u32 = 1;
pub const CONFIG_V4L2_CCI_I2C_MODULE: u32 = 1;
pub const CONFIG_NF_NAT_TFTP_MODULE: u32 = 1;
pub const CONFIG_RTW88_8723D_MODULE: u32 = 1;
pub const CONFIG_MFD_CS42L43_SDW_MODULE: u32 = 1;
pub const CONFIG_PPS_CLIENT_GPIO_MODULE: u32 = 1;
pub const CONFIG_INET_TABLE_PERTURB_ORDER: u32 = 16;
pub const CONFIG_BACKLIGHT_BD6107_MODULE: u32 = 1;
pub const CONFIG_SND_ALS300_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_MTD: u32 = 1;
pub const CONFIG_VIRTIO_INPUT_MODULE: u32 = 1;
pub const CONFIG_IIO_SW_TRIGGER_MODULE: u32 = 1;
pub const CONFIG_HSI_CHAR_MODULE: u32 = 1;
pub const CONFIG_HID_LOGITECH_MODULE: u32 = 1;
pub const CONFIG_PROCESSOR_SELECT: u32 = 1;
pub const CONFIG_SND_NM256_MODULE: u32 = 1;
pub const CONFIG_IXGBEVF_IPSEC: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_REMBRANDT_MODULE: u32 = 1;
pub const CONFIG_MAX30102_MODULE: u32 = 1;
pub const CONFIG_NITRO_ENCLAVES_MODULE: u32 = 1;
pub const CONFIG_HW_RANDOM_VIA_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_NEWTON_MODULE: u32 = 1;
pub const CONFIG_RT2X00_LIB_USB_MODULE: u32 = 1;
pub const CONFIG_CORTINA_PHY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_HMC5843_SPI_MODULE: u32 = 1;
pub const CONFIG_IIO_BUFFER: u32 = 1;
pub const CONFIG_INPUT_RAVE_SP_PWRBUTTON_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SSM4567_MODULE: u32 = 1;
pub const CONFIG_GPIO_SCH311X_MODULE: u32 = 1;
pub const CONFIG_LIQUIDIO_VF_MODULE: u32 = 1;
pub const CONFIG_DS1803_MODULE: u32 = 1;
pub const CONFIG_DVB_B2C2_FLEXCOP_USB_MODULE: u32 = 1;
pub const CONFIG_HAVE_CONTEXT_TRACKING_USER_OFFSTACK: u32 = 1;
pub const CONFIG_INET_ESPINTCP: u32 = 1;
pub const CONFIG_COMEDI_DT2811_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AW88395_LIB_MODULE: u32 = 1;
pub const CONFIG_SENSORS_FAM15H_POWER_MODULE: u32 = 1;
pub const CONFIG_ISCSI_BOOT_SYSFS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT712_SDCA_SDW_MODULE: u32 = 1;
pub const CONFIG_TCM_IBLOCK_MODULE: u32 = 1;
pub const CONFIG_TSL4531_MODULE: u32 = 1;
pub const CONFIG_IIO_SYSFS_TRIGGER_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_MAGNETOMETER_3D_MODULE: u32 = 1;
pub const CONFIG_AD9739A_MODULE: u32 = 1;
pub const CONFIG_NFC_PN544_I2C_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_I825XX: u32 = 1;
pub const CONFIG_DMA_ENGINE_RAID: u32 = 1;
pub const CONFIG_SENSORS_NCT7904_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_FTP_MODULE: u32 = 1;
pub const CONFIG_MFD_MP2629_MODULE: u32 = 1;
pub const CONFIG_GPD_POCKET_FAN_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_PCA9450_MODULE: u32 = 1;
pub const CONFIG_ZPA2326_MODULE: u32 = 1;
pub const CONFIG_MMU_GATHER_TABLE_FREE: u32 = 1;
pub const CONFIG_PERSISTENT_KEYRINGS: u32 = 1;
pub const CONFIG_BACKLIGHT_DA903X_MODULE: u32 = 1;
pub const CONFIG_CHELSIO_T1_MODULE: u32 = 1;
pub const CONFIG_PMS7003_MODULE: u32 = 1;
pub const CONFIG_CPU5_WDT_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_TOPRO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_PWM_FAN_MODULE: u32 = 1;
pub const CONFIG_ADXL355_SPI_MODULE: u32 = 1;
pub const CONFIG_BITREVERSE: u32 = 1;
pub const CONFIG_ACPI_LEGACY_TABLES_LOOKUP: u32 = 1;
pub const CONFIG_CRASH_DUMP: u32 = 1;
pub const CONFIG_PSI: u32 = 1;
pub const CONFIG_MAX517_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_KASAN_VMALLOC: u32 = 1;
pub const CONFIG_KEYBOARD_ADC_MODULE: u32 = 1;
pub const CONFIG_IPV6_NDISC_NODETYPE: u32 = 1;
pub const CONFIG_USB_ISP1761_UDC: u32 = 1;
pub const CONFIG_BACKLIGHT_PANDORA_MODULE: u32 = 1;
pub const CONFIG_XEN_PCIDEV_BACKEND_MODULE: u32 = 1;
pub const CONFIG_DRM_GUD_MODULE: u32 = 1;
pub const CONFIG_EXTCON_AXP288_MODULE: u32 = 1;
pub const CONFIG_MFD_CS47L92: u32 = 1;
pub const CONFIG_HID_MONTEREY_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_PACKET_ENGINES: u32 = 1;
pub const CONFIG_MSI_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_GFS2_FS_LOCKING_DLM: u32 = 1;
pub const CONFIG_IIO_BACKEND_MODULE: u32 = 1;
pub const CONFIG_USB_NET_NET1080_MODULE: u32 = 1;
pub const CONFIG_LEDS_DA903X_MODULE: u32 = 1;
pub const CONFIG_INPUT_IQS269A_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_DECEXT_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_SD: u32 = 1;
pub const CONFIG_IIO_ST_GYRO_I2C_3AXIS_MODULE: u32 = 1;
pub const CONFIG_MT76x0U_MODULE: u32 = 1;
pub const CONFIG_INTEL_INT0002_VGPIO_MODULE: u32 = 1;
pub const CONFIG_USB_XHCI_PCI_MODULE: u32 = 1;
pub const CONFIG_RT2800USB_RT3573: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_VT8231_MODULE: u32 = 1;
pub const CONFIG_ATH9K_BTCOEX_SUPPORT: u32 = 1;
pub const CONFIG_TOUCHSCREEN_HYCON_HY46XX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42XX8_I2C_MODULE: u32 = 1;
pub const CONFIG_SSB_DRIVER_PCICORE_POSSIBLE: u32 = 1;
pub const CONFIG_INPUT_MOUSEDEV_PSAUX: u32 = 1;
pub const CONFIG_IIO_ST_MAGN_SPI_3AXIS_MODULE: u32 = 1;
pub const CONFIG_NFC_PN544_MODULE: u32 = 1;
pub const CONFIG_SCHED_INFO: u32 = 1;
pub const CONFIG_FUSION_CTL_MODULE: u32 = 1;
pub const CONFIG_AD74115_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_ELKHARTLAKE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_16XX_MODULE: u32 = 1;
pub const CONFIG_ATH10K_TRACING: u32 = 1;
pub const CONFIG_IP_VS_LC_MODULE: u32 = 1;
pub const CONFIG_KVM_EXTERNAL_WRITE_TRACKING: u32 = 1;
pub const CONFIG_NLS_ISO8859_3_MODULE: u32 = 1;
pub const CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE: u32 = 1;
pub const CONFIG_USB_CHIPIDEA_MODULE: u32 = 1;
pub const CONFIG_TPS6105X_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2780_MODULE: u32 = 1;
pub const CONFIG_PVPANIC_MMIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WCD939X_SDW_MODULE: u32 = 1;
pub const CONFIG_UDF_FS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_OXP_MODULE: u32 = 1;
pub const CONFIG_HAVE_KPROBES: u32 = 1;
pub const CONFIG_NET_SCH_ETF_MODULE: u32 = 1;
pub const CONFIG_NVME_FC_MODULE: u32 = 1;
pub const CONFIG_DRM_PANEL_ORISETECH_OTA5601A_MODULE: u32 = 1;
pub const CONFIG_IIO_INV_SENSORS_TIMESTAMP_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS51632_MODULE: u32 = 1;
pub const CONFIG_IGB_HWMON: u32 = 1;
pub const CONFIG_ACPI_HOTPLUG_CPU: u32 = 1;
pub const CONFIG_DEV_DAX_KMEM_MODULE: u32 = 1;
pub const CONFIG_VIDEO_RASPBERRYPI_PISP_BE_MODULE: u32 = 1;
pub const CONFIG_RIONET_RX_SIZE: u32 = 128;
pub const CONFIG_USB_SERIAL_KEYSPAN_PDA_MODULE: u32 = 1;
pub const CONFIG_BOOTTIME_TRACING: u32 = 1;
pub const CONFIG_VIDEO_CX231XX_DVB_MODULE: u32 = 1;
pub const CONFIG_RC_MAP_MODULE: u32 = 1;
pub const CONFIG_RTLWIFI_USB_MODULE: u32 = 1;
pub const CONFIG_RTL8192D_COMMON_MODULE: u32 = 1;
pub const CONFIG_CM3605_MODULE: u32 = 1;
pub const CONFIG_HAVE_PCSPKR_PLATFORM: u32 = 1;
pub const CONFIG_NLS_UCS2_UTILS_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV5693_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_CA0110_MODULE: u32 = 1;
pub const CONFIG_MEDIA_PLATFORM_DRIVERS: u32 = 1;
pub const CONFIG_RADIO_TEA5764_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TEST_SUPPORT: u32 = 1;
pub const CONFIG_SERIAL_MEN_Z135_MODULE: u32 = 1;
pub const CONFIG_MFD_AXP20X_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_CPU_RELAX_INTERCEPT: u32 = 1;
pub const CONFIG_SND_VX_LIB_MODULE: u32 = 1;
pub const CONFIG_FB_MB862XX_I2C: u32 = 1;
pub const CONFIG_HID_JABRA_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ALVIUM_CSI2_MODULE: u32 = 1;
pub const CONFIG_ASN1_ENCODER: u32 = 1;
pub const CONFIG_DVB_MB86A16_MODULE: u32 = 1;
pub const CONFIG_ACPI_CPU_FREQ_PSS: u32 = 1;
pub const CONFIG_INTEL_RAPL_MODULE: u32 = 1;
pub const CONFIG_GPIO_ELKHARTLAKE_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_MCP23S08_SPI_MODULE: u32 = 1;
pub const CONFIG_X86_CMOV: u32 = 1;
pub const CONFIG_CHELSIO_INLINE_CRYPTO: u32 = 1;
pub const CONFIG_EEPROM_93XX46_MODULE: u32 = 1;
pub const CONFIG_MTD_PHRAM_MODULE: u32 = 1;
pub const CONFIG_RTL8192E_MODULE: u32 = 1;
pub const CONFIG_ETHOC_MODULE: u32 = 1;
pub const CONFIG_LWTUNNEL: u32 = 1;
pub const CONFIG_X86_PMEM_LEGACY_DEVICE: u32 = 1;
pub const CONFIG_INTEL_WMI_THUNDERBOLT_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MT6360_MODULE: u32 = 1;
pub const CONFIG_SND_ICE1724_MODULE: u32 = 1;
pub const CONFIG_XPOWER_PMIC_OPREGION: u32 = 1;
pub const CONFIG_OMFS_FS_MODULE: u32 = 1;
pub const CONFIG_SND_RIPTIDE_MODULE: u32 = 1;
pub const CONFIG_BCM_VK_TTY: u32 = 1;
pub const CONFIG_VIDEO_SAA7185_MODULE: u32 = 1;
pub const CONFIG_RANDOMIZE_MEMORY: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_COMPONENT_MODULE: u32 = 1;
pub const CONFIG_MT7601U_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_BPF_MODULE: u32 = 1;
pub const CONFIG_IWLEGACY_MODULE: u32 = 1;
pub const CONFIG_FORCEDETH_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC_TEST_MODULE: u32 = 1;
pub const CONFIG_ACER_WIRELESS_MODULE: u32 = 1;
pub const CONFIG_PKCS7_TEST_KEY_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_IPAQ_MODULE: u32 = 1;
pub const CONFIG_RTW88_8723CS_MODULE: u32 = 1;
pub const CONFIG_INTEL_UNCORE_FREQ_CONTROL_TPMI_MODULE: u32 = 1;
pub const CONFIG_FS_ENCRYPTION_INLINE_CRYPT: u32 = 1;
pub const CONFIG_ACPI_BGRT: u32 = 1;
pub const CONFIG_ENC28J60_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SMA1303_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MT6357_MODULE: u32 = 1;
pub const CONFIG_XEN_PVHVM_GUEST: u32 = 1;
pub const CONFIG_SSB_SDIOHOST: u32 = 1;
pub const CONFIG_VIDEO_OV9734_MODULE: u32 = 1;
pub const CONFIG_MDIO_THUNDER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8960_MODULE: u32 = 1;
pub const CONFIG_8139TOO_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_XCTR_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_FUJITSU_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PCF2123_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX88_VP3054_MODULE: u32 = 1;
pub const CONFIG_TYPEC_UCSI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SDW_MOCKUP_MODULE: u32 = 1;
pub const CONFIG_BATTERY_TWL4030_MADC_MODULE: u32 = 1;
pub const CONFIG_SYSVIPC_SYSCTL: u32 = 1;
pub const CONFIG_USB_SERIAL_OMNINET_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ROHM_BU21023_MODULE: u32 = 1;
pub const CONFIG_I2C_MUX_MODULE: u32 = 1;
pub const CONFIG_DRM_PANEL: u32 = 1;
pub const CONFIG_LIB80211_MODULE: u32 = 1;
pub const CONFIG_SND_BCM63XX_I2S_WHISTLER_MODULE: u32 = 1;
pub const CONFIG_PATA_CMD64X_MODULE: u32 = 1;
pub const CONFIG_AIC7XXX_CMDS_PER_DEVICE: u32 = 8;
pub const CONFIG_FANOTIFY: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_GRAPH_RETVAL: u32 = 1;
pub const CONFIG_LCD_L4F00242T03_MODULE: u32 = 1;
pub const CONFIG_DMADEVICES: u32 = 1;
pub const CONFIG_SND_SOC_SIMPLE_MUX_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_YEAH_MODULE: u32 = 1;
pub const CONFIG_SENSORS_APPLESMC_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_PASID: u32 = 1;
pub const CONFIG_RTC_DRV_PCF50633_MODULE: u32 = 1;
pub const CONFIG_FS_MBCACHE: u32 = 1;
pub const CONFIG_LEDS_PCA995X_MODULE: u32 = 1;
pub const CONFIG_RTW88_8821CU_MODULE: u32 = 1;
pub const CONFIG_ZPA2326_I2C_MODULE: u32 = 1;
pub const CONFIG_UEFI_CPER_X86: u32 = 1;
pub const CONFIG_GPIO_REGMAP_MODULE: u32 = 1;
pub const CONFIG_BCM87XX_PHY_MODULE: u32 = 1;
pub const CONFIG_INIT_ON_ALLOC_DEFAULT_ON: u32 = 1;
pub const CONFIG_SQUASHFS_FRAGMENT_CACHE_SIZE: u32 = 3;
pub const CONFIG_TPS68470_PMIC_OPREGION: u32 = 1;
pub const CONFIG_SND_SOC_XILINX_I2S_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_FC3W_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_PRESS_MODULE: u32 = 1;
pub const CONFIG_AXP20X_POWER_MODULE: u32 = 1;
pub const CONFIG_KSM: u32 = 1;
pub const CONFIG_USB_UAS_MODULE: u32 = 1;
pub const CONFIG_CAN_RX_OFFLOAD: u32 = 1;
pub const CONFIG_PHYSICAL_ALIGN: u32 = 2097152;
pub const CONFIG_SND_HWDEP_MODULE: u32 = 1;
pub const CONFIG_AHCI_DWC_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_APPLESPI_MODULE: u32 = 1;
pub const CONFIG_RC_XBOX_DVD_MODULE: u32 = 1;
pub const CONFIG_STACK_VALIDATION: u32 = 1;
pub const CONFIG_CRYPTO_LIB_SHA256: u32 = 1;
pub const CONFIG_IIO_ST_LSM6DSX_MODULE: u32 = 1;
pub const CONFIG_AF_RXRPC_IPV6: u32 = 1;
pub const CONFIG_LZ4HC_COMPRESS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5677_SPI_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_DMA: u32 = 1;
pub const CONFIG_BT_HCIBTUSB_BCM: u32 = 1;
pub const CONFIG_EDAC_I10NM_MODULE: u32 = 1;
pub const CONFIG_NET_IP_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_AD5592R_MODULE: u32 = 1;
pub const CONFIG_FXAS21002C_I2C_MODULE: u32 = 1;
pub const CONFIG_I2C_DESIGNWARE_PCI_MODULE: u32 = 1;
pub const CONFIG_HAVE_NOINSTR_HACK: u32 = 1;
pub const CONFIG_SCSI_BNX2X_FCOE_MODULE: u32 = 1;
pub const CONFIG_HAVE_PCI: u32 = 1;
pub const CONFIG_DVB_TDA665x_MODULE: u32 = 1;
pub const CONFIG_REGMAP_SPMI_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_QM1D1C0042_MODULE: u32 = 1;
pub const CONFIG_GENERIC_CPU: u32 = 1;
pub const CONFIG_HDLC_CISCO_MODULE: u32 = 1;
pub const CONFIG_DM_CLONE_MODULE: u32 = 1;
pub const CONFIG_MFD_CS40L50_SPI_MODULE: u32 = 1;
pub const CONFIG_AD7124_MODULE: u32 = 1;
pub const CONFIG_SERIAL_ALTERA_UART_MODULE: u32 = 1;
pub const CONFIG_INTEGRITY_MACHINE_KEYRING: u32 = 1;
pub const CONFIG_MLXSW_I2C_MODULE: u32 = 1;
pub const CONFIG_NEED_SG_DMA_FLAGS: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_GLK_RT5682_MAX98357A_MACH_MODULE: u32 = 1;
pub const CONFIG_MISDN_INFINEON_MODULE: u32 = 1;
pub const CONFIG_IP_NF_TARGET_SYNPROXY_MODULE: u32 = 1;
pub const CONFIG_TAHVO_USB_HOST_BY_DEFAULT: u32 = 1;
pub const CONFIG_USB_KEENE_MODULE: u32 = 1;
pub const CONFIG_SURFACE_HID_MODULE: u32 = 1;
pub const CONFIG_RC_DECODERS: u32 = 1;
pub const CONFIG_MT76x2_COMMON_MODULE: u32 = 1;
pub const CONFIG_BME680_SPI_MODULE: u32 = 1;
pub const CONFIG_AD7380_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_SMEM_MODULE: u32 = 1;
pub const CONFIG_I2C_CHT_WC_MODULE: u32 = 1;
pub const CONFIG_DRM_ACCEL_HABANALABS_MODULE: u32 = 1;
pub const CONFIG_INTEL_MEI_VSC_MODULE: u32 = 1;
pub const CONFIG_GP2AP002_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM179X_MODULE: u32 = 1;
pub const CONFIG_MTD_SBC_GXX_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MT6311_MODULE: u32 = 1;
pub const CONFIG_PATA_TRIFLEX_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCI_DRIVERS_MODULE: u32 = 1;
pub const CONFIG_ACRN_GUEST: u32 = 1;
pub const CONFIG_RTW89_8852B_COMMON_MODULE: u32 = 1;
pub const CONFIG_MFD_LP8788: u32 = 1;
pub const CONFIG_PCMCIA_FDOMAIN_MODULE: u32 = 1;
pub const CONFIG_ISL29020_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_CS35L41_SPI_MODULE: u32 = 1;
pub const CONFIG_6PACK_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_802_3_MODULE: u32 = 1;
pub const CONFIG_X86_P4_CLOCKMOD_MODULE: u32 = 1;
pub const CONFIG_INTEL_IDMA64_MODULE: u32 = 1;
pub const CONFIG_ACPI_CONTAINER: u32 = 1;
pub const CONFIG_FB_3DFX_MODULE: u32 = 1;
pub const CONFIG_SFC_FALCON_MTD: u32 = 1;
pub const CONFIG_CEC_GPIO_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_M920X_MODULE: u32 = 1;
pub const CONFIG_DVB_TDA10023_MODULE: u32 = 1;
pub const CONFIG_MEDIATEK_MT6370_ADC_MODULE: u32 = 1;
pub const CONFIG_CHR_DEV_SG: u32 = 1;
pub const CONFIG_RTC_DRV_RV3032_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_HW_PTE_YOUNG: u32 = 1;
pub const CONFIG_PINCTRL_CY8C95X0_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_COLIBRI_VF50_MODULE: u32 = 1;
pub const CONFIG_MMU: u32 = 1;
pub const CONFIG_QTNFMAC_PCIE_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_HIRSCHMANN_HELLCREEK_MODULE: u32 = 1;
pub const CONFIG_SSB_DRIVER_PCICORE: u32 = 1;
pub const CONFIG_BACKLIGHT_KTD2801_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MT2131_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_SOCKET_MODULE: u32 = 1;
pub const CONFIG_HID_NVIDIA_SHIELD_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_MH_MODULE: u32 = 1;
pub const CONFIG_SECURITY: u32 = 1;
pub const CONFIG_SND_SOC_TAS2781_FMWLIB_MODULE: u32 = 1;
pub const CONFIG_DRM_MIPI_DSI: u32 = 1;
pub const CONFIG_FS_ENCRYPTION: u32 = 1;
pub const CONFIG_UV_SYSFS_MODULE: u32 = 1;
pub const CONFIG_IR_XMP_DECODER_MODULE: u32 = 1;
pub const CONFIG_MEDIA_COMMON_OPTIONS: u32 = 1;
pub const CONFIG_USB_RAW_GADGET_MODULE: u32 = 1;
pub const CONFIG_MSCC_OCELOT_SWITCH_LIB_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_LTC3676_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_RNG2: u32 = 1;
pub const CONFIG_SENSORS_MP5920_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_2_MODULE: u32 = 1;
pub const CONFIG_FB_HYPERV_MODULE: u32 = 1;
pub const CONFIG_HID_TIVO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8737_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2781_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_RV_RT5682_MACH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV7640_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK4118_MODULE: u32 = 1;
pub const CONFIG_IPV6_GRE_MODULE: u32 = 1;
pub const CONFIG_DRM_XE_FORCE_PROBE: &[u8; 1] = b"\0";
pub const CONFIG_SND_HDA_I915: u32 = 1;
pub const CONFIG_W1_MASTER_SGI_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_GPIO_MODULE: u32 = 1;
pub const CONFIG_MUX_ADGS1408_MODULE: u32 = 1;
pub const CONFIG_WILC1000_SDIO_MODULE: u32 = 1;
pub const CONFIG_NET_FOU_IP_TUNNELS: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_EHL_RT5660_MACH_MODULE: u32 = 1;
pub const CONFIG_MTD_ESB2ROM_MODULE: u32 = 1;
pub const CONFIG_AS_SHA256_NI: u32 = 1;
pub const CONFIG_DRM_LOAD_EDID_FIRMWARE: u32 = 1;
pub const CONFIG_AS_SHA1_NI: u32 = 1;
pub const CONFIG_CAIF_MODULE: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_REGS: u32 = 1;
pub const CONFIG_INPUT_PWM_VIBRA_MODULE: u32 = 1;
pub const CONFIG_MINIX_FS_MODULE: u32 = 1;
pub const CONFIG_SND_USB_AUDIO_MODULE: u32 = 1;
pub const CONFIG_RC_CORE_MODULE: u32 = 1;
pub const CONFIG_BMP280_SPI_MODULE: u32 = 1;
pub const CONFIG_USB_CDNS3_PCI_WRAP_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ASUS_EC_MODULE: u32 = 1;
pub const CONFIG_HAMACHI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DRBG_CTR: u32 = 1;
pub const CONFIG_XEN_BLKDEV_FRONTEND: u32 = 1;
pub const CONFIG_NET_SCH_QFQ_MODULE: u32 = 1;
pub const CONFIG_MANTIS_CORE_MODULE: u32 = 1;
pub const CONFIG_I2C_ZHAOXIN_MODULE: u32 = 1;
pub const CONFIG_ASUS_NB_WMI_MODULE: u32 = 1;
pub const CONFIG_DRM_AMD_DC_FP: u32 = 1;
pub const CONFIG_SPI_DESIGNWARE_MODULE: u32 = 1;
pub const CONFIG_ND_BTT_MODULE: u32 = 1;
pub const CONFIG_CAN_KVASER_PCIEFD_MODULE: u32 = 1;
pub const CONFIG_USB_CDNSP_PCI_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_ZYTRONIC: u32 = 1;
pub const CONFIG_CRYPTO_AES_NI_INTEL_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PCAP_MODULE: u32 = 1;
pub const CONFIG_NFT_OSF_MODULE: u32 = 1;
pub const CONFIG_BME680_I2C_MODULE: u32 = 1;
pub const CONFIG_MOUSE_SYNAPTICS_USB_MODULE: u32 = 1;
pub const CONFIG_MFD_CROS_EC_DEV_MODULE: u32 = 1;
pub const CONFIG_RESET_ATTACK_MITIGATION: u32 = 1;
pub const CONFIG_GPIO_AMD8111_MODULE: u32 = 1;
pub const CONFIG_VCAP: u32 = 1;
pub const CONFIG_CFG80211_DEFAULT_PS: u32 = 1;
pub const CONFIG_GPIO_TQMX86_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT722_SDCA_SDW_MODULE: u32 = 1;
pub const CONFIG_BT_LE_L2CAP_ECRED: u32 = 1;
pub const CONFIG_ADMV1014_MODULE: u32 = 1;
pub const CONFIG_MT76_CONNAC_LIB_MODULE: u32 = 1;
pub const CONFIG_CAN_KVASER_PCI_MODULE: u32 = 1;
pub const CONFIG_PSE_TPS23881_MODULE: u32 = 1;
pub const CONFIG_SND_SEQUENCER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TAS2781_I2C_MODULE: u32 = 1;
pub const CONFIG_SOUNDWIRE_MODULE: u32 = 1;
pub const CONFIG_OPENVSWITCH_GENEVE_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_PRETIMEOUT_GOV: u32 = 1;
pub const CONFIG_XILLYBUS_MODULE: u32 = 1;
pub const CONFIG_MTD_SCB2_FLASH_MODULE: u32 = 1;
pub const CONFIG_NET_TC_SKB_EXT: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MEDIATEK: u32 = 1;
pub const CONFIG_CAN_CALC_BITTIMING: u32 = 1;
pub const CONFIG_IPC_NS: u32 = 1;
pub const CONFIG_RTC_DRV_DS1390_MODULE: u32 = 1;
pub const CONFIG_COMEDI_RTI802_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_VIRTUAL: u32 = 1;
pub const CONFIG_HID_PID: u32 = 1;
pub const CONFIG_SND_SOC_FSL_XCVR_MODULE: u32 = 1;
pub const CONFIG_IOMMU_SUPPORT: u32 = 1;
pub const CONFIG_PCI_EPF_VNTB_MODULE: u32 = 1;
pub const CONFIG_MUX_GPIO_MODULE: u32 = 1;
pub const CONFIG_IPMI_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_NAT_MODULE: u32 = 1;
pub const CONFIG_BROADCOM_PHY_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_PALMAS_MODULE: u32 = 1;
pub const CONFIG_OVERLAY_FS_XINO_AUTO: u32 = 1;
pub const CONFIG_USB_CHIPIDEA_MSM_MODULE: u32 = 1;
pub const CONFIG_VDPA_SIM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_FSL_ASRC_MODULE: u32 = 1;
pub const CONFIG_DPLL: u32 = 1;
pub const CONFIG_SND_SOC_MAX98357A_MODULE: u32 = 1;
pub const CONFIG_HID_MACALLY_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_KBIC_MODULE: u32 = 1;
pub const CONFIG_VFIO_IOMMU_TYPE1_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_ADI_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_PURGATORY: u32 = 1;
pub const CONFIG_MEMBARRIER: u32 = 1;
pub const CONFIG_SND_SOC_WM8961_MODULE: u32 = 1;
pub const CONFIG_SENSORS_DME1737_MODULE: u32 = 1;
pub const CONFIG_ENERGY_MODEL: u32 = 1;
pub const CONFIG_B43_BCMA: u32 = 1;
pub const CONFIG_SND_SOC_TAS5720_MODULE: u32 = 1;
pub const CONFIG_HID_GOOGLE_HAMMER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_COFFEELAKE_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TLV320AIC23B_MODULE: u32 = 1;
pub const CONFIG_CHARGER_BQ2515X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS4341_MODULE: u32 = 1;
pub const CONFIG_EFI_MIXED: u32 = 1;
pub const CONFIG_PCI_IOV: u32 = 1;
pub const CONFIG_AXP288_FUEL_GAUGE_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_NOVATEK_NVT_TS_MODULE: u32 = 1;
pub const CONFIG_USB_VL600_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP5990_MODULE: u32 = 1;
pub const CONFIG_CPU_IDLE_GOV_MENU: u32 = 1;
pub const CONFIG_INV_ICM42600_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_ISHTP_MODULE: u32 = 1;
pub const CONFIG_NETKIT: u32 = 1;
pub const CONFIG_SENSORS_XDP710_MODULE: u32 = 1;
pub const CONFIG_GPIO_KEMPLD_MODULE: u32 = 1;
pub const CONFIG_GPIO_PCA9570_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_CS_MODULE: u32 = 1;
pub const CONFIG_JFFS2_FS_DEBUG: u32 = 0;
pub const CONFIG_TYPEC_TCPCI_MT6370_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_HELPER_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ARCH_HAVE_LIB_CHACHA_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_IPOIB_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_FUJITSU: u32 = 1;
pub const CONFIG_I2C_SI4713_MODULE: u32 = 1;
pub const CONFIG_I40E_DCB: u32 = 1;
pub const CONFIG_X86_16BIT: u32 = 1;
pub const CONFIG_SND_SOC_WM8974_MODULE: u32 = 1;
pub const CONFIG_MACHZ_WDT_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_ILI9325_MODULE: u32 = 1;
pub const CONFIG_VIDEO_LM3560_MODULE: u32 = 1;
pub const CONFIG_EXTCON_MAX14577_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_MCT_U232_MODULE: u32 = 1;
pub const CONFIG_SND_FIREWIRE_MOTU_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV2640_MODULE: u32 = 1;
pub const CONFIG_SECURITY_TOMOYO_ACTIVATION_TRIGGER: &[u8; 11] = b"/sbin/init\0";
pub const CONFIG_VSOCKETS_MODULE: u32 = 1;
pub const CONFIG_SYSTEM_REVOCATION_LIST: u32 = 1;
pub const CONFIG_CHECK_SIGNATURE: u32 = 1;
pub const CONFIG_KEYBOARD_CYPRESS_SF_MODULE: u32 = 1;
pub const CONFIG_QED_OOO: u32 = 1;
pub const CONFIG_MEDIA_DIGITAL_TV_SUPPORT: u32 = 1;
pub const CONFIG_USB_CONFIGFS_RNDIS: u32 = 1;
pub const CONFIG_SENSORS_EMC2305_MODULE: u32 = 1;
pub const CONFIG_MXC4005_MODULE: u32 = 1;
pub const CONFIG_X86_ACPI_CPUFREQ_CPB: u32 = 1;
pub const CONFIG_CARL9170_HWRNG: u32 = 1;
pub const CONFIG_NET_VENDOR_NETRONOME: u32 = 1;
pub const CONFIG_NET_CLS_CGROUP_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DRBG_MENU: u32 = 1;
pub const CONFIG_CLS_U32_MARK: u32 = 1;
pub const CONFIG_ARCH_HAS_PARANOID_L1D_FLUSH: u32 = 1;
pub const CONFIG_SCSI_SNIC_MODULE: u32 = 1;
pub const CONFIG_DVB_LNBH25_MODULE: u32 = 1;
pub const CONFIG_BATTERY_CW2015_MODULE: u32 = 1;
pub const CONFIG_KEBA_CP500_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT1308_MODULE: u32 = 1;
pub const CONFIG_PCI_XEN: u32 = 1;
pub const CONFIG_SND_SOC_CS42L52_MODULE: u32 = 1;
pub const CONFIG_MTD_ONENAND_VERIFY_WRITE: u32 = 1;
pub const CONFIG_MT7996E_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_THERM_MODULE: u32 = 1;
pub const CONFIG_MAX30100_MODULE: u32 = 1;
pub const CONFIG_VHOST_IOTLB_MODULE: u32 = 1;
pub const CONFIG_IPMI_DMI_DECODE: u32 = 1;
pub const CONFIG_SND_SOC_WM8524_MODULE: u32 = 1;
pub const CONFIG_CW1200_WLAN_SPI_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC: u32 = 1;
pub const CONFIG_HSA_AMD: u32 = 1;
pub const CONFIG_SENSORS_ADS7828_MODULE: u32 = 1;
pub const CONFIG_LCD_VGG2432A4_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_GEMINILAKE_MODULE: u32 = 1;
pub const CONFIG_BMI323_I2C_MODULE: u32 = 1;
pub const CONFIG_IIO_MS_SENSORS_I2C_MODULE: u32 = 1;
pub const CONFIG_PCIE_DW_PLAT_EP: u32 = 1;
pub const CONFIG_USB_DSBR_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_KASAN_SW_TAGS: u32 = 1;
pub const CONFIG_CIFS_ALLOW_INSECURE_LEGACY: u32 = 1;
pub const CONFIG_EDAC_IGEN6_MODULE: u32 = 1;
pub const CONFIG_ATH11K_MODULE: u32 = 1;
pub const CONFIG_THERMAL_HWMON: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_CPU: u32 = 1;
pub const CONFIG_GPIO_JANZ_TTL_MODULE: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL: u32 = 1;
pub const CONFIG_MLX5_EN_ARFS: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZ4: u32 = 1;
pub const CONFIG_PCI_QUIRKS: u32 = 1;
pub const CONFIG_MFD_CS40L50_I2C_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_BRCM_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_FQ_CODEL_MODULE: u32 = 1;
pub const CONFIG_IPV6_ILA_MODULE: u32 = 1;
pub const CONFIG_WM831X_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_PLX_DMA_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_FUNGIBLE: u32 = 1;
pub const CONFIG_PATA_MARVELL_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_NANDSIM_MODULE: u32 = 1;
pub const CONFIG_GENERIC_PINCONF: u32 = 1;
pub const CONFIG_MOUSE_PS2_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_SI2157_MODULE: u32 = 1;
pub const CONFIG_DW_DMAC_PCI_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_DA9034_MODULE: u32 = 1;
pub const CONFIG_BLK_CGROUP_IOPRIO: u32 = 1;
pub const CONFIG_IPACK_BUS_MODULE: u32 = 1;
pub const CONFIG_SCSI_FLASHPOINT: u32 = 1;
pub const CONFIG_MD: u32 = 1;
pub const CONFIG_EFI_DEV_PATH_PARSER: u32 = 1;
pub const CONFIG_I2C_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_PCPU_DEV_REFCNT: u32 = 1;
pub const CONFIG_SPI_SLAVE_SYSTEM_CONTROL_MODULE: u32 = 1;
pub const CONFIG_PVPANIC: u32 = 1;
pub const CONFIG_I40E_MODULE: u32 = 1;
pub const CONFIG_IR_ITE_CIR_MODULE: u32 = 1;
pub const CONFIG_MFD_CS47L90: u32 = 1;
pub const CONFIG_RTC_DRV_DS1347_MODULE: u32 = 1;
pub const CONFIG_MTRR_SANITIZER_SPARE_REG_NR_DEFAULT: u32 = 1;
pub const CONFIG_EDAC_ATOMIC_SCRUB: u32 = 1;
pub const CONFIG_SND_SOC_RT5631_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_AMAZON: u32 = 1;
pub const CONFIG_MODULE_UNLOAD: u32 = 1;
pub const CONFIG_NET_VENDOR_INTEL: u32 = 1;
pub const CONFIG_IGB_DCA: u32 = 1;
pub const CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE: u32 = 1;
pub const CONFIG_DVB_TDA8261_MODULE: u32 = 1;
pub const CONFIG_ATH9K_RFKILL: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKL_NAU88L25_MAX98357A_MACH_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MENF21BMC_HWMON_MODULE: u32 = 1;
pub const CONFIG_BATTERY_MAX17042_MODULE: u32 = 1;
pub const CONFIG_XEN_XENBUS_FRONTEND: u32 = 1;
pub const CONFIG_FPGA_DFL_FME_MGR_MODULE: u32 = 1;
pub const CONFIG_CONSOLE_LOGLEVEL_DEFAULT: u32 = 7;
pub const CONFIG_CADENCE_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_RT2800USB_RT55XX: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_LTLK_MODULE: u32 = 1;
pub const CONFIG_DVB_DIB7000M_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_T613_MODULE: u32 = 1;
pub const CONFIG_VITESSE_PHY_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_BIC_MODULE: u32 = 1;
pub const CONFIG_RTLLIB_CRYPTO_TKIP_MODULE: u32 = 1;
pub const CONFIG_IGBVF_MODULE: u32 = 1;
pub const CONFIG_PAGE_COUNTER: u32 = 1;
pub const CONFIG_CONSOLE_TRANSLATIONS: u32 = 1;
pub const CONFIG_IP_VS_RR_MODULE: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_POWERSAVE: u32 = 1;
pub const CONFIG_CRYPTO_TWOFISH_COMMON_MODULE: u32 = 1;
pub const CONFIG_USB_ACM_MODULE: u32 = 1;
pub const CONFIG_DVB_CX22700_MODULE: u32 = 1;
pub const CONFIG_SENSORS_IR36021_MODULE: u32 = 1;
pub const CONFIG_FB_S1D13XXX_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_OPEN_TIMEOUT: u32 = 0;
pub const CONFIG_GPIO_LATCH_MODULE: u32 = 1;
pub const CONFIG_BUILDTIME_TABLE_SORT: u32 = 1;
pub const CONFIG_BATTERY_DS2760_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_5_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_VP702X_MODULE: u32 = 1;
pub const CONFIG_E1000E_MODULE: u32 = 1;
pub const CONFIG_HAVE_CONTEXT_TRACKING_USER: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_VANGOGH_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_DRIVERS_MODULE: u32 = 1;
pub const CONFIG_BINFMT_SCRIPT: u32 = 1;
pub const CONFIG_CPU_IDLE_GOV_LADDER: u32 = 1;
pub const CONFIG_SENSORS_CORSAIR_PSU_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_COPY_MC: u32 = 1;
pub const CONFIG_MD_RAID1_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_NET: u32 = 1;
pub const CONFIG_PINMUX: u32 = 1;
pub const CONFIG_REGULATOR_PV88060_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SIG2: u32 = 1;
pub const CONFIG_LCD_ILI9320_MODULE: u32 = 1;
pub const CONFIG_XEN_MEMORY_HOTPLUG_LIMIT: u32 = 512;
pub const CONFIG_SND_SOC_FSL_AUDMIX_MODULE: u32 = 1;
pub const CONFIG_MAC80211_MODULE: u32 = 1;
pub const CONFIG_ATLAS_EZO_SENSOR_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCM3724_MODULE: u32 = 1;
pub const CONFIG_DVB_STV0910_MODULE: u32 = 1;
pub const CONFIG_THRUSTMASTER_FF: u32 = 1;
pub const CONFIG_SND_MIXER_OSS_MODULE: u32 = 1;
pub const CONFIG_SND_PCSP_MODULE: u32 = 1;
pub const CONFIG_RTW88_8822CU_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8741_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_CML_RT1011_RT5682_MACH_MODULE: u32 = 1;
pub const CONFIG_MYRI10GE_DCA: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TDA18271_MODULE: u32 = 1;
pub const CONFIG_MULTIUSER: u32 = 1;
pub const CONFIG_RETU_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_842_MODULE: u32 = 1;
pub const CONFIG_USB_AN2720: u32 = 1;
pub const CONFIG_FONT_8x16: u32 = 1;
pub const CONFIG_HWLAT_TRACER: u32 = 1;
pub const CONFIG_SND_USB_US122L_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_3C574_MODULE: u32 = 1;
pub const CONFIG_EISA_VLB_PRIMING: u32 = 1;
pub const CONFIG_LIBERTAS_MODULE: u32 = 1;
pub const CONFIG_NLS_MAC_ROMAN_MODULE: u32 = 1;
pub const CONFIG_RTW88_8822C_MODULE: u32 = 1;
pub const CONFIG_PPP: u32 = 1;
pub const CONFIG_ZOPT2201_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_CUSTOM_INTEL_HINGE_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_IRQ_ROUTING: u32 = 1;
pub const CONFIG_NMI_CHECK_CPU: u32 = 1;
pub const CONFIG_NETFILTER_SKIP_EGRESS: u32 = 1;
pub const CONFIG_TOOLS_SUPPORT_RELR: u32 = 1;
pub const CONFIG_SND_SOC_WM8804_SPI_MODULE: u32 = 1;
pub const CONFIG_SPMI_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_IGMP_SNOOPING: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_AVC_STATS: u32 = 1;
pub const CONFIG_MTD_JEDECPROBE_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_JL2005BCD_MODULE: u32 = 1;
pub const CONFIG_VCNL4035_MODULE: u32 = 1;
pub const CONFIG_I2C_DLN2_MODULE: u32 = 1;
pub const CONFIG_USB_LINK_LAYER_TEST_MODULE: u32 = 1;
pub const CONFIG_SND_USB_TONEPORT_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_FILTER_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SIMD_MODULE: u32 = 1;
pub const CONFIG_HID_SAITEK_MODULE: u32 = 1;
pub const CONFIG_CAN_UCAN_MODULE: u32 = 1;
pub const CONFIG_PATA_PCMCIA_MODULE: u32 = 1;
pub const CONFIG_IP_NF_ARPTABLES_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_I2C_MODULE: u32 = 1;
pub const CONFIG_HID_VIVALDI_MODULE: u32 = 1;
pub const CONFIG_MHI_WWAN_CTRL_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_MARK_MODULE: u32 = 1;
pub const CONFIG_EDAC_I3200_MODULE: u32 = 1;
pub const CONFIG_CHARGER_GPIO_MODULE: u32 = 1;
pub const CONFIG_SPI_SC18IS602_MODULE: u32 = 1;
pub const CONFIG_SCSI_DH: u32 = 1;
pub const CONFIG_HID_ACRUX_MODULE: u32 = 1;
pub const CONFIG_MFD_RETU_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_LENGTH_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_M41T80_MODULE: u32 = 1;
pub const CONFIG_TMPFS_XATTR: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_GUNZE: u32 = 1;
pub const CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK: u32 = 1;
pub const CONFIG_SND_SOC_WM8962_MODULE: u32 = 1;
pub const CONFIG_BRCMFMAC_PCIE: u32 = 1;
pub const CONFIG_TCG_INFINEON_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_BEAGLEPLAY_MODULE: u32 = 1;
pub const CONFIG_DRM_XE_TIMESLICE_MIN: u32 = 1;
pub const CONFIG_RTC_DRV_FTRTC010_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1307_CENTURY: u32 = 1;
pub const CONFIG_DVB_BCM3510_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_AD7877_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADAU1761_SPI_MODULE: u32 = 1;
pub const CONFIG_BLOCK: u32 = 1;
pub const CONFIG_CYPRESS_FIRMWARE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AIO_AIO12_8_MODULE: u32 = 1;
pub const CONFIG_PCI_LABEL: u32 = 1;
pub const CONFIG_SLICOSS_MODULE: u32 = 1;
pub const CONFIG_TWL6040_CORE: u32 = 1;
pub const CONFIG_SND_LX6464ES_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_FSL_MQS_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_OPTIONAL: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY_MEMORY_BLOCKS: u32 = 64;
pub const CONFIG_DM_BUFIO_MODULE: u32 = 1;
pub const CONFIG_V4L2_FLASH_LED_CLASS_MODULE: u32 = 1;
pub const CONFIG_HAVE_IMA_KEXEC: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_TXPRT_MODULE: u32 = 1;
pub const CONFIG_DEBUG_MISC: u32 = 1;
pub const CONFIG_NET_VENDOR_3COM: u32 = 1;
pub const CONFIG_MPTCP: u32 = 1;
pub const CONFIG_TYPEC_TCPCI_MAXIM_MODULE: u32 = 1;
pub const CONFIG_CPU_FREQ: u32 = 1;
pub const CONFIG_USB_G_SERIAL_MODULE: u32 = 1;
pub const CONFIG_FAT_DEFAULT_IOCHARSET: &[u8; 10] = b"iso8859-1\0";
pub const CONFIG_SND_SOC_MAX98388_MODULE: u32 = 1;
pub const CONFIG_SENSORS_DS620_MODULE: u32 = 1;
pub const CONFIG_NFSD_PNFS: u32 = 1;
pub const CONFIG_TTY: u32 = 1;
pub const CONFIG_USB_GR_UDC_MODULE: u32 = 1;
pub const CONFIG_HPET_EMULATE_RTC: u32 = 1;
pub const CONFIG_HAVE_UNSTABLE_SCHED_CLOCK: u32 = 1;
pub const CONFIG_DVB_USB_ZD1301_MODULE: u32 = 1;
pub const CONFIG_DECOMPRESS_LZMA: u32 = 1;
pub const CONFIG_DVB_MANTIS_MODULE: u32 = 1;
pub const CONFIG_IR_IGUANA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK4375_MODULE: u32 = 1;
pub const CONFIG_IPW2200_MONITOR: u32 = 1;
pub const CONFIG_842_DECOMPRESS_MODULE: u32 = 1;
pub const CONFIG_FEALNX_MODULE: u32 = 1;
pub const CONFIG_I40EVF_MODULE: u32 = 1;
pub const CONFIG_CFS_BANDWIDTH: u32 = 1;
pub const CONFIG_LEDS_LM3530_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_CYPRESS: u32 = 1;
pub const CONFIG_B43_BCMA_PIO: u32 = 1;
pub const CONFIG_ACPI_TAD_MODULE: u32 = 1;
pub const CONFIG_SYMBOLIC_ERRNAME: u32 = 1;
pub const CONFIG_SENSORS_LINEAGE_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX88_ENABLE_VP3054: u32 = 1;
pub const CONFIG_CAN_PEAK_USB_MODULE: u32 = 1;
pub const CONFIG_LEDS_AW200XX_MODULE: u32 = 1;
pub const CONFIG_COMEDI_FL512_MODULE: u32 = 1;
pub const CONFIG_QUEUED_SPINLOCKS: u32 = 1;
pub const CONFIG_SENSORS_LTC2978_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_INT128: u32 = 1;
pub const CONFIG_TCP_CONG_BBR_MODULE: u32 = 1;
pub const CONFIG_RV_REACT_PANIC: u32 = 1;
pub const CONFIG_PATA_PARPORT_ATEN_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_MD4_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_CONSOLE: u32 = 1;
pub const CONFIG_LOCK_MM_AND_FIND_VMA: u32 = 1;
pub const CONFIG_SOC_BUS: u32 = 1;
pub const CONFIG_JOYSTICK_WALKERA0701_MODULE: u32 = 1;
pub const CONFIG_MODULE_SIG_HASH: &[u8; 7] = b"sha512\0";
pub const CONFIG_FB_VT8623_MODULE: u32 = 1;
pub const CONFIG_NETWORK_PHY_TIMESTAMPING: u32 = 1;
pub const CONFIG_APPLICOM_MODULE: u32 = 1;
pub const CONFIG_PROC_KCORE: u32 = 1;
pub const CONFIG_ARCH_USE_CMPXCHG_LOCKREF: u32 = 1;
pub const CONFIG_EISA: u32 = 1;
pub const CONFIG_FW_LOADER_DEBUG: u32 = 1;
pub const CONFIG_CRYPTO_GHASH_CLMUL_NI_INTEL_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX25840_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_GPIO_MODULE: u32 = 1;
pub const CONFIG_XFS_POSIX_ACL: u32 = 1;
pub const CONFIG_BLK_MQ_STACKING: u32 = 1;
pub const CONFIG_TEST_POWER_MODULE: u32 = 1;
pub const CONFIG_SFC_SIENA_MCDI_MON: u32 = 1;
pub const CONFIG_CHARGER_SURFACE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NZXT_KRAKEN2_MODULE: u32 = 1;
pub const CONFIG_CIO_DAC_MODULE: u32 = 1;
pub const CONFIG_AOSONG_AGS02MA_MODULE: u32 = 1;
pub const CONFIG_HAVE_TRUSTED_KEYS: u32 = 1;
pub const CONFIG_SND_SOC_ES8326_MODULE: u32 = 1;
pub const CONFIG_MERAKI_MX100_MODULE: u32 = 1;
pub const CONFIG_CARL9170_LEDS: u32 = 1;
pub const CONFIG_NF_DUP_NETDEV_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_CSUM_MODULE: u32 = 1;
pub const CONFIG_AD5593R_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TDA9887_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_CHARDEV_MODULE: u32 = 1;
pub const CONFIG_SCSI_UFSHCD_MODULE: u32 = 1;
pub const CONFIG_POWERCAP: u32 = 1;
pub const CONFIG_CHARGER_RT5033_MODULE: u32 = 1;
pub const CONFIG_IOMMUFD_MODULE: u32 = 1;
pub const CONFIG_TIMERLAT_TRACER: u32 = 1;
pub const CONFIG_MICROCHIP_T1_PHY_MODULE: u32 = 1;
pub const CONFIG_INET6_IPCOMP_MODULE: u32 = 1;
pub const CONFIG_ADDRESS_MASKING: u32 = 1;
pub const CONFIG_CRYPTO_DEV_SP_CCP: u32 = 1;
pub const CONFIG_TOUCHSCREEN_EKTF2127_MODULE: u32 = 1;
pub const CONFIG_FW_LOADER_SYSFS: u32 = 1;
pub const CONFIG_NFT_COMPAT_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_XRS700X_MODULE: u32 = 1;
pub const CONFIG_WEXT_SPY: u32 = 1;
pub const CONFIG_HAVE_KERNEL_XZ: u32 = 1;
pub const CONFIG_RTC_DRV_CMOS: u32 = 1;
pub const CONFIG_CRYPTO_ALGAPI2: u32 = 1;
pub const CONFIG_SQUASHFS_ZSTD: u32 = 1;
pub const CONFIG_SCSI_PMCRAID_MODULE: u32 = 1;
pub const CONFIG_FB_METRONOME_MODULE: u32 = 1;
pub const CONFIG_BCM7XXX_PHY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SBTSI_MODULE: u32 = 1;
pub const CONFIG_CPU_MITIGATIONS: u32 = 1;
pub const CONFIG_TOUCHSCREEN_WM97XX_MODULE: u32 = 1;
pub const CONFIG_OCFS2_DEBUG_MASKLOG: u32 = 1;
pub const CONFIG_MEDIA_TUNER_R820T_MODULE: u32 = 1;
pub const CONFIG_NTB_MODULE: u32 = 1;
pub const CONFIG_COMEDI_JR3_PCI_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_4_MODULE: u32 = 1;
pub const CONFIG_INTEL_CHTDC_TI_PWRBTN_MODULE: u32 = 1;
pub const CONFIG_RAID6_PQ_MODULE: u32 = 1;
pub const CONFIG_SND_BEBOB_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_GVT_KVMGT_MODULE: u32 = 1;
pub const CONFIG_ATM_FORE200E_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_SUR40_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_SLG51000_MODULE: u32 = 1;
pub const CONFIG_HID_WACOM_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP2975_MODULE: u32 = 1;
pub const CONFIG_MD_RAID0_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MT6370_MODULE: u32 = 1;
pub const CONFIG_CLZ_TAB: u32 = 1;
pub const CONFIG_SMS_SIANO_DEBUGFS: u32 = 1;
pub const CONFIG_SND_INTEL8X0M_MODULE: u32 = 1;
pub const CONFIG_SND_CS4281_MODULE: u32 = 1;
pub const CONFIG_CHROME_PLATFORMS: u32 = 1;
pub const CONFIG_IA32_EMULATION: u32 = 1;
pub const CONFIG_NVME_TARGET_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS16_MODULE: u32 = 1;
pub const CONFIG_PINCONF: u32 = 1;
pub const CONFIG_PM_DEVFREQ_EVENT: u32 = 1;
pub const CONFIG_SF_PDMA_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_PATCH_LOADER: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT: u32 = 16;
pub const CONFIG_X86_LOCAL_APIC: u32 = 1;
pub const CONFIG_F2FS_STAT_FS: u32 = 1;
pub const CONFIG_SND_COMPRESS_OFFLOAD_MODULE: u32 = 1;
pub const CONFIG_MODULE_COMPRESS_ZSTD: u32 = 1;
pub const CONFIG_SND_DESIGNWARE_I2S_MODULE: u32 = 1;
pub const CONFIG_ATH9K_AHB: u32 = 1;
pub const CONFIG_CFG80211_USE_KERNEL_REGDB_KEYS: u32 = 1;
pub const CONFIG_NCN26000_PHY_MODULE: u32 = 1;
pub const CONFIG_MTRR_SANITIZER_ENABLE_DEFAULT: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_PKTTYPE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_XTS: u32 = 1;
pub const CONFIG_SND_SOC_SRC4XXX_I2C_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_MAC_MODULE: u32 = 1;
pub const CONFIG_IIO_SW_DEVICE_MODULE: u32 = 1;
pub const CONFIG_INET6_ESPINTCP: u32 = 1;
pub const CONFIG_AMD_IOMMU: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_CS42L42_MACH_MODULE: u32 = 1;
pub const CONFIG_DVB_TC90522_MODULE: u32 = 1;
pub const CONFIG_PHY_SAMSUNG_USB2_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_HDAC_HDMI_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_HEARTBEAT_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_MCS_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CRASH_HOTPLUG: u32 = 1;
pub const CONFIG_REGULATOR_TPS65086_MODULE: u32 = 1;
pub const CONFIG_INET_SCTP_DIAG_MODULE: u32 = 1;
pub const CONFIG_X86_PLATFORM_DRIVERS_HP: u32 = 1;
pub const CONFIG_SI1133_MODULE: u32 = 1;
pub const CONFIG_RTW88_8822B_MODULE: u32 = 1;
pub const CONFIG_PPS: u32 = 1;
pub const CONFIG_EFI_TEST_MODULE: u32 = 1;
pub const CONFIG_NFC_PORT100_MODULE: u32 = 1;
pub const CONFIG_INTERCONNECT: u32 = 1;
pub const CONFIG_MAC80211_HAS_RC: u32 = 1;
pub const CONFIG_CRASH_MAX_MEMORY_RANGES: u32 = 8192;
pub const CONFIG_NLS_MAC_GREEK_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8753_MODULE: u32 = 1;
pub const CONFIG_VIDEO_EM28XX_MODULE: u32 = 1;
pub const CONFIG_GLOB: u32 = 1;
pub const CONFIG_ATH12K_MODULE: u32 = 1;
pub const CONFIG_OCTEON_EP_VF_MODULE: u32 = 1;
pub const CONFIG_CAN_BCM_MODULE: u32 = 1;
pub const CONFIG_SPI_MICROCHIP_CORE_QSPI_MODULE: u32 = 1;
pub const CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE: u32 = 1;
pub const CONFIG_SENSORS_TMP421_MODULE: u32 = 1;
pub const CONFIG_VXFS_FS_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_MARS_MODULE: u32 = 1;
pub const CONFIG_IP_ROUTE_CLASSID: u32 = 1;
pub const CONFIG_ST_UVIS25_I2C_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_LV5207LP_MODULE: u32 = 1;
pub const CONFIG_RPMSG_MODULE: u32 = 1;
pub const CONFIG_FM10K_MODULE: u32 = 1;
pub const CONFIG_DEVMEM: u32 = 1;
pub const CONFIG_SENSORS_ADS7871_MODULE: u32 = 1;
pub const CONFIG_USBIP_HOST_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_GPIO_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IMX214_MODULE: u32 = 1;
pub const CONFIG_SAMSUNG_Q10_MODULE: u32 = 1;
pub const CONFIG_USB_GADGET_VBUS_DRAW: u32 = 2;
pub const CONFIG_NETFILTER_XT_CONNMARK_MODULE: u32 = 1;
pub const CONFIG_NFS_V4_SECURITY_LABEL: u32 = 1;
pub const CONFIG_MFD_ARIZONA_MODULE: u32 = 1;
pub const CONFIG_ISCSI_IBFT_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_USERFAULT_AUTOSUSPEND: u32 = 250;
pub const CONFIG_KEXEC_CORE: u32 = 1;
pub const CONFIG_MFD_BD9571MWV_MODULE: u32 = 1;
pub const CONFIG_NET_9P_FD_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TDA18218_MODULE: u32 = 1;
pub const CONFIG_DVB_DRXD_MODULE: u32 = 1;
pub const CONFIG_LSM: &[u8; 42] = b"landlock,lockdown,yama,integrity,apparmor\0";
pub const CONFIG_MTD_PSTORE_MODULE: u32 = 1;
pub const CONFIG_ATM_HE_USE_SUNI: u32 = 1;
pub const CONFIG_SND_HDA_EXT_CORE_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_WM8350_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_PKEYS: u32 = 1;
pub const CONFIG_USB_FUNCTIONFS_RNDIS: u32 = 1;
pub const CONFIG_BMC150_ACCEL_I2C_MODULE: u32 = 1;
pub const CONFIG_DELL_WMI_PRIVACY: u32 = 1;
pub const CONFIG_SND_AMD_ASOC_RENOIR_MODULE: u32 = 1;
pub const CONFIG_PALMAS_GPADC_MODULE: u32 = 1;
pub const CONFIG_HID_RETRODE_MODULE: u32 = 1;
pub const CONFIG_TIPC_MEDIA_IB: u32 = 1;
pub const CONFIG_USB_NET_MCS7830_MODULE: u32 = 1;
pub const CONFIG_GNSS_USB_MODULE: u32 = 1;
pub const CONFIG_FB_CFB_COPYAREA: u32 = 1;
pub const CONFIG_IB700_WDT_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ALGAPI: u32 = 1;
pub const CONFIG_KVM_XFER_TO_GUEST_WORK: u32 = 1;
pub const CONFIG_ICP10100_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_EVENTS: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_3XXX_MODULE: u32 = 1;
pub const CONFIG_HTU21_MODULE: u32 = 1;
pub const CONFIG_SND_PCXHR_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC23_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MAX77693_MODULE: u32 = 1;
pub const CONFIG_SERIAL_EARLYCON: u32 = 1;
pub const CONFIG_HP_WMI_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_PC236_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_M41T94_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_USER_FRIENDLY_LONG_NAMES: u32 = 1;
pub const CONFIG_AS_AVX512: u32 = 1;
pub const CONFIG_NF_NAT_IRC_MODULE: u32 = 1;
pub const CONFIG_GET_FREE_REGION: u32 = 1;
pub const CONFIG_USB_F_HID_MODULE: u32 = 1;
pub const CONFIG_MTD_L440GX_MODULE: u32 = 1;
pub const CONFIG_AD5770R_MODULE: u32 = 1;
pub const CONFIG_DEVPORT: u32 = 1;
pub const CONFIG_SPI_ALTERA_CORE_MODULE: u32 = 1;
pub const CONFIG_CAN_EMS_PCMCIA_MODULE: u32 = 1;
pub const CONFIG_SENSORS_HIH6130_MODULE: u32 = 1;
pub const CONFIG_MFD_INTEL_M10_BMC_CORE_MODULE: u32 = 1;
pub const CONFIG_USB: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_CT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_ATOM_HIFI_EP_MODULE: u32 = 1;
pub const CONFIG_N_HDLC_MODULE: u32 = 1;
pub const CONFIG_SCTP_COOKIE_HMAC_SHA1: u32 = 1;
pub const CONFIG_ATH9K_STATION_STATISTICS: u32 = 1;
pub const CONFIG_ELF_CORE: u32 = 1;
pub const CONFIG_MFD_WM831X: u32 = 1;
pub const CONFIG_TASK_DELAY_ACCT: u32 = 1;
pub const CONFIG_F2FS_FS_XATTR: u32 = 1;
pub const CONFIG_JOYSTICK_DB9_MODULE: u32 = 1;
pub const CONFIG_DVB_ATBM8830_MODULE: u32 = 1;
pub const CONFIG_SERIAL_FSL_LPUART_MODULE: u32 = 1;
pub const CONFIG_DM_DELAY_MODULE: u32 = 1;
pub const CONFIG_SCSI_QLOGIC_1280_MODULE: u32 = 1;
pub const CONFIG_DVB_PLL_MODULE: u32 = 1;
pub const CONFIG_THERMAL: u32 = 1;
pub const CONFIG_NFC_ST21NFCA_MODULE: u32 = 1;
pub const CONFIG_SI7020_MODULE: u32 = 1;
pub const CONFIG_DEBUG_INFO_DWARF5: u32 = 1;
pub const CONFIG_NETFILTER_BPF_LINK: u32 = 1;
pub const CONFIG_DVB_LG2160_MODULE: u32 = 1;
pub const CONFIG_BEFS_FS_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TWL4030_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_DLINK: u32 = 1;
pub const CONFIG_IP_SET_HASH_IPPORTNET_MODULE: u32 = 1;
pub const CONFIG_I2C_MUX_MLXCPLD_MODULE: u32 = 1;
pub const CONFIG_KVM_SMM: u32 = 1;
pub const CONFIG_PPPOE_HASH_BITS: u32 = 4;
pub const CONFIG_CAN_EMS_USB_MODULE: u32 = 1;
pub const CONFIG_FTRACE_SYSCALLS: u32 = 1;
pub const CONFIG_PINCTRL_BROXTON_MODULE: u32 = 1;
pub const CONFIG_NET_TEAM_MODE_ROUNDROBIN_MODULE: u32 = 1;
pub const CONFIG_CAN_VXCAN_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_NOVA_T_USB2_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC4245_MODULE: u32 = 1;
pub const CONFIG_SENSORS_AS370_MODULE: u32 = 1;
pub const CONFIG_UCSI_STM32G0_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_MD5: u32 = 1;
pub const CONFIG_SND_DRIVERS: u32 = 1;
pub const CONFIG_REGULATOR_FAN53555_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_EZCHIP: u32 = 1;
pub const CONFIG_IIO_KX022A_SPI_MODULE: u32 = 1;
pub const CONFIG_USB_KBD_MODULE: u32 = 1;
pub const CONFIG_SND_AC97_POWER_SAVE_DEFAULT: u32 = 0;
pub const CONFIG_FB_DDC_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_BRIDGED_PHY_MODULE: u32 = 1;
pub const CONFIG_INPUT_CMA3000_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_CXUSB_ANALOG: u32 = 1;
pub const CONFIG_SMSC9420_MODULE: u32 = 1;
pub const CONFIG_ATH6KL_MODULE: u32 = 1;
pub const CONFIG_INPUT_KEYSPAN_REMOTE_MODULE: u32 = 1;
pub const CONFIG_ATH9K_HTC_MODULE: u32 = 1;
pub const CONFIG_DM_AUDIT: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_POLICY_MODULE: u32 = 1;
pub const CONFIG_HALTPOLL_CPUIDLE_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC_X86: u32 = 1;
pub const CONFIG_USB_ISP1301_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_HWDEP: u32 = 1;
pub const CONFIG_DA9150_GPADC_MODULE: u32 = 1;
pub const CONFIG_VT_CONSOLE_SLEEP: u32 = 1;
pub const CONFIG_NLS_KOI8_U_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SOCIONEXT: u32 = 1;
pub const CONFIG_SCSI_SPI_ATTRS_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SERPENT_MODULE: u32 = 1;
pub const CONFIG_MTD_BLKDEVS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NZXT_KRAKEN3_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_MAX7359_MODULE: u32 = 1;
pub const CONFIG_MCP4018_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BYTCR_RT5640_MACH_MODULE: u32 = 1;
pub const CONFIG_DEBUG_KERNEL: u32 = 1;
pub const CONFIG_MDIO_MSCC_MIIM_MODULE: u32 = 1;
pub const CONFIG_SND_INTEL_BYT_PREFER_SOF: u32 = 1;
pub const CONFIG_SND_SOC_SOF_SKYLAKE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOUNDWIRE_SOF_MACH_MODULE: u32 = 1;
pub const CONFIG_RCU_NOCB_CPU: u32 = 1;
pub const CONFIG_SURFACE_HOTPLUG_MODULE: u32 = 1;
pub const CONFIG_ASYNC_TX_DMA: u32 = 1;
pub const CONFIG_MFD_MT6370_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM512x_I2C_MODULE: u32 = 1;
pub const CONFIG_SCSI_QLA_ISCSI_MODULE: u32 = 1;
pub const CONFIG_NVME_TARGET_PASSTHRU: u32 = 1;
pub const CONFIG_CAN_M_CAN_MODULE: u32 = 1;
pub const CONFIG_MOUSE_ELAN_I2C_SMBUS: u32 = 1;
pub const CONFIG_CEC_CORE_MODULE: u32 = 1;
pub const CONFIG_BRCM_TRACING: u32 = 1;
pub const CONFIG_BATTERY_MAX17040_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_TI: u32 = 1;
pub const CONFIG_EEPROM_93CX6_MODULE: u32 = 1;
pub const CONFIG_VIDEOBUF2_CORE_MODULE: u32 = 1;
pub const CONFIG_ATM_CLIP_MODULE: u32 = 1;
pub const CONFIG_PCIE_EDR: u32 = 1;
pub const CONFIG_GREYBUS_BOOTROM_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_DEBUG_MODULE: u32 = 1;
pub const CONFIG_HID_VIEWSONIC_MODULE: u32 = 1;
pub const CONFIG_MISC_FILESYSTEMS: u32 = 1;
pub const CONFIG_QUOTA_TREE_MODULE: u32 = 1;
pub const CONFIG_NFT_FIB_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_REALTEK_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_GHASH: u32 = 1;
pub const CONFIG_MDIO_BITBANG_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_TUNNEL_KEY_MODULE: u32 = 1;
pub const CONFIG_CGROUP_RDMA: u32 = 1;
pub const CONFIG_USB_XEN_HCD_MODULE: u32 = 1;
pub const CONFIG_CAN_PLX_PCI_MODULE: u32 = 1;
pub const CONFIG_DP83TD510_PHY_MODULE: u32 = 1;
pub const CONFIG_SWIOTLB_DYNAMIC: u32 = 1;
pub const CONFIG_INOTIFY_USER: u32 = 1;
pub const CONFIG_DVB_CX22702_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_VICAM_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CHIPONE_ICN8505_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_7_MODULE: u32 = 1;
pub const CONFIG_ALTERA_MSGDMA_MODULE: u32 = 1;
pub const CONFIG_BMI088_ACCEL_SPI_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC2947_SPI_MODULE: u32 = 1;
pub const CONFIG_PHYLIB: u32 = 1;
pub const CONFIG_B43_HWRNG: u32 = 1;
pub const CONFIG_DVB_GP8PSK_FE_MODULE: u32 = 1;
pub const CONFIG_SQUASHFS_MOUNT_DECOMP_THREADS: u32 = 1;
pub const CONFIG_FB_S3_MODULE: u32 = 1;
pub const CONFIG_SPI_MUX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_RPL_ACP6x_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_GIGANTIC_PAGE: u32 = 1;
pub const CONFIG_KEYBOARD_OPENCORES_MODULE: u32 = 1;
pub const CONFIG_NR_CPUS_DEFAULT: u32 = 8192;
pub const CONFIG_FPGA_DFL_FME_REGION_MODULE: u32 = 1;
pub const CONFIG_COMEDI_MF6X4_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320ADCX140_MODULE: u32 = 1;
pub const CONFIG_DEV_DAX_HMEM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKL_HDA_DSP_GENERIC_MACH_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS65090_MODULE: u32 = 1;
pub const CONFIG_NET_EMATCH_IPT_MODULE: u32 = 1;
pub const CONFIG_USB_MICROTEK_MODULE: u32 = 1;
pub const CONFIG_HDMI: u32 = 1;
pub const CONFIG_SND_SOC_RT5659_MODULE: u32 = 1;
pub const CONFIG_NET_UDP_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_COMPOSITE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8804_I2C_MODULE: u32 = 1;
pub const CONFIG_X86_DEBUGCTLMSR: u32 = 1;
pub const CONFIG_DVB_USB_DIB3000MC_MODULE: u32 = 1;
pub const CONFIG_DRM_GM12U320_MODULE: u32 = 1;
pub const CONFIG_RTW88_8822CS_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_RTL8_4_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SSM2602_I2C_MODULE: u32 = 1;
pub const CONFIG_SIEMENS_SIMATIC_IPC_BATT_F7188X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_KBL_RT5663_RT5514_MAX98927_MACH_MODULE: u32 = 1;
pub const CONFIG_VMLINUX_MAP: u32 = 1;
pub const CONFIG_INPUT_TABLET: u32 = 1;
pub const CONFIG_CRYPTO_BLOWFISH_X86_64_MODULE: u32 = 1;
pub const CONFIG_V4L_PLATFORM_DRIVERS: u32 = 1;
pub const CONFIG_NCSI_OEM_CMD_GET_MAC: u32 = 1;
pub const CONFIG_MAXIM_THERMOCOUPLE_MODULE: u32 = 1;
pub const CONFIG_PPPOE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_FSL_UTILS_MODULE: u32 = 1;
pub const CONFIG_LIBERTAS_THINFIRM_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_SOFT_DIRTY: u32 = 1;
pub const CONFIG_DP83867_PHY_MODULE: u32 = 1;
pub const CONFIG_XILINX_GMII2RGMII_MODULE: u32 = 1;
pub const CONFIG_SYSFB_SIMPLEFB: u32 = 1;
pub const CONFIG_TRANSPARENT_HUGEPAGE_MADVISE: u32 = 1;
pub const CONFIG_HUAWEI_WMI_MODULE: u32 = 1;
pub const CONFIG_CAN_GS_USB_MODULE: u32 = 1;
pub const CONFIG_XILINX_DMA_MODULE: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_ARGS: u32 = 1;
pub const CONFIG_TSL2583_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_AUDIO_APB_CODEC_MODULE: u32 = 1;
pub const CONFIG_PATA_AMD_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_SYSCALL_WRAPPER: u32 = 1;
pub const CONFIG_WLAN_VENDOR_QUANTENNA: u32 = 1;
pub const CONFIG_REED_SOLOMON_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_MMAP_RND_COMPAT_BITS: u32 = 1;
pub const CONFIG_SND_SOC_SOF_JASPERLAKE_MODULE: u32 = 1;
pub const CONFIG_USERIO_MODULE: u32 = 1;
pub const CONFIG_FAT_DEFAULT_CODEPAGE: u32 = 437;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_MAX98357A_MODULE: u32 = 1;
pub const CONFIG_RDMA_SIW_MODULE: u32 = 1;
pub const CONFIG_SCSI_UFS_BSG: u32 = 1;
pub const CONFIG_VIDEO_OV01A10_MODULE: u32 = 1;
pub const CONFIG_RMI4_2D_SENSOR: u32 = 1;
pub const CONFIG_DMA_COHERENT_POOL: u32 = 1;
pub const CONFIG_JSA1212_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM25066_MODULE: u32 = 1;
pub const CONFIG_AD9834_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_SJA1105_TAS: u32 = 1;
pub const CONFIG_MMC_REALTEK_PCI_MODULE: u32 = 1;
pub const CONFIG_SOUNDWIRE_AMD_MODULE: u32 = 1;
pub const CONFIG_SENSORS_PC87360_MODULE: u32 = 1;
pub const CONFIG_MFD_RC5T583: u32 = 1;
pub const CONFIG_MTD_UBI_BLOCK: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_CATPT_MODULE: u32 = 1;
pub const CONFIG_HYPERV_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_FSL_SPDIF_MODULE: u32 = 1;
pub const CONFIG_NLATTR: u32 = 1;
pub const CONFIG_TI_LMP92064_MODULE: u32 = 1;
pub const CONFIG_SUNRPC_XPRT_RDMA_MODULE: u32 = 1;
pub const CONFIG_DVB_SI21XX_MODULE: u32 = 1;
pub const CONFIG_SLAB_BUCKETS: u32 = 1;
pub const CONFIG_ACPI_PCI_SLOT: u32 = 1;
pub const CONFIG_PDC_ADMA_MODULE: u32 = 1;
pub const CONFIG_RT2800PCI_RT3290: u32 = 1;
pub const CONFIG_HAVE_GUP_FAST: u32 = 1;
pub const CONFIG_COMEDI_NI_PCIMIO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_Q54SJ108A2_MODULE: u32 = 1;
pub const CONFIG_MLX4_EN_DCB: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_DA7219_MODULE: u32 = 1;
pub const CONFIG_NFT_REJECT_INET_MODULE: u32 = 1;
pub const CONFIG_SND_OXYGEN_LIB_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX8893_MODULE: u32 = 1;
pub const CONFIG_CORDIC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_SSM4567_MODULE: u32 = 1;
pub const CONFIG_ADXL372_SPI_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_M48T35_MODULE: u32 = 1;
pub const CONFIG_NUMA_BALANCING_DEFAULT_ENABLED: u32 = 1;
pub const CONFIG_MFD_AS3711: u32 = 1;
pub const CONFIG_SCHED_MC: u32 = 1;
pub const CONFIG_HYPERV_KEYBOARD_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_FRPW_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PCF2127_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_ADVANCED: u32 = 1;
pub const CONFIG_CEPH_FS_SECURITY_LABEL: u32 = 1;
pub const CONFIG_AD5761_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS62360_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS08_PCI_MODULE: u32 = 1;
pub const CONFIG_MLX5_TC_CT: u32 = 1;
pub const CONFIG_ARCH_HAS_CC_PLATFORM: u32 = 1;
pub const CONFIG_SND_SOC_RT5682_MODULE: u32 = 1;
pub const CONFIG_USB_KAWETH_MODULE: u32 = 1;
pub const CONFIG_USB_NET_CDC_MBIM_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM90_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_QWIIC_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DT3000_MODULE: u32 = 1;
pub const CONFIG_CHROMEOS_PRIVACY_SCREEN_MODULE: u32 = 1;
pub const CONFIG_DE2104X_DSL: u32 = 0;
pub const CONFIG_MMU_NOTIFIER: u32 = 1;
pub const CONFIG_NFT_REJECT_NETDEV_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CAMELLIA_MODULE: u32 = 1;
pub const CONFIG_FUSION: u32 = 1;
pub const CONFIG_HID_GFRM_MODULE: u32 = 1;
pub const CONFIG_CFG80211_WEXT_EXPORT: u32 = 1;
pub const CONFIG_RTC_DRV_M41T93_MODULE: u32 = 1;
pub const CONFIG_SENSORS_DA9052_ADC_MODULE: u32 = 1;
pub const CONFIG_MEDIA_USB_SUPPORT: u32 = 1;
pub const CONFIG_RTW89_DEBUG: u32 = 1;
pub const CONFIG_LTE_GDM724X_MODULE: u32 = 1;
pub const CONFIG_MOUSE_ELAN_I2C_MODULE: u32 = 1;
pub const CONFIG_RTLWIFI_MODULE: u32 = 1;
pub const CONFIG_SMB_SERVER_CHECK_CAP_NET_ADMIN: u32 = 1;
pub const CONFIG_HAVE_EBPF_JIT: u32 = 1;
pub const CONFIG_ASM_MODVERSIONS: u32 = 1;
pub const CONFIG_USB_SERIAL_EMPEG_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_MIRRED_MODULE: u32 = 1;
pub const CONFIG_HDLC_MODULE: u32 = 1;
pub const CONFIG_VIDEO_VIA_CAMERA_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_ADAPTEC: u32 = 1;
pub const CONFIG_BACKLIGHT_ADP5520_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_WANGXUN: u32 = 1;
pub const CONFIG_INTEGRITY: u32 = 1;
pub const CONFIG_PM_OPP: u32 = 1;
pub const CONFIG_RFS_ACCEL: u32 = 1;
pub const CONFIG_COMEDI_CB_PCIMDDA_MODULE: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT_16B: u32 = 1;
pub const CONFIG_GPIO_104_IDI_48_MODULE: u32 = 1;
pub const CONFIG_SCSI_MPT3SAS_MODULE: u32 = 1;
pub const CONFIG_YAM_MODULE: u32 = 1;
pub const CONFIG_KALLSYMS: u32 = 1;
pub const CONFIG_SND_SOC_SOF_PCI_DEV_MODULE: u32 = 1;
pub const CONFIG_INPUT_AXP20X_PEK_MODULE: u32 = 1;
pub const CONFIG_X86_AMD_PSTATE_DEFAULT_MODE: u32 = 3;
pub const CONFIG_FUSION_MAX_SGE: u32 = 128;
pub const CONFIG_LEDS_TRIGGER_ACTIVITY_MODULE: u32 = 1;
pub const CONFIG_HID_PLANTRONICS_MODULE: u32 = 1;
pub const CONFIG_HID_SEMITEK_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RT4831_MODULE: u32 = 1;
pub const CONFIG_SMS_SIANO_MDTV_MODULE: u32 = 1;
pub const CONFIG_INPUT_E3X0_BUTTON_MODULE: u32 = 1;
pub const CONFIG_MDIO_BUS: u32 = 1;
pub const CONFIG_XEN_AUTO_XLATE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L51_MODULE: u32 = 1;
pub const CONFIG_LEDS_LM3532_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_TGL_MODULE: u32 = 1;
pub const CONFIG_SLIP_MODE_SLIP6: u32 = 1;
pub const CONFIG_SCSI_MOD: u32 = 1;
pub const CONFIG_SND_SEQ_UMP_CLIENT_MODULE: u32 = 1;
pub const CONFIG_INPUT_DRV260X_HAPTICS_MODULE: u32 = 1;
pub const CONFIG_ZSMALLOC_CHAIN_SIZE: u32 = 8;
pub const CONFIG_CUSE_MODULE: u32 = 1;
pub const CONFIG_IIO_MODULE: u32 = 1;
pub const CONFIG_ATH9K_HW_MODULE: u32 = 1;
pub const CONFIG_FUNCTION_GRAPH_TRACER: u32 = 1;
pub const CONFIG_BCMA_DRIVER_GPIO: u32 = 1;
pub const CONFIG_NET_DSA_AR9331_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MAX8925_MODULE: u32 = 1;
pub const CONFIG_DVB_BUDGET_CI_MODULE: u32 = 1;
pub const CONFIG_X25_MODULE: u32 = 1;
pub const CONFIG_MAX5432_MODULE: u32 = 1;
pub const CONFIG_I2C_HELPER_AUTO: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TOUCHWIN_MODULE: u32 = 1;
pub const CONFIG_NTB_IDT_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_ARIZONA_LDO1_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DT282X_MODULE: u32 = 1;
pub const CONFIG_HZ: u32 = 1000;
pub const CONFIG_I2C_PARPORT_MODULE: u32 = 1;
pub const CONFIG_ATH12K_TRACING: u32 = 1;
pub const CONFIG_TRACING: u32 = 1;
pub const CONFIG_ACPI: u32 = 1;
pub const CONFIG_HAMRADIO: u32 = 1;
pub const CONFIG_ARCH_USE_QUEUED_SPINLOCKS: u32 = 1;
pub const CONFIG_SP5100_TCO_MODULE: u32 = 1;
pub const CONFIG_MLX5_TC_SAMPLE: u32 = 1;
pub const CONFIG_IWLWIFI_LEDS: u32 = 1;
pub const CONFIG_CHECKPOINT_RESTORE: u32 = 1;
pub const CONFIG_PCI_LOCKLESS_CONFIG: u32 = 1;
pub const CONFIG_BLK_DEV_DM: u32 = 1;
pub const CONFIG_FONT_TER16x32: u32 = 1;
pub const CONFIG_JAILHOUSE_GUEST: u32 = 1;
pub const CONFIG_ICE_HWMON: u32 = 1;
pub const CONFIG_NF_CONNTRACK_LABELS: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_OSF_MODULE: u32 = 1;
pub const CONFIG_KVM_COMMON: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2406_MODULE: u32 = 1;
pub const CONFIG_RUNTIME_TESTING_MENU: u32 = 1;
pub const CONFIG_SENSORS_ISL29018_MODULE: u32 = 1;
pub const CONFIG_ENS160_I2C_MODULE: u32 = 1;
pub const CONFIG_RTW88_PCI_MODULE: u32 = 1;
pub const CONFIG_VIRTUALIZATION: u32 = 1;
pub const CONFIG_MFD_VX855_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_NAVMAN_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS40L50_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_PRINTER: u32 = 1;
pub const CONFIG_TCS3414_MODULE: u32 = 1;
pub const CONFIG_CHELSIO_T4_MODULE: u32 = 1;
pub const CONFIG_PCI_REALLOC_ENABLE_AUTO: u32 = 1;
pub const CONFIG_DRM_RADEON_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_AZ6027_MODULE: u32 = 1;
pub const CONFIG_NET_CLS_FLOWER_MODULE: u32 = 1;
pub const CONFIG_DVB_MT312_MODULE: u32 = 1;
pub const CONFIG_I2C_KEMPLD_MODULE: u32 = 1;
pub const CONFIG_INTEL_SOC_PMIC_CHTDC_TI_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_IQS5XX_MODULE: u32 = 1;
pub const CONFIG_TASKSTATS: u32 = 1;
pub const CONFIG_TI_TLC4541_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MT6315_MODULE: u32 = 1;
pub const CONFIG_TARGET_CORE_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_FS: u32 = 1;
pub const CONFIG_NFT_FIB_NETDEV_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_TARGET_MASQUERADE_MODULE: u32 = 1;
pub const CONFIG_SND_MIA_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IMX258_MODULE: u32 = 1;
pub const CONFIG_MDIO_REGMAP_MODULE: u32 = 1;
pub const CONFIG_CXL_REGION: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_BROADCAST_IDLE: u32 = 1;
pub const CONFIG_ZONEFS_FS_MODULE: u32 = 1;
pub const CONFIG_MT76_CORE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_AT_AO_MODULE: u32 = 1;
pub const CONFIG_MTDRAM_ERASE_SIZE: u32 = 128;
pub const CONFIG_DYNAMIC_FTRACE_WITH_ARGS: u32 = 1;
pub const CONFIG_RTW89_DEBUGMSG: u32 = 1;
pub const CONFIG_SENSORS_MR75203_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_AUDIT_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_MTOUCH_MODULE: u32 = 1;
pub const CONFIG_ATH9K_DEBUGFS: u32 = 1;
pub const CONFIG_CXL_PORT_MODULE: u32 = 1;
pub const CONFIG_SMPRO_ERRMON_MODULE: u32 = 1;
pub const CONFIG_PHY_PXA_28NM_USB2_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_PXP: u32 = 1;
pub const CONFIG_UIO_SERCOS3_MODULE: u32 = 1;
pub const CONFIG_OPENVSWITCH_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK_CS2000_CP_MODULE: u32 = 1;
pub const CONFIG_ACPI_FFH: u32 = 1;
pub const CONFIG_SFC_MCDI_LOGGING: u32 = 1;
pub const CONFIG_QLCNIC_DCB: u32 = 1;
pub const CONFIG_IPV6_SIT_MODULE: u32 = 1;
pub const CONFIG_INTEL_SCU_IPC: u32 = 1;
pub const CONFIG_RTC_DRV_WM8350_MODULE: u32 = 1;
pub const CONFIG_RT2800_LIB_MMIO_MODULE: u32 = 1;
pub const CONFIG_AD9523_MODULE: u32 = 1;
pub const CONFIG_DMABUF_HEAPS: u32 = 1;
pub const CONFIG_SND_SOC_RT5645_MODULE: u32 = 1;
pub const CONFIG_STE10XP_MODULE: u32 = 1;
pub const CONFIG_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_DVB_CX24110_MODULE: u32 = 1;
pub const CONFIG_VIDEO_I2C_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_RAM_COUNT: u32 = 16;
pub const CONFIG_INTERVAL_TREE_SPAN_ITER: u32 = 1;
pub const CONFIG_NLS_ISO8859_6_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_USBAT_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADC128D818_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_DSCP_MODULE: u32 = 1;
pub const CONFIG_INPUT_ATLAS_BTNS_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ARIA_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SQ905C_MODULE: u32 = 1;
pub const CONFIG_MT7921U_MODULE: u32 = 1;
pub const CONFIG_DRM_XE_MODULE: u32 = 1;
pub const CONFIG_INET_RAW_DIAG_MODULE: u32 = 1;
pub const CONFIG_DVB_TDA10086_MODULE: u32 = 1;
pub const CONFIG_ASUS_WIRELESS_MODULE: u32 = 1;
pub const CONFIG_DW_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_VALIDATE_FS_PARSER: u32 = 1;
pub const CONFIG_IR_IMON_MODULE: u32 = 1;
pub const CONFIG_SLIP_COMPRESSED: u32 = 1;
pub const CONFIG_HOTPLUG_PCI_CPCI_GENERIC_MODULE: u32 = 1;
pub const CONFIG_AS_VPCLMULQDQ: u32 = 1;
pub const CONFIG_DRM_VMWGFX_MODULE: u32 = 1;
pub const CONFIG_PREEMPTION: u32 = 1;
pub const CONFIG_BINARY_PRINTF: u32 = 1;
pub const CONFIG_SND_SOC_PCM3060_SPI_MODULE: u32 = 1;
pub const CONFIG_INTEL_SCU: u32 = 1;
pub const CONFIG_TIGON3_HWMON: u32 = 1;
pub const CONFIG_HAVE_ARCH_KCSAN: u32 = 1;
pub const CONFIG_UIO_DMEM_GENIRQ_MODULE: u32 = 1;
pub const CONFIG_HAVE_PERF_EVENTS_NMI: u32 = 1;
pub const CONFIG_USB_SERIAL_MOS7715_PARPORT: u32 = 1;
pub const CONFIG_SND_SOC_NAU8315_MODULE: u32 = 1;
pub const CONFIG_VIDEO_RDACM20_MODULE: u32 = 1;
pub const CONFIG_INPUT_ADXL34X_SPI_MODULE: u32 = 1;
pub const CONFIG_MFD_CORE: u32 = 1;
pub const CONFIG_PVPANIC_PCI_MODULE: u32 = 1;
pub const CONFIG_SPI_PXA2XX_PCI_MODULE: u32 = 1;
pub const CONFIG_TRACE_IRQFLAGS_SUPPORT: u32 = 1;
pub const CONFIG_MTD_SPI_NAND_MODULE: u32 = 1;
pub const CONFIG_BATTERY_DS2782_MODULE: u32 = 1;
pub const CONFIG_WANT_COMPAT_NETLINK_MESSAGES: u32 = 1;
pub const CONFIG_IPVLAN_L3S: u32 = 1;
pub const CONFIG_CRYPTO_XXHASH_MODULE: u32 = 1;
pub const CONFIG_AD525X_DPOT_I2C_MODULE: u32 = 1;
pub const CONFIG_IR_SHARP_DECODER_MODULE: u32 = 1;
pub const CONFIG_TIMERFD: u32 = 1;
pub const CONFIG_RTC_HCTOSYS_DEVICE: &[u8; 5] = b"rtc0\0";
pub const CONFIG_JOYSTICK_FSIA6B_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_LPASS_WSA_MACRO_MODULE: u32 = 1;
pub const CONFIG_MFD_DA9055: u32 = 1;
pub const CONFIG_SND_USB_POD_MODULE: u32 = 1;
pub const CONFIG_UFS_FS_MODULE: u32 = 1;
pub const CONFIG_PSTORE_BLK_BLKDEV: &[u8; 1] = b"\0";
pub const CONFIG_USB_STORAGE_FREECOM_MODULE: u32 = 1;
pub const CONFIG_DRM_SSD130X_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_DSTR_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_LSM6DSX_I3C_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83627HF_MODULE: u32 = 1;
pub const CONFIG_PREEMPT_VOLUNTARY: u32 = 1;
pub const CONFIG_GENERIC_VDSO_TIME_NS: u32 = 1;
pub const CONFIG_KEYS_REQUEST_CACHE: u32 = 1;
pub const CONFIG_SEL3350_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BDW_RT5650_MACH_MODULE: u32 = 1;
pub const CONFIG_MLX5_VFIO_PCI_MODULE: u32 = 1;
pub const CONFIG_BCM84881_PHY: u32 = 1;
pub const CONFIG_SND_JACK_INPUT_DEV: u32 = 1;
pub const CONFIG_MFD_MAX8998: u32 = 1;
pub const CONFIG_JFFS2_FS_MODULE: u32 = 1;
pub const CONFIG_IRQ_MSI_IOMMU: u32 = 1;
pub const CONFIG_SND_SOC_UDA1334_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_MYRI: u32 = 1;
pub const CONFIG_NET_VENDOR_META: u32 = 1;
pub const CONFIG_REGULATOR_WM8400_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_LABPC_PCI_MODULE: u32 = 1;
pub const CONFIG_NET_TEAM_MODE_LOADBALANCE_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_ARK3116_MODULE: u32 = 1;
pub const CONFIG_SECURITY_PATH: u32 = 1;
pub const CONFIG_LEDS_PCA955X_MODULE: u32 = 1;
pub const CONFIG_HID_SUNPLUS_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SERPENT_SSE2_X86_64_MODULE: u32 = 1;
pub const CONFIG_SEG_LED_GPIO_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_USERPTR: u32 = 1;
pub const CONFIG_SERIO_I8042: u32 = 1;
pub const CONFIG_UCLAMP_BUCKETS_COUNT: u32 = 5;
pub const CONFIG_MCP3422_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ADV7183_MODULE: u32 = 1;
pub const CONFIG_NF_NAT_SNMP_BASIC_MODULE: u32 = 1;
pub const CONFIG_ZPOOL: u32 = 1;
pub const CONFIG_ADIS16201_MODULE: u32 = 1;
pub const CONFIG_SND_EMU10K1_SEQ_MODULE: u32 = 1;
pub const CONFIG_MEN_A21_WDT_MODULE: u32 = 1;
pub const CONFIG_LLC2_MODULE: u32 = 1;
pub const CONFIG_VMCORE_INFO: u32 = 1;
pub const CONFIG_CAN_MCBA_USB_MODULE: u32 = 1;
pub const CONFIG_SND_KORG1212_MODULE: u32 = 1;
pub const CONFIG_INTEL_TH_ACPI_MODULE: u32 = 1;
pub const CONFIG_TI_ADS7950_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ACPI_MODULE: u32 = 1;
pub const CONFIG_SIOX_MODULE: u32 = 1;
pub const CONFIG_INTEL_TH_GTH_MODULE: u32 = 1;
pub const CONFIG_DRM_PANEL_MIPI_DBI_MODULE: u32 = 1;
pub const CONFIG_SCD4X_MODULE: u32 = 1;
pub const CONFIG_USB_NET_CH9200_MODULE: u32 = 1;
pub const CONFIG_USB_SI470X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L56_SHARED_MODULE: u32 = 1;
pub const CONFIG_FB_VGA16_MODULE: u32 = 1;
pub const CONFIG_NFT_FWD_NETDEV_MODULE: u32 = 1;
pub const CONFIG_LCD_LMS501KF03_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SST_MODULE: u32 = 1;
pub const CONFIG_AD5766_MODULE: u32 = 1;
pub const CONFIG_FB_CORE: u32 = 1;
pub const CONFIG_DRM_GEM_DMA_HELPER_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM93_MODULE: u32 = 1;
pub const CONFIG_IRQ_DOMAIN: u32 = 1;
pub const CONFIG_HID_ELO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_SOUNDWIRE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_NAU8825_MODULE: u32 = 1;
pub const CONFIG_HAVE_KERNEL_GZIP: u32 = 1;
pub const CONFIG_PROBE_EVENTS: u32 = 1;
pub const CONFIG_BPF_JIT_ALWAYS_ON: u32 = 1;
pub const CONFIG_LDISC_AUTOLOAD: u32 = 1;
pub const CONFIG_DYNAMIC_DEBUG_CORE: u32 = 1;
pub const CONFIG_XDP_SOCKETS_DIAG_MODULE: u32 = 1;
pub const CONFIG_ZBUD: u32 = 1;
pub const CONFIG_PCI_PRI: u32 = 1;
pub const CONFIG_ADXL313_SPI_MODULE: u32 = 1;
pub const CONFIG_MFD_JANZ_CMODIO_MODULE: u32 = 1;
pub const CONFIG_SIS190_MODULE: u32 = 1;
pub const CONFIG_DEVICE_PRIVATE: u32 = 1;
pub const CONFIG_CRYPTO_AKCIPHER2: u32 = 1;
pub const CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED: u32 = 1;
pub const CONFIG_INTEL_POWERCLAMP_MODULE: u32 = 1;
pub const CONFIG_NF_NAT_REDIRECT: u32 = 1;
pub const CONFIG_GPIO_TPIC2810_MODULE: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_SIDTAB_HASH_BITS: u32 = 9;
pub const CONFIG_RTLLIB_CRYPTO_WEP_MODULE: u32 = 1;
pub const CONFIG_SERIAL_SCCNXP_CONSOLE: u32 = 1;
pub const CONFIG_SWIOTLB: u32 = 1;
pub const CONFIG_SENSORS_SMSC47B397_MODULE: u32 = 1;
pub const CONFIG_SCHED_AUTOGROUP: u32 = 1;
pub const CONFIG_CAIF_DRIVERS: u32 = 1;
pub const CONFIG_GIGABYTE_WMI_MODULE: u32 = 1;
pub const CONFIG_IGC_MODULE: u32 = 1;
pub const CONFIG_FW_ATTR_CLASS_MODULE: u32 = 1;
pub const CONFIG_IP_VS_SH_MODULE: u32 = 1;
pub const CONFIG_USB_XHCI_DBGCAP: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CPU_MODULE: u32 = 1;
pub const CONFIG_FB_MATROX_MAVEN_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_HUGE_VMALLOC: u32 = 1;
pub const CONFIG_DEVFREQ_GOV_USERSPACE: u32 = 1;
pub const CONFIG_COMEDI_MITE_MODULE: u32 = 1;
pub const CONFIG_MFD_INTEL_M10_BMC_SPI_MODULE: u32 = 1;
pub const CONFIG_FB_CYBER2000_MODULE: u32 = 1;
pub const CONFIG_NFT_CONNLIMIT_MODULE: u32 = 1;
pub const CONFIG_INPUT_TWL4030_VIBRA_MODULE: u32 = 1;
pub const CONFIG_LEDS_LM3533_MODULE: u32 = 1;
pub const CONFIG_SCREEN_INFO: u32 = 1;
pub const CONFIG_NLS_MAC_CYRILLIC_MODULE: u32 = 1;
pub const CONFIG_INTEL_MEI_MODULE: u32 = 1;
pub const CONFIG_FB_SMSCUFX_MODULE: u32 = 1;
pub const CONFIG_GPIO_RC5T583: u32 = 1;
pub const CONFIG_BT_BCM_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_BLAKE2S_GENERIC: u32 = 1;
pub const CONFIG_HARDENED_USERCOPY: u32 = 1;
pub const CONFIG_BUILDTIME_MCOUNT_SORT: u32 = 1;
pub const CONFIG_TOUCHSCREEN_EETI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP_COMMON_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_MARK_MODULE: u32 = 1;
pub const CONFIG_ACPI_EXTLOG_MODULE: u32 = 1;
pub const CONFIG_HAS_IOMEM: u32 = 1;
pub const CONFIG_SIEMENS_SIMATIC_IPC_BATT_APOLLOLAKE_MODULE: u32 = 1;
pub const CONFIG_HAVE_CMPXCHG_DOUBLE: u32 = 1;
pub const CONFIG_VIDEO_ADV7343_MODULE: u32 = 1;
pub const CONFIG_PCIEASPM: u32 = 1;
pub const CONFIG_MVMDIO_MODULE: u32 = 1;
pub const CONFIG_SECURITY_APPARMOR_PARANOID_LOAD: u32 = 1;
pub const CONFIG_NETFILTER_XTABLES_MODULE: u32 = 1;
pub const CONFIG_MT7915E_MODULE: u32 = 1;
pub const CONFIG_CM36651_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MXL5007T_MODULE: u32 = 1;
pub const CONFIG_WAFER_WDT_MODULE: u32 = 1;
pub const CONFIG_BT_MRVL_SDIO_MODULE: u32 = 1;
pub const CONFIG_UIO_AEC_MODULE: u32 = 1;
pub const CONFIG_SERIAL_UARTLITE_MODULE: u32 = 1;
pub const CONFIG_LIBIPW_MODULE: u32 = 1;
pub const CONFIG_RESET_TI_TPS380X_MODULE: u32 = 1;
pub const CONFIG_B43LEGACY_MODULE: u32 = 1;
pub const CONFIG_X86_SGX_KVM: u32 = 1;
pub const CONFIG_SCSI_FDOMAIN_PCI_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2405_MODULE: u32 = 1;
pub const CONFIG_TRACER_MAX_TRACE: u32 = 1;
pub const CONFIG_KEY_NOTIFICATIONS: u32 = 1;
pub const CONFIG_XEN_GRANT_DMA_OPS: u32 = 1;
pub const CONFIG_WWAN_HWSIM_MODULE: u32 = 1;
pub const CONFIG_IPV6_MULTIPLE_TABLES: u32 = 1;
pub const CONFIG_COMEDI_8255_PCI_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_T_FILTER_MODULE: u32 = 1;
pub const CONFIG_USB_ADUTUX_MODULE: u32 = 1;
pub const CONFIG_ARCNET_1051_MODULE: u32 = 1;
pub const CONFIG_SENSORS_BPA_RS600_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SMPRO_MODULE: u32 = 1;
pub const CONFIG_INTEL_IDXD_PERFMON: u32 = 1;
pub const CONFIG_CRYPTO_LIB_AESCFB: u32 = 1;
pub const CONFIG_BT_HCIBTSDIO_MODULE: u32 = 1;
pub const CONFIG_FB_RADEON_BACKLIGHT: u32 = 1;
pub const CONFIG_REGULATOR_DA9062_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ME4000_MODULE: u32 = 1;
pub const CONFIG_SENSORS_IR35221_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_A800_MODULE: u32 = 1;
pub const CONFIG_IR_STREAMZAP_MODULE: u32 = 1;
pub const CONFIG_BNXT_DCB: u32 = 1;
pub const CONFIG_SENSORS_SBRMI_MODULE: u32 = 1;
pub const CONFIG_IMA_APPRAISE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_H323_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_FC0011_MODULE: u32 = 1;
pub const CONFIG_VME_TSI148_MODULE: u32 = 1;
pub const CONFIG_VHOST_NET_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5514_SPI_MODULE: u32 = 1;
pub const CONFIG_B53_SPI_DRIVER_MODULE: u32 = 1;
pub const CONFIG_IP_VS_PROTO_UDP: u32 = 1;
pub const CONFIG_ARCH_HAS_DEVMEM_IS_ALLOWED: u32 = 1;
pub const CONFIG_USB_CHIPIDEA_UDC: u32 = 1;
pub const CONFIG_FB_CIRRUS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_PECI_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC_POWERPC: u32 = 1;
pub const CONFIG_ADIS16240_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TAS2770_MODULE: u32 = 1;
pub const CONFIG_BPF: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_MIDI: u32 = 1;
pub const CONFIG_LOCALVERSION: &[u8; 1] = b"\0";
pub const CONFIG_IIO_CROS_EC_BARO_MODULE: u32 = 1;
pub const CONFIG_MMC_SDHCI_F_SDH30_MODULE: u32 = 1;
pub const CONFIG_MTD_OOPS_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_HID: u32 = 1;
pub const CONFIG_INTEL_MRFLD_PWRBTN_MODULE: u32 = 1;
pub const CONFIG_HID_GT683R_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42XX8_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_SYNAPTICS: u32 = 1;
pub const CONFIG_SND_SOC_TAS2780_MODULE: u32 = 1;
pub const CONFIG_BT_INTEL_MODULE: u32 = 1;
pub const CONFIG_IOSCHED_BFQ_MODULE: u32 = 1;
pub const CONFIG_AXP288_CHARGER_MODULE: u32 = 1;
pub const CONFIG_LIBETH_MODULE: u32 = 1;
pub const CONFIG_SECURITY_SMACK: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2408_READBACK: u32 = 1;
pub const CONFIG_MICROCHIP_PHY_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_AMD: u32 = 1;
pub const CONFIG_HID_EVISION_MODULE: u32 = 1;
pub const CONFIG_TYPEC_NVIDIA_ALTMODE_MODULE: u32 = 1;
pub const CONFIG_DVB_RTL2830_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_DATAFAB_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MPQ8785_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_AF9015_MODULE: u32 = 1;
pub const CONFIG_PATA_HPT366_MODULE: u32 = 1;
pub const CONFIG_HID_TWINHAN_MODULE: u32 = 1;
pub const CONFIG_GPIO_TPS6586X: u32 = 1;
pub const CONFIG_NET_DSA_SJA1105_MODULE: u32 = 1;
pub const CONFIG_REGMAP_MMIO: u32 = 1;
pub const CONFIG_RTS5208_MODULE: u32 = 1;
pub const CONFIG_IOMMU_IO_PGTABLE: u32 = 1;
pub const CONFIG_KEXEC: u32 = 1;
pub const CONFIG_TCG_TIS_ST33ZP24_I2C_MODULE: u32 = 1;
pub const CONFIG_SND_ALOOP_MODULE: u32 = 1;
pub const CONFIG_SND_HRTIMER_MODULE: u32 = 1;
pub const CONFIG_HPET: u32 = 1;
pub const CONFIG_NF_NAT_SIP_MODULE: u32 = 1;
pub const CONFIG_SFC_SIENA_MCDI_LOGGING: u32 = 1;
pub const CONFIG_HVC_IRQ: u32 = 1;
pub const CONFIG_B53_MDIO_DRIVER_MODULE: u32 = 1;
pub const CONFIG_RT2X00_LIB_MMIO_MODULE: u32 = 1;
pub const CONFIG_CFAG12864B_RATE: u32 = 20;
pub const CONFIG_NLS_ISO8859_9_MODULE: u32 = 1;
pub const CONFIG_CHARGER_BD99954_MODULE: u32 = 1;
pub const CONFIG_IP_NF_TARGET_ECN_MODULE: u32 = 1;
pub const CONFIG_INTEL_MEI_WDT_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_PV88090_MODULE: u32 = 1;
pub const CONFIG_PDS_CORE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ADIANTUM_MODULE: u32 = 1;
pub const CONFIG_FB_CYBER2000_DDC: u32 = 1;
pub const CONFIG_DRM_VIRTIO_GPU_KMS: u32 = 1;
pub const CONFIG_WILC1000_HW_OOB_INTR: u32 = 1;
pub const CONFIG_CRYPTO_BLOWFISH_COMMON_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_TYPEC_MODULE: u32 = 1;
pub const CONFIG_DVB_TTUSB_BUDGET_MODULE: u32 = 1;
pub const CONFIG_SLUB: u32 = 1;
pub const CONFIG_SND_SOC_AMD_SOUNDWIRE_LINK_BASELINE_MODULE: u32 = 1;
pub const CONFIG_MFD_LP3943_MODULE: u32 = 1;
pub const CONFIG_X86_POWERNOW_K8: u32 = 1;
pub const CONFIG_NET_SCH_PRIO_MODULE: u32 = 1;
pub const CONFIG_DA9063_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_IFB_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L56_SPI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_RDACM21_MODULE: u32 = 1;
pub const CONFIG_STACKPROTECTOR: u32 = 1;
pub const CONFIG_INPUT_IMS_PCU_MODULE: u32 = 1;
pub const CONFIG_EXT4_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_NET_VENDOR_AMD: u32 = 1;
pub const CONFIG_T5403_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV7670_MODULE: u32 = 1;
pub const CONFIG_BATTERY_DS2781_MODULE: u32 = 1;
pub const CONFIG_MTD_AMD76XROM_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_ALPS: u32 = 1;
pub const CONFIG_IR_MCEUSB_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_CP210X_MODULE: u32 = 1;
pub const CONFIG_TCG_CRB: u32 = 1;
pub const CONFIG_SLIP_MODULE: u32 = 1;
pub const CONFIG_HP_ILO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SSM2602_SPI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV5695_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AW88399_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TOPOLOGY: u32 = 1;
pub const CONFIG_DVB_USB_DW2102_MODULE: u32 = 1;
pub const CONFIG_IP_NF_IPTABLES_MODULE: u32 = 1;
pub const CONFIG_TSM_REPORTS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADAU1761_MODULE: u32 = 1;
pub const CONFIG_USB_IOWARRIOR_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX20411_MODULE: u32 = 1;
pub const CONFIG_ST_UVIS25_SPI_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS08_CS_MODULE: u32 = 1;
pub const CONFIG_HID_KENSINGTON_MODULE: u32 = 1;
pub const CONFIG_MTD_SM_COMMON_MODULE: u32 = 1;
pub const CONFIG_SND_ES1938_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_STV0680_MODULE: u32 = 1;
pub const CONFIG_B43_PCICORE_AUTOSELECT: u32 = 1;
pub const CONFIG_HAVE_REGS_AND_STACK_ACCESS_API: u32 = 1;
pub const CONFIG_EARLY_PRINTK_DBGP: u32 = 1;
pub const CONFIG_GENERIC_ADC_THERMAL_MODULE: u32 = 1;
pub const CONFIG_X86_FRED: u32 = 1;
pub const CONFIG_SND_SOC_WM8750_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SN9C20X_MODULE: u32 = 1;
pub const CONFIG_HAVE_STACK_VALIDATION: u32 = 1;
pub const CONFIG_DVB_ZL10353_MODULE: u32 = 1;
pub const CONFIG_MFD_MAX8997: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_1564_MODULE: u32 = 1;
pub const CONFIG_OCTEONEP_VDPA_MODULE: u32 = 1;
pub const CONFIG_TABLET_USB_ACECAD_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_DSCP_MODULE: u32 = 1;
pub const CONFIG_LTC2309_MODULE: u32 = 1;
pub const CONFIG_USB_PXA27X_MODULE: u32 = 1;
pub const CONFIG_PWM_LPSS_PLATFORM: u32 = 1;
pub const CONFIG_SCD30_CORE_MODULE: u32 = 1;
pub const CONFIG_HAVE_SAMPLE_FTRACE_DIRECT: u32 = 1;
pub const CONFIG_SND_USB_PODHD_MODULE: u32 = 1;
pub const CONFIG_E1000E_HWTS: u32 = 1;
pub const CONFIG_DVB_TDA8083_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_COMM_MODULE: u32 = 1;
pub const CONFIG_B53_SERDES_MODULE: u32 = 1;
pub const CONFIG_USB_DWC2_PCI_MODULE: u32 = 1;
pub const CONFIG_AD9832_MODULE: u32 = 1;
pub const CONFIG_FIRMWARE_MEMMAP: u32 = 1;
pub const CONFIG_ARCH_DMA_ADDR_T_64BIT: u32 = 1;
pub const CONFIG_DVB_STV090x_MODULE: u32 = 1;
pub const CONFIG_AIC7XXX_RESET_DELAY_MS: u32 = 5000;
pub const CONFIG_VIRTIO_VSOCKETS_COMMON_MODULE: u32 = 1;
pub const CONFIG_FB_SAVAGE_I2C: u32 = 1;
pub const CONFIG_NFT_COMPAT_ARP_MODULE: u32 = 1;
pub const CONFIG_ASUS_WMI_MODULE: u32 = 1;
pub const CONFIG_HID_A4TECH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IMX319_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ADV7180_MODULE: u32 = 1;
pub const CONFIG_USB_F_FS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADT7X10_MODULE: u32 = 1;
pub const CONFIG_DVB_ASCOT2E_MODULE: u32 = 1;
pub const CONFIG_LEDS_CLASS_FLASH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX88_BLACKBIRD_MODULE: u32 = 1;
pub const CONFIG_ASUS_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_FB_ATY_BACKLIGHT: u32 = 1;
pub const CONFIG_EFI_ESRT: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TEA5767_MODULE: u32 = 1;
pub const CONFIG_FB_ATY_GX: u32 = 1;
pub const CONFIG_WATCH_QUEUE: u32 = 1;
pub const CONFIG_NET_TULIP: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC3X_SPI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_ARC4_MODULE: u32 = 1;
pub const CONFIG_AGP: u32 = 1;
pub const CONFIG_MFD_CS40L50_CORE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM92_MODULE: u32 = 1;
pub const CONFIG_MMC_SDRICOH_CS_MODULE: u32 = 1;
pub const CONFIG_TEXTSEARCH_BM_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1553_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_HID_SENSOR_TIME_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS6105X_MODULE: u32 = 1;
pub const CONFIG_SND_PROC_FS: u32 = 1;
pub const CONFIG_USB_GSPCA_SUNPLUS_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_INCLINOMETER_3D_MODULE: u32 = 1;
pub const CONFIG_FPGA_MGR_XILINX_SPI_MODULE: u32 = 1;
pub const CONFIG_BATMAN_ADV_DAT: u32 = 1;
pub const CONFIG_UTS_NS: u32 = 1;
pub const CONFIG_MLX5_FPGA: u32 = 1;
pub const CONFIG_HAVE_IRQ_TIME_ACCOUNTING: u32 = 1;
pub const CONFIG_MTD_PLATRAM_MODULE: u32 = 1;
pub const CONFIG_PATA_CYPRESS_MODULE: u32 = 1;
pub const CONFIG_ACPI_APEI_PCIEAER: u32 = 1;
pub const CONFIG_CRYPTO_CTR: u32 = 1;
pub const CONFIG_SND_SOC_RT1017_SDCA_SDW_MODULE: u32 = 1;
pub const CONFIG_DVB_M88DS3103_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_DA9052_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_PCILIB: u32 = 1;
pub const CONFIG_SHUFFLE_PAGE_ALLOCATOR: u32 = 1;
pub const CONFIG_FB_TFT_ILI9320_MODULE: u32 = 1;
pub const CONFIG_WFX_MODULE: u32 = 1;
pub const CONFIG_DVB_AF9013_MODULE: u32 = 1;
pub const CONFIG_CAN_VCAN_MODULE: u32 = 1;
pub const CONFIG_POSIX_CPU_TIMERS_TASK_WORK: u32 = 1;
pub const CONFIG_SND_INTEL_NHLT: u32 = 1;
pub const CONFIG_HID_ALPS_MODULE: u32 = 1;
pub const CONFIG_IGB_MODULE: u32 = 1;
pub const CONFIG_INTEL_HID_EVENT_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_SECMARK_MODULE: u32 = 1;
pub const CONFIG_SCSI_AIC94XX_MODULE: u32 = 1;
pub const CONFIG_MWIFIEX_MODULE: u32 = 1;
pub const CONFIG_INTEL_HFI_THERMAL: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_ITM: u32 = 1;
pub const CONFIG_VHOST_MENU: u32 = 1;
pub const CONFIG_GPIO_MAX3191X_MODULE: u32 = 1;
pub const CONFIG_LOG_CPU_MAX_BUF_SHIFT: u32 = 12;
pub const CONFIG_TYPEC_STUSB160X_MODULE: u32 = 1;
pub const CONFIG_ARCH_CPUIDLE_HALTPOLL: u32 = 1;
pub const CONFIG_LEDS_USER_MODULE: u32 = 1;
pub const CONFIG_COMEDI_MULTIQ3_MODULE: u32 = 1;
pub const CONFIG_AD5686_SPI_MODULE: u32 = 1;
pub const CONFIG_SENSORS_FSCHMD_MODULE: u32 = 1;
pub const CONFIG_EXTCON_MAX8997_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_FD_MODULE: u32 = 1;
pub const CONFIG_USB_EHCI_TT_NEWSCHED: u32 = 1;
pub const CONFIG_SENSORS_NCT6775_CORE_MODULE: u32 = 1;
pub const CONFIG_PARPORT_SERIAL_MODULE: u32 = 1;
pub const CONFIG_BMG160_I2C_MODULE: u32 = 1;
pub const CONFIG_RMI4_F03: u32 = 1;
pub const CONFIG_CRYPTO_CBC: u32 = 1;
pub const CONFIG_SND_PCM_MODULE: u32 = 1;
pub const CONFIG_ALIBABA_ENI_VDPA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_GTM601_MODULE: u32 = 1;
pub const CONFIG_SND_SEQ_MIDI_EVENT_MODULE: u32 = 1;
pub const CONFIG_KS0108_MODULE: u32 = 1;
pub const CONFIG_6LOWPAN_NHC_MOBILITY_MODULE: u32 = 1;
pub const CONFIG_IMA_SECURE_AND_OR_TRUSTED_BOOT: u32 = 1;
pub const CONFIG_INTEL_TPMI_MODULE: u32 = 1;
pub const CONFIG_NFS_ACL_SUPPORT_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_PM_NOTIFIER: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZO: u32 = 1;
pub const CONFIG_CGROUP_WRITEBACK: u32 = 1;
pub const CONFIG_SECURITY_LOCKDOWN_LSM: u32 = 1;
pub const CONFIG_CAIF_TTY_MODULE: u32 = 1;
pub const CONFIG_I2C_MUX_PCA9541_MODULE: u32 = 1;
pub const CONFIG_NET_DEVLINK: u32 = 1;
pub const CONFIG_DRM_I915_REQUEST_TIMEOUT: u32 = 20000;
pub const CONFIG_IIO_ST_LSM6DSX_I2C_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WCD939X_MODULE: u32 = 1;
pub const CONFIG_USB_CATC_MODULE: u32 = 1;
pub const CONFIG_RMI4_F12: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC_DEAD: u32 = 1;
pub const CONFIG_AD8366_MODULE: u32 = 1;
pub const CONFIG_MARVELL_88X2222_PHY_MODULE: u32 = 1;
pub const CONFIG_BMG160_MODULE: u32 = 1;
pub const CONFIG_HP_ACCEL_MODULE: u32 = 1;
pub const CONFIG_DCA_MODULE: u32 = 1;
pub const CONFIG_MAC80211_RC_DEFAULT_MINSTREL: u32 = 1;
pub const CONFIG_NF_CONNTRACK_SNMP_MODULE: u32 = 1;
pub const CONFIG_NLS_KOI8_R_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_DA7219_MODULE: u32 = 1;
pub const CONFIG_ENS160_SPI_MODULE: u32 = 1;
pub const CONFIG_TEXTSEARCH_KMP_MODULE: u32 = 1;
pub const CONFIG_DVB_EC100_MODULE: u32 = 1;
pub const CONFIG_EXPERT: u32 = 1;
pub const CONFIG_P54_USB_MODULE: u32 = 1;
pub const CONFIG_SENSIRION_SGP40_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_SENSORS_I2C_MODULE: u32 = 1;
pub const CONFIG_SPI_TLE62X0_MODULE: u32 = 1;
pub const CONFIG_HIST_TRIGGERS: u32 = 1;
pub const CONFIG_DM_MULTIPATH_ST_MODULE: u32 = 1;
pub const CONFIG_REGMAP_SCCB_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_INGRESS: u32 = 1;
pub const CONFIG_REISERFS_FS_XATTR: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2433_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADV_PCI1723_MODULE: u32 = 1;
pub const CONFIG_MFD_CS42L43_I2C_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_CONNMARK_MODULE: u32 = 1;
pub const CONFIG_WL1251_SPI_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_FIRMWARE_MODULE: u32 = 1;
pub const CONFIG_LEDS_NIC78BX_MODULE: u32 = 1;
pub const CONFIG_SERIO_PCIPS2_MODULE: u32 = 1;
pub const CONFIG_RT2800PCI_RT33XX: u32 = 1;
pub const CONFIG_IIO_BUFFER_HW_CONSUMER_MODULE: u32 = 1;
pub const CONFIG_FB_OPENCORES_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_HX8353D_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_DVB_DS3000_MODULE: u32 = 1;
pub const CONFIG_VIDEO_RJ54N1_MODULE: u32 = 1;
pub const CONFIG_AMD8111_ETH_MODULE: u32 = 1;
pub const CONFIG_NF_FLOW_TABLE_INET_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CHACHA20_X86_64_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_POLYVAL_CLMUL_NI_MODULE: u32 = 1;
pub const CONFIG_ACCESSIBILITY: u32 = 1;
pub const CONFIG_KRETPROBE_ON_RETHOOK: u32 = 1;
pub const CONFIG_AM2315_MODULE: u32 = 1;
pub const CONFIG_NS83820_MODULE: u32 = 1;
pub const CONFIG_USB_NET_HUAWEI_CDC_NCM_MODULE: u32 = 1;
pub const CONFIG_DM_MULTIPATH_IOA_MODULE: u32 = 1;
pub const CONFIG_VT6656_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TFA9879_MODULE: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR_AGGREGATOR_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_JUMPSHOT_MODULE: u32 = 1;
pub const CONFIG_BCMA_DRIVER_PCI: u32 = 1;
pub const CONFIG_BT_LEDS: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_PROBE_MODULE: u32 = 1;
pub const CONFIG_PATA_ATIIXP_MODULE: u32 = 1;
pub const CONFIG_USB_F_UVC_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_8_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ATMEL_MXT_MODULE: u32 = 1;
pub const CONFIG_ACPI_SLEEP: u32 = 1;
pub const CONFIG_SENSORS_ISL68137_MODULE: u32 = 1;
pub const CONFIG_CX_ECAT_MODULE: u32 = 1;
pub const CONFIG_UID16: u32 = 1;
pub const CONFIG_FB_PM2_FIFO_DISCONNECT: u32 = 1;
pub const CONFIG_SND_SOC_ALC5623_MODULE: u32 = 1;
pub const CONFIG_PCENGINES_APU2_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC_MICROLZMA: u32 = 1;
pub const CONFIG_TIPC_MEDIA_UDP: u32 = 1;
pub const CONFIG_CHROMEOS_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_SWAP: u32 = 1;
pub const CONFIG_CB710_DEBUG_ASSUMPTIONS: u32 = 1;
pub const CONFIG_MTD_UBI_NVMEM_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_1032_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WCD938X_SDW_MODULE: u32 = 1;
pub const CONFIG_EPIC100_MODULE: u32 = 1;
pub const CONFIG_MAGIC_SYSRQ_SERIAL: u32 = 1;
pub const CONFIG_PM_WAKELOCKS_GC: u32 = 1;
pub const CONFIG_HAVE_STACKPROTECTOR: u32 = 1;
pub const CONFIG_BNX2_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_LOG_MODULE: u32 = 1;
pub const CONFIG_MT7615E_MODULE: u32 = 1;
pub const CONFIG_HW_RANDOM_AMD_MODULE: u32 = 1;
pub const CONFIG_ACPI_MDIO: u32 = 1;
pub const CONFIG_FXOS8700_I2C_MODULE: u32 = 1;
pub const CONFIG_HMC425_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_PC236_ISA_MODULE: u32 = 1;
pub const CONFIG_SENSORS_THMC50_MODULE: u32 = 1;
pub const CONFIG_SENSORS_STPDDC60_MODULE: u32 = 1;
pub const CONFIG_MFD_MAX14577: u32 = 1;
pub const CONFIG_BATTERY_DS2780_MODULE: u32 = 1;
pub const CONFIG_SND_SEQ_MIDI_EMUL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WSA881X_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_JUMP_LABEL: u32 = 1;
pub const CONFIG_USB_CONFIGFS_ECM: u32 = 1;
pub const CONFIG_GPIO_VIPERBOARD_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_PCBC_MODULE: u32 = 1;
pub const CONFIG_COMPAL_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_INPUT_ADXL34X_I2C_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_MCR20A_MODULE: u32 = 1;
pub const CONFIG_PLATFORM_SI4713_MODULE: u32 = 1;
pub const CONFIG_NETDEVSIM_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CAMELLIA_X86_64_MODULE: u32 = 1;
pub const CONFIG_STEAM_FF: u32 = 1;
pub const CONFIG_RTC_DRV_DA9052_MODULE: u32 = 1;
pub const CONFIG_WIZNET_BUS_ANY: u32 = 1;
pub const CONFIG_BCMA_MODULE: u32 = 1;
pub const CONFIG_LEDS_DA9052_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_AXNET_MODULE: u32 = 1;
pub const CONFIG_HID_HOLTEK_MODULE: u32 = 1;
pub const CONFIG_DRM_VBOXVIDEO_MODULE: u32 = 1;
pub const CONFIG_NETCONSOLE_DYNAMIC: u32 = 1;
pub const CONFIG_NF_CONNTRACK_BROADCAST_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SHA1_SSSE3_MODULE: u32 = 1;
pub const CONFIG_Z3FOLD_MODULE: u32 = 1;
pub const CONFIG_KVM_INTEL_PROVE_VE: u32 = 1;
pub const CONFIG_BOARD_TPCI200_MODULE: u32 = 1;
pub const CONFIG_FB_PM3_MODULE: u32 = 1;
pub const CONFIG_GENWQE_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE: u32 = 1;
pub const CONFIG_CAIF_USB_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_RT5514_MODULE: u32 = 1;
pub const CONFIG_CHARGER_RT9455_MODULE: u32 = 1;
pub const CONFIG_RT2800USB_RT33XX: u32 = 1;
pub const CONFIG_ISL29125_MODULE: u32 = 1;
pub const CONFIG_MMC_SDHCI_PLTFM_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_FIT2_MODULE: u32 = 1;
pub const CONFIG_KVM_MAX_NR_VCPUS: u32 = 4096;
pub const CONFIG_MT76x0_COMMON_MODULE: u32 = 1;
pub const CONFIG_CXL_MEM_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCL711_MODULE: u32 = 1;
pub const CONFIG_SND_OPL3_LIB_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_MCP23S08_I2C_MODULE: u32 = 1;
pub const CONFIG_BXT_WC_PMIC_OPREGION: u32 = 1;
pub const CONFIG_DELL_SMBIOS_SMM: u32 = 1;
pub const CONFIG_VIRTIO_PMEM_MODULE: u32 = 1;
pub const CONFIG_NFT_SYNPROXY_MODULE: u32 = 1;
pub const CONFIG_HID_ZYDACRON_MODULE: u32 = 1;
pub const CONFIG_PREEMPT_RCU: u32 = 1;
pub const CONFIG_KEMPLD_WDT_MODULE: u32 = 1;
pub const CONFIG_USB_NET_ZAURUS_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA6588_MODULE: u32 = 1;
pub const CONFIG_ADIS16203_MODULE: u32 = 1;
pub const CONFIG_HAVE_SYSCALL_TRACEPOINTS: u32 = 1;
pub const CONFIG_IOMMU_IOVA: u32 = 1;
pub const CONFIG_EEEPC_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_I2C_LJCA_MODULE: u32 = 1;
pub const CONFIG_XOR_BLOCKS_MODULE: u32 = 1;
pub const CONFIG_DNOTIFY: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_BACKLIGHT_MODULE: u32 = 1;
pub const CONFIG_BPF_STREAM_PARSER: u32 = 1;
pub const CONFIG_PCMCIA_3C589_MODULE: u32 = 1;
pub const CONFIG_MEDIA_SUBDRV_AUTOSELECT: u32 = 1;
pub const CONFIG_RDS_MODULE: u32 = 1;
pub const CONFIG_XILINX_VCU_MODULE: u32 = 1;
pub const CONFIG_I2C_ROBOTFUZZ_OSIF_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MICROCHIP_KSZ9477_I2C_MODULE: u32 = 1;
pub const CONFIG_MACVLAN_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SHT15_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC: u32 = 1;
pub const CONFIG_IP_NF_RAW_MODULE: u32 = 1;
pub const CONFIG_HAVE_HW_BREAKPOINT: u32 = 1;
pub const CONFIG_BRIDGE_NF_EBTABLES_LEGACY_MODULE: u32 = 1;
pub const CONFIG_AD5764_MODULE: u32 = 1;
pub const CONFIG_MOUSE_VSXXXAA_MODULE: u32 = 1;
pub const CONFIG_CLK_TWL6040_MODULE: u32 = 1;
pub const CONFIG_SPI_CH341_MODULE: u32 = 1;
pub const CONFIG_RANDOM_KMALLOC_CACHES: u32 = 1;
pub const CONFIG_PTDUMP_CORE: u32 = 1;
pub const CONFIG_VIDEO_TEA6420_MODULE: u32 = 1;
pub const CONFIG_SCSI_MPT3SAS_MAX_SGE: u32 = 128;
pub const CONFIG_VIDEO_DT3155_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CTS: u32 = 1;
pub const CONFIG_DVB_USB_EC168_MODULE: u32 = 1;
pub const CONFIG_TDX_GUEST_DRIVER_MODULE: u32 = 1;
pub const CONFIG_RSI_91X_MODULE: u32 = 1;
pub const CONFIG_COMEDI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WCD_CLASSH_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SPCA1528_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ILI210X_MODULE: u32 = 1;
pub const CONFIG_GPIO_AGGREGATOR_MODULE: u32 = 1;
pub const CONFIG_SLIM_QCOM_CTRL_MODULE: u32 = 1;
pub const CONFIG_SND_FIREWIRE_LIB_MODULE: u32 = 1;
pub const CONFIG_HAVE_NMI: u32 = 1;
pub const CONFIG_EXTCON_RT8973A_MODULE: u32 = 1;
pub const CONFIG_DVB_RTL2832_SDR_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_INT128: u32 = 1;
pub const CONFIG_VIDEO_THS8200_MODULE: u32 = 1;
pub const CONFIG_SENSORS_F75375S_MODULE: u32 = 1;
pub const CONFIG_SND_INDIGOIOX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_TOPLEVEL: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_NUVOTON_COMMON_MODULE: u32 = 1;
pub const CONFIG_SCSI_NETLINK: u32 = 1;
pub const CONFIG_CRYPTO_USER_API_AEAD_MODULE: u32 = 1;
pub const CONFIG_INTEL_VBTN_MODULE: u32 = 1;
pub const CONFIG_NETCONSOLE_MODULE: u32 = 1;
pub const CONFIG_THINKPAD_ACPI_ALSA_SUPPORT: u32 = 1;
pub const CONFIG_NVSW_SN2201_MODULE: u32 = 1;
pub const CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN: u32 = 1;
pub const CONFIG_VIRTIO_VFIO_PCI_MODULE: u32 = 1;
pub const CONFIG_SND_HDSPM_MODULE: u32 = 1;
pub const CONFIG_X86_CHECK_BIOS_CORRUPTION: u32 = 1;
pub const CONFIG_ACPI_WMI_MODULE: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_BROADCAST: u32 = 1;
pub const CONFIG_CRYPTO_DEV_SAFEXCEL_MODULE: u32 = 1;
pub const CONFIG_DVB_TTUSB_DEC_MODULE: u32 = 1;
pub const CONFIG_RTC_NVMEM: u32 = 1;
pub const CONFIG_SURFACE3_WMI_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_PRETIMEOUT_GOV_NOOP: u32 = 1;
pub const CONFIG_SND_SOC_WCD937X_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_COMPAT_MMAP_BASES: u32 = 1;
pub const CONFIG_SPS30_I2C_MODULE: u32 = 1;
pub const CONFIG_XEN_PVHVM_SMP: u32 = 1;
pub const CONFIG_KEYBOARD_LM8323_MODULE: u32 = 1;
pub const CONFIG_IIO_SSP_SENSORHUB_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_IMAGIS_MODULE: u32 = 1;
pub const CONFIG_SCSI_HPTIOP_MODULE: u32 = 1;
pub const CONFIG_JFS_POSIX_ACL: u32 = 1;
pub const CONFIG_VIDEO_AU0828_RC: u32 = 1;
pub const CONFIG_LCD_HX8357_MODULE: u32 = 1;
pub const CONFIG_VIDEO_VPX3220_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_3501_MODULE: u32 = 1;
pub const CONFIG_P54_SPI_MODULE: u32 = 1;
pub const CONFIG_DELL_WMI_DESCRIPTOR_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_SYSFS: u32 = 1;
pub const CONFIG_OPT4001_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_LOG_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAC02_MODULE: u32 = 1;
pub const CONFIG_SENSORS_POWERZ_MODULE: u32 = 1;
pub const CONFIG_MEDIA_ALTERA_CI_MODULE: u32 = 1;
pub const CONFIG_PM_TRACE_RTC: u32 = 1;
pub const CONFIG_SENSORS_TPS546D24_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_QT2_MODULE: u32 = 1;
pub const CONFIG_SPI_GPIO_MODULE: u32 = 1;
pub const CONFIG_HID_LED_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_ADP5588_MODULE: u32 = 1;
pub const CONFIG_FB_SYS_FILLRECT: u32 = 1;
pub const CONFIG_SENSORS_I5K_AMB_MODULE: u32 = 1;
pub const CONFIG_INTEL_IDXD_BUS_MODULE: u32 = 1;
pub const CONFIG_I2C_DIOLAN_U2C_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WCD9335_MODULE: u32 = 1;
pub const CONFIG_XARRAY_MULTI: u32 = 1;
pub const CONFIG_USB_SERIAL_IPW_MODULE: u32 = 1;
pub const CONFIG_DRM_ACCEL_QAIC_MODULE: u32 = 1;
pub const CONFIG_USBIP_VUDC_MODULE: u32 = 1;
pub const CONFIG_RMI4_F11: u32 = 1;
pub const CONFIG_LIB80211_CRYPT_WEP_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_FILE: u32 = 1;
pub const CONFIG_DCB: u32 = 1;
pub const CONFIG_ZSWAP: u32 = 1;
pub const CONFIG_SENSORS_TMP103_MODULE: u32 = 1;
pub const CONFIG_MT7921_COMMON_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT1015P_MODULE: u32 = 1;
pub const CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZO: u32 = 1;
pub const CONFIG_TI_ADS8344_MODULE: u32 = 1;
pub const CONFIG_USB_R8A66597_HCD_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_FC0013_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADM1025_MODULE: u32 = 1;
pub const CONFIG_INPUT_AD714X_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_TWOFISH_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_PREL32_RELOCATIONS: u32 = 1;
pub const CONFIG_PACKING: u32 = 1;
pub const CONFIG_FUSION_SPI_MODULE: u32 = 1;
pub const CONFIG_IPV6_MIP6_MODULE: u32 = 1;
pub const CONFIG_SND_FM801_TEA575X_BOOL: u32 = 1;
pub const CONFIG_NET_DSA_QCA8K_LEDS_SUPPORT: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2430_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_QCA: u32 = 1;
pub const CONFIG_MTD_SWAP_MODULE: u32 = 1;
pub const CONFIG_MHI_NET_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_RNG_DEFAULT: u32 = 1;
pub const CONFIG_ARCH_MEMORY_PROBE: u32 = 1;
pub const CONFIG_RV: u32 = 1;
pub const CONFIG_STREAM_PARSER: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_RENOIR_MODULE: u32 = 1;
pub const CONFIG_KVM_GENERIC_MMU_NOTIFIER: u32 = 1;
pub const CONFIG_WINBOND_840_MODULE: u32 = 1;
pub const CONFIG_XEN_COMPAT_XENFS: u32 = 1;
pub const CONFIG_UEFI_CPER: u32 = 1;
pub const CONFIG_AS_WRUSS: u32 = 1;
pub const CONFIG_SENSORS_CORSAIR_CPRO_MODULE: u32 = 1;
pub const CONFIG_X86_MPPARSE: u32 = 1;
pub const CONFIG_IP_VS_SED_MODULE: u32 = 1;
pub const CONFIG_LIBFCOE_MODULE: u32 = 1;
pub const CONFIG_ADF4377_MODULE: u32 = 1;
pub const CONFIG_X86_HAVE_PAE: u32 = 1;
pub const CONFIG_MDIO_DEVRES: u32 = 1;
pub const CONFIG_XZ_DEC_ARM: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_CS35L41_I2C_MODULE: u32 = 1;
pub const CONFIG_DVB_RTL2832_MODULE: u32 = 1;
pub const CONFIG_INET_ESP_OFFLOAD_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MT7530_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MODULE: u32 = 1;
pub const CONFIG_HPFS_FS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_INA2XX_MODULE: u32 = 1;
pub const CONFIG_MEEGOPAD_ANX7428_MODULE: u32 = 1;
pub const CONFIG_MTD_UBI_BEB_LIMIT: u32 = 20;
pub const CONFIG_HOTPLUG_PCI: u32 = 1;
pub const CONFIG_VIDEO_S5K5BAF_MODULE: u32 = 1;
pub const CONFIG_USB_VIDEO_CLASS_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_NAMED_AS_FIXED_SANITIZERS: u32 = 1;
pub const CONFIG_F2FS_FS_LZO: u32 = 1;
pub const CONFIG_SCSI_PM8001_MODULE: u32 = 1;
pub const CONFIG_SENSORS_AD7418_MODULE: u32 = 1;
pub const CONFIG_NFC_NCI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5640_MODULE: u32 = 1;
pub const CONFIG_HAVE_FENTRY: u32 = 1;
pub const CONFIG_AXP20X_ADC_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1374_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT1015_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_IDLETIMER_MODULE: u32 = 1;
pub const CONFIG_CIFS_POSIX: u32 = 1;
pub const CONFIG_HID_COUGAR_MODULE: u32 = 1;
pub const CONFIG_HSC030PA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX98090_MODULE: u32 = 1;
pub const CONFIG_PWM: u32 = 1;
pub const CONFIG_PARAVIRT_XXL: u32 = 1;
pub const CONFIG_NET_VENDOR_HUAWEI: u32 = 1;
pub const CONFIG_HAVE_MIXED_BREAKPOINTS_REGS: u32 = 1;
pub const CONFIG_DRM_XE_JOB_TIMEOUT_MIN: u32 = 1;
pub const CONFIG_AD7780_MODULE: u32 = 1;
pub const CONFIG_CONFIGFS_FS: u32 = 1;
pub const CONFIG_QCOM_HIDMA_MGMT_MODULE: u32 = 1;
pub const CONFIG_NVIDIA_SHIELD_FF: u32 = 1;
pub const CONFIG_JFFS2_FS_WRITEBUFFER: u32 = 1;
pub const CONFIG_INTEL_MEI_VSC_HW_MODULE: u32 = 1;
pub const CONFIG_LPC_SCH_MODULE: u32 = 1;
pub const CONFIG_MTD_SST25L_MODULE: u32 = 1;
pub const CONFIG_DEFAULT_INIT: &[u8; 1] = b"\0";
pub const CONFIG_SND_SOC_WM8985_MODULE: u32 = 1;
pub const CONFIG_RT2500PCI_MODULE: u32 = 1;
pub const CONFIG_MUSB_PIO_ONLY: u32 = 1;
pub const CONFIG_SND_SPI: u32 = 1;
pub const CONFIG_XILLYUSB_MODULE: u32 = 1;
pub const CONFIG_SPS30_MODULE: u32 = 1;
pub const CONFIG_SPMI_HISI3670_MODULE: u32 = 1;
pub const CONFIG_MAX1241_MODULE: u32 = 1;
pub const CONFIG_KXCJK1013_MODULE: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_PC_SERIO: u32 = 1;
pub const CONFIG_MLX_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_VIRT_DRIVERS: u32 = 1;
pub const CONFIG_CAN_ETAS_ES58X_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_NITROX_MODULE: u32 = 1;
pub const CONFIG_PCI_HYPERV_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_DENALI_PCI_MODULE: u32 = 1;
pub const CONFIG_ATA_ACPI: u32 = 1;
pub const CONFIG_RTW88_8723DU_MODULE: u32 = 1;
pub const CONFIG_NET_CLS: u32 = 1;
pub const CONFIG_SND_SOC_ICS43432_MODULE: u32 = 1;
pub const CONFIG_HAVE_EXIT_THREAD: u32 = 1;
pub const CONFIG_NET_VENDOR_AGERE: u32 = 1;
pub const CONFIG_RAID6_PQ_BENCHMARK: u32 = 1;
pub const CONFIG_W1_CON: u32 = 1;
pub const CONFIG_HID_ACRUX_FF: u32 = 1;
pub const CONFIG_NFT_REJECT_IPV4_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DA9055_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_OPTS_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_EGALAX: u32 = 1;
pub const CONFIG_THUNDER_NIC_BGX_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_PADLOCK_SHA_MODULE: u32 = 1;
pub const CONFIG_SATA_MV_MODULE: u32 = 1;
pub const CONFIG_SCHEDSTATS: u32 = 1;
pub const CONFIG_ALTERA_STAPL_MODULE: u32 = 1;
pub const CONFIG_VIA_VELOCITY_MODULE: u32 = 1;
pub const CONFIG_REALTEK_PHY_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_KPP2: u32 = 1;
pub const CONFIG_FB_PM2_MODULE: u32 = 1;
pub const CONFIG_TCP_AO: u32 = 1;
pub const CONFIG_AD7091R8_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_SKBEDIT_MODULE: u32 = 1;
pub const CONFIG_DRM_DISPLAY_DP_AUX_CEC: u32 = 1;
pub const CONFIG_MCP9600_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_STOP_TIMEOUT: u32 = 100;
pub const CONFIG_SND_SOC_SOF_MERRIFIELD_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LENOVO_EC_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_SIG: u32 = 1;
pub const CONFIG_PATA_PARPORT_FIT3_MODULE: u32 = 1;
pub const CONFIG_TPS65010_MODULE: u32 = 1;
pub const CONFIG_MOUSE_GPIO_MODULE: u32 = 1;
pub const CONFIG_VHOST_VSOCK_MODULE: u32 = 1;
pub const CONFIG_COMEDI_RTD520_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_LOOP_MIN_COUNT: u32 = 8;
pub const CONFIG_SND_SOC_RT700_SDW_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_DIO200_MODULE: u32 = 1;
pub const CONFIG_B43LEGACY_HWRNG: u32 = 1;
pub const CONFIG_MODVERSIONS: u32 = 1;
pub const CONFIG_NFT_QUEUE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DRBG_HASH: u32 = 1;
pub const CONFIG_INFINIBAND_QIB_MODULE: u32 = 1;
pub const CONFIG_MCP4922_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_6527_MODULE: u32 = 1;
pub const CONFIG_ITCO_VENDOR_SUPPORT: u32 = 1;
pub const CONFIG_SUNDANCE_MODULE: u32 = 1;
pub const CONFIG_DCACHE_WORD_ACCESS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CFI_CLANG: u32 = 1;
pub const CONFIG_RANDOMIZE_KSTACK_OFFSET_DEFAULT: u32 = 1;
pub const CONFIG_DRM_TTM_HELPER_MODULE: u32 = 1;
pub const CONFIG_CDROM: u32 = 1;
pub const CONFIG_MTD_QINFO_PROBE_MODULE: u32 = 1;
pub const CONFIG_P54_COMMON_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_RAVE_SP_MODULE: u32 = 1;
pub const CONFIG_SFC_SIENA_MTD: u32 = 1;
pub const CONFIG_ACERHDF_MODULE: u32 = 1;
pub const CONFIG_DRM_VKMS_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TEA5761_MODULE: u32 = 1;
pub const CONFIG_AD7173_MODULE: u32 = 1;
pub const CONFIG_COMEDI_USBDUXFAST_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SCH56XX_COMMON_MODULE: u32 = 1;
pub const CONFIG_CONTEXT_SWITCH_TRACER: u32 = 1;
pub const CONFIG_USB_GSPCA_VC032X_MODULE: u32 = 1;
pub const CONFIG_XEN_SCSI_FRONTEND_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADL_PCI6208_MODULE: u32 = 1;
pub const CONFIG_EXTCON: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_DH895xCCVF_MODULE: u32 = 1;
pub const CONFIG_RESET_GPIO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC2978_REGULATOR: u32 = 1;
pub const CONFIG_BAYCOM_SER_FDX_MODULE: u32 = 1;
pub const CONFIG_ADXL367_MODULE: u32 = 1;
pub const CONFIG_IIO_INTERRUPT_TRIGGER_MODULE: u32 = 1;
pub const CONFIG_IE6XX_WDT_MODULE: u32 = 1;
pub const CONFIG_MT7663_USB_SDIO_COMMON_MODULE: u32 = 1;
pub const CONFIG_I82092_MODULE: u32 = 1;
pub const CONFIG_DRM_I2C_NXP_TDA998X_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_STK014_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_SURFACE3_SPI_MODULE: u32 = 1;
pub const CONFIG_DMA_ACPI: u32 = 1;
pub const CONFIG_INPUT_KEYBOARD: u32 = 1;
pub const CONFIG_DP83TC811_PHY_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_RT5682_MACH_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_EXC3000_MODULE: u32 = 1;
pub const CONFIG_TRUSTED_KEYS: u32 = 1;
pub const CONFIG_CROS_EC_UART_MODULE: u32 = 1;
pub const CONFIG_ATH9K_COMMON_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_I2C_NUVOTON_MODULE: u32 = 1;
pub const CONFIG_MQ_IOSCHED_KYBER_MODULE: u32 = 1;
pub const CONFIG_CHARGER_BQ24735_MODULE: u32 = 1;
pub const CONFIG_SND_SEQ_DUMMY_MODULE: u32 = 1;
pub const CONFIG_TOSHIBA_BT_RFKILL_MODULE: u32 = 1;
pub const CONFIG_DEVICE_MIGRATION: u32 = 1;
pub const CONFIG_KEYBOARD_LM8333_MODULE: u32 = 1;
pub const CONFIG_ACPI_REV_OVERRIDE_POSSIBLE: u32 = 1;
pub const CONFIG_MISDN_IPAC_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DEFAULT_BUF_SIZE_KB: u32 = 2048;
pub const CONFIG_SND_MPU401_UART_MODULE: u32 = 1;
pub const CONFIG_DELL_WMI_SYSMAN_MODULE: u32 = 1;
pub const CONFIG_DRAGONRISE_FF: u32 = 1;
pub const CONFIG_THREAD_INFO_IN_TASK: u32 = 1;
pub const CONFIG_SYSFS: u32 = 1;
pub const CONFIG_XFS_RT: u32 = 1;
pub const CONFIG_RD_ZSTD: u32 = 1;
pub const CONFIG_USB_MR800_MODULE: u32 = 1;
pub const CONFIG_SECURITY_SELINUX_DEVELOP: u32 = 1;
pub const CONFIG_MT7925E_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_THREAD_STRUCT_WHITELIST: u32 = 1;
pub const CONFIG_PATA_PARPORT_ON26_MODULE: u32 = 1;
pub const CONFIG_BRCMFMAC_PROTO_BCDC: u32 = 1;
pub const CONFIG_SIGNATURE: u32 = 1;
pub const CONFIG_MFD_SM501_GPIO: u32 = 1;
pub const CONFIG_INFINIBAND_SRPT_MODULE: u32 = 1;
pub const CONFIG_X86_64: u32 = 1;
pub const CONFIG_NET_CLS_FLOW_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8523_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7146_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BROADWELL_MACH_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ST1232_MODULE: u32 = 1;
pub const CONFIG_DM_THIN_PROVISIONING_MODULE: u32 = 1;
pub const CONFIG_TPS6507X_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_HYBLA_MODULE: u32 = 1;
pub const CONFIG_SND_UMP_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_UPD161704_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AW87390_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_XC5000_MODULE: u32 = 1;
pub const CONFIG_HAVE_RSEQ: u32 = 1;
pub const CONFIG_ATLAS_PH_SENSOR_MODULE: u32 = 1;
pub const CONFIG_HID_AUREAL_MODULE: u32 = 1;
pub const CONFIG_LEDS_PCA9532_GPIO: u32 = 1;
pub const CONFIG_DVB_CORE_MODULE: u32 = 1;
pub const CONFIG_IP_NF_TARGET_REJECT_MODULE: u32 = 1;
pub const CONFIG_REGMAP_IRQ: u32 = 1;
pub const CONFIG_SND_SOC_COMPRESS: u32 = 1;
pub const CONFIG_NET_EMATCH_TEXT_MODULE: u32 = 1;
pub const CONFIG_HAVE_KCSAN_COMPILER: u32 = 1;
pub const CONFIG_TCG_VTPM_PROXY_MODULE: u32 = 1;
pub const CONFIG_EFI_VARS_PSTORE_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_ADP5589_MODULE: u32 = 1;
pub const CONFIG_SND_ENS1370_MODULE: u32 = 1;
pub const CONFIG_ADMV8818_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_METEORLAKE_MODULE: u32 = 1;
pub const CONFIG_I2C_XILINX_MODULE: u32 = 1;
pub const CONFIG_ATA_OVER_ETH_MODULE: u32 = 1;
pub const CONFIG_SFC_MTD: u32 = 1;
pub const CONFIG_IPVLAN_MODULE: u32 = 1;
pub const CONFIG_MMC_ALCOR_MODULE: u32 = 1;
pub const CONFIG_SERIO_RAW_MODULE: u32 = 1;
pub const CONFIG_WMI_BMOF_MODULE: u32 = 1;
pub const CONFIG_STRICT_DEVMEM: u32 = 1;
pub const CONFIG_GCC10_NO_ARRAY_BOUNDS: u32 = 1;
pub const CONFIG_SND_SOC_CS35L41_LIB_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1672_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TMP102_MODULE: u32 = 1;
pub const CONFIG_X86_PLATFORM_DRIVERS_DELL: u32 = 1;
pub const CONFIG_RTW88_8821C_MODULE: u32 = 1;
pub const CONFIG_SND_INDIGOIO_MODULE: u32 = 1;
pub const CONFIG_X86_NUMACHIP: u32 = 1;
pub const CONFIG_MEDIA_TUNER_FC0012_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADM1026_MODULE: u32 = 1;
pub const CONFIG_EEPROM_AT25_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_SANE_STACKPROTECTOR: u32 = 1;
pub const CONFIG_VIDEO_S5K6A3_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DT2801_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_STATE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ES8328_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NCT6775_I2C_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_BAYTRAIL: u32 = 1;
pub const CONFIG_LEDS_MAX8997_MODULE: u32 = 1;
pub const CONFIG_MMC35240_MODULE: u32 = 1;
pub const CONFIG_SPI_DYNAMIC: u32 = 1;
pub const CONFIG_PPP_DEFLATE_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2431_MODULE: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_ONDEMAND: u32 = 1;
pub const CONFIG_PHY_CPCAP_USB_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX8688_MODULE: u32 = 1;
pub const CONFIG_MFD_WM5110: u32 = 1;
pub const CONFIG_MFD_88PM800_MODULE: u32 = 1;
pub const CONFIG_BCM_VK_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8728_MODULE: u32 = 1;
pub const CONFIG_PPDEV_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_HIDEEP_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_AD5398_MODULE: u32 = 1;
pub const CONFIG_DCDBAS_MODULE: u32 = 1;
pub const CONFIG_COMEDI_S626_MODULE: u32 = 1;
pub const CONFIG_VT_HW_CONSOLE_BINDING: u32 = 1;
pub const CONFIG_I2C_ALGOBIT_MODULE: u32 = 1;
pub const CONFIG_SPI_SLAVE_TIME_MODULE: u32 = 1;
pub const CONFIG_INPUT_RT5120_PWRKEY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_PM6764TR_MODULE: u32 = 1;
pub const CONFIG_DVB_AV7110_MODULE: u32 = 1;
pub const CONFIG_EXTCON_USBC_TUSB320_MODULE: u32 = 1;
pub const CONFIG_HAVE_RETHOOK: u32 = 1;
pub const CONFIG_INPUT_ADXL34X_MODULE: u32 = 1;
pub const CONFIG_I2C_HID_ACPI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CAST_COMMON_MODULE: u32 = 1;
pub const CONFIG_NF_NAT_MASQUERADE: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS: u32 = 1;
pub const CONFIG_AS_TPAUSE: u32 = 1;
pub const CONFIG_INPUT_DRV2665_HAPTICS_MODULE: u32 = 1;
pub const CONFIG_MMIOTRACE: u32 = 1;
pub const CONFIG_NF_CT_NETLINK_HELPER_MODULE: u32 = 1;
pub const CONFIG_MFD_MT6360_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L32_MODULE: u32 = 1;
pub const CONFIG_NFC_ST95HF_MODULE: u32 = 1;
pub const CONFIG_MOUSE_SYNAPTICS_I2C_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_852_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_WHITEHEAT_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_ECN_MODULE: u32 = 1;
pub const CONFIG_SND_AW2_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_TOPLEVEL: u32 = 1;
pub const CONFIG_BMC150_MAGN_I2C_MODULE: u32 = 1;
pub const CONFIG_BARCO_P50_GPIO_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_2200_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_MODULE: u32 = 1;
pub const CONFIG_IPMI_DEVICE_INTERFACE_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_AF9005_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CIRRUS_SCODEC_MODULE: u32 = 1;
pub const CONFIG_VIDEO_USBTV_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5682_SDW_MODULE: u32 = 1;
pub const CONFIG_SND_HDSP_MODULE: u32 = 1;
pub const CONFIG_XEN_PCI_STUB: u32 = 1;
pub const CONFIG_SND_AMD_ASOC_ACP70_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_GENERIC_MODULE: u32 = 1;
pub const CONFIG_RTC_CLASS: u32 = 1;
pub const CONFIG_POWER_SEQUENCING_QCOM_WCN_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RAA215300_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ASUS_ROG_RYUJIN_MODULE: u32 = 1;
pub const CONFIG_INPUT_PWM_BEEPER_MODULE: u32 = 1;
pub const CONFIG_CIFS_SWN_UPCALL: u32 = 1;
pub const CONFIG_JOYSTICK_SEESAW_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LZO: u32 = 1;
pub const CONFIG_SND_SUPPORT_OLD_API: u32 = 1;
pub const CONFIG_LATTICE_ECP3_CONFIG_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_869_MODULE: u32 = 1;
pub const CONFIG_FWNODE_MDIO: u32 = 1;
pub const CONFIG_BATTERY_AXP20X_MODULE: u32 = 1;
pub const CONFIG_PERF_EVENTS: u32 = 1;
pub const CONFIG_GPIO_ARIZONA_MODULE: u32 = 1;
pub const CONFIG_RENESAS_PHY_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_AH_MODULE: u32 = 1;
pub const CONFIG_HAVE_HARDLOCKUP_DETECTOR_PERF: u32 = 1;
pub const CONFIG_RV_REACT_PRINTK: u32 = 1;
pub const CONFIG_SENSORS_SURFACE_FAN_MODULE: u32 = 1;
pub const CONFIG_MHI_WWAN_MBIM_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADT7470_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_VLAN_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS: u32 = 1;
pub const CONFIG_PINCTRL_DA9062_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKYLAKE_FAMILY_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RTQ2134_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SHA256_SSSE3_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_LED_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_NR_UARTS: u32 = 48;
pub const CONFIG_XEN_DOM0: u32 = 1;
pub const CONFIG_GP2AP020A00F_MODULE: u32 = 1;
pub const CONFIG_ADJD_S311_MODULE: u32 = 1;
pub const CONFIG_CRC8_MODULE: u32 = 1;
pub const CONFIG_PCIEPORTBUS: u32 = 1;
pub const CONFIG_BATTERY_RX51_MODULE: u32 = 1;
pub const CONFIG_SYSTEMPORT_MODULE: u32 = 1;
pub const CONFIG_MISDN_HFCPCI_MODULE: u32 = 1;
pub const CONFIG_SENSORS_CORETEMP_MODULE: u32 = 1;
pub const CONFIG_PCIE_DPC: u32 = 1;
pub const CONFIG_USB_STORAGE_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_LME2510_MODULE: u32 = 1;
pub const CONFIG_I8254_MODULE: u32 = 1;
pub const CONFIG_X86_ESPFIX64: u32 = 1;
pub const CONFIG_REMOTEPROC_CDEV: u32 = 1;
pub const CONFIG_SENSORS_TPS53679_MODULE: u32 = 1;
pub const CONFIG_PATA_IT821X_MODULE: u32 = 1;
pub const CONFIG_IOMMU_API: u32 = 1;
pub const CONFIG_ZISOFS: u32 = 1;
pub const CONFIG_MAX5481_MODULE: u32 = 1;
pub const CONFIG_MAPPING_DIRTY_HELPERS: u32 = 1;
pub const CONFIG_USB_HCD_SSB_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_RSA: u32 = 1;
pub const CONFIG_HID_LOGITECH_HIDPP_MODULE: u32 = 1;
pub const CONFIG_FB_SIS_315: u32 = 1;
pub const CONFIG_REGULATOR_WM8994_MODULE: u32 = 1;
pub const CONFIG_VMXNET3_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_MANY_PORTS: u32 = 1;
pub const CONFIG_IR_JVC_DECODER_MODULE: u32 = 1;
pub const CONFIG_SCSI_AIC79XX_MODULE: u32 = 1;
pub const CONFIG_NVME_TCP_MODULE: u32 = 1;
pub const CONFIG_NET_IPGRE_BROADCAST: u32 = 1;
pub const CONFIG_SENSORS_SHTC1_MODULE: u32 = 1;
pub const CONFIG_LOCKD_V4: u32 = 1;
pub const CONFIG_SURFACE_HID_CORE_MODULE: u32 = 1;
pub const CONFIG_CIFS_DFS_UPCALL: u32 = 1;
pub const CONFIG_TYPEC_TCPCI_MODULE: u32 = 1;
pub const CONFIG_TI_ADC12138_MODULE: u32 = 1;
pub const CONFIG_CALL_THUNKS: u32 = 1;
pub const CONFIG_AQUANTIA_PHY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_DELL_SMM_MODULE: u32 = 1;
pub const CONFIG_WATCHDOG_CORE: u32 = 1;
pub const CONFIG_IIO_ST_ACCEL_3AXIS_MODULE: u32 = 1;
pub const CONFIG_AD5421_MODULE: u32 = 1;
pub const CONFIG_UCSI_CCG_MODULE: u32 = 1;
pub const CONFIG_FB_SIS_300: u32 = 1;
pub const CONFIG_LTC2485_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_HDMI_MODULE: u32 = 1;
pub const CONFIG_SCSI_DH_EMC_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_VIRTUAL_CONSUMER_MODULE: u32 = 1;
pub const CONFIG_IBMASR_MODULE: u32 = 1;
pub const CONFIG_CROS_USBPD_NOTIFY_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RT6160_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS4349_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_MADERA_MODULE: u32 = 1;
pub const CONFIG_BQL: u32 = 1;
pub const CONFIG_IO_URING: u32 = 1;
pub const CONFIG_HID_SENSOR_ACCEL_3D_MODULE: u32 = 1;
pub const CONFIG_IIO_ADIS_LIB_BUFFER: u32 = 1;
pub const CONFIG_SND_SOC_RT1316_SDW_MODULE: u32 = 1;
pub const CONFIG_ASYMMETRIC_KEY_TYPE: u32 = 1;
pub const CONFIG_INV_ICM42600_SPI_MODULE: u32 = 1;
pub const CONFIG_ACPI_TABLE_LIB: u32 = 1;
pub const CONFIG_NFC_S3FWRN5_I2C_MODULE: u32 = 1;
pub const CONFIG_JFFS2_LZO: u32 = 1;
pub const CONFIG_RTC_DRV_PCF8523_MODULE: u32 = 1;
pub const CONFIG_ARCNET_COM90xxIO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX20751_MODULE: u32 = 1;
pub const CONFIG_INPUT_MOUSE: u32 = 1;
pub const CONFIG_PROC_VMCORE: u32 = 1;
pub const CONFIG_SENSORS_MP2891_MODULE: u32 = 1;
pub const CONFIG_DEV_DAX_PMEM_MODULE: u32 = 1;
pub const CONFIG_RTLLIB_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_X1205_MODULE: u32 = 1;
pub const CONFIG_MMC_USHC_MODULE: u32 = 1;
pub const CONFIG_GPIO_AMD_FCH_MODULE: u32 = 1;
pub const CONFIG_SATA_SX4_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX14577_MODULE: u32 = 1;
pub const CONFIG_KDB_KEYBOARD: u32 = 1;
pub const CONFIG_BMA400_SPI_MODULE: u32 = 1;
pub const CONFIG_INTEL_IOMMU_FLOPPY_WA: u32 = 1;
pub const CONFIG_KVM_GENERIC_DIRTYLOG_READ_PROTECT: u32 = 1;
pub const CONFIG_DECOMPRESS_XZ: u32 = 1;
pub const CONFIG_MICROCHIP_T1S_PHY_MODULE: u32 = 1;
pub const CONFIG_INTEL_MEI_GSC_PROXY_MODULE: u32 = 1;
pub const CONFIG_NVME_HOST_AUTH: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_SIGMATEL_MODULE: u32 = 1;
pub const CONFIG_MLX5_ESWITCH: u32 = 1;
pub const CONFIG_LEDS_PWM_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7134_MODULE: u32 = 1;
pub const CONFIG_MAC_EMUMOUSEBTN_MODULE: u32 = 1;
pub const CONFIG_USB_LEGOTOWER_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MAX6900_MODULE: u32 = 1;
pub const CONFIG_INTEL_WMI_SBL_FW_UPDATE_MODULE: u32 = 1;
pub const CONFIG_MTD_BLOCK_MODULE: u32 = 1;
pub const CONFIG_SND_RME9652_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_BCM_SF2_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_GOODIX_BERLIN_I2C_MODULE: u32 = 1;
pub const CONFIG_TIPC_CRYPTO: u32 = 1;
pub const CONFIG_INFINIBAND_USER_ACCESS_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_737_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SMSC47M192_MODULE: u32 = 1;
pub const CONFIG_MODULES_USE_ELF_RELA: u32 = 1;
pub const CONFIG_NFS_V4_2: u32 = 1;
pub const CONFIG_NVME_KEYRING_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_TPS6524X_MODULE: u32 = 1;
pub const CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL: u32 = 1;
pub const CONFIG_RTC_DRV_RV3029C2_MODULE: u32 = 1;
pub const CONFIG_RT2400PCI_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_MODULE: u32 = 1;
pub const CONFIG_CLOSURES: u32 = 1;
pub const CONFIG_MFD_AXP20X_I2C_MODULE: u32 = 1;
pub const CONFIG_HAVE_CALL_THUNKS: u32 = 1;
pub const CONFIG_BOOT_CONFIG: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKL_MODULE: u32 = 1;
pub const CONFIG_X86_CET: u32 = 1;
pub const CONFIG_TULIP_MODULE: u32 = 1;
pub const CONFIG_MUX_ADG792A_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK_CDCE706_MODULE: u32 = 1;
pub const CONFIG_USB_XHCI_HCD: u32 = 1;
pub const CONFIG_HID_KYE_MODULE: u32 = 1;
pub const CONFIG_ETHERNET: u32 = 1;
pub const CONFIG_INFINIBAND_RTRS_CLIENT_MODULE: u32 = 1;
pub const CONFIG_DRM_TTM_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV772X_MODULE: u32 = 1;
pub const CONFIG_NTB_PINGPONG_MODULE: u32 = 1;
pub const CONFIG_NFSD_V3_ACL: u32 = 1;
pub const CONFIG_BLK_DEV_PCIESSD_MTIP32XX_MODULE: u32 = 1;
pub const CONFIG_PWM_TWL_LED_MODULE: u32 = 1;
pub const CONFIG_I2C_PIIX4_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_CHT_BSW_RT5645_MACH_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_CONNCOUNT_MODULE: u32 = 1;
pub const CONFIG_MTD_CFI_I2: u32 = 1;
pub const CONFIG_UBSAN_ENUM: u32 = 1;
pub const CONFIG_SND_SOC_FSL_SSI_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_LP8788_MODULE: u32 = 1;
pub const CONFIG_AD7266_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_LPASS_VA_MACRO_MODULE: u32 = 1;
pub const CONFIG_SND_ENS1371_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_LKKBD_MODULE: u32 = 1;
pub const CONFIG_INTEL_QEP_MODULE: u32 = 1;
pub const CONFIG_DELL_PC_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_4XXX_MODULE: u32 = 1;
pub const CONFIG_GTP_MODULE: u32 = 1;
pub const CONFIG_TREE_SRCU: u32 = 1;
pub const CONFIG_CXL_ACPI_MODULE: u32 = 1;
pub const CONFIG_DRM_ACCEL_IVPU_MODULE: u32 = 1;
pub const CONFIG_NETFS_STATS: u32 = 1;
pub const CONFIG_CRYPTO_CAMELLIA_AESNI_AVX2_X86_64_MODULE: u32 = 1;
pub const CONFIG_RADIO_SI470X_MODULE: u32 = 1;
pub const CONFIG_STK8BA50_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_LTC3589_MODULE: u32 = 1;
pub const CONFIG_NTFS_FS_MODULE: u32 = 1;
pub const CONFIG_C2PORT_DURAMAR_2150_MODULE: u32 = 1;
pub const CONFIG_IWLWIFI_MODULE: u32 = 1;
pub const CONFIG_BT_MTK_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_AMANDA_MODULE: u32 = 1;
pub const CONFIG_VEML6075_MODULE: u32 = 1;
pub const CONFIG_TI_ADS7924_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_88PG86X_MODULE: u32 = 1;
pub const CONFIG_PSE_REGULATOR_MODULE: u32 = 1;
pub const CONFIG_EEPROM_AT24_MODULE: u32 = 1;
pub const CONFIG_BT_HIDP_MODULE: u32 = 1;
pub const CONFIG_SND_MAESTRO3_INPUT: u32 = 1;
pub const CONFIG_SCSI_UFSHCD_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_MOXA_INTELLIO_MODULE: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR: u32 = 1;
pub const CONFIG_BACKLIGHT_MP3309C_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_STRICT_KERNEL_RWX: u32 = 1;
pub const CONFIG_SUNRPC_BACKCHANNEL: u32 = 1;
pub const CONFIG_COMEDI_ADV_PCI1720_MODULE: u32 = 1;
pub const CONFIG_RTL8192SE_MODULE: u32 = 1;
pub const CONFIG_VMWARE_PVSCSI_MODULE: u32 = 1;
pub const CONFIG_WL1251_MODULE: u32 = 1;
pub const CONFIG_HAVE_LIVEPATCH: u32 = 1;
pub const CONFIG_SND_SOC_AK4554_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RTQ6752_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_TIMEOUT: u32 = 1;
pub const CONFIG_TOUCHSCREEN_MELFAS_MIP4_MODULE: u32 = 1;
pub const CONFIG_WWAN_MODULE: u32 = 1;
pub const CONFIG_GPIO_WINBOND_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_POLICE_MODULE: u32 = 1;
pub const CONFIG_HID_UCLOGIC_MODULE: u32 = 1;
pub const CONFIG_BLOCK_HOLDER_DEPRECATED: u32 = 1;
pub const CONFIG_HID_WALTOP_MODULE: u32 = 1;
pub const CONFIG_SERIAL_KGDB_NMI: u32 = 1;
pub const CONFIG_PATA_OLDPIIX_MODULE: u32 = 1;
pub const CONFIG_ADF4371_MODULE: u32 = 1;
pub const CONFIG_RIONET_TX_SIZE: u32 = 128;
pub const CONFIG_USB_STORAGE_ISD200_MODULE: u32 = 1;
pub const CONFIG_INTEL_TCC: u32 = 1;
pub const CONFIG_CRC32_SLICEBY8: u32 = 1;
pub const CONFIG_GPIO_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_ADRF6780_MODULE: u32 = 1;
pub const CONFIG_USB_SNP_CORE_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_OLD_COMPAT_IPC: u32 = 1;
pub const CONFIG_SENSORS_AQUACOMPUTER_D5NEXT_MODULE: u32 = 1;
pub const CONFIG_DRM_MIPI_DBI_MODULE: u32 = 1;
pub const CONFIG_VT6655_MODULE: u32 = 1;
pub const CONFIG_KEXEC_BZIMAGE_VERIFY_SIG: u32 = 1;
pub const CONFIG_SCSI_LPFC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_HASWELL_MACH_MODULE: u32 = 1;
pub const CONFIG_INTEL_IDLE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L33_MODULE: u32 = 1;
pub const CONFIG_REALTEK_AUTOPM: u32 = 1;
pub const CONFIG_MCP3911_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IR_I2C_MODULE: u32 = 1;
pub const CONFIG_GENERIC_IRQ_MATRIX_ALLOCATOR: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_GPIO_MODULE: u32 = 1;
pub const CONFIG_NI903X_WDT_MODULE: u32 = 1;
pub const CONFIG_LV0104CS_MODULE: u32 = 1;
pub const CONFIG_NFT_REJECT_MODULE: u32 = 1;
pub const CONFIG_SND_RME32_MODULE: u32 = 1;
pub const CONFIG_INET_DIAG_DESTROY: u32 = 1;
pub const CONFIG_VIDEO_IVTV_ALSA_MODULE: u32 = 1;
pub const CONFIG_RANDOMIZE_MEMORY_PHYSICAL_PADDING: u32 = 10;
pub const CONFIG_8139CP_MODULE: u32 = 1;
pub const CONFIG_NET_NS: u32 = 1;
pub const CONFIG_NET_TEAM_MODE_BROADCAST_MODULE: u32 = 1;
pub const CONFIG_CRC16: u32 = 1;
pub const CONFIG_SOCK_CGROUP_DATA: u32 = 1;
pub const CONFIG_SCHED_CLUSTER: u32 = 1;
pub const CONFIG_VIDEO_CADENCE_CSI2RX_MODULE: u32 = 1;
pub const CONFIG_MITIGATION_RETHUNK: u32 = 1;
pub const CONFIG_TABLET_USB_PEGASUS_MODULE: u32 = 1;
pub const CONFIG_ISL29003_MODULE: u32 = 1;
pub const CONFIG_AD7606_IFACE_PARALLEL_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_PSXPAD_SPI_MODULE: u32 = 1;
pub const CONFIG_USB_AUTOSUSPEND_DELAY: u32 = 2;
pub const CONFIG_CRYPTO_SEQIV: u32 = 1;
pub const CONFIG_SND_SOC_ADAU7118_HW_MODULE: u32 = 1;
pub const CONFIG_SERIAL_SCCNXP: u32 = 1;
pub const CONFIG_DP83640_PHY_MODULE: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX: u32 = 16;
pub const CONFIG_NLS_CODEPAGE_866_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT711_SDW_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CAMELLIA_AESNI_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_PRINTER_MODULE: u32 = 1;
pub const CONFIG_ATARI_PARTITION: u32 = 1;
pub const CONFIG_GREYBUS_USB_MODULE: u32 = 1;
pub const CONFIG_SENSORS_FTSTEUTATES_MODULE: u32 = 1;
pub const CONFIG_BRCMSMAC_LEDS: u32 = 1;
pub const CONFIG_IPMI_HANDLER_MODULE: u32 = 1;
pub const CONFIG_MUTEX_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_ACPI_APEI_GHES: u32 = 1;
pub const CONFIG_FSNOTIFY: u32 = 1;
pub const CONFIG_NET_FLOW_LIMIT: u32 = 1;
pub const CONFIG_NET_DSA_TAG_KSZ_MODULE: u32 = 1;
pub const CONFIG_FS_DAX_PMD: u32 = 1;
pub const CONFIG_I2C_AMD756_S4882_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_VMMOUSE: u32 = 1;
pub const CONFIG_AMD_MEM_ENCRYPT: u32 = 1;
pub const CONFIG_NFT_REJECT_IPV6_MODULE: u32 = 1;
pub const CONFIG_CHELSIO_TLS_DEVICE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS08_MODULE: u32 = 1;
pub const CONFIG_GNSS_UBX_SERIAL_MODULE: u32 = 1;
pub const CONFIG_CIFS_MODULE: u32 = 1;
pub const CONFIG_DW_EDMA_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_SMC91C92_MODULE: u32 = 1;
pub const CONFIG_OCFS2_FS_USERSPACE_CLUSTER_MODULE: u32 = 1;
pub const CONFIG_DRM_ANALOGIX_ANX78XX_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MICROCHIP_KSZ_COMMON_MODULE: u32 = 1;
pub const CONFIG_ATM_TCP_MODULE: u32 = 1;
pub const CONFIG_MSI_WMI_MODULE: u32 = 1;
pub const CONFIG_ALX_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_CA8210_DEBUGFS: u32 = 1;
pub const CONFIG_MISDN_DSP_MODULE: u32 = 1;
pub const CONFIG_FB_NVIDIA_BACKLIGHT: u32 = 1;
pub const CONFIG_INPUT_TOUCHSCREEN: u32 = 1;
pub const CONFIG_VIDEO_OV5670_MODULE: u32 = 1;
pub const CONFIG_BFQ_GROUP_IOSCHED: u32 = 1;
pub const CONFIG_CICADA_PHY_MODULE: u32 = 1;
pub const CONFIG_VIRTIO: u32 = 1;
pub const CONFIG_GREYBUS_AUDIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_APL_MODULE: u32 = 1;
pub const CONFIG_NET_DROP_MONITOR: u32 = 1;
pub const CONFIG_IP_SET_HASH_NETIFACE_MODULE: u32 = 1;
pub const CONFIG_INTEL_ATOMISP2_PM_MODULE: u32 = 1;
pub const CONFIG_I2C_SI470X_MODULE: u32 = 1;
pub const CONFIG_SND_INTEL_DSP_CONFIG_MODULE: u32 = 1;
pub const CONFIG_INPUT_DA9063_ONKEY_MODULE: u32 = 1;
pub const CONFIG_VIDEO_UPD64031A_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_BRCM_LEGACY_MODULE: u32 = 1;
pub const CONFIG_BOSCH_BNO055_I2C_MODULE: u32 = 1;
pub const CONFIG_MMC_BLOCK_MINORS: u32 = 8;
pub const CONFIG_CRYPTO_USER_API_HASH_MODULE: u32 = 1;
pub const CONFIG_QED_FCOE: u32 = 1;
pub const CONFIG_CRYPTO_ARIA_GFNI_AVX512_X86_64_MODULE: u32 = 1;
pub const CONFIG_PARTITION_ADVANCED: u32 = 1;
pub const CONFIG_JOYSTICK_JOYDUMP_MODULE: u32 = 1;
pub const CONFIG_ACER_WMI_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_GAMECON_MODULE: u32 = 1;
pub const CONFIG_NFT_FIB_INET_MODULE: u32 = 1;
pub const CONFIG_DVB_MT352_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MC13783_ADC_MODULE: u32 = 1;
pub const CONFIG_EEPROM_IDT_89HPESX_MODULE: u32 = 1;
pub const CONFIG_ALTERA_FREEZE_BRIDGE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L42_CORE_MODULE: u32 = 1;
pub const CONFIG_ALTERA_TSE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC4151_MODULE: u32 = 1;
pub const CONFIG_LEDS_WM831X_STATUS_MODULE: u32 = 1;
pub const CONFIG_ZRAM_DEF_COMP: &[u8; 8] = b"lzo-rle\0";
pub const CONFIG_I8K: u32 = 1;
pub const CONFIG_ATH9K_CHANNEL_CONTEXT: u32 = 1;
pub const CONFIG_FDDI: u32 = 1;
pub const CONFIG_FB_TFT_ST7735R_MODULE: u32 = 1;
pub const CONFIG_ATH5K_PCI: u32 = 1;
pub const CONFIG_REGULATOR_88PM8607_MODULE: u32 = 1;
pub const CONFIG_TCG_ATMEL_MODULE: u32 = 1;
pub const CONFIG_GPIO_LJCA_MODULE: u32 = 1;
pub const CONFIG_EDAC_I7CORE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L41_MODULE: u32 = 1;
pub const CONFIG_INPUT_IDEAPAD_SLIDEBAR_MODULE: u32 = 1;
pub const CONFIG_CHARGER_LP8727_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8804_MODULE: u32 = 1;
pub const CONFIG_ATH11K_AHB_MODULE: u32 = 1;
pub const CONFIG_NFSD_MODULE: u32 = 1;
pub const CONFIG_PM_GENERIC_DOMAINS_SLEEP: u32 = 1;
pub const CONFIG_HID_CHICONY_MODULE: u32 = 1;
pub const CONFIG_USB_MA901_MODULE: u32 = 1;
pub const CONFIG_HP_BIOSCFG_MODULE: u32 = 1;
pub const CONFIG_ISCSI_IBFT_FIND: u32 = 1;
pub const CONFIG_SENSORS_MAX197_MODULE: u32 = 1;
pub const CONFIG_SYSTEM_TRUSTED_KEYRING: u32 = 1;
pub const CONFIG_SERIAL_SPRD_MODULE: u32 = 1;
pub const CONFIG_HAVE_KERNEL_BZIP2: u32 = 1;
pub const CONFIG_CRYPTO_ZSTD_MODULE: u32 = 1;
pub const CONFIG_MFD_INTEL_LPSS_PCI_MODULE: u32 = 1;
pub const CONFIG_HID_MCP2200_MODULE: u32 = 1;
pub const CONFIG_DM_VERITY_VERIFY_ROOTHASH_SIG_PLATFORM_KEYRING: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_BITS_MAX: u32 = 32;
pub const CONFIG_BMP280_I2C_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TUNER_MODULE: u32 = 1;
pub const CONFIG_LTC2497_MODULE: u32 = 1;
pub const CONFIG_NET_EMATCH_IPSET_MODULE: u32 = 1;
pub const CONFIG_ACPI_NHLT: u32 = 1;
pub const CONFIG_IP_VS_MH_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_XC2028_MODULE: u32 = 1;
pub const CONFIG_BATMAN_ADV_BLA: u32 = 1;
pub const CONFIG_REGULATOR_MAX77857_MODULE: u32 = 1;
pub const CONFIG_AD7192_MODULE: u32 = 1;
pub const CONFIG_CGROUP_DEVICE: u32 = 1;
pub const CONFIG_SMB_SERVER_MODULE: u32 = 1;
pub const CONFIG_BATTERY_BQ27XXX_HDQ_MODULE: u32 = 1;
pub const CONFIG_USB_NET_CDC_SUBSET_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NTC_THERMISTOR_MODULE: u32 = 1;
pub const CONFIG_SCSI_FC_ATTRS_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_SEPS525_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_QUOTA_MODULE: u32 = 1;
pub const CONFIG_INPUT_CM109_MODULE: u32 = 1;
pub const CONFIG_MFD_SKY81452_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7134_DVB_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TVP7002_MODULE: u32 = 1;
pub const CONFIG_HT16K33_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_OPERA1_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PCF8583_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_ON20_MODULE: u32 = 1;
pub const CONFIG_BT_CMTP_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_INTEL: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MODULE: u32 = 1;
pub const CONFIG_SYNC_FILE: u32 = 1;
pub const CONFIG_BPF_SYSCALL: u32 = 1;
pub const CONFIG_USB_BDC_UDC_MODULE: u32 = 1;
pub const CONFIG_CAN_SOFTING_MODULE: u32 = 1;
pub const CONFIG_HYPERV_TIMER: u32 = 1;
pub const CONFIG_SYSTEM_REVOCATION_KEYS: &[u8; 35] = b"debian/canonical-revoked-certs.pem\0";
pub const CONFIG_DEVFREQ_GOV_PASSIVE: u32 = 1;
pub const CONFIG_VIDEO_GO7007_MODULE: u32 = 1;
pub const CONFIG_SND_PCI: u32 = 1;
pub const CONFIG_VZ89X_MODULE: u32 = 1;
pub const CONFIG_USB_NET_INT51X1_MODULE: u32 = 1;
pub const CONFIG_USB_EHCI_HCD_PLATFORM: u32 = 1;
pub const CONFIG_HID_PENMOUNT_MODULE: u32 = 1;
pub const CONFIG_IP_SET_LIST_SET_MODULE: u32 = 1;
pub const CONFIG_LIBFC_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_LSM9DS0_I2C_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_RS5C348_MODULE: u32 = 1;
pub const CONFIG_ICPLUS_PHY_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV08X40_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_ARPREPLY_MODULE: u32 = 1;
pub const CONFIG_NFS_V4_2_SSC_HELPER: u32 = 1;
pub const CONFIG_HAVE_KVM_DIRTY_RING_TSO: u32 = 1;
pub const CONFIG_IIO_KFIFO_BUF_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_INTERACT_MODULE: u32 = 1;
pub const CONFIG_MTD_CFI_I1: u32 = 1;
pub const CONFIG_LEDS_LP3944_MODULE: u32 = 1;
pub const CONFIG_FB_SM501_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_PCI: u32 = 1;
pub const CONFIG_RD_LZMA: u32 = 1;
pub const CONFIG_ADIS16480_MODULE: u32 = 1;
pub const CONFIG_DA311_MODULE: u32 = 1;
pub const CONFIG_MFD_INTEL_M10_BMC_PMCI_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2408_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_HAMPSHIRE_MODULE: u32 = 1;
pub const CONFIG_CFAG12864B_MODULE: u32 = 1;
pub const CONFIG_NFP_APP_FLOWER: u32 = 1;
pub const CONFIG_VIRTIO_PCI_LEGACY: u32 = 1;
pub const CONFIG_NTFS3_LZX_XPRESS: u32 = 1;
pub const CONFIG_RTC_DRV_DS1685_FAMILY_MODULE: u32 = 1;
pub const CONFIG_DRM_XEN: u32 = 1;
pub const CONFIG_SND_SOC_WM8711_MODULE: u32 = 1;
pub const CONFIG_SENSORS_BEL_PFE_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_USERFAULTFD_MINOR: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MXL301RF_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_UPROBES: u32 = 1;
pub const CONFIG_SND_MAESTRO3_MODULE: u32 = 1;
pub const CONFIG_MEMORY_ISOLATION: u32 = 1;
pub const CONFIG_IWLEGACY_DEBUGFS: u32 = 1;
pub const CONFIG_IP_MROUTE: u32 = 1;
pub const CONFIG_JOYSTICK_TMDC_MODULE: u32 = 1;
pub const CONFIG_DRM_GMA500_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_VM_PGTABLE: u32 = 1;
pub const CONFIG_VIDEO_CS3308_MODULE: u32 = 1;
pub const CONFIG_INTEL_MRFLD_ADC_MODULE: u32 = 1;
pub const CONFIG_FB_SYS_IMAGEBLIT: u32 = 1;
pub const CONFIG_NET_DSA_TAG_NONE_MODULE: u32 = 1;
pub const CONFIG_PTE_MARKER_UFFD_WP: u32 = 1;
pub const CONFIG_MMA7455_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_MIDI2: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ACPI: u32 = 1;
pub const CONFIG_PREEMPT_DYNAMIC: u32 = 1;
pub const CONFIG_RTL8XXXU_MODULE: u32 = 1;
pub const CONFIG_TINYDRM_REPAPER_MODULE: u32 = 1;
pub const CONFIG_USB_NET_KALMIA_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_BELKIN_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_AES_TI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY_OSR: u32 = 1;
pub const CONFIG_HAVE_KRETPROBES: u32 = 1;
pub const CONFIG_ADVANTECH_EC_WDT_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_GOTOP: u32 = 1;
pub const CONFIG_SND_SOC_XTFPGA_I2S_MODULE: u32 = 1;
pub const CONFIG_ZSWAP_SHRINKER_DEFAULT_ON: u32 = 1;
pub const CONFIG_SPI_SPIDEV_MODULE: u32 = 1;
pub const CONFIG_QRTR_SMD_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_PAC207_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_EMULEX: u32 = 1;
pub const CONFIG_SI1145_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_RC5T583_MODULE: u32 = 1;
pub const CONFIG_MARVELL_88Q2XXX_PHY_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_850_MODULE: u32 = 1;
pub const CONFIG_IIO_RESCALE_MODULE: u32 = 1;
pub const CONFIG_AD7949_MODULE: u32 = 1;
pub const CONFIG_EFI_EMBEDDED_FIRMWARE: u32 = 1;
pub const CONFIG_SKB_DECRYPTED: u32 = 1;
pub const CONFIG_NINTENDO_FF: u32 = 1;
pub const CONFIG_OPENVSWITCH_GRE_MODULE: u32 = 1;
pub const CONFIG_SGI_XP_MODULE: u32 = 1;
pub const CONFIG_NLS_MAC_INUIT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BYT_CHT_ES8316_MACH_MODULE: u32 = 1;
pub const CONFIG_MFD_MAX77693: u32 = 1;
pub const CONFIG_NF_CONNTRACK_BRIDGE_MODULE: u32 = 1;
pub const CONFIG_X86_IO_APIC: u32 = 1;
pub const CONFIG_HID_SENSOR_DEVICE_ROTATION_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IPU3_CIO2_MODULE: u32 = 1;
pub const CONFIG_KEYS: u32 = 1;
pub const CONFIG_ADUX1020_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TVAUDIO_MODULE: u32 = 1;
pub const CONFIG_QNX4FS_FS_MODULE: u32 = 1;
pub const CONFIG_INPUT_YEALINK_MODULE: u32 = 1;
pub const CONFIG_MT7921S_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_LEWISBURG_MODULE: u32 = 1;
pub const CONFIG_IFCVF_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_ISL1208_MODULE: u32 = 1;
pub const CONFIG_DVB_OR51132_MODULE: u32 = 1;
pub const CONFIG_INA2XX_ADC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L43_SDW_MODULE: u32 = 1;
pub const CONFIG_MFD_VIPERBOARD_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_MAGN_I2C_3AXIS_MODULE: u32 = 1;
pub const CONFIG_CASSINI_MODULE: u32 = 1;
pub const CONFIG_HID_GREENASIA_MODULE: u32 = 1;
pub const CONFIG_CW1200_WLAN_SDIO_MODULE: u32 = 1;
pub const CONFIG_CXD2880_SPI_DRV_MODULE: u32 = 1;
pub const CONFIG_HAVE_INTEL_TXT: u32 = 1;
pub const CONFIG_TOUCHSCREEN_MMS114_MODULE: u32 = 1;
pub const CONFIG_SATA_NV_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_GYRO_3D_MODULE: u32 = 1;
pub const CONFIG_IPMI_POWEROFF_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_2032_MODULE: u32 = 1;
pub const CONFIG_SERIO_CT82C710_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_CS35L56_MODULE: u32 = 1;
pub const CONFIG_CAN_M_CAN_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_ISL12022_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS4271_I2C_MODULE: u32 = 1;
pub const CONFIG_IMA_MEASURE_PCR_IDX: u32 = 10;
pub const CONFIG_NET_SWITCHDEV: u32 = 1;
pub const CONFIG_REGULATOR_PV88080_MODULE: u32 = 1;
pub const CONFIG_X86_THERMAL_VECTOR: u32 = 1;
pub const CONFIG_REGMAP_SPI_AVMM_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP9941_MODULE: u32 = 1;
pub const CONFIG_MACB_USE_HWSTAMP: u32 = 1;
pub const CONFIG_ADXL372_I2C_MODULE: u32 = 1;
pub const CONFIG_INTEL_SCU_PCI: u32 = 1;
pub const CONFIG_SND_AMD_ASOC_ACP63_MODULE: u32 = 1;
pub const CONFIG_SCSI_SYM53C8XX_2_MODULE: u32 = 1;
pub const CONFIG_PNFS_BLOCK_MODULE: u32 = 1;
pub const CONFIG_V4L2_ASYNC_MODULE: u32 = 1;
pub const CONFIG_DVB_FIREDTV_INPUT: u32 = 1;
pub const CONFIG_QLCNIC_HWMON: u32 = 1;
pub const CONFIG_ACPI_CMPC_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_SSD1306_MODULE: u32 = 1;
pub const CONFIG_PSAMPLE_MODULE: u32 = 1;
pub const CONFIG_RTW88_8822BS_MODULE: u32 = 1;
pub const CONFIG_ACPI_DOCK: u32 = 1;
pub const CONFIG_FB_TFT_ILI9481_MODULE: u32 = 1;
pub const CONFIG_XEN_EFI: u32 = 1;
pub const CONFIG_HAVE_USER_RETURN_NOTIFIER: u32 = 1;
pub const CONFIG_ACPI_VIDEO_MODULE: u32 = 1;
pub const CONFIG_IO_WQ: u32 = 1;
pub const CONFIG_VHOST_MODULE: u32 = 1;
pub const CONFIG_USB_MASS_STORAGE_MODULE: u32 = 1;
pub const CONFIG_RADIO_SI4713_MODULE: u32 = 1;
pub const CONFIG_XEN_NETDEV_FRONTEND: u32 = 1;
pub const CONFIG_INTEL_MEI_ME_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_HUGE_VMAP: u32 = 1;
pub const CONFIG_VDSO_GETRANDOM: u32 = 1;
pub const CONFIG_RTLBTCOEXIST_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_TAS2781_I2C_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MV88E6XXX_MODULE: u32 = 1;
pub const CONFIG_CAIF_NETDEV_MODULE: u32 = 1;
pub const CONFIG_VIA_RHINE_MMIO: u32 = 1;
pub const CONFIG_INTEL_TH_PTI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_IMG_SPDIF_IN_MODULE: u32 = 1;
pub const CONFIG_ADM8211_MODULE: u32 = 1;
pub const CONFIG_MCB_MODULE: u32 = 1;
pub const CONFIG_AS_VERSION: u32 = 24301;
pub const CONFIG_SENSORS_LT7182S_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_CCP: u32 = 1;
pub const CONFIG_RTW89_8852BE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ACBEL_FSG032_MODULE: u32 = 1;
pub const CONFIG_AMT_MODULE: u32 = 1;
pub const CONFIG_BLK_CGROUP_PUNT_BIO: u32 = 1;
pub const CONFIG_YENTA_TOSHIBA: u32 = 1;
pub const CONFIG_INET_UDP_DIAG_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_ALAUDA_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_HTB_MODULE: u32 = 1;
pub const CONFIG_IP_VS_FO_MODULE: u32 = 1;
pub const CONFIG_EDAC_IE31200_MODULE: u32 = 1;
pub const CONFIG_CHELSIO_IPSEC_INLINE_MODULE: u32 = 1;
pub const CONFIG_USB_NET_DRIVERS_MODULE: u32 = 1;
pub const CONFIG_ARCH_USE_QUEUED_RWLOCKS: u32 = 1;
pub const CONFIG_COMEDI_II_PCI20KC_MODULE: u32 = 1;
pub const CONFIG_SCSI_SAS_LIBSAS_MODULE: u32 = 1;
pub const CONFIG_LTC2471_MODULE: u32 = 1;
pub const CONFIG_INPUT_PALMAS_PWRBUTTON_MODULE: u32 = 1;
pub const CONFIG_DVB_TUA6100_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CYTTSP_I2C_MODULE: u32 = 1;
pub const CONFIG_NFT_HASH_MODULE: u32 = 1;
pub const CONFIG_I2C_SIS5595_MODULE: u32 = 1;
pub const CONFIG_EXTCON_PTN5150_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_FAKELB_MODULE: u32 = 1;
pub const CONFIG_AIR_EN8811H_PHY_MODULE: u32 = 1;
pub const CONFIG_PATA_NINJA32_MODULE: u32 = 1;
pub const CONFIG_INTEL_SOC_PMIC_CHTWC: u32 = 1;
pub const CONFIG_LCD2S_MODULE: u32 = 1;
pub const CONFIG_UBIFS_FS_AUTHENTICATION: u32 = 1;
pub const CONFIG_BTT: u32 = 1;
pub const CONFIG_USB_MAX3421_HCD_MODULE: u32 = 1;
pub const CONFIG_BRCMFMAC_SDIO: u32 = 1;
pub const CONFIG_ULTRIX_PARTITION: u32 = 1;
pub const CONFIG_EXTCON_USB_GPIO_MODULE: u32 = 1;
pub const CONFIG_ACPI_APEI_EINJ_CXL: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_PATTERN_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RTQ2208_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_ABX80X_MODULE: u32 = 1;
pub const CONFIG_EDAC_I3000_MODULE: u32 = 1;
pub const CONFIG_SND_SST_ATOM_HIFI2_PLATFORM_PCI_MODULE: u32 = 1;
pub const CONFIG_DM_CRYPT_MODULE: u32 = 1;
pub const CONFIG_IPV6_FOU_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_IRQ_SIM: u32 = 1;
pub const CONFIG_HID_THRUSTMASTER_MODULE: u32 = 1;
pub const CONFIG_RV_REACTORS: u32 = 1;
pub const CONFIG_NFS_FS_MODULE: u32 = 1;
pub const CONFIG_LTC2496_MODULE: u32 = 1;
pub const CONFIG_DVB_S5H1420_MODULE: u32 = 1;
pub const CONFIG_BE2NET_BE3: u32 = 1;
pub const CONFIG_NET_VENDOR_NATSEMI: u32 = 1;
pub const CONFIG_IIO_CROS_EC_ACCEL_LEGACY_MODULE: u32 = 1;
pub const CONFIG_EEEPC_WMI_MODULE: u32 = 1;
pub const CONFIG_CROS_HPS_I2C_MODULE: u32 = 1;
pub const CONFIG_EXTCON_INTEL_CHT_WC_MODULE: u32 = 1;
pub const CONFIG_PATA_PARPORT_EPATC8: u32 = 1;
pub const CONFIG_RTC_DRV_BQ32K_MODULE: u32 = 1;
pub const CONFIG_MD_BITMAP_FILE: u32 = 1;
pub const CONFIG_FUTEX_PI: u32 = 1;
pub const CONFIG_HAS_IOPORT_MAP: u32 = 1;
pub const CONFIG_XFRM_STATISTICS: u32 = 1;
pub const CONFIG_STM_MODULE: u32 = 1;
pub const CONFIG_THINKPAD_ACPI_HOTKEY_POLL: u32 = 1;
pub const CONFIG_SND_SOC_CS4271_SPI_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MAX6902_MODULE: u32 = 1;
pub const CONFIG_IP_VS_PROTO_AH: u32 = 1;
pub const CONFIG_SND_SOC_SOF_METEORLAKE_MODULE: u32 = 1;
pub const CONFIG_RTC_INTF_DEV: u32 = 1;
pub const CONFIG_EL3_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_SYNPROXY_MODULE: u32 = 1;
pub const CONFIG_DVB_M88RS2000_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_IPV6HEADER_MODULE: u32 = 1;
pub const CONFIG_I2C_AMD_MP2_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DRBG_HMAC: u32 = 1;
pub const CONFIG_BRIDGE_EBT_STP_MODULE: u32 = 1;
pub const CONFIG_DRM_SSD130X_I2C_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_KEYSPAN_MODULE: u32 = 1;
pub const CONFIG_DVB_SI2165_MODULE: u32 = 1;
pub const CONFIG_MFD_WL1273_CORE_MODULE: u32 = 1;
pub const CONFIG_RTL8723BE_MODULE: u32 = 1;
pub const CONFIG_FB_S3_DDC: u32 = 1;
pub const CONFIG_REGULATOR_RT5033_MODULE: u32 = 1;
pub const CONFIG_QCOM_PMIC_PDCHARGER_ULOG_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_FRAG_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADCXX_MODULE: u32 = 1;
pub const CONFIG_PATA_ALI_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PCF85063_MODULE: u32 = 1;
pub const CONFIG_TSYS02D_MODULE: u32 = 1;
pub const CONFIG_MLX5_EN_IPSEC: u32 = 1;
pub const CONFIG_SENSORS_EMC6W201_MODULE: u32 = 1;
pub const CONFIG_AS_VAES: u32 = 1;
pub const CONFIG_CRYPTO_ARCH_HAVE_LIB_BLAKE2S: u32 = 1;
pub const CONFIG_USB_G_NCM_MODULE: u32 = 1;
pub const CONFIG_LINEDISP_MODULE: u32 = 1;
pub const CONFIG_HIBERNATION_DEF_COMP: &[u8; 4] = b"lzo\0";
pub const CONFIG_SENSORS_AMC6821_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_ECC_SW_HAMMING: u32 = 1;
pub const CONFIG_BNA_MODULE: u32 = 1;
pub const CONFIG_PARPORT_MODULE: u32 = 1;
pub const CONFIG_MT7615_COMMON_MODULE: u32 = 1;
pub const CONFIG_DRM_DISPLAY_HELPER_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_MARK_T_MODULE: u32 = 1;
pub const CONFIG_XEN_SAVE_RESTORE: u32 = 1;
pub const CONFIG_CROS_EC_SYSFS_MODULE: u32 = 1;
pub const CONFIG_ECHO_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_PPTP_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_BITS: u32 = 32;
pub const CONFIG_MITIGATION_RETPOLINE: u32 = 1;
pub const CONFIG_TYPEC_FUSB302_MODULE: u32 = 1;
pub const CONFIG_EXTCON_INTEL_INT3496_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS6402_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83792D_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_ZIP_LZMA: u32 = 1;
pub const CONFIG_COMEDI_NI_LABPC_ISA_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TMP464_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_IPCOMP_MODULE: u32 = 1;
pub const CONFIG_SFC_SIENA_SRIOV: u32 = 1;
pub const CONFIG_KPROBES_ON_FTRACE: u32 = 1;
pub const CONFIG_ADA4250_MODULE: u32 = 1;
pub const CONFIG_MLX5_MPFS: u32 = 1;
pub const CONFIG_SND_SOC_WCD938X_MODULE: u32 = 1;
pub const CONFIG_ALIM1535_WDT_MODULE: u32 = 1;
pub const CONFIG_PCIE_DW: u32 = 1;
pub const CONFIG_RT2800PCI_MODULE: u32 = 1;
pub const CONFIG_BMI323_SPI_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_RPFILTER_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_MODULE: u32 = 1;
pub const CONFIG_DRM_BOCHS_MODULE: u32 = 1;
pub const CONFIG_MISDN_HFCUSB_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_PRESS_MODULE: u32 = 1;
pub const CONFIG_TI_DAC7612_MODULE: u32 = 1;
pub const CONFIG_MEDIA_SDR_SUPPORT: u32 = 1;
pub const CONFIG_MTD_CFI_INTELEXT_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_SFB_MODULE: u32 = 1;
pub const CONFIG_LTC2983_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_HUMIDITY_MODULE: u32 = 1;
pub const CONFIG_BMC150_MAGN_SPI_MODULE: u32 = 1;
pub const CONFIG_RTW89_8851B_MODULE: u32 = 1;
pub const CONFIG_MDIO_MODULE: u32 = 1;
pub const CONFIG_AD7298_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L45_SPI_MODULE: u32 = 1;
pub const CONFIG_NF_CT_PROTO_UDPLITE: u32 = 1;
pub const CONFIG_AD5504_MODULE: u32 = 1;
pub const CONFIG_YENTA_RICOH: u32 = 1;
pub const CONFIG_XFS_FS_MODULE: u32 = 1;
pub const CONFIG_SRF04_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_DVBSKY_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_SX8654_MODULE: u32 = 1;
pub const CONFIG_SX9310_MODULE: u32 = 1;
pub const CONFIG_SENSORS_AD7414_MODULE: u32 = 1;
pub const CONFIG_CAN_PEAK_PCI_MODULE: u32 = 1;
pub const CONFIG_MFD_WM5102: u32 = 1;
pub const CONFIG_BMI160_MODULE: u32 = 1;
pub const CONFIG_TINYDRM_ST7735R_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_857_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_TEE_MODULE: u32 = 1;
pub const CONFIG_X86_SGX: u32 = 1;
pub const CONFIG_PROFILING: u32 = 1;
pub const CONFIG_ARCH_HAS_ZONE_DMA_SET: u32 = 1;
pub const CONFIG_CRYPTO_POLY1305_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT1011_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7134_GO7007_MODULE: u32 = 1;
pub const CONFIG_CHARGER_BQ24190_MODULE: u32 = 1;
pub const CONFIG_THINKPAD_ACPI_VIDEO: u32 = 1;
pub const CONFIG_SND_SOC_AW88261_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_ALACRITECH: u32 = 1;
pub const CONFIG_HW_RANDOM_TIMERIOMEM_MODULE: u32 = 1;
pub const CONFIG_RT2X00_LIB_FIRMWARE: u32 = 1;
pub const CONFIG_BT_HCIBCM203X_MODULE: u32 = 1;
pub const CONFIG_IAQCORE_MODULE: u32 = 1;
pub const CONFIG_ACPI_WATCHDOG: u32 = 1;
pub const CONFIG_HID_SAMSUNG_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SPDIF_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_IT913X_MODULE: u32 = 1;
pub const CONFIG_SND_SIMPLE_CARD_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5651_MODULE: u32 = 1;
pub const CONFIG_PUNIT_ATOM_DEBUG_MODULE: u32 = 1;
pub const CONFIG_USB4_NET_MODULE: u32 = 1;
pub const CONFIG_VFIO_DEVICE_CDEV: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_864_MODULE: u32 = 1;
pub const CONFIG_CAN_8DEV_USB_MODULE: u32 = 1;
pub const CONFIG_LEDS_SIEMENS_SIMATIC_IPC_MODULE: u32 = 1;
pub const CONFIG_WIRELESS_HOTKEY_MODULE: u32 = 1;
pub const CONFIG_USB_CXACRU_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_RICOH_MODULE: u32 = 1;
pub const CONFIG_KVM_VFIO: u32 = 1;
pub const CONFIG_HID_BPF: u32 = 1;
pub const CONFIG_COMMON_CLK_MAX9485_MODULE: u32 = 1;
pub const CONFIG_6LOWPAN_NHC_ROUTING_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_FTDI_SIO_MODULE: u32 = 1;
pub const CONFIG_ADIS16130_MODULE: u32 = 1;
pub const CONFIG_USB_CDNS2_UDC_MODULE: u32 = 1;
pub const CONFIG_SCSI_CONSTANTS: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE: u32 = 1;
pub const CONFIG_NET_SCH_FIFO: u32 = 1;
pub const CONFIG_SYSTEM76_ACPI_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_VLAN_FILTERING: u32 = 1;
pub const CONFIG_TRACE_IRQFLAGS_NMI_SUPPORT: u32 = 1;
pub const CONFIG_BT_HCIUART_ATH3K: u32 = 1;
pub const CONFIG_GPIO_VIRTUSER_MODULE: u32 = 1;
pub const CONFIG_TYPEC_TCPM_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_MAGN_3AXIS_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_EFA_MODULE: u32 = 1;
pub const CONFIG_I2C_MLXCPLD_MODULE: u32 = 1;
pub const CONFIG_NLS_DEFAULT: &[u8; 5] = b"utf8\0";
pub const CONFIG_ZRAM_TRACK_ENTRY_ACTIME: u32 = 1;
pub const CONFIG_FARSYNC_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_SSD1305_MODULE: u32 = 1;
pub const CONFIG_THP_SWAP: u32 = 1;
pub const CONFIG_MEDIA_TUNER_XC4000_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP2975_REGULATOR: u32 = 1;
pub const CONFIG_SND_SOC_ADI_AXI_I2S_MODULE: u32 = 1;
pub const CONFIG_MFD_DA9150_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_ILI9486_MODULE: u32 = 1;
pub const CONFIG_CC_CAN_LINK_STATIC: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_ELO: u32 = 1;
pub const CONFIG_RTW88_8723X_MODULE: u32 = 1;
pub const CONFIG_FB_IMSTT: u32 = 1;
pub const CONFIG_CRYPTO_DH_RFC7919_GROUPS: u32 = 1;
pub const CONFIG_SENSORS_ADT7462_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_SENTELIC: u32 = 1;
pub const CONFIG_CC_HAS_MIN_FUNCTION_ALIGNMENT: u32 = 1;
pub const CONFIG_SENSORS_HS3001_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_XPAD_MODULE: u32 = 1;
pub const CONFIG_BT_MRVL_MODULE: u32 = 1;
pub const CONFIG_SCSI_FDOMAIN_MODULE: u32 = 1;
pub const CONFIG_MOST_COMPONENTS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TC74_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_ICELAKE_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_TCA6416_MODULE: u32 = 1;
pub const CONFIG_DMA_NEED_SYNC: u32 = 1;
pub const CONFIG_VEML6030_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_13_MODULE: u32 = 1;
pub const CONFIG_INTEL_LDMA: u32 = 1;
pub const CONFIG_SND_SOC_CS35L56_MODULE: u32 = 1;
pub const CONFIG_MMC_SDHCI_PCI_MODULE: u32 = 1;
pub const CONFIG_MMC_VIA_SDMMC_MODULE: u32 = 1;
pub const CONFIG_MENZ069_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_MEMORY_LAYOUT: u32 = 1;
pub const CONFIG_DRM_AMD_DC: u32 = 1;
pub const CONFIG_EARLY_PRINTK_USB: u32 = 1;
pub const CONFIG_REGULATOR_NETLINK_EVENTS: u32 = 1;
pub const CONFIG_DVB_NETUP_UNIDVB_MODULE: u32 = 1;
pub const CONFIG_NFS_V4_1_MIGRATION: u32 = 1;
pub const CONFIG_MTDRAM_TOTAL_SIZE: u32 = 4096;
pub const CONFIG_LOCK_DOWN_KERNEL_FORCE_NONE: u32 = 1;
pub const CONFIG_REGULATOR: u32 = 1;
pub const CONFIG_TYPEC_MUX_PI3USB30532_MODULE: u32 = 1;
pub const CONFIG_HID_PLAYSTATION_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_ES8336_MACH_MODULE: u32 = 1;
pub const CONFIG_MODULE_SRCVERSION_ALL: u32 = 1;
pub const CONFIG_SENSORS_INA3221_MODULE: u32 = 1;
pub const CONFIG_ACPI_I2C_OPREGION: u32 = 1;
pub const CONFIG_NFP_MODULE: u32 = 1;
pub const CONFIG_XEN_BLKDEV_BACKEND_MODULE: u32 = 1;
pub const CONFIG_VIDEO_LM3646_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TAS2562_MODULE: u32 = 1;
pub const CONFIG_MEDIATEK_MT6360_ADC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_CLIENT_MODULE: u32 = 1;
pub const CONFIG_INPUT_SPARSEKMAP_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_MT6370_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CONNLABEL_MODULE: u32 = 1;
pub const CONFIG_DMI_SCAN_MACHINE_NON_EFI_FALLBACK: u32 = 1;
pub const CONFIG_DVB_LGDT3306A_MODULE: u32 = 1;
pub const CONFIG_TYPEC_WCOVE_MODULE: u32 = 1;
pub const CONFIG_GRO_CELLS: u32 = 1;
pub const CONFIG_TOUCHSCREEN_GOODIX_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_WM831X_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX25821_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY_MEMORY_BLOCKSIZE: u32 = 32;
pub const CONFIG_PACKET_DIAG_MODULE: u32 = 1;
pub const CONFIG_GENERIC_STRNCPY_FROM_USER: u32 = 1;
pub const CONFIG_ISCSI_TARGET_CXGB4_MODULE: u32 = 1;
pub const CONFIG_HID_RMI_MODULE: u32 = 1;
pub const CONFIG_I2C_NFORCE2_S4985_MODULE: u32 = 1;
pub const CONFIG_BE2NET_BE2: u32 = 1;
pub const CONFIG_TOUCHSCREEN_WDT87XX_I2C_MODULE: u32 = 1;
pub const CONFIG_TEXTSEARCH: u32 = 1;
pub const CONFIG_MFD_DA9052_SPI: u32 = 1;
pub const CONFIG_HAVE_MOVE_PMD: u32 = 1;
pub const CONFIG_NETXEN_NIC_MODULE: u32 = 1;
pub const CONFIG_DRM_XE_ENABLE_SCHEDTIMEOUT_LIMIT: u32 = 1;
pub const CONFIG_VHOST_VDPA_MODULE: u32 = 1;
pub const CONFIG_IWLWIFI_DEBUGFS: u32 = 1;
pub const CONFIG_USB_SERIAL_WISHBONE_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_RECENT_MODULE: u32 = 1;
pub const CONFIG_PROC_EVENTS: u32 = 1;
pub const CONFIG_IIO_CROS_EC_SENSORS_LID_ANGLE_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_SRP_MODULE: u32 = 1;
pub const CONFIG_USB_F_MIDI2_MODULE: u32 = 1;
pub const CONFIG_FAILOVER: u32 = 1;
pub const CONFIG_TYPEC_MUX_NB7VPQ904M_MODULE: u32 = 1;
pub const CONFIG_LINEAR_RANGES: u32 = 1;
pub const CONFIG_NFS_V4_1: u32 = 1;
pub const CONFIG_SATA_VIA_MODULE: u32 = 1;
pub const CONFIG_PATA_NS87415_MODULE: u32 = 1;
pub const CONFIG_BOSCH_BNO055_SERIAL_MODULE: u32 = 1;
pub const CONFIG_WEXT_PROC: u32 = 1;
pub const CONFIG_CRYPTO_CAST6_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK5558_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO_CPS_XX_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ISADMA_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_GOLDFISH_MODULE: u32 = 1;
pub const CONFIG_NF_TPROXY_IPV4_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_IRC_MODULE: u32 = 1;
pub const CONFIG_SCHED_STACK_END_CHECK: u32 = 1;
pub const CONFIG_DM_LOG_USERSPACE_MODULE: u32 = 1;
pub const CONFIG_INT340X_THERMAL_MODULE: u32 = 1;
pub const CONFIG_SYSV68_PARTITION: u32 = 1;
pub const CONFIG_PATA_MPIIX_MODULE: u32 = 1;
pub const CONFIG_EFS_FS_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_BROUTE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM3060_I2C_MODULE: u32 = 1;
pub const CONFIG_AD5696_I2C_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_DMA_SHARED_BUFFER_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CORE_MODULE: u32 = 1;
pub const CONFIG_RAS_CEC: u32 = 1;
pub const CONFIG_SCSI_UFS_CDNS_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_HID_MODULE: u32 = 1;
pub const CONFIG_MTD_ONENAND_MODULE: u32 = 1;
pub const CONFIG_X86_CPU_RESCTRL: u32 = 1;
pub const CONFIG_CRYPTO_LZ4_MODULE: u32 = 1;
pub const CONFIG_XILINX_XDMA_MODULE: u32 = 1;
pub const CONFIG_HSI_MODULE: u32 = 1;
pub const CONFIG_DM_VERITY_VERIFY_ROOTHASH_SIG_SECONDARY_KEYRING: u32 = 1;
pub const CONFIG_SCSI_MYRS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_MAXIM_COMMON_MODULE: u32 = 1;
pub const CONFIG_NFC_PN533_MODULE: u32 = 1;
pub const CONFIG_MTK_T7XX_MODULE: u32 = 1;
pub const CONFIG_NE2K_PCI_MODULE: u32 = 1;
pub const CONFIG_NET_TEAM_MODE_RANDOM_MODULE: u32 = 1;
pub const CONFIG_FBNIC_MODULE: u32 = 1;
pub const CONFIG_SATA_VITESSE_MODULE: u32 = 1;
pub const CONFIG_FPGA_MGR_LATTICE_SYSCONFIG_MODULE: u32 = 1;
pub const CONFIG_USB_GADGETFS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_GENERIC_DMAENGINE_PCM: u32 = 1;
pub const CONFIG_VIDEO_BT856_MODULE: u32 = 1;
pub const CONFIG_NFT_MASQ_MODULE: u32 = 1;
pub const CONFIG_AD7887_MODULE: u32 = 1;
pub const CONFIG_HID_CP2112_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_TEQL_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_UTILS: u32 = 1;
pub const CONFIG_SND_SOC_DA7213_MODULE: u32 = 1;
pub const CONFIG_VEML6070_MODULE: u32 = 1;
pub const CONFIG_SG_POOL: u32 = 1;
pub const CONFIG_X86: u32 = 1;
pub const CONFIG_MFD_WM831X_SPI: u32 = 1;
pub const CONFIG_MTD_NAND_DISKONCHIP_MODULE: u32 = 1;
pub const CONFIG_SERIAL_RP2_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DH: u32 = 1;
pub const CONFIG_KFENCE: u32 = 1;
pub const CONFIG_MTD_BLOCK2MTD_MODULE: u32 = 1;
pub const CONFIG_EXTCON_MAX77843_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_WORKING_NOSANITIZE_ADDRESS: u32 = 1;
pub const CONFIG_INPUT_BMA150_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_HMARK_MODULE: u32 = 1;
pub const CONFIG_BLK_CGROUP_RWSTAT: u32 = 1;
pub const CONFIG_MISDN_HDLC_MODULE: u32 = 1;
pub const CONFIG_USB_CDNS3_MODULE: u32 = 1;
pub const CONFIG_QCOM_HIDMA_MODULE: u32 = 1;
pub const CONFIG_NTFS3_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_DELL_WMI_MODULE: u32 = 1;
pub const CONFIG_SMS_SDIO_DRV_MODULE: u32 = 1;
pub const CONFIG_USB_G_WEBCAM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_CHT_BSW_MAX98090_TI_MACH_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_PROTO: u32 = 1;
pub const CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS: u32 = 1;
pub const CONFIG_EXTCON_MAX3355_MODULE: u32 = 1;
pub const CONFIG_SURFACE_AGGREGATOR_BUS: u32 = 1;
pub const CONFIG_NET_EMATCH: u32 = 1;
pub const CONFIG_SND_HDA_POWER_SAVE_DEFAULT: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BYT_CHT_CX2072X_MACH_MODULE: u32 = 1;
pub const CONFIG_PWM_TWL_MODULE: u32 = 1;
pub const CONFIG_B44_PCI_AUTOSELECT: u32 = 1;
pub const CONFIG_TYPEC_MODULE: u32 = 1;
pub const CONFIG_RPMSG_CHAR_MODULE: u32 = 1;
pub const CONFIG_MODULE_SIG_SHA512: u32 = 1;
pub const CONFIG_LAPBETHER_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_HL_MODULE: u32 = 1;
pub const CONFIG_MOST_CDEV_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_1500_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SMSC47M1_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX8952_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NCT6775_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_OWNER_MODULE: u32 = 1;
pub const CONFIG_BINFMT_MISC_MODULE: u32 = 1;
pub const CONFIG_CAN_PEAK_PCIEFD_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_RNBD_CLIENT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L36_MODULE: u32 = 1;
pub const CONFIG_INTEL_TCC_COOLING_MODULE: u32 = 1;
pub const CONFIG_MT792x_LIB_MODULE: u32 = 1;
pub const CONFIG_SBC_FITPC2_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCL816_MODULE: u32 = 1;
pub const CONFIG_DVB_STV6110x_MODULE: u32 = 1;
pub const CONFIG_USB_PCI: u32 = 1;
pub const CONFIG_SND_SOC_MSM8916_WCD_DIGITAL_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_FINEPIX_MODULE: u32 = 1;
pub const CONFIG_MRP_MODULE: u32 = 1;
pub const CONFIG_SCHED_MM_CID: u32 = 1;
pub const CONFIG_ACPI_VIOT: u32 = 1;
pub const CONFIG_NFSD_BLOCKLAYOUT: u32 = 1;
pub const CONFIG_VIDEO_THP7312_MODULE: u32 = 1;
pub const CONFIG_PWM_DWC_CORE_MODULE: u32 = 1;
pub const CONFIG_GPIO_MADERA_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SM3_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_MCP4131_MODULE: u32 = 1;
pub const CONFIG_ADVISE_SYSCALLS: u32 = 1;
pub const CONFIG_MT76x2U_MODULE: u32 = 1;
pub const CONFIG_THERMAL_GOV_STEP_WISE: u32 = 1;
pub const CONFIG_NET: u32 = 1;
pub const CONFIG_MOUSE_APPLETOUCH_MODULE: u32 = 1;
pub const CONFIG_X86_VSYSCALL_EMULATION: u32 = 1;
pub const CONFIG_ARCH_ENABLE_SPLIT_PMD_PTLOCK: u32 = 1;
pub const CONFIG_HAVE_OPTPROBES: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MICROCHIP: u32 = 1;
pub const CONFIG_MPL115_I2C_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX8925_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_ADF7242_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_GSWIP_MODULE: u32 = 1;
pub const CONFIG_XFRM_IPCOMP_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_PCTV452E_MODULE: u32 = 1;
pub const CONFIG_HMC6352_MODULE: u32 = 1;
pub const CONFIG_GPIO_ACPI: u32 = 1;
pub const CONFIG_NFC_FDP_I2C_MODULE: u32 = 1;
pub const CONFIG_MTRR_SANITIZER: u32 = 1;
pub const CONFIG_AD5110_MODULE: u32 = 1;
pub const CONFIG_MFD_TQMX86_MODULE: u32 = 1;
pub const CONFIG_DEFAULT_CUBIC: u32 = 1;
pub const CONFIG_XFRM_USER_MODULE: u32 = 1;
pub const CONFIG_VFIO_NOIOMMU: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_865_MODULE: u32 = 1;
pub const CONFIG_USB_DEFAULT_AUTHORIZATION_MODE: u32 = 1;
pub const CONFIG_NET_REDIRECT: u32 = 1;
pub const CONFIG_ACPI_THERMAL: u32 = 1;
pub const CONFIG_INPUT_ARIZONA_HAPTICS_MODULE: u32 = 1;
pub const CONFIG_LOAD_UEFI_KEYS: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKYLAKE_COMMON_MODULE: u32 = 1;
pub const CONFIG_PANEL_PARPORT: u32 = 0;
pub const CONFIG_USB_LAN78XX_MODULE: u32 = 1;
pub const CONFIG_AD2S1200_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKYLAKE_HDAUDIO_CODEC: u32 = 1;
pub const CONFIG_SMS_USB_DRV_MODULE: u32 = 1;
pub const CONFIG_GACT_PROB: u32 = 1;
pub const CONFIG_NET_VENDOR_ENGLEDER: u32 = 1;
pub const CONFIG_ATL1E_MODULE: u32 = 1;
pub const CONFIG_X86_SPEEDSTEP_LIB_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CAMERA_SENSOR: u32 = 1;
pub const CONFIG_TRACEPOINTS: u32 = 1;
pub const CONFIG_SCHED_SMT: u32 = 1;
pub const CONFIG_LIRC: u32 = 1;
pub const CONFIG_UNINLINE_SPIN_UNLOCK: u32 = 1;
pub const CONFIG_SND_SOC_MTK_BTCVSD_MODULE: u32 = 1;
pub const CONFIG_PCSPKR_PLATFORM: u32 = 1;
pub const CONFIG_INITRAMFS_SOURCE: &[u8; 1] = b"\0";
pub const CONFIG_EXFAT_FS_MODULE: u32 = 1;
pub const CONFIG_PROC_THERMAL_MMIO_RAPL_MODULE: u32 = 1;
pub const CONFIG_VCNL3020_MODULE: u32 = 1;
pub const CONFIG_B43_PHY_N: u32 = 1;
pub const CONFIG_SIGNED_PE_FILE_VERIFICATION: u32 = 1;
pub const CONFIG_UNIX98_PTYS: u32 = 1;
pub const CONFIG_RAPIDIO_DISC_TIMEOUT: u32 = 30;
pub const CONFIG_RANDOMIZE_KSTACK_OFFSET: u32 = 1;
pub const CONFIG_CLKBLD_I8253: u32 = 1;
pub const CONFIG_SOUNDWIRE_QCOM_MODULE: u32 = 1;
pub const CONFIG_SPI_XCOMM_MODULE: u32 = 1;
pub const CONFIG_USB_APPLEDISPLAY_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKYLAKE_SSP_CLK_MODULE: u32 = 1;
pub const CONFIG_PPP_SYNC_TTY_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CURVE25519_X86_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CONNBYTES_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG: u32 = 1;
pub const CONFIG_VGASTATE_MODULE: u32 = 1;
pub const CONFIG_TYPEC_MUX_INTEL_PMC_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_GRIP_MP_MODULE: u32 = 1;
pub const CONFIG_RTW88_8822BU_MODULE: u32 = 1;
pub const CONFIG_SATA_ULI_MODULE: u32 = 1;
pub const CONFIG_AMD_XGBE_HAVE_ECC: u32 = 1;
pub const CONFIG_PCI_PF_STUB_MODULE: u32 = 1;
pub const CONFIG_DRM_CIRRUS_QEMU_MODULE: u32 = 1;
pub const CONFIG_STX104_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_ICL_MODULE: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR_CSTATE: u32 = 1;
pub const CONFIG_DRM_SUBALLOC_HELPER_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX1111_MODULE: u32 = 1;
pub const CONFIG_USB_GADGET_MODULE: u32 = 1;
pub const CONFIG_PPP_BSDCOMP_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_EBT_LIMIT_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_OPTIMIZE_HUGETLB_VMEMMAP: u32 = 1;
pub const CONFIG_SM_FTL_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MC34VR500_MODULE: u32 = 1;
pub const CONFIG_HID_WIIMOTE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SM4_GENERIC_MODULE: u32 = 1;
pub const CONFIG_INTEL_IDXD_MODULE: u32 = 1;
pub const CONFIG_ARCH_SPARSEMEM_DEFAULT: u32 = 1;
pub const CONFIG_BACKLIGHT_KTZ8866_MODULE: u32 = 1;
pub const CONFIG_KEXEC_JUMP: u32 = 1;
pub const CONFIG_MEMORY_BALLOON: u32 = 1;
pub const CONFIG_VFIO_MODULE: u32 = 1;
pub const CONFIG_NFC_HCI_MODULE: u32 = 1;
pub const CONFIG_NLS_ISO8859_14_MODULE: u32 = 1;
pub const CONFIG_EXECMEM: u32 = 1;
pub const CONFIG_HARDLOCKUP_DETECTOR_COUNTS_HRTIMER: u32 = 1;
pub const CONFIG_SND_SOC_SOF_IPC4: u32 = 1;
pub const CONFIG_DVB_ZD1301_DEMOD_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM_ADSP_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BYTCR_RT5651_MACH_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_REALTEK: u32 = 1;
pub const CONFIG_XFRM_OFFLOAD: u32 = 1;
pub const CONFIG_ADIS16209_MODULE: u32 = 1;
pub const CONFIG_IPV6_SEG6_LWTUNNEL: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TDA18212_MODULE: u32 = 1;
pub const CONFIG_CHARGER_CROS_PCHG_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_RTL4_A_MODULE: u32 = 1;
pub const CONFIG_BMI088_ACCEL_I2C_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC2947_I2C_MODULE: u32 = 1;
pub const CONFIG_OVERLAY_FS_MODULE: u32 = 1;
pub const CONFIG_SECONDARY_TRUSTED_KEYRING: u32 = 1;
pub const CONFIG_ICS932S401_MODULE: u32 = 1;
pub const CONFIG_BT_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_IDEALTEK: u32 = 1;
pub const CONFIG_HOTPLUG_SPLIT_STARTUP: u32 = 1;
pub const CONFIG_VT: u32 = 1;
pub const CONFIG_USB_GSPCA_JEILINJ_MODULE: u32 = 1;
pub const CONFIG_NET_CLS_ACT: u32 = 1;
pub const CONFIG_XEN_PV_DOM0: u32 = 1;
pub const CONFIG_DVB_USB_MXL111SF_MODULE: u32 = 1;
pub const CONFIG_ET131X_MODULE: u32 = 1;
pub const CONFIG_COMPAT_OLD_SIGACTION: u32 = 1;
pub const CONFIG_EEPROM_MAX6875_MODULE: u32 = 1;
pub const CONFIG_VIDEO_VIMC_MODULE: u32 = 1;
pub const CONFIG_LIBNVDIMM: u32 = 1;
pub const CONFIG_SERIAL_ALTERA_JTAGUART_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_ABB5ZES3_MODULE: u32 = 1;
pub const CONFIG_IP_SET_HASH_IPPORTIP_MODULE: u32 = 1;
pub const CONFIG_BATTERY_GOLDFISH_MODULE: u32 = 1;
pub const CONFIG_SMP: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS: u32 = 16;
pub const CONFIG_NTB_PERF_MODULE: u32 = 1;
pub const CONFIG_AMD_SFH_HID_MODULE: u32 = 1;
pub const CONFIG_VLAN_8021Q_MVRP: u32 = 1;
pub const CONFIG_SCSI_BNX2_ISCSI_MODULE: u32 = 1;
pub const CONFIG_R8169_LEDS: u32 = 1;
pub const CONFIG_ATM_FORE200E_DEBUG: u32 = 0;
pub const CONFIG_INFINIBAND_RDMAVT_MODULE: u32 = 1;
pub const CONFIG_BT_HCIBTUSB_RTL: u32 = 1;
pub const CONFIG_W1_SLAVE_DS250X_MODULE: u32 = 1;
pub const CONFIG_VIDEO_GC08A3_MODULE: u32 = 1;
pub const CONFIG_CFG80211_MODULE: u32 = 1;
pub const CONFIG_NFT_QUOTA_MODULE: u32 = 1;
pub const CONFIG_PARPORT_PC_MODULE: u32 = 1;
pub const CONFIG_LIQUIDIO_CORE_MODULE: u32 = 1;
pub const CONFIG_CEPH_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_REGULATOR_MAX8997_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_UC1611_MODULE: u32 = 1;
pub const CONFIG_HID_REDRAGON_MODULE: u32 = 1;
pub const CONFIG_BT_RTL_MODULE: u32 = 1;
pub const CONFIG_SECURITYFS: u32 = 1;
pub const CONFIG_VIDEO_CX88_DVB_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_GOODIX_BERLIN_CORE_MODULE: u32 = 1;
pub const CONFIG_MOST_I2C_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SOLO6X10_MODULE: u32 = 1;
pub const CONFIG_QUEUED_RWLOCKS: u32 = 1;
pub const CONFIG_VMWARE_VMCI_VSOCKETS_MODULE: u32 = 1;
pub const CONFIG_BT_HCIVHCI_MODULE: u32 = 1;
pub const CONFIG_KGDB_SERIAL_CONSOLE: u32 = 1;
pub const CONFIG_SND_SST_ATOM_HIFI2_PLATFORM_ACPI_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_DCCP_MODULE: u32 = 1;
pub const CONFIG_LSM_MMAP_MIN_ADDR: u32 = 0;
pub const CONFIG_CRYPTO_BLAKE2S_X86: u32 = 1;
pub const CONFIG_MAC80211_RC_MINSTREL: u32 = 1;
pub const CONFIG_XEN_PCIDEV_FRONTEND_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX231XX_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_HASHLIMIT_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_AUDITSYSCALL: u32 = 1;
pub const CONFIG_FIREWIRE_SBP2_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_STI_SAS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK5386_MODULE: u32 = 1;
pub const CONFIG_IMA_QUEUE_EARLY_BOOT_KEYS: u32 = 1;
pub const CONFIG_ROCKCHIP_PHY_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_STA350_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_LOOP: u32 = 1;
pub const CONFIG_TI_ADS1298_MODULE: u32 = 1;
pub const CONFIG_IPV6_SUBTREES: u32 = 1;
pub const CONFIG_SENSORS_ADT7310_MODULE: u32 = 1;
pub const CONFIG_INTEL_TH_PCI_MODULE: u32 = 1;
pub const CONFIG_HID_EMS_FF_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_MODULE: u32 = 1;
pub const CONFIG_MICROSEMI_PHY_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_IIO_TRIGGER_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV2659_MODULE: u32 = 1;
pub const CONFIG_DELL_SMBIOS_MODULE: u32 = 1;
pub const CONFIG_BTRFS_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_HID_UDRAW_PS3_MODULE: u32 = 1;
pub const CONFIG_HID_APPLE_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_DIGITV_MODULE: u32 = 1;
pub const CONFIG_AC97_BUS_MODULE: u32 = 1;
pub const CONFIG_VMWARE_BALLOON_MODULE: u32 = 1;
pub const CONFIG_STK3310_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7134_ALSA_MODULE: u32 = 1;
pub const CONFIG_USB_BELKIN: u32 = 1;
pub const CONFIG_INTEL_IOATDMA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5682S_MODULE: u32 = 1;
pub const CONFIG_XIAOMI_WMI_MODULE: u32 = 1;
pub const CONFIG_RCU_STALL_COMMON: u32 = 1;
pub const CONFIG_USB_UEAGLEATM_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_ZONED: u32 = 1;
pub const CONFIG_REGULATOR_LP872X_MODULE: u32 = 1;
pub const CONFIG_SATA_ZPODD: u32 = 1;
pub const CONFIG_ARCNET_COM20020_CS_MODULE: u32 = 1;
pub const CONFIG_RT2X00_LIB_MODULE: u32 = 1;
pub const CONFIG_HAVE_ASM_MODVERSIONS: u32 = 1;
pub const CONFIG_DVB_STB6100_MODULE: u32 = 1;
pub const CONFIG_HID_SENSOR_IIO_COMMON_MODULE: u32 = 1;
pub const CONFIG_RAS_FMPM_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_CDG_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_ADDR_TRANS: u32 = 1;
pub const CONFIG_APDS9960_MODULE: u32 = 1;
pub const CONFIG_MTD_HYPERBUS_MODULE: u32 = 1;
pub const CONFIG_NFS_DEBUG: u32 = 1;
pub const CONFIG_XEN_PVH: u32 = 1;
pub const CONFIG_NET_FC: u32 = 1;
pub const CONFIG_BT_HCIRSI_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_PHYSICAL_MASK: u32 = 1;
pub const CONFIG_MFD_TPS65912_I2C: u32 = 1;
pub const CONFIG_SND_SOC_WCD934X_MODULE: u32 = 1;
pub const CONFIG_DA_MON_EVENTS_ID: u32 = 1;
pub const CONFIG_TINYDRM_ILI9486_MODULE: u32 = 1;
pub const CONFIG_KS8851_MODULE: u32 = 1;
pub const CONFIG_SCSI_LOGGING: u32 = 1;
pub const CONFIG_PM_WAKELOCKS_LIMIT: u32 = 100;
pub const CONFIG_HAVE_PERF_EVENTS: u32 = 1;
pub const CONFIG_TI_ADC084S021_MODULE: u32 = 1;
pub const CONFIG_RFKILL_LEDS: u32 = 1;
pub const CONFIG_COMEDI_ADV_PCI1724_MODULE: u32 = 1;
pub const CONFIG_AD7476_MODULE: u32 = 1;
pub const CONFIG_DRM_FBDEV_OVERALLOC: u32 = 100;
pub const CONFIG_KS0108_PORT: u32 = 888;
pub const CONFIG_SECRETMEM: u32 = 1;
pub const CONFIG_MSA311_MODULE: u32 = 1;
pub const CONFIG_MFD_88PM805_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV2685_MODULE: u32 = 1;
pub const CONFIG_IIO_SSP_SENSORS_COMMONS_MODULE: u32 = 1;
pub const CONFIG_COMEDI_USBDUX_MODULE: u32 = 1;
pub const CONFIG_DM_VERITY_MODULE: u32 = 1;
pub const CONFIG_CONSOLE_POLL: u32 = 1;
pub const CONFIG_NFT_NUMGEN_MODULE: u32 = 1;
pub const CONFIG_ATM_MODULE: u32 = 1;
pub const CONFIG_NFTL_RW: u32 = 1;
pub const CONFIG_REGULATOR_TPS68470_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_MANAGER_DISABLE_TESTS: u32 = 1;
pub const CONFIG_BACKLIGHT_88PM860X_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_MQPRIO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_APDS990X_MODULE: u32 = 1;
pub const CONFIG_AIC7XXX_DEBUG_MASK: u32 = 0;
pub const CONFIG_W1_SLAVE_DS2423_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_BD663474_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_U32_MODULE: u32 = 1;
pub const CONFIG_DVB_DM1105_MODULE: u32 = 1;
pub const CONFIG_SCSI_SYM53C8XX_MMIO: u32 = 1;
pub const CONFIG_IPW2100_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_855_MODULE: u32 = 1;
pub const CONFIG_I2C_OCORES_MODULE: u32 = 1;
pub const CONFIG_REISERFS_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_RTC_DRV_DS1511_MODULE: u32 = 1;
pub const CONFIG_MEDIATEK_MT6359_AUXADC_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_PCD8544_MODULE: u32 = 1;
pub const CONFIG_NGBE_MODULE: u32 = 1;
pub const CONFIG_X86_L1_CACHE_SHIFT: u32 = 6;
pub const CONFIG_SND_SOC_INTEL_KBL_RT5660_MACH_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_TARGET_HL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_MAX98373_MODULE: u32 = 1;
pub const CONFIG_NFC_VIRTUAL_NCI_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MC13892_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_POWER_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_MXIC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP2856_MODULE: u32 = 1;
pub const CONFIG_SND_INDIGODJX_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_KARMA_MODULE: u32 = 1;
pub const CONFIG_VIDEO_AK7375_MODULE: u32 = 1;
pub const CONFIG_HID_MAYFLASH_MODULE: u32 = 1;
pub const CONFIG_B43LEGACY_PCI_AUTOSELECT: u32 = 1;
pub const CONFIG_MEMSTICK_JMICRON_38X_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_QT1010_MODULE: u32 = 1;
pub const CONFIG_INTEL_PMC_CORE_MODULE: u32 = 1;
pub const CONFIG_BONDING_MODULE: u32 = 1;
pub const CONFIG_SND_ISIGHT_MODULE: u32 = 1;
pub const CONFIG_LTO_NONE: u32 = 1;
pub const CONFIG_DELL_SMBIOS_WMI: u32 = 1;
pub const CONFIG_SURFACE_DTX_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_862_MODULE: u32 = 1;
pub const CONFIG_GPIO_WS16C48_MODULE: u32 = 1;
pub const CONFIG_TYPEC_MUX_IT5205_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_PCI1XXXX_MODULE: u32 = 1;
pub const CONFIG_HAVE_DMA_CONTIGUOUS: u32 = 1;
pub const CONFIG_KEYBOARD_SAMSUNG_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV6650_MODULE: u32 = 1;
pub const CONFIG_DVB_ISL6405_MODULE: u32 = 1;
pub const CONFIG_ADIS16136_MODULE: u32 = 1;
pub const CONFIG_IR_WINBOND_CIR_MODULE: u32 = 1;
pub const CONFIG_CM3323_MODULE: u32 = 1;
pub const CONFIG_MTD_PHYSMAP_MODULE: u32 = 1;
pub const CONFIG_RTW88_8723DS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADT7475_MODULE: u32 = 1;
pub const CONFIG_ARCH_PROC_KCORE_TEXT: u32 = 1;
pub const CONFIG_MTD_CFI_STAA_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_SSD1289_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP2993_MODULE: u32 = 1;
pub const CONFIG_CAN_NETLINK: u32 = 1;
pub const CONFIG_JFFS2_FS_XATTR: u32 = 1;
pub const CONFIG_KEYBOARD_MATRIX_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_CLASS_DEVICE: u32 = 1;
pub const CONFIG_CFG80211_DEBUGFS: u32 = 1;
pub const CONFIG_NF_TABLES_MODULE: u32 = 1;
pub const CONFIG_SERIAL_FSL_LINFLEXUART_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_MANAGER: u32 = 1;
pub const CONFIG_ADXL367_SPI_MODULE: u32 = 1;
pub const CONFIG_USB_F_EEM_MODULE: u32 = 1;
pub const CONFIG_HIBERNATION_COMP_LZO: u32 = 1;
pub const CONFIG_SENSORS_PCF8591_MODULE: u32 = 1;
pub const CONFIG_SUSPEND_FREEZER: u32 = 1;
pub const CONFIG_NET_VENDOR_MARVELL: u32 = 1;
pub const CONFIG_CAN_ISOTP_MODULE: u32 = 1;
pub const CONFIG_RTW89_CORE_MODULE: u32 = 1;
pub const CONFIG_SCSI_DC395x_MODULE: u32 = 1;
pub const CONFIG_CPU_SUP_HYGON: u32 = 1;
pub const CONFIG_DVB_NET: u32 = 1;
pub const CONFIG_SSB_MODULE: u32 = 1;
pub const CONFIG_ADXRS450_MODULE: u32 = 1;
pub const CONFIG_PCIE_DW_EP: u32 = 1;
pub const CONFIG_W83877F_WDT_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_POLY1305_GENERIC_MODULE: u32 = 1;
pub const CONFIG_DECOMPRESS_LZO: u32 = 1;
pub const CONFIG_SND_SOC_SOF_ACPI_DEV_MODULE: u32 = 1;
pub const CONFIG_QRTR_MHI_MODULE: u32 = 1;
pub const CONFIG_OVERLAY_FS_REDIRECT_ALWAYS_FOLLOW: u32 = 1;
pub const CONFIG_NLS_ISO8859_15_MODULE: u32 = 1;
pub const CONFIG_LEDS_PWM_MULTICOLOR_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_STACKLEAK: u32 = 1;
pub const CONFIG_BACKLIGHT_QCOM_WLED_MODULE: u32 = 1;
pub const CONFIG_MEDIA_CAMERA_SUPPORT: u32 = 1;
pub const CONFIG_CHARLCD_MODULE: u32 = 1;
pub const CONFIG_IWLWIFI_DEVICE_TRACING: u32 = 1;
pub const CONFIG_BACKLIGHT_SAHARA_MODULE: u32 = 1;
pub const CONFIG_RFKILL_GPIO_MODULE: u32 = 1;
pub const CONFIG_UNACCEPTED_MEMORY: u32 = 1;
pub const CONFIG_NET_DSA_SMSC_LAN9303_I2C_MODULE: u32 = 1;
pub const CONFIG_NTB_NETDEV_MODULE: u32 = 1;
pub const CONFIG_SND_SEQ_UMP: u32 = 1;
pub const CONFIG_VIDEO_VIVID_CEC: u32 = 1;
pub const CONFIG_NET_SCH_PLUG_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_SJA1105_MODULE: u32 = 1;
pub const CONFIG_DEV_DAX_CXL_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CLUSTER_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA6752HS_MODULE: u32 = 1;
pub const CONFIG_PPP_MULTILINK: u32 = 1;
pub const CONFIG_QCOM_QMI_HELPERS_MODULE: u32 = 1;
pub const CONFIG_LZ4_DECOMPRESS: u32 = 1;
pub const CONFIG_USB_SERIAL_IR_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_CA0132_MODULE: u32 = 1;
pub const CONFIG_IP_VS_PROTO_ESP: u32 = 1;
pub const CONFIG_SND_SOC_CS35L45_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_HX8347D_MODULE: u32 = 1;
pub const CONFIG_SCSI_CHELSIO_FCOE_MODULE: u32 = 1;
pub const CONFIG_QUOTA_NETLINK_INTERFACE: u32 = 1;
pub const CONFIG_USB_EMI62_MODULE: u32 = 1;
pub const CONFIG_NFT_DUP_NETDEV_MODULE: u32 = 1;
pub const CONFIG_PM_TRACE: u32 = 1;
pub const CONFIG_SENSORS_XGENE_MODULE: u32 = 1;
pub const CONFIG_ARCNET_RAW_MODULE: u32 = 1;
pub const CONFIG_MPRLS0025PA_I2C_MODULE: u32 = 1;
pub const CONFIG_SCSI_SAS_HOST_SMP: u32 = 1;
pub const CONFIG_IIO_ST_SENSORS_CORE_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_NAT_MODULE: u32 = 1;
pub const CONFIG_RTC_MC146818_LIB: u32 = 1;
pub const CONFIG_RD_LZO: u32 = 1;
pub const CONFIG_RTW89_8852C_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_AQUANTIA: u32 = 1;
pub const CONFIG_HID_LENOVO_MODULE: u32 = 1;
pub const CONFIG_CEPH_FS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_K8TEMP_MODULE: u32 = 1;
pub const CONFIG_ATA_SFF: u32 = 1;
pub const CONFIG_INPUT_MOUSEDEV_SCREEN_X: u32 = 1024;
pub const CONFIG_NF_CT_PROTO_DCCP: u32 = 1;
pub const CONFIG_USB_RAREMONO_MODULE: u32 = 1;
pub const CONFIG_PINCTRL: u32 = 1;
pub const CONFIG_NET_DSA_VITESSE_VSC73XX_SPI_MODULE: u32 = 1;
pub const CONFIG_SENSORS_PIM4328_MODULE: u32 = 1;
pub const CONFIG_STP_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX8649_MODULE: u32 = 1;
pub const CONFIG_ATH9K_PCI_NO_EEPROM_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_SPACEORB_MODULE: u32 = 1;
pub const CONFIG_NFC_NXP_NCI_MODULE: u32 = 1;
pub const CONFIG_FB_MATROX_I2C_MODULE: u32 = 1;
pub const CONFIG_TCM_QLA2XXX_MODULE: u32 = 1;
pub const CONFIG_PECI_CPU_MODULE: u32 = 1;
pub const CONFIG_ATH12K_DEBUGFS: u32 = 1;
pub const CONFIG_MCP320X_MODULE: u32 = 1;
pub const CONFIG_JME_MODULE: u32 = 1;
pub const CONFIG_XEN_ACPI_PROCESSOR: u32 = 1;
pub const CONFIG_USB_SERIAL_VISOR_MODULE: u32 = 1;
pub const CONFIG_COMEDI_S526_MODULE: u32 = 1;
pub const CONFIG_MTD_SPI_NOR_USE_4K_SECTORS: u32 = 1;
pub const CONFIG_BE2NET_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_RED_MODULE: u32 = 1;
pub const CONFIG_DVB_VES1X93_MODULE: u32 = 1;
pub const CONFIG_VIDEO_MT9V011_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TVEEPROM_MODULE: u32 = 1;
pub const CONFIG_TI_ADS8688_MODULE: u32 = 1;
pub const CONFIG_NF_TPROXY_IPV6_MODULE: u32 = 1;
pub const CONFIG_MOST_USB_HDM_MODULE: u32 = 1;
pub const CONFIG_STAGING: u32 = 1;
pub const CONFIG_ACPI_LPIT: u32 = 1;
pub const CONFIG_SENSORS_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_SCSI_DH_HP_SW_MODULE: u32 = 1;
pub const CONFIG_MCP3564_MODULE: u32 = 1;
pub const CONFIG_MISC_RTSX_MODULE: u32 = 1;
pub const CONFIG_MEDIA_CONTROLLER: u32 = 1;
pub const CONFIG_EFI_RCI2_TABLE: u32 = 1;
pub const CONFIG_RTC_DRV_EM3027_MODULE: u32 = 1;
pub const CONFIG_USB_SUPPORT: u32 = 1;
pub const CONFIG_WLCORE_SDIO_MODULE: u32 = 1;
pub const CONFIG_DVB_MXL5XX_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_CORE: u32 = 1;
pub const CONFIG_IP_VS_LBLC_MODULE: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR_IDLE: u32 = 1;
pub const CONFIG_CRYPTO_JITTERENTROPY: u32 = 1;
pub const CONFIG_PREVENT_FIRMWARE_BUILD: u32 = 1;
pub const CONFIG_W1_MASTER_UART_MODULE: u32 = 1;
pub const CONFIG_PATA_VIA_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ATXP1_MODULE: u32 = 1;
pub const CONFIG_HW_RANDOM_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_FXOS8700_SPI_MODULE: u32 = 1;
pub const CONFIG_MEGARAID_SAS_MODULE: u32 = 1;
pub const CONFIG_CHARGER_LP8788_MODULE: u32 = 1;
pub const CONFIG_DRM_XE_PREEMPT_TIMEOUT_MAX: u32 = 10000000;
pub const CONFIG_NVMEM_SPMI_SDAM_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_EGALAX_SERIAL_MODULE: u32 = 1;
pub const CONFIG_IP_VS_TAB_BITS: u32 = 12;
pub const CONFIG_PWM_PCA9685_MODULE: u32 = 1;
pub const CONFIG_USB_MV_UDC_MODULE: u32 = 1;
pub const CONFIG_NFC_TRF7970A_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_SERIAL: u32 = 1;
pub const CONFIG_SND_SOC_AMD_LEGACY_MACH_MODULE: u32 = 1;
pub const CONFIG_SENSORS_FSP_3Y_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_SANCOV_TRACE_PC: u32 = 1;
pub const CONFIG_PSTORE_COMPRESS: u32 = 1;
pub const CONFIG_REGULATOR_QCOM_USB_VBUS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BYTCR_WM5102_MACH_MODULE: u32 = 1;
pub const CONFIG_DM_ZERO_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAQBOARD2000_MODULE: u32 = 1;
pub const CONFIG_XILINX_AXI_EMAC_MODULE: u32 = 1;
pub const CONFIG_FB_ATY_CT: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_RELAX: u32 = 1;
pub const CONFIG_I2C_GPIO_MODULE: u32 = 1;
pub const CONFIG_IP_SET_HASH_NETNET_MODULE: u32 = 1;
pub const CONFIG_KS8851_MLL_MODULE: u32 = 1;
pub const CONFIG_FW_LOADER_COMPRESS_ZSTD: u32 = 1;
pub const CONFIG_SND_FIREWIRE_TASCAM_MODULE: u32 = 1;
pub const CONFIG_ACPI_MADT_WAKEUP: u32 = 1;
pub const CONFIG_IR_REDRAT3_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_HWSIM_MODULE: u32 = 1;
pub const CONFIG_NFT_LIMIT_MODULE: u32 = 1;
pub const CONFIG_IPV6_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_XZ_DEC_ARMTHUMB: u32 = 1;
pub const CONFIG_VIDEO_ADV7604_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_SERDEV: u32 = 1;
pub const CONFIG_INTEL_GTT: u32 = 1;
pub const CONFIG_ZONE_DMA32: u32 = 1;
pub const CONFIG_CC_HAS_KASAN_GENERIC: u32 = 1;
pub const CONFIG_NET_FAILOVER: u32 = 1;
pub const CONFIG_MLXSW_SPECTRUM_DCB: u32 = 1;
pub const CONFIG_X86_IOPL_IOPERM: u32 = 1;
pub const CONFIG_KEXEC_FILE: u32 = 1;
pub const CONFIG_B43_PIO: u32 = 1;
pub const CONFIG_SENSORS_ADM1031_MODULE: u32 = 1;
pub const CONFIG_PRINTK_TIME: u32 = 1;
pub const CONFIG_SND_SOC_RT286_MODULE: u32 = 1;
pub const CONFIG_SPI_INTEL_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_TSL2772_MODULE: u32 = 1;
pub const CONFIG_TIFM_7XX1_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX77693_MODULE: u32 = 1;
pub const CONFIG_PING_MODULE: u32 = 1;
pub const CONFIG_HOLTEK_FF: u32 = 1;
pub const CONFIG_SOUNDWIRE_GENERIC_ALLOCATION_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L34_MODULE: u32 = 1;
pub const CONFIG_AMD_MP2_STB: u32 = 1;
pub const CONFIG_I2C_CROS_EC_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_FIELDBUS_DEV_MODULE: u32 = 1;
pub const CONFIG_BOSCH_BNO055_MODULE: u32 = 1;
pub const CONFIG_INPUT_RETU_PWRBUTTON_MODULE: u32 = 1;
pub const CONFIG_ISDN_CAPI_MIDDLEWARE: u32 = 1;
pub const CONFIG_SERIAL_LANTIQ_MODULE: u32 = 1;
pub const CONFIG_GREENASIA_FF: u32 = 1;
pub const CONFIG_FSCACHE_STATS: u32 = 1;
pub const CONFIG_APPLE_MFI_FASTCHARGE_MODULE: u32 = 1;
pub const CONFIG_ACPI_CPPC_LIB: u32 = 1;
pub const CONFIG_STMMAC_PCI_MODULE: u32 = 1;
pub const CONFIG_DMI_SYSFS_MODULE: u32 = 1;
pub const CONFIG_ZLIB_INFLATE: u32 = 1;
pub const CONFIG_ARCH_WANTS_THP_SWAP: u32 = 1;
pub const CONFIG_MISDN_SPEEDFAX_MODULE: u32 = 1;
pub const CONFIG_MMA7455_SPI_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_TPS6586X_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ML86V7667_MODULE: u32 = 1;
pub const CONFIG_FPROBE_EVENTS: u32 = 1;
pub const CONFIG_HID_BIGBEN_FF_MODULE: u32 = 1;
pub const CONFIG_HID_BETOP_FF_MODULE: u32 = 1;
pub const CONFIG_IPW2200_RADIOTAP: u32 = 1;
pub const CONFIG_SENSORS_AHT10_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_TOPLEVEL_MODULE: u32 = 1;
pub const CONFIG_W1_MASTER_DS2482_MODULE: u32 = 1;
pub const CONFIG_MTD_UBI_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_863_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_RP5C01_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_RAM_MODULE: u32 = 1;
pub const CONFIG_VGA_ARB: u32 = 1;
pub const CONFIG_CRYPTO_LIB_CURVE25519_MODULE: u32 = 1;
pub const CONFIG_SND_FIREWIRE: u32 = 1;
pub const CONFIG_LOGIRUMBLEPAD2_FF: u32 = 1;
pub const CONFIG_PERF_EVENTS_AMD_UNCORE_MODULE: u32 = 1;
pub const CONFIG_DP83TG720_PHY_MODULE: u32 = 1;
pub const CONFIG_ATL1C_MODULE: u32 = 1;
pub const CONFIG_APDS9802ALS_MODULE: u32 = 1;
pub const CONFIG_TCG_XEN_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_CZ_DA7219MX98357_MACH_MODULE: u32 = 1;
pub const CONFIG_DE2104X_MODULE: u32 = 1;
pub const CONFIG_GPIO_ADP5520_MODULE: u32 = 1;
pub const CONFIG_MFD_KEMPLD_MODULE: u32 = 1;
pub const CONFIG_USB_EPSON2888: u32 = 1;
pub const CONFIG_ARCH_USE_MEMTEST: u32 = 1;
pub const CONFIG_HID_GENERIC_MODULE: u32 = 1;
pub const CONFIG_ACPI_PFRUT_MODULE: u32 = 1;
pub const CONFIG_USB_PHY: u32 = 1;
pub const CONFIG_TABLET_USB_AIPTEK_MODULE: u32 = 1;
pub const CONFIG_PMIC_OPREGION: u32 = 1;
pub const CONFIG_CAN_RAW_MODULE: u32 = 1;
pub const CONFIG_INTEL_IOMMU_SVM: u32 = 1;
pub const CONFIG_GREYBUS_LIGHT_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV5675_MODULE: u32 = 1;
pub const CONFIG_KVM_GENERIC_PRIVATE_MEM: u32 = 1;
pub const CONFIG_TI_ADC108S102_MODULE: u32 = 1;
pub const CONFIG_QCA808X_PHY_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_CS35L41_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_XRS700X_MODULE: u32 = 1;
pub const CONFIG_X86_MCE_AMD: u32 = 1;
pub const CONFIG_MAX5487_MODULE: u32 = 1;
pub const CONFIG_DS4424_MODULE: u32 = 1;
pub const CONFIG_APERTURE_HELPERS: u32 = 1;
pub const CONFIG_UNICODE: u32 = 1;
pub const CONFIG_GAMEPORT_MODULE: u32 = 1;
pub const CONFIG_HPET_MMAP: u32 = 1;
pub const CONFIG_RMI4_I2C_MODULE: u32 = 1;
pub const CONFIG_DM_LOG_WRITES_MODULE: u32 = 1;
pub const CONFIG_B44_PCI: u32 = 1;
pub const CONFIG_VIDEO_GS1662_MODULE: u32 = 1;
pub const CONFIG_USB_SIERRA_NET_MODULE: u32 = 1;
pub const CONFIG_TINYDRM_ILI9225_MODULE: u32 = 1;
pub const CONFIG_IBM_ASM_MODULE: u32 = 1;
pub const CONFIG_SPI_BITBANG_MODULE: u32 = 1;
pub const CONFIG_SWPHY: u32 = 1;
pub const CONFIG_SND_SOC_RT712_SDCA_DMIC_SDW_MODULE: u32 = 1;
pub const CONFIG_CGROUP_CPUACCT: u32 = 1;
pub const CONFIG_SENSORS_ADM1275_MODULE: u32 = 1;
pub const CONFIG_SND_I2S_HI6210_I2S_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA717X_MODULE: u32 = 1;
pub const CONFIG_MEMSTICK_REALTEK_USB_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_COMPONENT: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_HOOK_MODULE: u32 = 1;
pub const CONFIG_EFI_SECRET_MODULE: u32 = 1;
pub const CONFIG_SPI_DW_PCI_MODULE: u32 = 1;
pub const CONFIG_NFC_PN544_MEI_MODULE: u32 = 1;
pub const CONFIG_BMI323_MODULE: u32 = 1;
pub const CONFIG_PA12203001_MODULE: u32 = 1;
pub const CONFIG_USB_STORAGE_CYPRESS_ATACB_MODULE: u32 = 1;
pub const CONFIG_SIS900_MODULE: u32 = 1;
pub const CONFIG_PATA_WINBOND_MODULE: u32 = 1;
pub const CONFIG_DRM_SCHED_MODULE: u32 = 1;
pub const CONFIG_HSA_AMD_SVM: u32 = 1;
pub const CONFIG_REGULATOR_RT6190_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_TEST_MODULE: u32 = 1;
pub const CONFIG_DRM_PANEL_BRIDGE: u32 = 1;
pub const CONFIG_DVB_USB_GL861_MODULE: u32 = 1;
pub const CONFIG_IONIC_MODULE: u32 = 1;
pub const CONFIG_IP_VS_WLC_MODULE: u32 = 1;
pub const CONFIG_SERIAL_IPOCTAL_MODULE: u32 = 1;
pub const CONFIG_NET_POLL_CONTROLLER: u32 = 1;
pub const CONFIG_DW_DMAC_CORE_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_ANALOG_MODULE: u32 = 1;
pub const CONFIG_CAN_JANZ_ICAN3_MODULE: u32 = 1;
pub const CONFIG_ACPI_EC_DEBUGFS_MODULE: u32 = 1;
pub const CONFIG_HID_XIAOMI_MODULE: u32 = 1;
pub const CONFIG_FIREWIRE_OHCI_MODULE: u32 = 1;
pub const CONFIG_FS_DAX: u32 = 1;
pub const CONFIG_TOUCHSCREEN_EDT_FT5X06_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CYTTSP4_I2C_MODULE: u32 = 1;
pub const CONFIG_INPUT_MAX8925_ONKEY_MODULE: u32 = 1;
pub const CONFIG_RTW89_8852B_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_3WIRE: u32 = 1;
pub const CONFIG_DIMLIB: u32 = 1;
pub const CONFIG_TWL4030_MADC_MODULE: u32 = 1;
pub const CONFIG_MMC_SDHCI_ACPI_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_READONLY_MEM: u32 = 1;
pub const CONFIG_GPIO_MB86S7X_MODULE: u32 = 1;
pub const CONFIG_LAPB_MODULE: u32 = 1;
pub const CONFIG_SAMPLE_TRACE_ARRAY_MODULE: u32 = 1;
pub const CONFIG_LEGACY_PTYS: u32 = 1;
pub const CONFIG_INPUT_MOUSEDEV_SCREEN_Y: u32 = 768;
pub const CONFIG_MEMCG: u32 = 1;
pub const CONFIG_DRM_DISPLAY_DP_AUX_CHARDEV: u32 = 1;
pub const CONFIG_COMMON_CLK_SI5341_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_CANNONLAKE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SPD5118_MODULE: u32 = 1;
pub const CONFIG_BH1750_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_CHACHA20POLY1305_MODULE: u32 = 1;
pub const CONFIG_ZSTD_COMPRESS: u32 = 1;
pub const CONFIG_MAILBOX: u32 = 1;
pub const CONFIG_SPARSE_IRQ: u32 = 1;
pub const CONFIG_ADV_SWBUTTON_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TSL2563_MODULE: u32 = 1;
pub const CONFIG_NEED_SG_DMA_LENGTH: u32 = 1;
pub const CONFIG_VHOST_TASK: u32 = 1;
pub const CONFIG_IPV6_SEG6_BPF: u32 = 1;
pub const CONFIG_BT_DEBUGFS: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_CHT_BSW_RT5672_MACH_MODULE: u32 = 1;
pub const CONFIG_KMX61_MODULE: u32 = 1;
pub const CONFIG_DVB_TUNER_DIB0070_MODULE: u32 = 1;
pub const CONFIG_SUSPEND: u32 = 1;
pub const CONFIG_GPIO_MC33880_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_WM831X_MODULE: u32 = 1;
pub const CONFIG_GENERIC_ADC_BATTERY_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_F8153X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TSCS42XX_MODULE: u32 = 1;
pub const CONFIG_SND_USB_AUDIO_MIDI_V2: u32 = 1;
pub const CONFIG_X86_UV: u32 = 1;
pub const CONFIG_KGDB: u32 = 1;
pub const CONFIG_SENSORS_GIGABYTE_WATERFORCE_MODULE: u32 = 1;
pub const CONFIG_SAMSUNG_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_GRACE_PERIOD_MODULE: u32 = 1;
pub const CONFIG_SOC_TI: u32 = 1;
pub const CONFIG_MHI_BUS_EP_MODULE: u32 = 1;
pub const CONFIG_RTL8192DE_MODULE: u32 = 1;
pub const CONFIG_NFC_PN532_UART_MODULE: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_ARG_ACCESS_API: u32 = 1;
pub const CONFIG_SENSORS_PECI_DIMMTEMP_MODULE: u32 = 1;
pub const CONFIG_SUNGEM_PHY_MODULE: u32 = 1;
pub const CONFIG_MFD_CS42L43_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ES8316_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_PCI230_MODULE: u32 = 1;
pub const CONFIG_ENVELOPE_DETECTOR_MODULE: u32 = 1;
pub const CONFIG_RT2800_LIB_MODULE: u32 = 1;
pub const CONFIG_CC_IMPLICIT_FALLTHROUGH: &[u8; 25] = b"-Wimplicit-fallthrough=5\0";
pub const CONFIG_FB_DMAMEM_HELPERS: u32 = 1;
pub const CONFIG_IP_MULTIPLE_TABLES: u32 = 1;
pub const CONFIG_MFD_WM831X_I2C: u32 = 1;
pub const CONFIG_MADERA_IRQ_MODULE: u32 = 1;
pub const CONFIG_USB_F_RNDIS_MODULE: u32 = 1;
pub const CONFIG_RT2X00_LIB_CRYPTO: u32 = 1;
pub const CONFIG_TMP117_MODULE: u32 = 1;
pub const CONFIG_PPP_FILTER: u32 = 1;
pub const CONFIG_PINCTRL_CS47L92: u32 = 1;
pub const CONFIG_COMMON_CLK_WM831X_MODULE: u32 = 1;
pub const CONFIG_VDPA_SIM_BLOCK_MODULE: u32 = 1;
pub const CONFIG_GPIO_PCA953X_IRQ: u32 = 1;
pub const CONFIG_NET_DSA_TAG_OCELOT_8021Q_MODULE: u32 = 1;
pub const CONFIG_USB_F_PRINTER_MODULE: u32 = 1;
pub const CONFIG_MFD_BCM590XX_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_RALINK: u32 = 1;
pub const CONFIG_IR_MCE_KBD_DECODER_MODULE: u32 = 1;
pub const CONFIG_X86_INTEL_LPSS: u32 = 1;
pub const CONFIG_RATIONAL: u32 = 1;
pub const CONFIG_SENSORS_LM25066_REGULATOR: u32 = 1;
pub const CONFIG_INPUT_GPIO_BEEPER_MODULE: u32 = 1;
pub const CONFIG_MEMORY_NOTIFIER_ERROR_INJECT_MODULE: u32 = 1;
pub const CONFIG_MISDN_W6692_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_MODULE: u32 = 1;
pub const CONFIG_SIEMENS_SIMATIC_IPC_BATT_MODULE: u32 = 1;
pub const CONFIG_FB_MATROX_MODULE: u32 = 1;
pub const CONFIG_GPIO_LP3943_MODULE: u32 = 1;
pub const CONFIG_WILCO_EC_DEBUGFS_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO_RXS_GEN3_MODULE: u32 = 1;
pub const CONFIG_SYSTEM_EXTRA_CERTIFICATE: u32 = 1;
pub const CONFIG_EXTCON_ADC_JACK_MODULE: u32 = 1;
pub const CONFIG_MFD_DA9052_I2C: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2438_MODULE: u32 = 1;
pub const CONFIG_MEMORY_HOTPLUG: u32 = 1;
pub const CONFIG_CRC64: u32 = 1;
pub const CONFIG_TRUSTED_KEYS_TPM: u32 = 1;
pub const CONFIG_MS5611_SPI_MODULE: u32 = 1;
pub const CONFIG_GPIO_ML_IOH_MODULE: u32 = 1;
pub const CONFIG_MS5611_MODULE: u32 = 1;
pub const CONFIG_PSE_CONTROLLER: u32 = 1;
pub const CONFIG_KEY_DH_OPERATIONS: u32 = 1;
pub const CONFIG_HID_GYRATION_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANT_GENERAL_HUGETLB: u32 = 1;
pub const CONFIG_UBSAN: u32 = 1;
pub const CONFIG_USB_U_ETHER_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TW2804_MODULE: u32 = 1;
pub const CONFIG_ZONE_DMA: u32 = 1;
pub const CONFIG_GNSS_SERIAL_MODULE: u32 = 1;
pub const CONFIG_COMEDI_8255_SA_MODULE: u32 = 1;
pub const CONFIG_SND_USB_LINE6_MODULE: u32 = 1;
pub const CONFIG_TLS_DEVICE: u32 = 1;
pub const CONFIG_DVB_USB_TTUSB2_MODULE: u32 = 1;
pub const CONFIG_WIL6210_ISR_COR: u32 = 1;
pub const CONFIG_SND_MAX_CARDS: u32 = 32;
pub const CONFIG_REGULATOR_DA9055_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_PMEM_API: u32 = 1;
pub const CONFIG_YAMAHA_YAS530_MODULE: u32 = 1;
pub const CONFIG_CLOCKSOURCE_WATCHDOG: u32 = 1;
pub const CONFIG_IIO_MUX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK4104_MODULE: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_PC_PARPORT: u32 = 1;
pub const CONFIG_RD_GZIP: u32 = 1;
pub const CONFIG_SENSORS_I5500_MODULE: u32 = 1;
pub const CONFIG_VIDEO_THS7303_MODULE: u32 = 1;
pub const CONFIG_AMD_XGBE_MODULE: u32 = 1;
pub const CONFIG_INPUT_DRV2667_HAPTICS_MODULE: u32 = 1;
pub const CONFIG_FB_DEFERRED_IO: u32 = 1;
pub const CONFIG_LIBWX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L35_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_NETEM_MODULE: u32 = 1;
pub const CONFIG_IP_NF_MATCH_RPFILTER_MODULE: u32 = 1;
pub const CONFIG_MSDOS_PARTITION: u32 = 1;
pub const CONFIG_PCC: u32 = 1;
pub const CONFIG_SYNTH_EVENTS: u32 = 1;
pub const CONFIG_DVB_USB_DTV5100_MODULE: u32 = 1;
pub const CONFIG_POWER_SUPPLY_HWMON: u32 = 1;
pub const CONFIG_NETFILTER_NETLINK_LOG_MODULE: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_CONSERVATIVE: u32 = 1;
pub const CONFIG_ZSTD_COMMON: u32 = 1;
pub const CONFIG_TCG_TIS_SPI_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_1516_MODULE: u32 = 1;
pub const CONFIG_IIO_CROS_EC_LIGHT_PROX_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_3M: u32 = 1;
pub const CONFIG_AS_GFNI: u32 = 1;
pub const CONFIG_WATCHDOG: u32 = 1;
pub const CONFIG_BRIDGE_NETFILTER_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_RDC: u32 = 1;
pub const CONFIG_SND_SOC_MAX9759_MODULE: u32 = 1;
pub const CONFIG_INT3406_THERMAL_MODULE: u32 = 1;
pub const CONFIG_MODULE_DECOMPRESS: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_860_MODULE: u32 = 1;
pub const CONFIG_LOGITECH_FF: u32 = 1;
pub const CONFIG_VIDEO_VIVID_MODULE: u32 = 1;
pub const CONFIG_IR_IGORPLUGUSB_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_CONNSECMARK_MODULE: u32 = 1;
pub const CONFIG_I2C_HID_CORE_MODULE: u32 = 1;
pub const CONFIG_CHARGER_PCF50633_MODULE: u32 = 1;
pub const CONFIG_MWIFIEX_SDIO_MODULE: u32 = 1;
pub const CONFIG_XFRM: u32 = 1;
pub const CONFIG_HAVE_NOINSTR_VALIDATION: u32 = 1;
pub const CONFIG_MFD_TPS65912_SPI: u32 = 1;
pub const CONFIG_IPV6_PIMSM_V2: u32 = 1;
pub const CONFIG_ACPI_ADXL: u32 = 1;
pub const CONFIG_FIX_EARLYCON_MEM: u32 = 1;
pub const CONFIG_SCHED_CORE: u32 = 1;
pub const CONFIG_TCG_TIS_I2C_ATMEL_MODULE: u32 = 1;
pub const CONFIG_GNSS_MTK_SERIAL_MODULE: u32 = 1;
pub const CONFIG_DVB_A8293_MODULE: u32 = 1;
pub const CONFIG_PRESTERA_MODULE: u32 = 1;
pub const CONFIG_INTEL_MEI_GSC_MODULE: u32 = 1;
pub const CONFIG_R8712U_MODULE: u32 = 1;
pub const CONFIG_ORANGEFS_FS_MODULE: u32 = 1;
pub const CONFIG_MLX90614_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_DYNAPRO_MODULE: u32 = 1;
pub const CONFIG_INTEL_SOC_PMIC: u32 = 1;
pub const CONFIG_INPUT_AD714X_SPI_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_FAST_MULTIPLIER: u32 = 1;
pub const CONFIG_REGULATOR_RC5T583_MODULE: u32 = 1;
pub const CONFIG_CGROUP_HUGETLB: u32 = 1;
pub const CONFIG_COMEDI_PCMMIO_MODULE: u32 = 1;
pub const CONFIG_FW_LOADER: u32 = 1;
pub const CONFIG_INV_ICM42600_I2C_MODULE: u32 = 1;
pub const CONFIG_TWL4030_CORE: u32 = 1;
pub const CONFIG_USB_GSPCA_KINECT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT1318_SDW_MODULE: u32 = 1;
pub const CONFIG_DPS310_MODULE: u32 = 1;
pub const CONFIG_RTC_SYSTOHC: u32 = 1;
pub const CONFIG_JFS_FS_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_MKBP_PROXIMITY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83791D_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_RM_TS_MODULE: u32 = 1;
pub const CONFIG_WANXL_MODULE: u32 = 1;
pub const CONFIG_AMD_NUMA: u32 = 1;
pub const CONFIG_FPGA_DFL_MODULE: u32 = 1;
pub const CONFIG_INET_IPCOMP_MODULE: u32 = 1;
pub const CONFIG_ROMFS_FS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_IMG: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_RT_MODULE: u32 = 1;
pub const CONFIG_MMC_USDHI6ROL0_MODULE: u32 = 1;
pub const CONFIG_SCSI_WD719X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_TIGERLAKE_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MICROCHIP_KSZ_SPI_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DEFAULT_BUF_MAXSIZE_KB: u32 = 20480;
pub const CONFIG_MEDIA_TUNER_MT20XX_MODULE: u32 = 1;
pub const CONFIG_GPIO_MENZ127_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_HEARTBEAT_INTERVAL: u32 = 2500;
pub const CONFIG_MTD_REDBOOT_PARTS_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_CXGB4_MODULE: u32 = 1;
pub const CONFIG_KS7010_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_IPC3: u32 = 1;
pub const CONFIG_VIDEO_IMX219_MODULE: u32 = 1;
pub const CONFIG_L2TP_DEBUGFS_MODULE: u32 = 1;
pub const CONFIG_PATA_TOSHIBA_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_CACHE_LINE_SIZE: u32 = 1;
pub const CONFIG_NTB_TRANSPORT_MODULE: u32 = 1;
pub const CONFIG_DM_RAID_MODULE: u32 = 1;
pub const CONFIG_F71808E_WDT_MODULE: u32 = 1;
pub const CONFIG_X86_MINIMUM_CPU_FAMILY: u32 = 64;
pub const CONFIG_EXPORTFS: u32 = 1;
pub const CONFIG_RPR0521_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS43130_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_LP8788_MODULE: u32 = 1;
pub const CONFIG_INTEL_TURBO_MAX_3: u32 = 1;
pub const CONFIG_104_QUAD_8_MODULE: u32 = 1;
pub const CONFIG_VIDEO_HDPVR_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_HCTR2_MODULE: u32 = 1;
pub const CONFIG_SURFACE_AGGREGATOR_CDEV_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MT6397_MODULE: u32 = 1;
pub const CONFIG_EXTCON_INTEL_MRFLD_MODULE: u32 = 1;
pub const CONFIG_MAC80211_HWSIM_MODULE: u32 = 1;
pub const CONFIG_SCA3300_MODULE: u32 = 1;
pub const CONFIG_PARPORT_PC_PCMCIA_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_VEGAS_MODULE: u32 = 1;
pub const CONFIG_UV_MMTIMER_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_LABPC_MODULE: u32 = 1;
pub const CONFIG_GPIO_DLN2_MODULE: u32 = 1;
pub const CONFIG_PANIC_TIMEOUT: u32 = 0;
pub const CONFIG_IBM_RTL_MODULE: u32 = 1;
pub const CONFIG_MISDN_NETJET_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IMX296_MODULE: u32 = 1;
pub const CONFIG_FB_MB862XX_PCI_GDC: u32 = 1;
pub const CONFIG_NFC_MEI_PHY_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK: u32 = 1;
pub const CONFIG_MDIO_BCM_UNIMAC_MODULE: u32 = 1;
pub const CONFIG_SCSI_IPS_MODULE: u32 = 1;
pub const CONFIG_FW_LOADER_COMPRESS_XZ: u32 = 1;
pub const CONFIG_NET_CORE: u32 = 1;
pub const CONFIG_DVB_LGDT330X_MODULE: u32 = 1;
pub const CONFIG_AT76C50X_USB_MODULE: u32 = 1;
pub const CONFIG_DWMAC_INTEL_MODULE: u32 = 1;
pub const CONFIG_SOFT_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_RTW89_8852A_MODULE: u32 = 1;
pub const CONFIG_LD_IS_BFD: u32 = 1;
pub const CONFIG_INFINIBAND_ISERT_MODULE: u32 = 1;
pub const CONFIG_MMU_LAZY_TLB_REFCOUNT: u32 = 1;
pub const CONFIG_NAMESPACES: u32 = 1;
pub const CONFIG_SND_PCM_ELD: u32 = 1;
pub const CONFIG_DECOMPRESS_GZIP: u32 = 1;
pub const CONFIG_CROS_EC_I2C_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_OPA_VNIC_MODULE: u32 = 1;
pub const CONFIG_HWMON: u32 = 1;
pub const CONFIG_TYPEC_TPS6598X_MODULE: u32 = 1;
pub const CONFIG_BRCMFMAC_MODULE: u32 = 1;
pub const CONFIG_X86_SPEEDSTEP_CENTRINO: u32 = 1;
pub const CONFIG_ACPI_BATTERY: u32 = 1;
pub const CONFIG_I2C_PCI1XXXX_MODULE: u32 = 1;
pub const CONFIG_IP_NF_ARP_MANGLE_MODULE: u32 = 1;
pub const CONFIG_RTW88_8821CE_MODULE: u32 = 1;
pub const CONFIG_USB_SISUSBVGA_MODULE: u32 = 1;
pub const CONFIG_HD44780_MODULE: u32 = 1;
pub const CONFIG_CPU_RMAP: u32 = 1;
pub const CONFIG_IP6_NF_RAW_MODULE: u32 = 1;
pub const CONFIG_VFIO_PCI_CORE_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_NUMA_BALANCING: u32 = 1;
pub const CONFIG_COMEDI_PCMDA12_MODULE: u32 = 1;
pub const CONFIG_BUFFER_HEAD: u32 = 1;
pub const CONFIG_DVB_NGENE_MODULE: u32 = 1;
pub const CONFIG_MWIFIEX_USB_MODULE: u32 = 1;
pub const CONFIG_NET_9P_RDMA_MODULE: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_CSTATE_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_PATTERN: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_SENARYTECH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX23885_MODULE: u32 = 1;
pub const CONFIG_ALIENWARE_WMI_MODULE: u32 = 1;
pub const CONFIG_FIRMWARE_EDID: u32 = 1;
pub const CONFIG_FORTIFY_SOURCE: u32 = 1;
pub const CONFIG_INPUT_IQS626A_MODULE: u32 = 1;
pub const CONFIG_HWSPINLOCK: u32 = 1;
pub const CONFIG_I2C_DESIGNWARE_CORE: u32 = 1;
pub const CONFIG_CAN_ESD_402_PCI_MODULE: u32 = 1;
pub const CONFIG_DRM_ACCEL: u32 = 1;
pub const CONFIG_FB_VIA_MODULE: u32 = 1;
pub const CONFIG_ENCLOSURE_SERVICES_MODULE: u32 = 1;
pub const CONFIG_REISERFS_FS_SECURITY: u32 = 1;
pub const CONFIG_PANEL_MODULE: u32 = 1;
pub const CONFIG_NFC_MRVL_I2C_MODULE: u32 = 1;
pub const CONFIG_BT_HCIBTUSB_MTK: u32 = 1;
pub const CONFIG_NAU7802_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM5102_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RL6231_MODULE: u32 = 1;
pub const CONFIG_DVB_SI2168_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AIO_IIRO_16_MODULE: u32 = 1;
pub const CONFIG_FB_SYSMEM_HELPERS_DEFERRED: u32 = 1;
pub const CONFIG_MFD_SIMPLE_MFD_I2C_MODULE: u32 = 1;
pub const CONFIG_6LOWPAN_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ME_DAQ_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_S6SY761_MODULE: u32 = 1;
pub const CONFIG_WPCM450_SOC_MODULE: u32 = 1;
pub const CONFIG_DUMMY_MODULE: u32 = 1;
pub const CONFIG_VIDEO_EM28XX_V4L2_MODULE: u32 = 1;
pub const CONFIG_DM_BIO_PRISON_MODULE: u32 = 1;
pub const CONFIG_USELIB: u32 = 1;
pub const CONFIG_MMC_SDHCI_IO_ACCESSORS: u32 = 1;
pub const CONFIG_NET_DSA_SJA1105_VL: u32 = 1;
pub const CONFIG_CRAMFS_MTD: u32 = 1;
pub const CONFIG_BMC150_ACCEL_SPI_MODULE: u32 = 1;
pub const CONFIG_MTD_ROM_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_FAMILY_ARP: u32 = 1;
pub const CONFIG_SND_SOC_XILINX_SPDIF_MODULE: u32 = 1;
pub const CONFIG_HIBERNATE_CALLBACKS: u32 = 1;
pub const CONFIG_STM_SOURCE_HEARTBEAT_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_CXUSB_MODULE: u32 = 1;
pub const CONFIG_IR_RCMM_DECODER_MODULE: u32 = 1;
pub const CONFIG_TASKS_TRACE_RCU: u32 = 1;
pub const CONFIG_XEN_FRONT_PGDIR_SHBUF_MODULE: u32 = 1;
pub const CONFIG_VIDEO_S5C73M3_MODULE: u32 = 1;
pub const CONFIG_6LOWPAN_NHC_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CRC32C_INTEL: u32 = 1;
pub const CONFIG_MHP_MEMMAP_ON_MEMORY: u32 = 1;
pub const CONFIG_XEN_PVHVM: u32 = 1;
pub const CONFIG_MOUSE_PS2_ELANTECH: u32 = 1;
pub const CONFIG_REGULATOR_RT6245_MODULE: u32 = 1;
pub const CONFIG_ADFS_FS_MODULE: u32 = 1;
pub const CONFIG_VIPERBOARD_ADC_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_MELLANOX: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_PCI224_MODULE: u32 = 1;
pub const CONFIG_IR_SERIAL_MODULE: u32 = 1;
pub const CONFIG_OCFS2_FS_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SAMSUNG: u32 = 1;
pub const CONFIG_SKY2_MODULE: u32 = 1;
pub const CONFIG_GPIO_TPS68470_MODULE: u32 = 1;
pub const CONFIG_RIONET_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK4619_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT1320_SDW_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SPCA501_MODULE: u32 = 1;
pub const CONFIG_MFD_RDC321X_MODULE: u32 = 1;
pub const CONFIG_BT_LE: u32 = 1;
pub const CONFIG_PCCARD_MODULE: u32 = 1;
pub const CONFIG_DVB_SP8870_MODULE: u32 = 1;
pub const CONFIG_IXGBE_MODULE: u32 = 1;
pub const CONFIG_HDC3020_MODULE: u32 = 1;
pub const CONFIG_SENSORS_NZXT_SMART2_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_CIRRUS: u32 = 1;
pub const CONFIG_MT76x02_LIB_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_LM3509_MODULE: u32 = 1;
pub const CONFIG_X86_TSC: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_UVC: u32 = 1;
pub const CONFIG_SND_SOC_ADAU1701_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_DEBUG: u32 = 1;
pub const CONFIG_XENFS_MODULE: u32 = 1;
pub const CONFIG_ZRAM_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV2680_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SOF_CIRRUS_COMMON_MODULE: u32 = 1;
pub const CONFIG_SERIAL_DEV_CTRL_TTYPORT: u32 = 1;
pub const CONFIG_SND_AZT3328_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_DAQ_700_CS_MODULE: u32 = 1;
pub const CONFIG_PCI_DOMAINS: u32 = 1;
pub const CONFIG_CHARGER_DA9150_MODULE: u32 = 1;
pub const CONFIG_MTD_PMC551_MODULE: u32 = 1;
pub const CONFIG_RTW89_8922AE_MODULE: u32 = 1;
pub const CONFIG_FUSION_SAS_MODULE: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_SCHEDUTIL: u32 = 1;
pub const CONFIG_REGULATOR_DA9052_MODULE: u32 = 1;
pub const CONFIG_LENOVO_SE10_WDT_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_COMPRESS_ERROR: u32 = 1;
pub const CONFIG_IMA_DEFAULT_HASH_SHA256: u32 = 1;
pub const CONFIG_BMC150_MAGN_MODULE: u32 = 1;
pub const CONFIG_TOPSTAR_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_SURFACE_AGGREGATOR_REGISTRY_MODULE: u32 = 1;
pub const CONFIG_EFI_RUNTIME_WRAPPERS: u32 = 1;
pub const CONFIG_USB_MDC800_MODULE: u32 = 1;
pub const CONFIG_NF_CT_NETLINK_MODULE: u32 = 1;
pub const CONFIG_IIO_TRIGGERED_BUFFER_MODULE: u32 = 1;
pub const CONFIG_INTEL_PCH_THERMAL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_BROADWELL_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCL812_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_NAT_MODULE: u32 = 1;
pub const CONFIG_SERIAL_SC16IS7XX_MODULE: u32 = 1;
pub const CONFIG_ATH10K_LEDS: u32 = 1;
pub const CONFIG_DM9102_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DES3_EDE_X86_64_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADI_AXI_SPDIF_MODULE: u32 = 1;
pub const CONFIG_6LOWPAN_NHC_FRAGMENT_MODULE: u32 = 1;
pub const CONFIG_DMABUF_MOVE_NOTIFY: u32 = 1;
pub const CONFIG_PROC_SYSCTL: u32 = 1;
pub const CONFIG_MOST_SND_MODULE: u32 = 1;
pub const CONFIG_HDC100X_MODULE: u32 = 1;
pub const CONFIG_MIGRATION: u32 = 1;
pub const CONFIG_DVB_PLUTO2_MODULE: u32 = 1;
pub const CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS: u32 = 1;
pub const CONFIG_ATH9K_MODULE: u32 = 1;
pub const CONFIG_XILLYBUS_PCIE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_AKCIPHER: u32 = 1;
pub const CONFIG_HID_APPLEIR_MODULE: u32 = 1;
pub const CONFIG_MTD_SPI_NOR_SWP_DISABLE_ON_VOLATILE: u32 = 1;
pub const CONFIG_PCI200SYN_MODULE: u32 = 1;
pub const CONFIG_SX9360_MODULE: u32 = 1;
pub const CONFIG_USB_MSI2500_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_670X_MODULE: u32 = 1;
pub const CONFIG_NET_SCHED: u32 = 1;
pub const CONFIG_NET_CLS_FW_MODULE: u32 = 1;
pub const CONFIG_HAVE_HARDLOCKUP_DETECTOR_BUDDY: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_861_MODULE: u32 = 1;
pub const CONFIG_VIDEO_HEXIUM_ORION_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CHACHA20_MODULE: u32 = 1;
pub const CONFIG_MPLS_ROUTING_MODULE: u32 = 1;
pub const CONFIG_PAGE_POOL: u32 = 1;
pub const CONFIG_CRYPTO_USER_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_ESP_MODULE: u32 = 1;
pub const CONFIG_RT2500USB_MODULE: u32 = 1;
pub const CONFIG_NVME_TARGET_TCP_MODULE: u32 = 1;
pub const CONFIG_KFENCE_SAMPLE_INTERVAL: u32 = 0;
pub const CONFIG_HID_XINMO_MODULE: u32 = 1;
pub const CONFIG_NTFS3_FS_MODULE: u32 = 1;
pub const CONFIG_NETPOLL: u32 = 1;
pub const CONFIG_SCSI_DMX3191D_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IPU3_IMGU_MODULE: u32 = 1;
pub const CONFIG_CPU_SUP_AMD: u32 = 1;
pub const CONFIG_MTD_NAND_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_VIDEOBUF2_MEMOPS_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_PRESS_SPI_MODULE: u32 = 1;
pub const CONFIG_INTEL_WMI: u32 = 1;
pub const CONFIG_NET_MPLS_GSO_MODULE: u32 = 1;
pub const CONFIG_MII_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_BAYTRAIL_MODULE: u32 = 1;
pub const CONFIG_DM_VERITY_VERIFY_ROOTHASH_SIG: u32 = 1;
pub const CONFIG_BCMA_DRIVER_GMAC_CMN: u32 = 1;
pub const CONFIG_SONY_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_USB_ZERO_MODULE: u32 = 1;
pub const CONFIG_NVMEM_SYSFS: u32 = 1;
pub const CONFIG_IMA_DEFAULT_HASH: &[u8; 7] = b"sha256\0";
pub const CONFIG_HYPERV_STORAGE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADAU1761_I2C_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADM1266_MODULE: u32 = 1;
pub const CONFIG_DVB_TDA18271C2DD_MODULE: u32 = 1;
pub const CONFIG_9P_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_USB_STORAGE_ENE_UB6250_MODULE: u32 = 1;
pub const CONFIG_B53_SRAB_DRIVER_MODULE: u32 = 1;
pub const CONFIG_SCSI_COMMON: u32 = 1;
pub const CONFIG_SPARSEMEM_EXTREME: u32 = 1;
pub const CONFIG_MLX5_EN_RXNFC: u32 = 1;
pub const CONFIG_USB_M5602_MODULE: u32 = 1;
pub const CONFIG_RSEQ: u32 = 1;
pub const CONFIG_IOMMU_DMA: u32 = 1;
pub const CONFIG_SECURITY_TOMOYO_MAX_AUDIT_LOG: u32 = 1024;
pub const CONFIG_SND_SOC_IDT821034_MODULE: u32 = 1;
pub const CONFIG_VIA_WDT_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_GRIP_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_DRR_MODULE: u32 = 1;
pub const CONFIG_KARMA_PARTITION: u32 = 1;
pub const CONFIG_REGULATOR_MAX77826_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_PSXPAD_SPI_FF: u32 = 1;
pub const CONFIG_SENSORS_JC42_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ILITEK_MODULE: u32 = 1;
pub const CONFIG_SYSCTL_EXCEPTION_TRACE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_I2S_TEST_MODULE: u32 = 1;
pub const CONFIG_NEW_LEDS: u32 = 1;
pub const CONFIG_USB_G_PRINTER_MODULE: u32 = 1;
pub const CONFIG_SPI_AX88796C_MODULE: u32 = 1;
pub const CONFIG_UCLAMP_TASK: u32 = 1;
pub const CONFIG_KVM_PRIVATE_MEM: u32 = 1;
pub const CONFIG_MHI_BUS_PCI_GENERIC_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_420XX_MODULE: u32 = 1;
pub const CONFIG_SPI_SLAVE: u32 = 1;
pub const CONFIG_RAS: u32 = 1;
pub const CONFIG_SND_SOC_CS4270_MODULE: u32 = 1;
pub const CONFIG_NF_TABLES_NETDEV: u32 = 1;
pub const CONFIG_SSB_SPROM: u32 = 1;
pub const CONFIG_SND_USB_6FIRE_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ADP1653_MODULE: u32 = 1;
pub const CONFIG_BT_6LOWPAN_MODULE: u32 = 1;
pub const CONFIG_KVM_ASYNC_PF: u32 = 1;
pub const CONFIG_DVB_STV0367_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_PERICOM_MODULE: u32 = 1;
pub const CONFIG_PWM_DWC_MODULE: u32 = 1;
pub const CONFIG_SPI_PCI1XXXX_MODULE: u32 = 1;
pub const CONFIG_SCSI_IPR_MODULE: u32 = 1;
pub const CONFIG_KVM_MMIO: u32 = 1;
pub const CONFIG_MOUSE_SERIAL_MODULE: u32 = 1;
pub const CONFIG_SCSI_CXGB3_ISCSI_MODULE: u32 = 1;
pub const CONFIG_SPI_DLN2_MODULE: u32 = 1;
pub const CONFIG_I2C_DESIGNWARE_BAYTRAIL: u32 = 1;
pub const CONFIG_SC1200_WDT_MODULE: u32 = 1;
pub const CONFIG_DRM_SIMPLEDRM: u32 = 1;
pub const CONFIG_PADATA: u32 = 1;
pub const CONFIG_VIDEO_FB_IVTV_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_GPIO_POLLED_MODULE: u32 = 1;
pub const CONFIG_HID_PXRC_MODULE: u32 = 1;
pub const CONFIG_HD44780_COMMON_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_PTE_SPECIAL: u32 = 1;
pub const CONFIG_BLK_DEV_RBD_MODULE: u32 = 1;
pub const CONFIG_SND_DARLA20_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS4265_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV5648_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_KBL_DA7219_MAX98927_MACH_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MT2060_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_ASM_INLINE: u32 = 1;
pub const CONFIG_POWER_RESET_TPS65086: u32 = 1;
pub const CONFIG_HANGCHECK_TIMER_MODULE: u32 = 1;
pub const CONFIG_SATA_AHCI_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83781D_MODULE: u32 = 1;
pub const CONFIG_FB: u32 = 1;
pub const CONFIG_REGULATOR_RT5190A_MODULE: u32 = 1;
pub const CONFIG_IP_VS_FTP_MODULE: u32 = 1;
pub const CONFIG_BT_HCIBCM4377_MODULE: u32 = 1;
pub const CONFIG_INTEL_PMT_CLASS_MODULE: u32 = 1;
pub const CONFIG_INPUT_MC13783_PWRBUTTON_MODULE: u32 = 1;
pub const CONFIG_EDD_OFF: u32 = 1;
pub const CONFIG_KGDB_LOW_LEVEL_TRAP: u32 = 1;
pub const CONFIG_ADXL313_MODULE: u32 = 1;
pub const CONFIG_PATA_NS87410_MODULE: u32 = 1;
pub const CONFIG_HID_STEELSERIES_MODULE: u32 = 1;
pub const CONFIG_HAVE_ACPI_APEI_NMI: u32 = 1;
pub const CONFIG_TOUCHSCREEN_88PM860X_MODULE: u32 = 1;
pub const CONFIG_SQUASHFS_DECOMP_SINGLE: u32 = 1;
pub const CONFIG_USB_LEDS_TRIGGER_USBPORT_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TMP513_MODULE: u32 = 1;
pub const CONFIG_CALL_PADDING: u32 = 1;
pub const CONFIG_CC_HAS_NAMED_AS: u32 = 1;
pub const CONFIG_FUJITSU_TABLET_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CS5345_MODULE: u32 = 1;
pub const CONFIG_F2FS_FS_LZ4: u32 = 1;
pub const CONFIG_VIRT_WIFI_MODULE: u32 = 1;
pub const CONFIG_PLIP_MODULE: u32 = 1;
pub const CONFIG_V4L_TEST_DRIVERS: u32 = 1;
pub const CONFIG_REGULATOR_88PM800_MODULE: u32 = 1;
pub const CONFIG_X86_EXTENDED_PLATFORM: u32 = 1;
pub const CONFIG_SND_SOC_BD28623_MODULE: u32 = 1;
pub const CONFIG_INPUT_88PM860X_ONKEY_MODULE: u32 = 1;
pub const CONFIG_PWM_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_PDS_VDPA_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX88_ALSA_MODULE: u32 = 1;
pub const CONFIG_HAVE_ACPI_APEI: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_SIG_FORCE: u32 = 1;
pub const CONFIG_SCSI_ISCI_MODULE: u32 = 1;
pub const CONFIG_ATM_DRIVERS: u32 = 1;
pub const CONFIG_TOUCHSCREEN_PENMOUNT_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_950_MODULE: u32 = 1;
pub const CONFIG_CHARGER_BQ25980_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_CS47L90: u32 = 1;
pub const CONFIG_IR_RC5_DECODER_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM78_MODULE: u32 = 1;
pub const CONFIG_RTW89_8852AE_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_INTEL: u32 = 1;
pub const CONFIG_KPROBE_EVENTS: u32 = 1;
pub const CONFIG_MLX4_DEBUG: u32 = 1;
pub const CONFIG_PROC_VMCORE_DEVICE_DUMP: u32 = 1;
pub const CONFIG_F2FS_FS_POSIX_ACL: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_C3XXX_MODULE: u32 = 1;
pub const CONFIG_CHARGER_BQ256XX_MODULE: u32 = 1;
pub const CONFIG_BATTERY_SURFACE_MODULE: u32 = 1;
pub const CONFIG_IQS621_ALS_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_ASM_GOTO_TIED_OUTPUT: u32 = 1;
pub const CONFIG_ISCSI_TARGET_MODULE: u32 = 1;
pub const CONFIG_TABLET_USB_KBTAB_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_INITRD: u32 = 1;
pub const CONFIG_CIFS_FSCACHE: u32 = 1;
pub const CONFIG_SCSI_MPI3MR_MODULE: u32 = 1;
pub const CONFIG_FB_ATY128_MODULE: u32 = 1;
pub const CONFIG_MFD_MAX77843: u32 = 1;
pub const CONFIG_VIDEO_OV7251_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TDA8290_MODULE: u32 = 1;
pub const CONFIG_BE2ISCSI_MODULE: u32 = 1;
pub const CONFIG_DWC_PCIE_PMU_MODULE: u32 = 1;
pub const CONFIG_USB_F_SERIAL_MODULE: u32 = 1;
pub const CONFIG_AFFS_FS_MODULE: u32 = 1;
pub const CONFIG_NEED_TASKS_RCU: u32 = 1;
pub const CONFIG_SYSV_FS_MODULE: u32 = 1;
pub const CONFIG_MICROSOFT_MANA_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_OPTICON_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SPCA500_MODULE: u32 = 1;
pub const CONFIG_B43_PHY_LP: u32 = 1;
pub const CONFIG_INET: u32 = 1;
pub const CONFIG_MAX30208_MODULE: u32 = 1;
pub const CONFIG_NR_CPUS_RANGE_BEGIN: u32 = 8192;
pub const CONFIG_DL2K_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX18_MODULE: u32 = 1;
pub const CONFIG_PATA_HPT3X2N_MODULE: u32 = 1;
pub const CONFIG_HID_PETALYNX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_SOUNDWIRE_LINK_BASELINE_MODULE: u32 = 1;
pub const CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND: u32 = 1;
pub const CONFIG_BLK_DEV_SR: u32 = 1;
pub const CONFIG_MD_AUTODETECT: u32 = 1;
pub const CONFIG_CHR_DEV_ST_MODULE: u32 = 1;
pub const CONFIG_AD5686_MODULE: u32 = 1;
pub const CONFIG_FB_HGA_MODULE: u32 = 1;
pub const CONFIG_FUJITSU_ES_MODULE: u32 = 1;
pub const CONFIG_ATH11K_PCI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_CZ_RT5645_MACH_MODULE: u32 = 1;
pub const CONFIG_POWER_RESET: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_REDIRECT_MODULE: u32 = 1;
pub const CONFIG_HAVE_EISA: u32 = 1;
pub const CONFIG_ATA: u32 = 1;
pub const CONFIG_ADAPTEC_STARFIRE_MODULE: u32 = 1;
pub const CONFIG_ADXRS290_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_HFI1_MODULE: u32 = 1;
pub const CONFIG_XEN_PV_SMP: u32 = 1;
pub const CONFIG_BLK_DEV_RAM_SIZE: u32 = 65536;
pub const CONFIG_MMA7455_I2C_MODULE: u32 = 1;
pub const CONFIG_USB_EMI26_MODULE: u32 = 1;
pub const CONFIG_DLHL60D_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MT6660_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ZL6100_MODULE: u32 = 1;
pub const CONFIG_ATH6KL_USB_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_CS35L56_I2C_MODULE: u32 = 1;
pub const CONFIG_MSI_WMI_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_TYPEC_MUX_FSA4480_MODULE: u32 = 1;
pub const CONFIG_RPS: u32 = 1;
pub const CONFIG_PCI_P2PDMA: u32 = 1;
pub const CONFIG_HID_PICOLCD_LCD: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ELAN: u32 = 1;
pub const CONFIG_CRYPTO_CAST6_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_SECMARK: u32 = 1;
pub const CONFIG_PCI_EPF_NTB_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_NETDEV_MODULE: u32 = 1;
pub const CONFIG_CGROUP_NET_PRIO: u32 = 1;
pub const CONFIG_MPILIB: u32 = 1;
pub const CONFIG_MT7603E_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MC44S803_MODULE: u32 = 1;
pub const CONFIG_GARP_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_KEYWRAP_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_RV3028_MODULE: u32 = 1;
pub const CONFIG_FIRMWARE_TABLE: u32 = 1;
pub const CONFIG_SND_DMAENGINE_PCM_MODULE: u32 = 1;
pub const CONFIG_LEDS_TLC591XX_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_ARASAN_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_SIMP_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_CHECKSUM_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_SD3078_MODULE: u32 = 1;
pub const CONFIG_IP_NF_SECURITY_MODULE: u32 = 1;
pub const CONFIG_EPOLL: u32 = 1;
pub const CONFIG_SND_ATIIXP_MODULE: u32 = 1;
pub const CONFIG_USB_FUNCTIONFS_MODULE: u32 = 1;
pub const CONFIG_LEDS_MLXREG_MODULE: u32 = 1;
pub const CONFIG_ACPI_PLATFORM_PROFILE_MODULE: u32 = 1;
pub const CONFIG_TYPEC_MUX_GPIO_SBU_MODULE: u32 = 1;
pub const CONFIG_USB_FUNCTIONFS_ETH: u32 = 1;
pub const CONFIG_VIDEO_CAFE_CCIC_MODULE: u32 = 1;
pub const CONFIG_GPIO_SWNODE_UNDEFINED: u32 = 1;
pub const CONFIG_RTC_DRV_DS3232_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_TIGERLAKE_MODULE: u32 = 1;
pub const CONFIG_I3C_MODULE: u32 = 1;
pub const CONFIG_CGROUPS: u32 = 1;
pub const CONFIG_USB_AMD5536UDC_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7146_VV_MODULE: u32 = 1;
pub const CONFIG_UDMABUF: u32 = 1;
pub const CONFIG_DRM_HYPERV_MODULE: u32 = 1;
pub const CONFIG_CNIC_MODULE: u32 = 1;
pub const CONFIG_SPS30_SERIAL_MODULE: u32 = 1;
pub const CONFIG_MITIGATION_IBPB_ENTRY: u32 = 1;
pub const CONFIG_NFSD_FLEXFILELAYOUT: u32 = 1;
pub const CONFIG_CHARGER_CROS_CONTROL_MODULE: u32 = 1;
pub const CONFIG_NTB_SWITCHTEC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AW88395_MODULE: u32 = 1;
pub const CONFIG_PATA_JMICRON_MODULE: u32 = 1;
pub const CONFIG_USB_F_SUBSET_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PCF85363_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_KMSAN: u32 = 1;
pub const CONFIG_SENSORS_PLI1209BC_REGULATOR: u32 = 1;
pub const CONFIG_MTD_NAND_DISKONCHIP_PROBE_ADDRESS: u32 = 0;
pub const CONFIG_AD7791_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SGTL5000_MODULE: u32 = 1;
pub const CONFIG_I2C_ALI1535_MODULE: u32 = 1;
pub const CONFIG_NET_CLS_MATCHALL_MODULE: u32 = 1;
pub const CONFIG_XILINX_LL_TEMAC_MODULE: u32 = 1;
pub const CONFIG_PKCS8_PRIVATE_KEY_PARSER_MODULE: u32 = 1;
pub const CONFIG_AD2S1210_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250: u32 = 1;
pub const CONFIG_ABP060MG_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_MT7530_MMIO_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_KASAN: u32 = 1;
pub const CONFIG_CRYPTO_CHACHA20POLY1305_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_MODULE: u32 = 1;
pub const CONFIG_USE_PERCPU_NUMA_NODE_ID: u32 = 1;
pub const CONFIG_NUMA_KEEP_MEMINFO: u32 = 1;
pub const CONFIG_HID_ELAN_MODULE: u32 = 1;
pub const CONFIG_CEC_SECO_RC: u32 = 1;
pub const CONFIG_SPI_INTEL_PCI_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_HASH_INFO: u32 = 1;
pub const CONFIG_NET_DSA_MSCC_OCELOT_EXT_MODULE: u32 = 1;
pub const CONFIG_DRM_AMD_ACP: u32 = 1;
pub const CONFIG_QED_LL2: u32 = 1;
pub const CONFIG_MFD_MAX8925: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_IPVS_MODULE: u32 = 1;
pub const CONFIG_PHY_TUSB1210_MODULE: u32 = 1;
pub const CONFIG_CRC32: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_DH895xCC_MODULE: u32 = 1;
pub const CONFIG_EXT4_FS: u32 = 1;
pub const CONFIG_AK8975_MODULE: u32 = 1;
pub const CONFIG_SENSORS_INA238_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TOUCHRIGHT_MODULE: u32 = 1;
pub const CONFIG_HID_EZKEY_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_TWOFISH_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_FANOTIFY_ACCESS_PERMISSIONS: u32 = 1;
pub const CONFIG_EDAC_DECODE_MCE_MODULE: u32 = 1;
pub const CONFIG_IR_SERIAL_TRANSMITTER: u32 = 1;
pub const CONFIG_JOYSTICK_ZHENHUA_MODULE: u32 = 1;
pub const CONFIG_AD7768_1_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_MACH: u32 = 1;
pub const CONFIG_EVM_ATTR_FSUUID: u32 = 1;
pub const CONFIG_TOUCHSCREEN_HIMAX_HX83112B_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_HSTCP_MODULE: u32 = 1;
pub const CONFIG_RTL8192CU_MODULE: u32 = 1;
pub const CONFIG_USB_G_DBGP_SERIAL: u32 = 1;
pub const CONFIG_SND_HDA_INPUT_BEEP_MODE: u32 = 0;
pub const CONFIG_GPIO_CDEV: u32 = 1;
pub const CONFIG_CAN_F81604_MODULE: u32 = 1;
pub const CONFIG_VIDEO_PVRUSB2_DVB: u32 = 1;
pub const CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE: u32 = 1;
pub const CONFIG_USB_SERIAL_XSENS_MT_MODULE: u32 = 1;
pub const CONFIG_BATTERY_SBS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L43_MODULE: u32 = 1;
pub const CONFIG_ATH9K_PCOEM: u32 = 1;
pub const CONFIG_MLX5_CORE_IPOIB: u32 = 1;
pub const CONFIG_SOUND_OSS_CORE: u32 = 1;
pub const CONFIG_LIBIE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS4271_MODULE: u32 = 1;
pub const CONFIG_VBOXGUEST_MODULE: u32 = 1;
pub const CONFIG_QNX6FS_FS_MODULE: u32 = 1;
pub const CONFIG_I2C_AMD8111_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IMX290_MODULE: u32 = 1;
pub const CONFIG_BSD_PROCESS_ACCT_V3: u32 = 1;
pub const CONFIG_MAX77541_ADC_MODULE: u32 = 1;
pub const CONFIG_FUSE_PASSTHROUGH: u32 = 1;
pub const CONFIG_CAN_C_CAN_PCI_MODULE: u32 = 1;
pub const CONFIG_RTL8192C_COMMON_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_VSC73XX_8021Q_MODULE: u32 = 1;
pub const CONFIG_USB_F_OBEX_MODULE: u32 = 1;
pub const CONFIG_ARCNET_MODULE: u32 = 1;
pub const CONFIG_HAVE_SETUP_PER_CPU_AREA: u32 = 1;
pub const CONFIG_USBIP_VHCI_HC_PORTS: u32 = 8;
pub const CONFIG_PCIE_PTM: u32 = 1;
pub const CONFIG_NFC_NCI_UART_MODULE: u32 = 1;
pub const CONFIG_SLIMBUS_MODULE: u32 = 1;
pub const CONFIG_PATA_NETCELL_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_SET_DIRECT_MAP: u32 = 1;
pub const CONFIG_USB_SERIAL_SIMPLE_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_REALM_MODULE: u32 = 1;
pub const CONFIG_USB_CHIPIDEA_PCI_MODULE: u32 = 1;
pub const CONFIG_CIFS_UPCALL: u32 = 1;
pub const CONFIG_AMIGA_PARTITION: u32 = 1;
pub const CONFIG_CRYPTO_DEV_QAT_C3XXXVF_MODULE: u32 = 1;
pub const CONFIG_USB_SL811_HCD_MODULE: u32 = 1;
pub const CONFIG_USB_TEST_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_RATEEST_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_LOAD_CIS: u32 = 1;
pub const CONFIG_SND_MIXART_MODULE: u32 = 1;
pub const CONFIG_SATA_MOBILE_LPM_POLICY: u32 = 3;
pub const CONFIG_SND_SOC_INTEL_BXT_DA7219_MAX98357A_MACH_MODULE: u32 = 1;
pub const CONFIG_DMARD10_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MANAGER: u32 = 1;
pub const CONFIG_CRYPTO_SERPENT_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_VCNL4000_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_SOF_MACH_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_GENERIC_MODULE: u32 = 1;
pub const CONFIG_MFD_CS47L15: u32 = 1;
pub const CONFIG_WL18XX_MODULE: u32 = 1;
pub const CONFIG_WILC1000_SPI_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_PCNET_MODULE: u32 = 1;
pub const CONFIG_PMIC_DA903X: u32 = 1;
pub const CONFIG_NVMEM_RAVE_SP_EEPROM_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK_SI5351_MODULE: u32 = 1;
pub const CONFIG_DVB_FIREDTV_MODULE: u32 = 1;
pub const CONFIG_SURFACE_KBD_MODULE: u32 = 1;
pub const CONFIG_DECOMPRESS_BZIP2: u32 = 1;
pub const CONFIG_ACPI_HOTPLUG_IOAPIC: u32 = 1;
pub const CONFIG_RDMA_RXE_MODULE: u32 = 1;
pub const CONFIG_MODULE_SIG: u32 = 1;
pub const CONFIG_MODULE_SIG_FORMAT: u32 = 1;
pub const CONFIG_BLK_DEV_RNBD_SERVER_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_VMAP_STACK: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL_NOP_MCOUNT: u32 = 1;
pub const CONFIG_EFI_STUB: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CYTTSP_SPI_MODULE: u32 = 1;
pub const CONFIG_GPIO_WM8994_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_H4: u32 = 1;
pub const CONFIG_SENSORS_OCC_MODULE: u32 = 1;
pub const CONFIG_DMABUF_HEAPS_SYSTEM: u32 = 1;
pub const CONFIG_CAN_SJA1000_MODULE: u32 = 1;
pub const CONFIG_SSB_DRIVER_GPIO: u32 = 1;
pub const CONFIG_RTC_LIB: u32 = 1;
pub const CONFIG_HAVE_MOVE_PUD: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_MTL_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM77_MODULE: u32 = 1;
pub const CONFIG_RADIO_WL1273_MODULE: u32 = 1;
pub const CONFIG_QED_SRIOV: u32 = 1;
pub const CONFIG_THINKPAD_LMI_MODULE: u32 = 1;
pub const CONFIG_INPUT_UINPUT: u32 = 1;
pub const CONFIG_INPUT_GPIO_ROTARY_ENCODER_MODULE: u32 = 1;
pub const CONFIG_MFD_PALMAS: u32 = 1;
pub const CONFIG_SCSI_DEBUG_MODULE: u32 = 1;
pub const CONFIG_LCD_LMS283GF05_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_AAT2870_MODULE: u32 = 1;
pub const CONFIG_CAN_HI311X_MODULE: u32 = 1;
pub const CONFIG_USB_F_PHONET_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TMP108_MODULE: u32 = 1;
pub const CONFIG_PERF_EVENTS_AMD_BRS: u32 = 1;
pub const CONFIG_USB_CDNSP_GADGET: u32 = 1;
pub const CONFIG_COMEDI_KCOMEDILIB_MODULE: u32 = 1;
pub const CONFIG_PER_VMA_LOCK: u32 = 1;
pub const CONFIG_ND_PFN_MODULE: u32 = 1;
pub const CONFIG_NFT_REDIR_MODULE: u32 = 1;
pub const CONFIG_I2C_CBUS_GPIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM186X_I2C_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SONIXB_MODULE: u32 = 1;
pub const CONFIG_DQL: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_UAC1_LEGACY: u32 = 1;
pub const CONFIG_IR_TOY_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_I2C_MODULE: u32 = 1;
pub const CONFIG_SECCOMP_FILTER: u32 = 1;
pub const CONFIG_SPI_PXA2XX_MODULE: u32 = 1;
pub const CONFIG_GPIO_PCI_IDIO_16_MODULE: u32 = 1;
pub const CONFIG_MEGARAID_NEWGEN: u32 = 1;
pub const CONFIG_TASKS_RCU: u32 = 1;
pub const CONFIG_BNXT_SRIOV: u32 = 1;
pub const CONFIG_GCC_VERSION: u32 = 140200;
pub const CONFIG_6LOWPAN_NHC_IPV6_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_JUMP_LABEL_RELATIVE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_COMMON_MODULE: u32 = 1;
pub const CONFIG_WEXT_PRIV: u32 = 1;
pub const CONFIG_NET_VENDOR_RENESAS: u32 = 1;
pub const CONFIG_FB_ARK_MODULE: u32 = 1;
pub const CONFIG_GPIO_SYSFS: u32 = 1;
pub const CONFIG_COMEDI_NI_PCIDIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS4234_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_CML_LP_DA7219_MAX98357A_MACH_MODULE: u32 = 1;
pub const CONFIG_SERIAL_MAX310X: u32 = 1;
pub const CONFIG_SYSCTL: u32 = 1;
pub const CONFIG_USB_CDNSP_HOST: u32 = 1;
pub const CONFIG_THERMAL_GOV_USER_SPACE: u32 = 1;
pub const CONFIG_PANIC_ON_OOPS_VALUE: u32 = 0;
pub const CONFIG_NVMEM: u32 = 1;
pub const CONFIG_CRYPTO_LIB_SHA1: u32 = 1;
pub const CONFIG_ZONE_DEVICE: u32 = 1;
pub const CONFIG_VIDEO_EM28XX_ALSA_MODULE: u32 = 1;
pub const CONFIG_VLAN_8021Q_GVRP: u32 = 1;
pub const CONFIG_INTEL_PMT_CRASHLOG_MODULE: u32 = 1;
pub const CONFIG_GPIO_WM8350_MODULE: u32 = 1;
pub const CONFIG_IP_NF_IPTABLES_LEGACY_MODULE: u32 = 1;
pub const CONFIG_USB_ISP1760_MODULE: u32 = 1;
pub const CONFIG_BCACHEFS_ERASURE_CODING: u32 = 1;
pub const CONFIG_HID_DRAGONRISE_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_STRING_MODULE: u32 = 1;
pub const CONFIG_SND_AU8830_MODULE: u32 = 1;
pub const CONFIG_SSB_POSSIBLE: u32 = 1;
pub const CONFIG_VIDEO_IMX274_MODULE: u32 = 1;
pub const CONFIG_SENSORS_PT5161L_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_XILINX: u32 = 1;
pub const CONFIG_AIC79XX_REG_PRETTY_PRINT: u32 = 1;
pub const CONFIG_TIGON3_MODULE: u32 = 1;
pub const CONFIG_MAXLINEAR_GPHY_MODULE: u32 = 1;
pub const CONFIG_XEN_SCRUB_PAGES_DEFAULT: u32 = 1;
pub const CONFIG_INTEL_SOC_DTS_THERMAL_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX31785_MODULE: u32 = 1;
pub const CONFIG_CEC_CROS_EC_MODULE: u32 = 1;
pub const CONFIG_NLS_UTF8_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_REALTEK: u32 = 1;
pub const CONFIG_USB_LGM_PHY_MODULE: u32 = 1;
pub const CONFIG_B43_PCI_AUTOSELECT: u32 = 1;
pub const CONFIG_USB_GSPCA_STK1135_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_VIBRATOR_MODULE: u32 = 1;
pub const CONFIG_GPIO_GENERIC: u32 = 1;
pub const CONFIG_SURFACE_GPE_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_LP855X_MODULE: u32 = 1;
pub const CONFIG_SCSI_SIM710_MODULE: u32 = 1;
pub const CONFIG_PM_SLEEP_SMP: u32 = 1;
pub const CONFIG_ARCH_MAY_HAVE_PC_FDC: u32 = 1;
pub const CONFIG_FIXED_PHY: u32 = 1;
pub const CONFIG_CRYPTO_NULL: u32 = 1;
pub const CONFIG_POSIX_MQUEUE_SYSCTL: u32 = 1;
pub const CONFIG_HOTPLUG_PCI_ACPI: u32 = 1;
pub const CONFIG_AD7091R5_MODULE: u32 = 1;
pub const CONFIG_INTERRUPT_CNT_MODULE: u32 = 1;
pub const CONFIG_MULTIPLEXER_MODULE: u32 = 1;
pub const CONFIG_HIBERNATION: u32 = 1;
pub const CONFIG_SIEMENS_SIMATIC_IPC_WDT_MODULE: u32 = 1;
pub const CONFIG_IP_VS_DH_MODULE: u32 = 1;
pub const CONFIG_HAPPYMEAL_MODULE: u32 = 1;
pub const CONFIG_OUTPUT_FORMAT: &[u8; 13] = b"elf64-x86-64\0";
pub const CONFIG_VIDEO_TW686X_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_ADP5520_MODULE: u32 = 1;
pub const CONFIG_AD_SIGMA_DELTA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM512x_MODULE: u32 = 1;
pub const CONFIG_RTW89_8851BE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_CB_PCIDDA_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_OSF_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_CS8409_MODULE: u32 = 1;
pub const CONFIG_IPMI_SI_MODULE: u32 = 1;
pub const CONFIG_IWL4965_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_MEN_MCB_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS3232_HWMON: u32 = 1;
pub const CONFIG_HID_FT260_MODULE: u32 = 1;
pub const CONFIG_TWL4030_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_NET_9P_XEN_MODULE: u32 = 1;
pub const CONFIG_PHY_INTEL_LGM_EMMC_MODULE: u32 = 1;
pub const CONFIG_SERIAL_CORE_CONSOLE: u32 = 1;
pub const CONFIG_NET_VENDOR_CISCO: u32 = 1;
pub const CONFIG_HP206C_MODULE: u32 = 1;
pub const CONFIG_AK8974_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV8858_MODULE: u32 = 1;
pub const CONFIG_XXHASH: u32 = 1;
pub const CONFIG_GREYBUS_HID_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_BT_SCO_MODULE: u32 = 1;
pub const CONFIG_NET_L3_MASTER_DEV: u32 = 1;
pub const CONFIG_FB_TFT_HX8357D_MODULE: u32 = 1;
pub const CONFIG_TASK_XACCT: u32 = 1;
pub const CONFIG_NET_SOCK_MSG: u32 = 1;
pub const CONFIG_SPI_MXIC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_HDAPS_MODULE: u32 = 1;
pub const CONFIG_MODIFY_LDT_SYSCALL: u32 = 1;
pub const CONFIG_SENSORS_LTC2992_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADM9240_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_DES_MODULE: u32 = 1;
pub const CONFIG_MLX90635_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L42_MODULE: u32 = 1;
pub const CONFIG_PARPORT_1284: u32 = 1;
pub const CONFIG_INPUT_MAX77693_HAPTIC_MODULE: u32 = 1;
pub const CONFIG_EVM: u32 = 1;
pub const CONFIG_SND_MTS64_MODULE: u32 = 1;
pub const CONFIG_MOXA_SMARTIO_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_ECDH: u32 = 1;
pub const CONFIG_MMCONF_FAM10H: u32 = 1;
pub const CONFIG_ATA_PIIX: u32 = 1;
pub const CONFIG_X86_ANDROID_TABLETS_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS2404_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MAX31335_MODULE: u32 = 1;
pub const CONFIG_LEDS_ADP5520_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_NODE_DEV_GROUP: u32 = 1;
pub const CONFIG_ARCH_CONFIGURES_CPU_MITIGATIONS: u32 = 1;
pub const CONFIG_DRM_NOUVEAU_BACKLIGHT: u32 = 1;
pub const CONFIG_DVB_DYNAMIC_MINORS: u32 = 1;
pub const CONFIG_HID_PICOLCD_MODULE: u32 = 1;
pub const CONFIG_CHT_WC_PMIC_OPREGION: u32 = 1;
pub const CONFIG_IA32_FEAT_CTL: u32 = 1;
pub const CONFIG_SND_SOC_CS42L51_I2C_MODULE: u32 = 1;
pub const CONFIG_IRQ_DOMAIN_HIERARCHY: u32 = 1;
pub const CONFIG_IIO_ST_LSM9DS0_MODULE: u32 = 1;
pub const CONFIG_SPI_CADENCE_MODULE: u32 = 1;
pub const CONFIG_SND_JACK: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_LINK: u32 = 1;
pub const CONFIG_IWLDVM_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_BPF_MODULE: u32 = 1;
pub const CONFIG_HID_ASUS_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_16550A_VARIANTS: u32 = 1;
pub const CONFIG_HID_LETSKETCH_MODULE: u32 = 1;
pub const CONFIG_CAN_CTUCANFD_MODULE: u32 = 1;
pub const CONFIG_FXLS8962AF_SPI_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_DIB0700_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TMP401_MODULE: u32 = 1;
pub const CONFIG_CONTEXT_TRACKING_USER: u32 = 1;
pub const CONFIG_COMEDI_CB_DAS16_CS_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_POLY1305_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS_AMP_LIB_MODULE: u32 = 1;
pub const CONFIG_SLUB_CPU_PARTIAL: u32 = 1;
pub const CONFIG_FB_CARMINE_DRAM_EVAL: u32 = 1;
pub const CONFIG_KDB_DEFAULT_ENABLE: u32 = 1;
pub const CONFIG_I2C_SCMI_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_CORE_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_IBT: u32 = 1;
pub const CONFIG_NET_DSA_XRS700X_I2C_MODULE: u32 = 1;
pub const CONFIG_INPUT_DA7280_HAPTICS_MODULE: u32 = 1;
pub const CONFIG_ACPI_NFIT_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_LYNXPOINT_MODULE: u32 = 1;
pub const CONFIG_GENERIC_IRQ_PROBE: u32 = 1;
pub const CONFIG_CRYPTO_ECRDSA_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_VENO_MODULE: u32 = 1;
pub const CONFIG_9P_FS_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_MODULE: u32 = 1;
pub const CONFIG_SQUASHFS_LZO: u32 = 1;
pub const CONFIG_MOUSE_PS2_SMBUS: u32 = 1;
pub const CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY: u32 = 1;
pub const CONFIG_NET_SCH_TAPRIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM1789_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83795_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC3815_MODULE: u32 = 1;
pub const CONFIG_FRAME_WARN: u32 = 1024;
pub const CONFIG_SERIAL_MAX3100_MODULE: u32 = 1;
pub const CONFIG_DYNAMIC_FTRACE: u32 = 1;
pub const CONFIG_SND_FIREWIRE_DIGI00X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SIGMADSP_REGMAP_MODULE: u32 = 1;
pub const CONFIG_NLS_MAC_CENTEURO_MODULE: u32 = 1;
pub const CONFIG_VIDEO_DW9768_MODULE: u32 = 1;
pub const CONFIG_LD_VERSION: u32 = 24301;
pub const CONFIG_NET_CLS_U32_MODULE: u32 = 1;
pub const CONFIG_XEN_BACKEND: u32 = 1;
pub const CONFIG_VT_CONSOLE: u32 = 1;
pub const CONFIG_INET_AH_MODULE: u32 = 1;
pub const CONFIG_I2C: u32 = 1;
pub const CONFIG_CHARGER_BQ24257_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_PCI_SHPC: u32 = 1;
pub const CONFIG_NET_SCH_ETS_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_UBSAN_BOUNDS_STRICT: u32 = 1;
pub const CONFIG_BATTERY_RT5033_MODULE: u32 = 1;
pub const CONFIG_INPUT_DA9052_ONKEY_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CYTTSP4_CORE_MODULE: u32 = 1;
pub const CONFIG_X86_CPUID_MODULE: u32 = 1;
pub const CONFIG_INTEL_TH_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MODULE: u32 = 1;
pub const CONFIG_VIDEO_V4L2_TPG_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_NAU8540_MODULE: u32 = 1;
pub const CONFIG_ADXL313_I2C_MODULE: u32 = 1;
pub const CONFIG_USB_MUSB_HDRC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_EMC2103_MODULE: u32 = 1;
pub const CONFIG_SCSI_MVUMI_MODULE: u32 = 1;
pub const CONFIG_COMEDI_TEST_MODULE: u32 = 1;
pub const CONFIG_PCIE_PME: u32 = 1;
pub const CONFIG_BCACHEFS_FS_MODULE: u32 = 1;
pub const CONFIG_LEDS_LM3642_MODULE: u32 = 1;
pub const CONFIG_MD_RAID10_MODULE: u32 = 1;
pub const CONFIG_LEDS_CLASS: u32 = 1;
pub const CONFIG_SND_SOC_PCM179X_I2C_MODULE: u32 = 1;
pub const CONFIG_VIDEO_FB_IVTV_FORCE_PAT: u32 = 1;
pub const CONFIG_PINCTRL_ICELAKE_MODULE: u32 = 1;
pub const CONFIG_MEDIA_RADIO_SUPPORT: u32 = 1;
pub const CONFIG_LSI_ET1011C_PHY_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_ADI: u32 = 1;
pub const CONFIG_LTC2688_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_PANIC: u32 = 1;
pub const CONFIG_BT_HCIUART_AG6XX: u32 = 1;
pub const CONFIG_PM_SLEEP: u32 = 1;
pub const CONFIG_NET_SCH_CODEL_MODULE: u32 = 1;
pub const CONFIG_FB_ATY_MODULE: u32 = 1;
pub const CONFIG_MODULE_SIG_ALL: u32 = 1;
pub const CONFIG_INTEL_TELEMETRY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADM1029_MODULE: u32 = 1;
pub const CONFIG_FB_TRIDENT_MODULE: u32 = 1;
pub const CONFIG_VIDEO_DW9807_VCM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT298_MODULE: u32 = 1;
pub const CONFIG_DRM_BRIDGE: u32 = 1;
pub const CONFIG_REED_SOLOMON_DEC8: u32 = 1;
pub const CONFIG_MKISS_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7134_RC: u32 = 1;
pub const CONFIG_USB_GSPCA_SPCA506_MODULE: u32 = 1;
pub const CONFIG_COMMON_CLK_PALMAS_MODULE: u32 = 1;
pub const CONFIG_ACPI_NUMA: u32 = 1;
pub const CONFIG_AD74413R_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADT7410_MODULE: u32 = 1;
pub const CONFIG_HID_MAGICMOUSE_MODULE: u32 = 1;
pub const CONFIG_EFI_DXE_MEM_ATTRIBUTES: u32 = 1;
pub const CONFIG_NET_SCH_FQ_MODULE: u32 = 1;
pub const CONFIG_VIDEO_BT848_MODULE: u32 = 1;
pub const CONFIG_RT2800USB_RT53XX: u32 = 1;
pub const CONFIG_DETECT_HUNG_TASK: u32 = 1;
pub const CONFIG_VIDEO_M52790_MODULE: u32 = 1;
pub const CONFIG_SYSTEM_DATA_VERIFICATION: u32 = 1;
pub const CONFIG_VIRTIO_IOMMU: u32 = 1;
pub const CONFIG_FUJITSU_LAPTOP_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_MAX_REQUEST_BUSYWAIT: u32 = 8000;
pub const CONFIG_TOUCHSCREEN_WM831X_MODULE: u32 = 1;
pub const CONFIG_HIBERNATION_SNAPSHOT_DEV: u32 = 1;
pub const CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS: u32 = 1;
pub const CONFIG_HID_ZEROPLUS_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_DSP_LOADER: u32 = 1;
pub const CONFIG_MFD_MT6397_MODULE: u32 = 1;
pub const CONFIG_NET_PTP_CLASSIFY: u32 = 1;
pub const CONFIG_CC_HAS_RETURN_THUNK: u32 = 1;
pub const CONFIG_60XX_WDT_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_LANTIQ_GSWIP_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT711_SDCA_SDW_MODULE: u32 = 1;
pub const CONFIG_VMAP_STACK: u32 = 1;
pub const CONFIG_ICE_MODULE: u32 = 1;
pub const CONFIG_PM: u32 = 1;
pub const CONFIG_AD5064_MODULE: u32 = 1;
pub const CONFIG_DST_CACHE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_PADLOCK: u32 = 1;
pub const CONFIG_GREYBUS_RAW_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_CCP_CRYPTO_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SHA512: u32 = 1;
pub const CONFIG_MEMORY_FAILURE: u32 = 1;
pub const CONFIG_SND_SOC_RT1019_MODULE: u32 = 1;
pub const CONFIG_IIO_ST_PRESS_I2C_MODULE: u32 = 1;
pub const CONFIG_SENSORS_F71882FG_MODULE: u32 = 1;
pub const CONFIG_ADXL367_I2C_MODULE: u32 = 1;
pub const CONFIG_IRQ_POLL: u32 = 1;
pub const CONFIG_SND_SOC_AMD_PS_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MAX14577_MODULE: u32 = 1;
pub const CONFIG_PCMCIA_NMCLAN_MODULE: u32 = 1;
pub const CONFIG_ATH10K_SPECTRAL: u32 = 1;
pub const CONFIG_NET_VENDOR_GOOGLE: u32 = 1;
pub const CONFIG_ARCH_SPARSEMEM_ENABLE: u32 = 1;
pub const CONFIG_SCSI_AIC7XXX_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_LNL_MODULE: u32 = 1;
pub const CONFIG_ARCH_ENABLE_THP_MIGRATION: u32 = 1;
pub const CONFIG_ACPI_THERMAL_LIB: u32 = 1;
pub const CONFIG_USB_EHCI_ROOT_HUB_TT: u32 = 1;
pub const CONFIG_USB_NET_AX88179_178A_MODULE: u32 = 1;
pub const CONFIG_NLS_CODEPAGE_775_MODULE: u32 = 1;
pub const CONFIG_MARVELL_PHY_MODULE: u32 = 1;
pub const CONFIG_HID_PRIMAX_MODULE: u32 = 1;
pub const CONFIG_NLS: u32 = 1;
pub const CONFIG_USB_S2255_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_TPS6507X_MODULE: u32 = 1;
pub const CONFIG_IP_SET_HASH_NETPORTNET_MODULE: u32 = 1;
pub const CONFIG_GENERIC_IRQ_RESERVATION_MODE: u32 = 1;
pub const CONFIG_OID_REGISTRY: u32 = 1;
pub const CONFIG_IIO_KX022A_MODULE: u32 = 1;
pub const CONFIG_SSB_PCMCIAHOST_POSSIBLE: u32 = 1;
pub const CONFIG_MEDIATEK_GE_PHY_MODULE: u32 = 1;
pub const CONFIG_INTEL_SKL_INT3472_MODULE: u32 = 1;
pub const CONFIG_USER_STACKTRACE_SUPPORT: u32 = 1;
pub const CONFIG_SND_CTXFI_MODULE: u32 = 1;
pub const CONFIG_BT_NXPUART_MODULE: u32 = 1;
pub const CONFIG_THUNDER_NIC_PF_MODULE: u32 = 1;
pub const CONFIG_SCHED_TRACER: u32 = 1;
pub const CONFIG_MLXREG_HOTPLUG_MODULE: u32 = 1;
pub const CONFIG_B43_PHY_G: u32 = 1;
pub const CONFIG_INPUT_CMA3000_I2C_MODULE: u32 = 1;
pub const CONFIG_BNXT_FLOWER_OFFLOAD: u32 = 1;
pub const CONFIG_TOUCHSCREEN_WACOM_I2C_MODULE: u32 = 1;
pub const CONFIG_AD7793_MODULE: u32 = 1;
pub const CONFIG_ACPI_ALS_MODULE: u32 = 1;
pub const CONFIG_LPC_ICH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OG01A1B_MODULE: u32 = 1;
pub const CONFIG_GENERIC_IRQ_MIGRATION: u32 = 1;
pub const CONFIG_SQUASHFS_ZLIB: u32 = 1;
pub const CONFIG_MLX4_CORE_MODULE: u32 = 1;
pub const CONFIG_MLX5_DPLL_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_WIZNET: u32 = 1;
pub const CONFIG_EDAC_AMD64_MODULE: u32 = 1;
pub const CONFIG_USB_AUDIO_MODULE: u32 = 1;
pub const CONFIG_CAN_CAN327_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_APOLLO_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_DECTLK_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP_PDM_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_ROUTING_MODULE: u32 = 1;
pub const CONFIG_DVB_HORUS3A_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_EARLY_DEBUG: u32 = 1;
pub const CONFIG_SENSORS_LM87_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_PWM_MODULE: u32 = 1;
pub const CONFIG_APDS9300_MODULE: u32 = 1;
pub const CONFIG_RPCSEC_GSS_KRB5_ENCTYPES_CAMELLIA: u32 = 1;
pub const CONFIG_USB_VIDEO_CLASS_INPUT_EVDEV: u32 = 1;
pub const CONFIG_REGULATOR_LM363X_MODULE: u32 = 1;
pub const CONFIG_MITIGATION_PAGE_TABLE_ISOLATION: u32 = 1;
pub const CONFIG_DVB_STV0297_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_BRCM_PREPEND_MODULE: u32 = 1;
pub const CONFIG_SDR_MAX2175_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX6621_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC4215_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_FAMILY_BRIDGE: u32 = 1;
pub const CONFIG_CC_NO_ARRAY_BOUNDS: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_DA7219_MAX98357A_GENERIC_MODULE: u32 = 1;
pub const CONFIG_MLX90632_MODULE: u32 = 1;
pub const CONFIG_FIB_RULES: u32 = 1;
pub const CONFIG_NFT_XFRM_MODULE: u32 = 1;
pub const CONFIG_CONTEXT_TRACKING_IDLE: u32 = 1;
pub const CONFIG_BLK_DEBUG_FS: u32 = 1;
pub const CONFIG_JBD2: u32 = 1;
pub const CONFIG_VIDEO_IMX208_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_DMIC_MODULE: u32 = 1;
pub const CONFIG_ATM_IA_MODULE: u32 = 1;
pub const CONFIG_FONT_SUPPORT: u32 = 1;
pub const CONFIG_NXP_CBTX_PHY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC4222_MODULE: u32 = 1;
pub const CONFIG_USB_CDNS3_HOST: u32 = 1;
pub const CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK: u32 = 1;
pub const CONFIG_SND_SOC_WM8776_MODULE: u32 = 1;
pub const CONFIG_WIRELESS: u32 = 1;
pub const CONFIG_THERMAL_GOV_FAIR_SHARE: u32 = 1;
pub const CONFIG_BLK_DEV_BSGLIB: u32 = 1;
pub const CONFIG_USB_NET_SR9800_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_STA32X_MODULE: u32 = 1;
pub const CONFIG_MFD_WM8350_I2C: u32 = 1;
pub const CONFIG_9P_FS_SECURITY: u32 = 1;
pub const CONFIG_VIDEO_ADV7170_MODULE: u32 = 1;
pub const CONFIG_PC87413_WDT_MODULE: u32 = 1;
pub const CONFIG_NET_SCH_FQ_PIE_MODULE: u32 = 1;
pub const CONFIG_MLXSW_SPECTRUM_MODULE: u32 = 1;
pub const CONFIG_SATA_SIL24_MODULE: u32 = 1;
pub const CONFIG_MAX1363_MODULE: u32 = 1;
pub const CONFIG_SCSI_DH_ALUA_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IMX283_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MCP3021_MODULE: u32 = 1;
pub const CONFIG_SND_CS46XX_MODULE: u32 = 1;
pub const CONFIG_MTD_ICHXROM_MODULE: u32 = 1;
pub const CONFIG_NETFILTER: u32 = 1;
pub const CONFIG_VIRTIO_PCI_ADMIN_LEGACY: u32 = 1;
pub const CONFIG_LIBERTAS_THINFIRM_USB_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MT2063_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_HL_MODULE: u32 = 1;
pub const CONFIG_SIOX_BUS_GPIO_MODULE: u32 = 1;
pub const CONFIG_DVB_STV6111_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_STMFTS_MODULE: u32 = 1;
pub const CONFIG_NVME_RDMA_MODULE: u32 = 1;
pub const CONFIG_REGMAP_SPI: u32 = 1;
pub const CONFIG_NET_ACT_GATE_MODULE: u32 = 1;
pub const CONFIG_PC104: u32 = 1;
pub const CONFIG_ADIS16080_MODULE: u32 = 1;
pub const CONFIG_CXL_PCI_MODULE: u32 = 1;
pub const CONFIG_SND_VIRMIDI_MODULE: u32 = 1;
pub const CONFIG_MMA9553_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SN9C2028_MODULE: u32 = 1;
pub const CONFIG_NET_IPGRE_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_IRDMA_MODULE: u32 = 1;
pub const CONFIG_SND_USB_AUDIO_USE_MEDIA_CONTROLLER: u32 = 1;
pub const CONFIG_BSD_DISKLABEL: u32 = 1;
pub const CONFIG_USB_STORAGE_SDDR09_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV9650_MODULE: u32 = 1;
pub const CONFIG_INTEL_IOMMU_SCALABLE_MODE_DEFAULT_ON: u32 = 1;
pub const CONFIG_DRM_PANEL_RASPBERRYPI_TOUCHSCREEN_MODULE: u32 = 1;
pub const CONFIG_AD5446_MODULE: u32 = 1;
pub const CONFIG_BLK_WBT_MQ: u32 = 1;
pub const CONFIG_CHROMEOS_ACPI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM186X_SPI_MODULE: u32 = 1;
pub const CONFIG_DVB_CXD2841ER_MODULE: u32 = 1;
pub const CONFIG_INTEL_VSEC_MODULE: u32 = 1;
pub const CONFIG_FUNCTION_GRAPH_RETVAL: u32 = 1;
pub const CONFIG_USB_SPEEDTOUCH_MODULE: u32 = 1;
pub const CONFIG_DRM_DISPLAY_DP_HELPER: u32 = 1;
pub const CONFIG_INTEL_MEI_HDCP_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ES8311_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_LPASS_RX_MACRO_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TVP5150_MODULE: u32 = 1;
pub const CONFIG_INTEL_IPS_MODULE: u32 = 1;
pub const CONFIG_MFD_WM8350: u32 = 1;
pub const CONFIG_ENA_ETHERNET_MODULE: u32 = 1;
pub const CONFIG_HFSPLUS_FS_MODULE: u32 = 1;
pub const CONFIG_MFD_MAX77541_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SKCIPHER: u32 = 1;
pub const CONFIG_USB_CONFIGFS_F_TCM: u32 = 1;
pub const CONFIG_MLX5_EN_TLS: u32 = 1;
pub const CONFIG_NET_DSA_VITESSE_VSC73XX_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM75_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_MOS7840_MODULE: u32 = 1;
pub const CONFIG_ATH11K_SPECTRAL: u32 = 1;
pub const CONFIG_COMEDI_NI_DAQ_DIO24_CS_MODULE: u32 = 1;
pub const CONFIG_INTEL_SPEED_SELECT_TPMI_MODULE: u32 = 1;
pub const CONFIG_IR_SONY_DECODER_MODULE: u32 = 1;
pub const CONFIG_SERIO_ARC_PS2_MODULE: u32 = 1;
pub const CONFIG_HID_ITE_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IMX355_MODULE: u32 = 1;
pub const CONFIG_X86_AMD_PSTATE: u32 = 1;
pub const CONFIG_SAMPLE_FTRACE_DIRECT_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC23_I2C_MODULE: u32 = 1;
pub const CONFIG_PCP_BATCH_SCALE_MAX: u32 = 5;
pub const CONFIG_VIDEO_ST_MIPID02_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_NFACCT_MODULE: u32 = 1;
pub const CONFIG_PATA_RDC_MODULE: u32 = 1;
pub const CONFIG_SLAB_FREELIST_HARDENED: u32 = 1;
pub const CONFIG_PM_GENERIC_DOMAINS: u32 = 1;
pub const CONFIG_CRYPTO_LRW_MODULE: u32 = 1;
pub const CONFIG_DEFAULT_HUNG_TASK_TIMEOUT: u32 = 120;
pub const CONFIG_SERIO_LIBPS2: u32 = 1;
pub const CONFIG_MMA8452_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SPCA505_MODULE: u32 = 1;
pub const CONFIG_TAP_MODULE: u32 = 1;
pub const CONFIG_CAN_CC770_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_HAVE_PREEMPT_DYNAMIC: u32 = 1;
pub const CONFIG_CRYPTO_CURVE25519_MODULE: u32 = 1;
pub const CONFIG_USB_DEFAULT_PERSIST: u32 = 1;
pub const CONFIG_SND_SOC_MAX98520_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ADT7411_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_CUBIC: u32 = 1;
pub const CONFIG_SPLIT_PTLOCK_CPUS: u32 = 4;
pub const CONFIG_USB_G_DBGP_MODULE: u32 = 1;
pub const CONFIG_HID_THINGM_MODULE: u32 = 1;
pub const CONFIG_ATM_BR2684_MODULE: u32 = 1;
pub const CONFIG_ZRAM_MEMORY_TRACKING: u32 = 1;
pub const CONFIG_COMEDI_DT9812_MODULE: u32 = 1;
pub const CONFIG_SCTP_COOKIE_HMAC_MD5: u32 = 1;
pub const CONFIG_XDP_SOCKETS: u32 = 1;
pub const CONFIG_CRYPTO_ECHAINIV_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_ISL6271A_MODULE: u32 = 1;
pub const CONFIG_TINYDRM_HX8357D_MODULE: u32 = 1;
pub const CONFIG_MEGARAID_MAILBOX_MODULE: u32 = 1;
pub const CONFIG_SEV_GUEST_MODULE: u32 = 1;
pub const CONFIG_RTW89_8922A_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_UBSAN: u32 = 1;
pub const CONFIG_AD7291_MODULE: u32 = 1;
pub const CONFIG_YT2_1380_MODULE: u32 = 1;
pub const CONFIG_MFD_WCD934X_MODULE: u32 = 1;
pub const CONFIG_INPUT_DA9055_ONKEY_MODULE: u32 = 1;
pub const CONFIG_HID_PICOLCD_LEDS: u32 = 1;
pub const CONFIG_DVB_DIB7000P_MODULE: u32 = 1;
pub const CONFIG_CW1200_MODULE: u32 = 1;
pub const CONFIG_LCD_ILI922X_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CCS_PLL_MODULE: u32 = 1;
pub const CONFIG_IP_SET_BITMAP_IP_MODULE: u32 = 1;
pub const CONFIG_VMAP_PFN: u32 = 1;
pub const CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK: u32 = 1;
pub const CONFIG_MTD_CFI_AMDSTD_MODULE: u32 = 1;
pub const CONFIG_COMEDI_8254_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8510_MODULE: u32 = 1;
pub const CONFIG_VIRT_CPU_ACCOUNTING_GEN: u32 = 1;
pub const CONFIG_LP8788_ADC_MODULE: u32 = 1;
pub const CONFIG_BPF_JIT: u32 = 1;
pub const CONFIG_COMEDI_ADV_PCI1710_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_TOUCHKIT: u32 = 1;
pub const CONFIG_HPET_TIMER: u32 = 1;
pub const CONFIG_ARCH_HAS_MEM_ENCRYPT: u32 = 1;
pub const CONFIG_SUNRPC_DEBUG: u32 = 1;
pub const CONFIG_VFIO_PCI_MMAP: u32 = 1;
pub const CONFIG_HID_MALTRON_MODULE: u32 = 1;
pub const CONFIG_MFD_TWL4030_AUDIO: u32 = 1;
pub const CONFIG_CRYPTO_CAST5_MODULE: u32 = 1;
pub const CONFIG_PARPORT_NOT_PC: u32 = 1;
pub const CONFIG_NET_TEAM_MODE_ACTIVEBACKUP_MODULE: u32 = 1;
pub const CONFIG_MT7921E_MODULE: u32 = 1;
pub const CONFIG_DELL_WMI_AIO_MODULE: u32 = 1;
pub const CONFIG_DVB_AS102_MODULE: u32 = 1;
pub const CONFIG_HID_PANTHERLORD_MODULE: u32 = 1;
pub const CONFIG_HAVE_CLK_PREPARE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_MASS_STORAGE: u32 = 1;
pub const CONFIG_WM8350_POWER_MODULE: u32 = 1;
pub const CONFIG_SENSORS_IRPS5401_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_MLINK_MODULE: u32 = 1;
pub const CONFIG_WM831X_BACKUP_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_CAST5_AVX_X86_64_MODULE: u32 = 1;
pub const CONFIG_IR_ENE_MODULE: u32 = 1;
pub const CONFIG_FB_SM712_MODULE: u32 = 1;
pub const CONFIG_SURFACE_PLATFORM_PROFILE_MODULE: u32 = 1;
pub const CONFIG_DVB_AV7110_OSD: u32 = 1;
pub const CONFIG_LEDS_APU_MODULE: u32 = 1;
pub const CONFIG_SERIAL_NONSTANDARD: u32 = 1;
pub const CONFIG_UNIXWARE_DISKLABEL: u32 = 1;
pub const CONFIG_XEN_UNPOPULATED_ALLOC: u32 = 1;
pub const CONFIG_BACKLIGHT_DA9052_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_MOCK_MODULE: u32 = 1;
pub const CONFIG_FONT_ACORN_8x8: u32 = 1;
pub const CONFIG_HAVE_RUST: u32 = 1;
pub const CONFIG_BE2NET_HWMON: u32 = 1;
pub const CONFIG_BLK_DEV_BSG_COMMON: u32 = 1;
pub const CONFIG_CFG80211_CRDA_SUPPORT: u32 = 1;
pub const CONFIG_PCF50633_ADC_MODULE: u32 = 1;
pub const CONFIG_NVRAM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5514_MODULE: u32 = 1;
pub const CONFIG_IP_ADVANCED_ROUTER: u32 = 1;
pub const CONFIG_HMM_MIRROR: u32 = 1;
pub const CONFIG_JOYSTICK_IFORCE_MODULE: u32 = 1;
pub const CONFIG_SND_ICE1712_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX20730_MODULE: u32 = 1;
pub const CONFIG_COMEDI_CB_PCIMDAS_MODULE: u32 = 1;
pub const CONFIG_SND_ALI5451_MODULE: u32 = 1;
pub const CONFIG_DRM_I2C_CH7006_MODULE: u32 = 1;
pub const CONFIG_IP_VS_OVF_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_GENIV: u32 = 1;
pub const CONFIG_REGULATOR_ACT8865_MODULE: u32 = 1;
pub const CONFIG_TRACER_SNAPSHOT: u32 = 1;
pub const CONFIG_VIDEO_EM28XX_RC_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MAX8903_MODULE: u32 = 1;
pub const CONFIG_SPI_LJCA_MODULE: u32 = 1;
pub const CONFIG_MMU_GATHER_MERGE_VMAS: u32 = 1;
pub const CONFIG_CRC4_MODULE: u32 = 1;
pub const CONFIG_USB_C67X00_HCD_MODULE: u32 = 1;
pub const CONFIG_AUDIT_ARCH: u32 = 1;
pub const CONFIG_FTRACE: u32 = 1;
pub const CONFIG_BAYCOM_SER_HDX_MODULE: u32 = 1;
pub const CONFIG_RTL8192EE_MODULE: u32 = 1;
pub const CONFIG_USB_DWC3_ULPI: u32 = 1;
pub const CONFIG_ATH9K_HTC_DEBUGFS: u32 = 1;
pub const CONFIG_TI_ADC161S626_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_HDMI_CODEC_MODULE: u32 = 1;
pub const CONFIG_DNS_RESOLVER: u32 = 1;
pub const CONFIG_MTD_DATAFLASH_OTP: u32 = 1;
pub const CONFIG_SUNRPC_GSS_MODULE: u32 = 1;
pub const CONFIG_VIDEOMODE_HELPERS: u32 = 1;
pub const CONFIG_SQUASHFS_LZ4: u32 = 1;
pub const CONFIG_EDAC_SUPPORT: u32 = 1;
pub const CONFIG_USB_PRINTER_MODULE: u32 = 1;
pub const CONFIG_FW_CFG_SYSFS_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_WM831X_MODULE: u32 = 1;
pub const CONFIG_HPET_MMAP_DEFAULT: u32 = 1;
pub const CONFIG_B44_PCICORE_AUTOSELECT: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_NETMAP_MODULE: u32 = 1;
pub const CONFIG_VDPA_SIM_NET_MODULE: u32 = 1;
pub const CONFIG_ACPI_IPMI_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO_CPS_GEN2_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_LPSS_MODULE: u32 = 1;
pub const CONFIG_SPI_MASTER: u32 = 1;
pub const CONFIG_SND_INTEL_SOUNDWIRE_ACPI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7110_MODULE: u32 = 1;
pub const CONFIG_F2FS_FS_LZ4HC: u32 = 1;
pub const CONFIG_USB_GSPCA_SE401_MODULE: u32 = 1;
pub const CONFIG_LENOVO_YMC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_SIS5595_MODULE: u32 = 1;
pub const CONFIG_PWM_GPIO_MODULE: u32 = 1;
pub const CONFIG_MDIO_MVUSB_MODULE: u32 = 1;
pub const CONFIG_EFI_PARTITION: u32 = 1;
pub const CONFIG_SENSORS_MAX6620_MODULE: u32 = 1;
pub const CONFIG_MTD_SPI_NOR_MODULE: u32 = 1;
pub const CONFIG_SND_AC97_POWER_SAVE: u32 = 1;
pub const CONFIG_PCIE_BUS_DEFAULT: u32 = 1;
pub const CONFIG_HAVE_PREEMPT_DYNAMIC_CALL: u32 = 1;
pub const CONFIG_CAN_F81601_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM1681_MODULE: u32 = 1;
pub const CONFIG_INTEL_BYTCRC_PWRSRC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC2990_MODULE: u32 = 1;
pub const CONFIG_MDIO_GPIO_MODULE: u32 = 1;
pub const CONFIG_MARVELL_10G_PHY_MODULE: u32 = 1;
pub const CONFIG_DA9052_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_ADI_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS530X_I2C_MODULE: u32 = 1;
pub const CONFIG_ST_UVIS25_MODULE: u32 = 1;
pub const CONFIG_MACB_PCI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_SAA7127_MODULE: u32 = 1;
pub const CONFIG_MAX11205_MODULE: u32 = 1;
pub const CONFIG_MT792x_USB_MODULE: u32 = 1;
pub const CONFIG_IP_NF_MATCH_TTL_MODULE: u32 = 1;
pub const CONFIG_MMC_TIFM_SD_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SSM2305_MODULE: u32 = 1;
pub const CONFIG_FHANDLE: u32 = 1;
pub const CONFIG_SND_USB_HIFACE_MODULE: u32 = 1;
pub const CONFIG_XFS_SUPPORT_ASCII_CI: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_CGROUP_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_SSU100_MODULE: u32 = 1;
pub const CONFIG_SENSORS_G762_MODULE: u32 = 1;
pub const CONFIG_INFTL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP3x_MODULE: u32 = 1;
pub const CONFIG_ARCH_MHP_MEMMAP_ON_MEMORY_ENABLE: u32 = 1;
pub const CONFIG_FPGA_DFL_FME_BRIDGE_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_F81232_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SPCA561_MODULE: u32 = 1;
pub const CONFIG_RCU_LAZY_DEFAULT_OFF: u32 = 1;
pub const CONFIG_SND_DARLA24_MODULE: u32 = 1;
pub const CONFIG_SYS_HYPERVISOR: u32 = 1;
pub const CONFIG_SURFACE_AGGREGATOR_MODULE: u32 = 1;
pub const CONFIG_SGL_ALLOC: u32 = 1;
pub const CONFIG_TYPEC_HD3SS3220_MODULE: u32 = 1;
pub const CONFIG_LEDS_BD2802_MODULE: u32 = 1;
pub const CONFIG_GENERIC_PCI_IOMAP: u32 = 1;
pub const CONFIG_AMD_WBRF: u32 = 1;
pub const CONFIG_GPIO_AMDPT_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_USER_API_RNG_MODULE: u32 = 1;
pub const CONFIG_DVB_STV6110_MODULE: u32 = 1;
pub const CONFIG_MLXFW_MODULE: u32 = 1;
pub const CONFIG_NF_CT_PROTO_GRE: u32 = 1;
pub const CONFIG_BT_HCIBFUSB_MODULE: u32 = 1;
pub const CONFIG_SOUND_MODULE: u32 = 1;
pub const CONFIG_C2PORT_MODULE: u32 = 1;
pub const CONFIG_SENSORS_W83793_MODULE: u32 = 1;
pub const CONFIG_FB_ATY128_BACKLIGHT: u32 = 1;
pub const CONFIG_RAPIDIO_DMA_ENGINE: u32 = 1;
pub const CONFIG_COMEDI_GSC_HPDI_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_TRAILER_MODULE: u32 = 1;
pub const CONFIG_CRAMFS_MODULE: u32 = 1;
pub const CONFIG_USB_DWC3_DUAL_ROLE: u32 = 1;
pub const CONFIG_SND_AD1889_MODULE: u32 = 1;
pub const CONFIG_NLS_MAC_TURKISH_MODULE: u32 = 1;
pub const CONFIG_GENERIC_ALLOCATOR: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_RT5682_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SI476X_MODULE: u32 = 1;
pub const CONFIG_DVB_TDA1004X_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_KGDB: u32 = 1;
pub const CONFIG_CAN_C_CAN_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_HID_HYPERV_MOUSE_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_MSI001_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_TWL4030_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_ECC: u32 = 1;
pub const CONFIG_SND_USB_USX2Y_MODULE: u32 = 1;
pub const CONFIG_NET_INGRESS: u32 = 1;
pub const CONFIG_WQ_POWER_EFFICIENT_DEFAULT: u32 = 1;
pub const CONFIG_CRYPTO_AEAD2: u32 = 1;
pub const CONFIG_INFINIBAND_VIRT_DMA: u32 = 1;
pub const CONFIG_VIDEO_HI846_MODULE: u32 = 1;
pub const CONFIG_MANA_INFINIBAND_MODULE: u32 = 1;
pub const CONFIG_GPIO_CRYSTAL_COVE: u32 = 1;
pub const CONFIG_DM_PERSISTENT_DATA_MODULE: u32 = 1;
pub const CONFIG_SAMPLE_TRACE_PRINTK_MODULE: u32 = 1;
pub const CONFIG_TOSHIBA_HAPS_MODULE: u32 = 1;
pub const CONFIG_NET_ACT_MPLS_MODULE: u32 = 1;
pub const CONFIG_VIDEO_TW5864_MODULE: u32 = 1;
pub const CONFIG_GENERIC_BUG_RELATIVE_POINTERS: u32 = 1;
pub const CONFIG_SND_YMFPCI_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_SDIO_MODULE: u32 = 1;
pub const CONFIG_KVM_GENERIC_MEMORY_ATTRIBUTES: u32 = 1;
pub const CONFIG_ARCH_STACKWALK: u32 = 1;
pub const CONFIG_BNXT_MODULE: u32 = 1;
pub const CONFIG_SPI: u32 = 1;
pub const CONFIG_CHARGER_BQ25890_MODULE: u32 = 1;
pub const CONFIG_SND_ATIIXP_MODEM_MODULE: u32 = 1;
pub const CONFIG_P54_PCI_MODULE: u32 = 1;
pub const CONFIG_NODES_SHIFT: u32 = 10;
pub const CONFIG_LCD_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_COMEDI_DAS1800_MODULE: u32 = 1;
pub const CONFIG_USB_HIDDEV: u32 = 1;
pub const CONFIG_CEC_CH7322_MODULE: u32 = 1;
pub const CONFIG_RPMSG_QCOM_GLINK_MODULE: u32 = 1;
pub const CONFIG_MITIGATION_CALL_DEPTH_TRACKING: u32 = 1;
pub const CONFIG_GPIO_GRANITERAPIDS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_IT87_MODULE: u32 = 1;
pub const CONFIG_TCM_FILEIO_MODULE: u32 = 1;
pub const CONFIG_TEST_BLACKHOLE_DEV_MODULE: u32 = 1;
pub const CONFIG_HID_U2FZERO_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_KTD253_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ZFORCE_MODULE: u32 = 1;
pub const CONFIG_WIZNET_W5100_MODULE: u32 = 1;
pub const CONFIG_PARPORT_PANEL_MODULE: u32 = 1;
pub const CONFIG_HFS_FS_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_MMAP_RND_BITS: u32 = 1;
pub const CONFIG_LEDS_SIEMENS_SIMATIC_IPC_APOLLOLAKE_MODULE: u32 = 1;
pub const CONFIG_SND_FM801_MODULE: u32 = 1;
pub const CONFIG_VIDEO_MT9V032_MODULE: u32 = 1;
pub const CONFIG_HAVE_PERF_REGS: u32 = 1;
pub const CONFIG_USB_NET2280_MODULE: u32 = 1;
pub const CONFIG_HW_RANDOM_XIPHERA_MODULE: u32 = 1;
pub const CONFIG_GENERIC_PENDING_IRQ: u32 = 1;
pub const CONFIG_QCOM_EMAC_MODULE: u32 = 1;
pub const CONFIG_SKFP_MODULE: u32 = 1;
pub const CONFIG_APPLE_PROPERTIES: u32 = 1;
pub const CONFIG_MOTORCOMM_PHY_MODULE: u32 = 1;
pub const CONFIG_VIDEO_AD5820_MODULE: u32 = 1;
pub const CONFIG_VIDEO_MT9T112_MODULE: u32 = 1;
pub const CONFIG_RESET_TI_SYSCON_MODULE: u32 = 1;
pub const CONFIG_IMA_MEASURE_ASYMMETRIC_KEYS: u32 = 1;
pub const CONFIG_DVB_STB0899_MODULE: u32 = 1;
pub const CONFIG_AD7292_MODULE: u32 = 1;
pub const CONFIG_MTD_UBI_FASTMAP: u32 = 1;
pub const CONFIG_SND_SOC_SOF_DEBUG_PROBES_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8731_I2C_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L41_SPI_MODULE: u32 = 1;
pub const CONFIG_PAGE_SIZE_LESS_THAN_256KB: u32 = 1;
pub const CONFIG_IPV6_SIT_6RD: u32 = 1;
pub const CONFIG_GREYBUS_PWM_MODULE: u32 = 1;
pub const CONFIG_FUSE_DAX: u32 = 1;
pub const CONFIG_HAS_IOPORT: u32 = 1;
pub const CONFIG_DA_MON_EVENTS: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_DIO200_ISA_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_RT5759_MODULE: u32 = 1;
pub const CONFIG_COMEDI_8255_MODULE: u32 = 1;
pub const CONFIG_STRICT_MODULE_RWX: u32 = 1;
pub const CONFIG_HAVE_JUMP_LABEL_HACK: u32 = 1;
pub const CONFIG_MCP4531_MODULE: u32 = 1;
pub const CONFIG_IXGBEVF_MODULE: u32 = 1;
pub const CONFIG_SENSORS_XDPE122_REGULATOR: u32 = 1;
pub const CONFIG_CXL_BUS_MODULE: u32 = 1;
pub const CONFIG_MAC802154_MODULE: u32 = 1;
pub const CONFIG_X86_DEBUG_FPU: u32 = 1;
pub const CONFIG_USB_NET_SR9700_MODULE: u32 = 1;
pub const CONFIG_PCS_MTK_LYNXI_MODULE: u32 = 1;
pub const CONFIG_FXOS8700_MODULE: u32 = 1;
pub const CONFIG_AD7944_MODULE: u32 = 1;
pub const CONFIG_LIBERTAS_SPI_MODULE: u32 = 1;
pub const CONFIG_PCI: u32 = 1;
pub const CONFIG_SENSORS_PMBUS_MODULE: u32 = 1;
pub const CONFIG_USB_OHCI_HCD_PCI: u32 = 1;
pub const CONFIG_SND_OPL3_LIB_SEQ_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_CPIA1_MODULE: u32 = 1;
pub const CONFIG_CLANG_VERSION: u32 = 0;
pub const CONFIG_DEV_DAX_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_ARIZONA_MICSUPP_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCL730_MODULE: u32 = 1;
pub const CONFIG_CEC_NOTIFIER: u32 = 1;
pub const CONFIG_BRIDGE_EBT_MARK_MODULE: u32 = 1;
pub const CONFIG_BATTERY_UG3105_MODULE: u32 = 1;
pub const CONFIG_IT8712F_WDT_MODULE: u32 = 1;
pub const CONFIG_HSC030PA_SPI_MODULE: u32 = 1;
pub const CONFIG_B43_MODULE: u32 = 1;
pub const CONFIG_DM_CACHE_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XTABLES_COMPAT: u32 = 1;
pub const CONFIG_B43_SSB: u32 = 1;
pub const CONFIG_SCD30_I2C_MODULE: u32 = 1;
pub const CONFIG_SBP_TARGET_MODULE: u32 = 1;
pub const CONFIG_DVB_HELENE_MODULE: u32 = 1;
pub const CONFIG_SECURITY_APPARMOR_INTROSPECT_POLICY: u32 = 1;
pub const CONFIG_HAVE_ARCH_WITHIN_STACK_FRAMES: u32 = 1;
pub const CONFIG_ARCH_HAS_ELF_RANDOMIZE: u32 = 1;
pub const CONFIG_NFS_V4_1_IMPLEMENTATION_ID_DOMAIN: &[u8; 11] = b"kernel.org\0";
pub const CONFIG_SCSI: u32 = 1;
pub const CONFIG_DVB_ZL10036_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_IPRANGE_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_TIMESTAMP: u32 = 1;
pub const CONFIG_BOOT_VESA_SUPPORT: u32 = 1;
pub const CONFIG_SENSORS_SHT4x_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX9867_MODULE: u32 = 1;
pub const CONFIG_INPUT_LEDS_MODULE: u32 = 1;
pub const CONFIG_USB_RTL8153_ECM_MODULE: u32 = 1;
pub const CONFIG_HAVE_ZSMALLOC: u32 = 1;
pub const CONFIG_IIO_CROS_EC_SENSORS_CORE_MODULE: u32 = 1;
pub const CONFIG_USB_CHIPIDEA_GENERIC_MODULE: u32 = 1;
pub const CONFIG_SQUASHFS_DECOMP_MULTI: u32 = 1;
pub const CONFIG_MAGIC_SYSRQ: u32 = 1;
pub const CONFIG_GENERIC_CALIBRATE_DELAY: u32 = 1;
pub const CONFIG_CRYPTO_KDF800108_CTR: u32 = 1;
pub const CONFIG_REGULATOR_RT5739_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SOLARFLARE: u32 = 1;
pub const CONFIG_MAGIC_SYSRQ_SERIAL_SEQUENCE: &[u8; 1] = b"\0";
pub const CONFIG_BT_BNEP_MC_FILTER: u32 = 1;
pub const CONFIG_SENSORS_MAX34440_MODULE: u32 = 1;
pub const CONFIG_CRC7_MODULE: u32 = 1;
pub const CONFIG_MEDIA_ANALOG_TV_SUPPORT: u32 = 1;
pub const CONFIG_HAVE_KVM_IRQCHIP: u32 = 1;
pub const CONFIG_LD_ORPHAN_WARN_LEVEL: &[u8; 5] = b"warn\0";
pub const CONFIG_USB_OHCI_HCD_PLATFORM: u32 = 1;
pub const CONFIG_AIX_PARTITION: u32 = 1;
pub const CONFIG_RTW88_8703B_MODULE: u32 = 1;
pub const CONFIG_DVB_TDA10071_MODULE: u32 = 1;
pub const CONFIG_I2C_MUX_REG_MODULE: u32 = 1;
pub const CONFIG_FONTS: u32 = 1;
pub const CONFIG_MEDIA_TUNER_FC2580_MODULE: u32 = 1;
pub const CONFIG_XEN_BALLOON: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_JASTEC: u32 = 1;
pub const CONFIG_SFC_SIENA_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_ASM_GOTO_OUTPUT: u32 = 1;
pub const CONFIG_64BIT: u32 = 1;
pub const CONFIG_I2C_MUX_LTC4306_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_USNIC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_WM8350_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_ECM_SUBSET: u32 = 1;
pub const CONFIG_DVB_IX2505V_MODULE: u32 = 1;
pub const CONFIG_USB_OHCI_LITTLE_ENDIAN: u32 = 1;
pub const CONFIG_ISO9660_FS_MODULE: u32 = 1;
pub const CONFIG_UNIX_DIAG_MODULE: u32 = 1;
pub const CONFIG_TCG_TIS_SPI_CR50: u32 = 1;
pub const CONFIG_QTNFMAC_MODULE: u32 = 1;
pub const CONFIG_NFS_SWAP: u32 = 1;
pub const CONFIG_SND_HDA_GENERIC_LEDS: u32 = 1;
pub const CONFIG_DVB_VES1820_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM85_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CHV3_I2S_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_CHACHA_GENERIC_MODULE: u32 = 1;
pub const CONFIG_AD5758_MODULE: u32 = 1;
pub const CONFIG_APDS9306_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_HDA_MODULE: u32 = 1;
pub const CONFIG_VIDEOBUF2_DVB_MODULE: u32 = 1;
pub const CONFIG_DVB_STV0299_MODULE: u32 = 1;
pub const CONFIG_I2C_I801_MUX: u32 = 1;
pub const CONFIG_IP_SCTP_MODULE: u32 = 1;
pub const CONFIG_XEN_PV: u32 = 1;
pub const CONFIG_QCOM_SPMI_ADC5_MODULE: u32 = 1;
pub const CONFIG_IP_VS_PROTO_SCTP: u32 = 1;
pub const CONFIG_MAC80211_MESSAGE_TRACING: u32 = 1;
pub const CONFIG_MFD_MADERA_SPI_MODULE: u32 = 1;
pub const CONFIG_BATTERY_BQ27XXX_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ATK0110_MODULE: u32 = 1;
pub const CONFIG_IP_VS_TWOS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC2991_MODULE: u32 = 1;
pub const CONFIG_USB_GADGET_STORAGE_NUM_BUFFERS: u32 = 2;
pub const CONFIG_RADIO_MAXIRADIO_MODULE: u32 = 1;
pub const CONFIG_PM_DEBUG: u32 = 1;
pub const CONFIG_VIDEOBUF2_DMA_SG_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_SMSC_LAN9303_MDIO_MODULE: u32 = 1;
pub const CONFIG_DPTF_PCH_FIVR_MODULE: u32 = 1;
pub const CONFIG_HAVE_STATIC_CALL_INLINE: u32 = 1;
pub const CONFIG_MMC_SDHCI_XENON_MODULE: u32 = 1;
pub const CONFIG_USB_F_UAC1_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_NULL2: u32 = 1;
pub const CONFIG_NET_VENDOR_TI: u32 = 1;
pub const CONFIG_RAVE_SP_CORE_MODULE: u32 = 1;
pub const CONFIG_BLK_CGROUP: u32 = 1;
pub const CONFIG_HARDLOCKUP_CHECK_TIMESTAMP: u32 = 1;
pub const CONFIG_BNX2X_SRIOV: u32 = 1;
pub const CONFIG_AGP_SIS_MODULE: u32 = 1;
pub const CONFIG_SIEMENS_SIMATIC_IPC_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_KFENCE: u32 = 1;
pub const CONFIG_HYPERV_NET_MODULE: u32 = 1;
pub const CONFIG_AL3010_MODULE: u32 = 1;
pub const CONFIG_HID_CORSAIR_MODULE: u32 = 1;
pub const CONFIG_IPV6_VTI_MODULE: u32 = 1;
pub const CONFIG_RTL8XXXU_UNTESTED: u32 = 1;
pub const CONFIG_U_SERIAL_CONSOLE: u32 = 1;
pub const CONFIG_HID_NTI_MODULE: u32 = 1;
pub const CONFIG_DECOMPRESS_ZSTD: u32 = 1;
pub const CONFIG_DELL_RBU_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8770_MODULE: u32 = 1;
pub const CONFIG_ACPI_DEBUGGER: u32 = 1;
pub const CONFIG_NF_LOG_ARP_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AW8738_MODULE: u32 = 1;
pub const CONFIG_FB_MATROX_G: u32 = 1;
pub const CONFIG_ACPI_CUSTOM_DSDT_FILE: &[u8; 1] = b"\0";
pub const CONFIG_EBC_C384_WDT_MODULE: u32 = 1;
pub const CONFIG_MTD_MAP_BANK_WIDTH_4: u32 = 1;
pub const CONFIG_NF_NAT_AMANDA_MODULE: u32 = 1;
pub const CONFIG_OLD_SIGSUSPEND3: u32 = 1;
pub const CONFIG_CROS_EC_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_MAX11410_MODULE: u32 = 1;
pub const CONFIG_NET_TEAM_MODULE: u32 = 1;
pub const CONFIG_SSB_PCIHOST_POSSIBLE: u32 = 1;
pub const CONFIG_REGULATOR_MAX1586_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_ANALOG_MODULE: u32 = 1;
pub const CONFIG_XPS: u32 = 1;
pub const CONFIG_W83977F_WDT_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_STATISTIC_MODULE: u32 = 1;
pub const CONFIG_SPI_ALTERA_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_VDPA_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MT6397_MODULE: u32 = 1;
pub const CONFIG_COMPAT_32BIT_TIME: u32 = 1;
pub const CONFIG_COMEDI_PARPORT_MODULE: u32 = 1;
pub const CONFIG_MMA9551_MODULE: u32 = 1;
pub const CONFIG_POWER_RESET_RESTART: u32 = 1;
pub const CONFIG_SENSORS_SCH5627_MODULE: u32 = 1;
pub const CONFIG_HOTPLUG_CPU: u32 = 1;
pub const CONFIG_NFS_FSCACHE: u32 = 1;
pub const CONFIG_INTEL_ATOMISP2_PDX86: u32 = 1;
pub const CONFIG_FB_SM750_MODULE: u32 = 1;
pub const CONFIG_PAGE_POOL_STATS: u32 = 1;
pub const CONFIG_WANT_DEV_COREDUMP: u32 = 1;
pub const CONFIG_NET_IPGRE_DEMUX_MODULE: u32 = 1;
pub const CONFIG_USB_LIBCOMPOSITE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MPQ7932_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BYT_CHT_DA7213_MACH_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_GF2K_MODULE: u32 = 1;
pub const CONFIG_DVB_PT1_MODULE: u32 = 1;
pub const CONFIG_MISC_ALCOR_PCI_MODULE: u32 = 1;
pub const CONFIG_RANDOMIZE_BASE: u32 = 1;
pub const CONFIG_FB_MB862XX_MODULE: u32 = 1;
pub const CONFIG_INTEGRITY_TRUSTED_KEYRING: u32 = 1;
pub const CONFIG_NET_VENDOR_PENSANDO: u32 = 1;
pub const CONFIG_VIDEO_HI847_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_DFL_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SM4_AESNI_AVX2_X86_64_MODULE: u32 = 1;
pub const CONFIG_F2FS_FS_ZSTD: u32 = 1;
pub const CONFIG_SENSORS_SCH5636_MODULE: u32 = 1;
pub const CONFIG_BLK_DEV_NVME_MODULE: u32 = 1;
pub const CONFIG_MFD_CS47L24: u32 = 1;
pub const CONFIG_NET_DSA_VITESSE_VSC73XX_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_SPI_BUTTERFLY_MODULE: u32 = 1;
pub const CONFIG_PHONET_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM73_MODULE: u32 = 1;
pub const CONFIG_AMDTEE_MODULE: u32 = 1;
pub const CONFIG_EFI_HANDOVER_PROTOCOL: u32 = 1;
pub const CONFIG_DVB_USB_VP7045_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_SET_MEMORY: u32 = 1;
pub const CONFIG_COMEDI_DYNA_PCI10XX_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_DTT200U_MODULE: u32 = 1;
pub const CONFIG_PSTORE_BLK_MAX_REASON: u32 = 2;
pub const CONFIG_HID_CHERRY_MODULE: u32 = 1;
pub const CONFIG_MAC80211_MESH: u32 = 1;
pub const CONFIG_BLK_WBT: u32 = 1;
pub const CONFIG_REGMAP_W1_MODULE: u32 = 1;
pub const CONFIG_SATA_SIS_MODULE: u32 = 1;
pub const CONFIG_TASKS_RUDE_RCU: u32 = 1;
pub const CONFIG_MTD_UBI_WL_THRESHOLD: u32 = 4096;
pub const CONFIG_REGMAP_SOUNDWIRE_MBQ_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_WWAN_MODULE: u32 = 1;
pub const CONFIG_IP_SET_HASH_NETPORT_MODULE: u32 = 1;
pub const CONFIG_YENTA_ENE_TUNE: u32 = 1;
pub const CONFIG_SERIO_PS2MULT_MODULE: u32 = 1;
pub const CONFIG_HDLC_FR_MODULE: u32 = 1;
pub const CONFIG_MFD_TPS65090: u32 = 1;
pub const CONFIG_NET_ACT_SAMPLE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AK4613_MODULE: u32 = 1;
pub const CONFIG_FXLS8962AF_I2C_MODULE: u32 = 1;
pub const CONFIG_XEN_BALLOON_MEMORY_HOTPLUG: u32 = 1;
pub const CONFIG_USB_ARMLINUX: u32 = 1;
pub const CONFIG_ZEROPLUS_FF: u32 = 1;
pub const CONFIG_HID_KEYTOUCH_MODULE: u32 = 1;
pub const CONFIG_RTW89_8852CE_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_PCM512x_SPI_MODULE: u32 = 1;
pub const CONFIG_IMA: u32 = 1;
pub const CONFIG_REGULATOR_PWM_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AC97_CODEC_MODULE: u32 = 1;
pub const CONFIG_INPUT_ATC260X_ONKEY_MODULE: u32 = 1;
pub const CONFIG_SMSC_PHY_MODULE: u32 = 1;
pub const CONFIG_GPIO_XRA1403_MODULE: u32 = 1;
pub const CONFIG_BLK_INLINE_ENCRYPTION: u32 = 1;
pub const CONFIG_VME_BUS: u32 = 1;
pub const CONFIG_SND_SOC_DMIC_MODULE: u32 = 1;
pub const CONFIG_AD7293_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_ADDRTYPE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC4260_MODULE: u32 = 1;
pub const CONFIG_DVB_CXD2880_MODULE: u32 = 1;
pub const CONFIG_CC_CAN_LINK: u32 = 1;
pub const CONFIG_BT_MTKSDIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_KBL_RT5663_MAX98927_MACH_MODULE: u32 = 1;
pub const CONFIG_USB_FUNCTIONFS_GENERIC: u32 = 1;
pub const CONFIG_FUNCTION_PADDING_CFI: u32 = 11;
pub const CONFIG_B53_MODULE: u32 = 1;
pub const CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS: u32 = 1;
pub const CONFIG_JOYSTICK_IFORCE_USB_MODULE: u32 = 1;
pub const CONFIG_MT7925_COMMON_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_MAX98927_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_ES2_MODULE: u32 = 1;
pub const CONFIG_CHARGER_MAX77976_MODULE: u32 = 1;
pub const CONFIG_NF_LOG_IPV6_MODULE: u32 = 1;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO_BARE: u32 = 1;
pub const CONFIG_COMEDI_PCL818_MODULE: u32 = 1;
pub const CONFIG_MMC_VUB300_MODULE: u32 = 1;
pub const CONFIG_IPMI_PLAT_DATA: u32 = 1;
pub const CONFIG_SND_AMD_ACP_CONFIG_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_S35390A_MODULE: u32 = 1;
pub const CONFIG_KERNFS: u32 = 1;
pub const CONFIG_DRM_MGAG200_MODULE: u32 = 1;
pub const CONFIG_PARAVIRT_SPINLOCKS: u32 = 1;
pub const CONFIG_SND_SOC_TLV320AIC32X4_MODULE: u32 = 1;
pub const CONFIG_DM_MULTIPATH_HST_MODULE: u32 = 1;
pub const CONFIG_6LOWPAN_NHC_UDP_MODULE: u32 = 1;
pub const CONFIG_SERIO_SERPORT_MODULE: u32 = 1;
pub const CONFIG_ACPI_APEI_MEMORY_FAILURE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_GUNZE_MODULE: u32 = 1;
pub const CONFIG_COMEDI_AMPLC_PC263_PCI_MODULE: u32 = 1;
pub const CONFIG_INPUT_SOC_BUTTON_ARRAY_MODULE: u32 = 1;
pub const CONFIG_RD_XZ: u32 = 1;
pub const CONFIG_HAVE_PAGE_SIZE_4KB: u32 = 1;
pub const CONFIG_DRM_AMDGPU_CIK: u32 = 1;
pub const CONFIG_VIDEO_TW68_MODULE: u32 = 1;
pub const CONFIG_VIDEO_V4L2_I2C: u32 = 1;
pub const CONFIG_ARCH_WANTS_DYNAMIC_TASK_STRUCT: u32 = 1;
pub const CONFIG_IIO_ADIS_LIB_MODULE: u32 = 1;
pub const CONFIG_UIO_PDRV_GENIRQ_MODULE: u32 = 1;
pub const CONFIG_MSDOS_FS_MODULE: u32 = 1;
pub const CONFIG_ADMFM2000_MODULE: u32 = 1;
pub const CONFIG_USB_ULPI_BUS_MODULE: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_RAPL_MODULE: u32 = 1;
pub const CONFIG_DM_EBS_MODULE: u32 = 1;
pub const CONFIG_SECURITY_TOMOYO_POLICY_LOADER: &[u8; 18] = b"/sbin/tomoyo-init\0";
pub const CONFIG_EFI_RUNTIME_MAP: u32 = 1;
pub const CONFIG_JOYSTICK_WARRIOR_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_AEGIS128_AESNI_SSE2_MODULE: u32 = 1;
pub const CONFIG_STM_SOURCE_CONSOLE_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_DMI: u32 = 1;
pub const CONFIG_PCIEAER: u32 = 1;
pub const CONFIG_IP_VS_SH_TAB_BITS: u32 = 8;
pub const CONFIG_BE2NET_SKYHAWK: u32 = 1;
pub const CONFIG_SND_MTPAV_MODULE: u32 = 1;
pub const CONFIG_DVB_S5H1411_MODULE: u32 = 1;
pub const CONFIG_ATH6KL_SDIO_MODULE: u32 = 1;
pub const CONFIG_ACPI_DEBUGGER_USER: u32 = 1;
pub const CONFIG_TI_ADS124S08_MODULE: u32 = 1;
pub const CONFIG_CRC_ITU_T_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_INEXIO_MODULE: u32 = 1;
pub const CONFIG_PFCP_MODULE: u32 = 1;
pub const CONFIG_SCSI_SRP_ATTRS_MODULE: u32 = 1;
pub const CONFIG_SND_ECHO3G_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_QT1050_MODULE: u32 = 1;
pub const CONFIG_PCI_MMCONFIG: u32 = 1;
pub const CONFIG_SSB_SDIOHOST_POSSIBLE: u32 = 1;
pub const CONFIG_RTC_DRV_RX6110_MODULE: u32 = 1;
pub const CONFIG_DEVFREQ_GOV_PERFORMANCE: u32 = 1;
pub const CONFIG_SENSORS_UCD9200_MODULE: u32 = 1;
pub const CONFIG_AMD_HSMP_MODULE: u32 = 1;
pub const CONFIG_SENSORS_RM3100_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_RTRS_MODULE: u32 = 1;
pub const CONFIG_MFD_MADERA_MODULE: u32 = 1;
pub const CONFIG_IP_FIB_TRIE_STATS: u32 = 1;
pub const CONFIG_RPMSG_NS_MODULE: u32 = 1;
pub const CONFIG_KEYBOARD_MPR121_MODULE: u32 = 1;
pub const CONFIG_PROC_PAGE_MONITOR: u32 = 1;
pub const CONFIG_FUN_ETH_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_SECCOMP_FILTER: u32 = 1;
pub const CONFIG_NET_DSA_TAG_OCELOT_MODULE: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_DUMMY_MODULE: u32 = 1;
pub const CONFIG_DEBUG_BUGVERBOSE: u32 = 1;
pub const CONFIG_PLAYSTATION_FF: u32 = 1;
pub const CONFIG_SND_SOC_MAX98373_SDW_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MP2888_MODULE: u32 = 1;
pub const CONFIG_ATH9K_COMMON_DEBUG: u32 = 1;
pub const CONFIG_EXT4_USE_FOR_EXT2: u32 = 1;
pub const CONFIG_USB_PEGASUS_MODULE: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_IDTCM_MODULE: u32 = 1;
pub const CONFIG_UIO_PCI_GENERIC_MODULE: u32 = 1;
pub const CONFIG_I2C_SIS630_MODULE: u32 = 1;
pub const CONFIG_SLAB_FREELIST_RANDOM: u32 = 1;
pub const CONFIG_SATA_DWC_OLD_DMA: u32 = 1;
pub const CONFIG_TCG_NSC_MODULE: u32 = 1;
pub const CONFIG_FXAS21002C_SPI_MODULE: u32 = 1;
pub const CONFIG_ARCH_SUSPEND_POSSIBLE: u32 = 1;
pub const CONFIG_USB_IDMOUSE_MODULE: u32 = 1;
pub const CONFIG_X86_AMD_PLATFORM_DEVICE: u32 = 1;
pub const CONFIG_KPROBES: u32 = 1;
pub const CONFIG_TOUCHSCREEN_IQS7211_MODULE: u32 = 1;
pub const CONFIG_RT_MUTEXES: u32 = 1;
pub const CONFIG_UPROBE_EVENTS: u32 = 1;
pub const CONFIG_USB_F_UAC2_MODULE: u32 = 1;
pub const CONFIG_PCI_DOE: u32 = 1;
pub const CONFIG_CEC_PIN: u32 = 1;
pub const CONFIG_MFD_WM8997: u32 = 1;
pub const CONFIG_BPF_KPROBE_OVERRIDE: u32 = 1;
pub const CONFIG_INTEL_MEI_PXP_MODULE: u32 = 1;
pub const CONFIG_GENERIC_VDSO_OVERFLOW_PROTECT: u32 = 1;
pub const CONFIG_NET_VENDOR_XIRCOM: u32 = 1;
pub const CONFIG_CHELSIO_T4VF_MODULE: u32 = 1;
pub const CONFIG_NET_IFE_MODULE: u32 = 1;
pub const CONFIG_HVC_XEN: u32 = 1;
pub const CONFIG_CHARGER_AXP20X_MODULE: u32 = 1;
pub const CONFIG_RD_LZ4: u32 = 1;
pub const CONFIG_SND_HDA_SCODEC_CS35L56_SPI_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_EDGEPORT_MODULE: u32 = 1;
pub const CONFIG_PLFXLC_MODULE: u32 = 1;
pub const CONFIG_SECURITY_TOMOYO: u32 = 1;
pub const CONFIG_VIDEO_ADV7175_MODULE: u32 = 1;
pub const CONFIG_IPMI_SSIF_MODULE: u32 = 1;
pub const CONFIG_IEEE802154_AT86RF230_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_XRS700X_MDIO_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LIS3_I2C_MODULE: u32 = 1;
pub const CONFIG_DVB_MXL692_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CX231XX_ALSA_MODULE: u32 = 1;
pub const CONFIG_MFD_SY7636A_MODULE: u32 = 1;
pub const CONFIG_BCACHEFS_SIX_OPTIMISTIC_SPIN: u32 = 1;
pub const CONFIG_HSI_BOARDINFO: u32 = 1;
pub const CONFIG_DEFAULT_HOSTNAME: &[u8; 7] = b"(none)\0";
pub const CONFIG_VFIO_PCI_INTX: u32 = 1;
pub const CONFIG_MLX5_MACSEC: u32 = 1;
pub const CONFIG_GENERIC_NET_UTILS: u32 = 1;
pub const CONFIG_REGULATOR_TPS65132_MODULE: u32 = 1;
pub const CONFIG_EVM_EXTRA_SMACK_XATTRS: u32 = 1;
pub const CONFIG_PINCTRL_SUNRISEPOINT_MODULE: u32 = 1;
pub const CONFIG_USB_CONN_GPIO_MODULE: u32 = 1;
pub const CONFIG_KVM_AMD_SEV: u32 = 1;
pub const CONFIG_LMP91000_MODULE: u32 = 1;
pub const CONFIG_DM_ERA_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_RX8010_MODULE: u32 = 1;
pub const CONFIG_GENERIC_ISA_DMA: u32 = 1;
pub const CONFIG_IP_VS_WRR_MODULE: u32 = 1;
pub const CONFIG_SYSFB: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_ONESHOT_MODULE: u32 = 1;
pub const CONFIG_NVDIMM_PFN: u32 = 1;
pub const CONFIG_SECURITY_SELINUX: u32 = 1;
pub const CONFIG_FRAME_POINTER: u32 = 1;
pub const CONFIG_BLK_DEV_DRBD_MODULE: u32 = 1;
pub const CONFIG_INPUT_JOYSTICK: u32 = 1;
pub const CONFIG_BLK_DEV_DM_BUILTIN: u32 = 1;
pub const CONFIG_ARCNET_COM20020_MODULE: u32 = 1;
pub const CONFIG_MSI_EC_MODULE: u32 = 1;
pub const CONFIG_SMARTJOYPLUS_FF: u32 = 1;
pub const CONFIG_HSU_DMA: u32 = 1;
pub const CONFIG_IP5XXX_POWER_MODULE: u32 = 1;
pub const CONFIG_VMWARE_VMCI_MODULE: u32 = 1;
pub const CONFIG_SCSI_LOWLEVEL: u32 = 1;
pub const CONFIG_SENSORS_LM63_MODULE: u32 = 1;
pub const CONFIG_AMILO_RFKILL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WCD937X_SDW_MODULE: u32 = 1;
pub const CONFIG_INTERVAL_TREE: u32 = 1;
pub const CONFIG_GPIO_TWL6040_MODULE: u32 = 1;
pub const CONFIG_ADIN1110_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_PCF8563_MODULE: u32 = 1;
pub const CONFIG_FUSION_FC_MODULE: u32 = 1;
pub const CONFIG_CLK_TWL_MODULE: u32 = 1;
pub const CONFIG_W1_SLAVE_DS2805_MODULE: u32 = 1;
pub const CONFIG_SPARSEMEM: u32 = 1;
pub const CONFIG_CXL_PMU_MODULE: u32 = 1;
pub const CONFIG_BCACHE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_ATMEL_SHA204A_MODULE: u32 = 1;
pub const CONFIG_INPUT_IQS7222_MODULE: u32 = 1;
pub const CONFIG_HVC_DRIVER: u32 = 1;
pub const CONFIG_BLK_CGROUP_IOCOST: u32 = 1;
pub const CONFIG_NLS_MAC_GAELIC_MODULE: u32 = 1;
pub const CONFIG_NFP_NET_IPSEC: u32 = 1;
pub const CONFIG_MFD_INTEL_LPSS_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_BROADCOM: u32 = 1;
pub const CONFIG_SPEAKUP_SYNTH_SPKOUT_MODULE: u32 = 1;
pub const CONFIG_MTD_PCMCIA_MODULE: u32 = 1;
pub const CONFIG_RTC_SYSTOHC_DEVICE: &[u8; 5] = b"rtc0\0";
pub const CONFIG_DEV_DAX_HMEM_DEVICES: u32 = 1;
pub const CONFIG_RTC_DRV_RX4581_MODULE: u32 = 1;
pub const CONFIG_INPUT_GPIO_VIBRA_MODULE: u32 = 1;
pub const CONFIG_OSNOISE_TRACER: u32 = 1;
pub const CONFIG_RTC_INTF_PROC: u32 = 1;
pub const CONFIG_USB_CHIPIDEA_NPCM_MODULE: u32 = 1;
pub const CONFIG_RC_LOOPBACK_MODULE: u32 = 1;
pub const CONFIG_AUTOFS_FS_MODULE: u32 = 1;
pub const CONFIG_AD5791_MODULE: u32 = 1;
pub const CONFIG_DVB_CX24123_MODULE: u32 = 1;
pub const CONFIG_SND_FIREWORKS_MODULE: u32 = 1;
pub const CONFIG_CHARGER_ISP1704_MODULE: u32 = 1;
pub const CONFIG_I2C_SIMTEC_MODULE: u32 = 1;
pub const CONFIG_IPV6_MROUTE_MULTIPLE_TABLES: u32 = 1;
pub const CONFIG_FUNCTION_PROFILER: u32 = 1;
pub const CONFIG_ARCH_HAS_PTE_DEVMAP: u32 = 1;
pub const CONFIG_ACQUIRE_WDT_MODULE: u32 = 1;
pub const CONFIG_BT_BREDR: u32 = 1;
pub const CONFIG_SND_SOC_AUDIO_IIO_AUX_MODULE: u32 = 1;
pub const CONFIG_VME_USER_MODULE: u32 = 1;
pub const CONFIG_TYPEC_DP_ALTMODE_MODULE: u32 = 1;
pub const CONFIG_XFRM_ESPINTCP: u32 = 1;
pub const CONFIG_LEDS_LP3952_MODULE: u32 = 1;
pub const CONFIG_ARCH_WANTS_NO_INSTR: u32 = 1;
pub const CONFIG_NET_DSA_QCA8K_MODULE: u32 = 1;
pub const CONFIG_USB_HID_MODULE: u32 = 1;
pub const CONFIG_SMSC911X_MODULE: u32 = 1;
pub const CONFIG_SFC_MCDI_MON: u32 = 1;
pub const CONFIG_MITIGATION_SRSO: u32 = 1;
pub const CONFIG_SND_ES1968_RADIO: u32 = 1;
pub const CONFIG_USB_HSO_MODULE: u32 = 1;
pub const CONFIG_NFT_BRIDGE_REJECT_MODULE: u32 = 1;
pub const CONFIG_GPIO_PCIE_IDIO_24_MODULE: u32 = 1;
pub const CONFIG_SND_HDA_RECONFIG: u32 = 1;
pub const CONFIG_ENS160_MODULE: u32 = 1;
pub const CONFIG_AD9467_MODULE: u32 = 1;
pub const CONFIG_PARMAN_MODULE: u32 = 1;
pub const CONFIG_IIO_BUFFER_CB_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SKCIPHER2: u32 = 1;
pub const CONFIG_MTD_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LTC4261_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS42L83_MODULE: u32 = 1;
pub const CONFIG_IT87_WDT_MODULE: u32 = 1;
pub const CONFIG_CHARGER_TWL4030_MODULE: u32 = 1;
pub const CONFIG_PCI_MSI: u32 = 1;
pub const CONFIG_SRF08_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX98373_MODULE: u32 = 1;
pub const CONFIG_RMI4_CORE_MODULE: u32 = 1;
pub const CONFIG_PATA_PDC2027X_MODULE: u32 = 1;
pub const CONFIG_HAVE_GENERIC_VDSO: u32 = 1;
pub const CONFIG_FB_UVESA_MODULE: u32 = 1;
pub const CONFIG_MFD_LM3533_MODULE: u32 = 1;
pub const CONFIG_INTEL_SOC_PMIC_BXTWC_MODULE: u32 = 1;
pub const CONFIG_UNWINDER_FRAME_POINTER: u32 = 1;
pub const CONFIG_SND_HDA_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_PANJIT: u32 = 1;
pub const CONFIG_VIDEO_DW9719_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT5682_I2C_MODULE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_PURELIFI: u32 = 1;
pub const CONFIG_NF_TABLES_ARP: u32 = 1;
pub const CONFIG_TMPFS_POSIX_ACL: u32 = 1;
pub const CONFIG_PCMCIA_XIRCOM_MODULE: u32 = 1;
pub const CONFIG_VIDEO_OV08D10_MODULE: u32 = 1;
pub const CONFIG_PCIE_DW_PLAT_HOST: u32 = 1;
pub const CONFIG_MODULES_TREE_LOOKUP: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_BXT_RT298_MACH_MODULE: u32 = 1;
pub const CONFIG_FW_LOADER_PAGED_BUF: u32 = 1;
pub const CONFIG_AIC79XX_DEBUG_MASK: u32 = 0;
pub const CONFIG_ATH11K_TRACING: u32 = 1;
pub const CONFIG_NILFS2_FS_MODULE: u32 = 1;
pub const CONFIG_IP_VS_PE_SIP_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_KOBIL_SCT_MODULE: u32 = 1;
pub const CONFIG_BATMAN_ADV_MODULE: u32 = 1;
pub const CONFIG_NXP_C45_TJA11XX_PHY_MODULE: u32 = 1;
pub const CONFIG_SATA_INIC162X_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RTQ9128_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_AMD_ACP63_MODULE: u32 = 1;
pub const CONFIG_X86_VMX_FEATURE_NAMES: u32 = 1;
pub const CONFIG_KALLSYMS_ABSOLUTE_PERCPU: u32 = 1;
pub const CONFIG_NVMEM_RMEM_MODULE: u32 = 1;
pub const CONFIG_USB_NET_CDC_EEM_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_TIO_MODULE: u32 = 1;
pub const CONFIG_BMI160_I2C_MODULE: u32 = 1;
pub const CONFIG_YOGABOOK_MODULE: u32 = 1;
pub const CONFIG_SND_VIA82XX_MODEM_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_E4000_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_DS1286_MODULE: u32 = 1;
pub const CONFIG_INTEGRITY_SIGNATURE: u32 = 1;
pub const CONFIG_ECRYPT_FS_MESSAGING: u32 = 1;
pub const CONFIG_STM_SOURCE_FTRACE_MODULE: u32 = 1;
pub const CONFIG_RTL8723AE_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MP8859_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_MCS5000_MODULE: u32 = 1;
pub const CONFIG_SND_AU8820_MODULE: u32 = 1;
pub const CONFIG_FB_SSD1307_MODULE: u32 = 1;
pub const CONFIG_RAPIDIO_TSI721_MODULE: u32 = 1;
pub const CONFIG_SENSORS_TDA38640_REGULATOR: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_USERSPACE: u32 = 1;
pub const CONFIG_CHELSIO_T4_FCOE: u32 = 1;
pub const CONFIG_BACKLIGHT_LM3533_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_ETT_TC45USB: u32 = 1;
pub const CONFIG_SND_SOC_ADAU1372_SPI_MODULE: u32 = 1;
pub const CONFIG_RTW88_DEBUGFS: u32 = 1;
pub const CONFIG_INPUT_TWL6040_VIBRA_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WSA883X_MODULE: u32 = 1;
pub const CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS: u32 = 16;
pub const CONFIG_IXGBE_DCA: u32 = 1;
pub const CONFIG_BLK_DEV_NULL_BLK_MODULE: u32 = 1;
pub const CONFIG_IP_VS_PROTO_AH_ESP: u32 = 1;
pub const CONFIG_JOLIET: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SKL_NAU88L25_SSM4567_MACH_MODULE: u32 = 1;
pub const CONFIG_ACPI_THERMAL_REL_MODULE: u32 = 1;
pub const CONFIG_DEVFREQ_THERMAL: u32 = 1;
pub const CONFIG_FB_ASILIANT: u32 = 1;
pub const CONFIG_V4L_MEM2MEM_DRIVERS: u32 = 1;
pub const CONFIG_INTEL_TH_STH_MODULE: u32 = 1;
pub const CONFIG_X86_DIRECT_GBPAGES: u32 = 1;
pub const CONFIG_JOYSTICK_IFORCE_232_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_OCRDMA_MODULE: u32 = 1;
pub const CONFIG_ACPI_TOSHIBA_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_ZIP: u32 = 1;
pub const CONFIG_COMEDI_ADDI_APCI_3120_MODULE: u32 = 1;
pub const CONFIG_DVB_S5H1409_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM83_MODULE: u32 = 1;
pub const CONFIG_SQUASHFS_DECOMP_MULTI_PERCPU: u32 = 1;
pub const CONFIG_B43LEGACY_PIO: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_DIRECT_CALLS: u32 = 1;
pub const CONFIG_SERIAL_8250_DW_MODULE: u32 = 1;
pub const CONFIG_MTD_DATAFLASH_MODULE: u32 = 1;
pub const CONFIG_LAN966X_OIC_MODULE: u32 = 1;
pub const CONFIG_SFC_FALCON_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCMUIO_MODULE: u32 = 1;
pub const CONFIG_MFD_AAT2870_CORE: u32 = 1;
pub const CONFIG_ACENIC_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX16601_MODULE: u32 = 1;
pub const CONFIG_SPI_DW_MMIO_MODULE: u32 = 1;
pub const CONFIG_MD_RAID456_MODULE: u32 = 1;
pub const CONFIG_I6300ESB_WDT_MODULE: u32 = 1;
pub const CONFIG_PATA_PDC_OLD_MODULE: u32 = 1;
pub const CONFIG_IMA_KEXEC: u32 = 1;
pub const CONFIG_BFS_FS_MODULE: u32 = 1;
pub const CONFIG_MMC_WBSD_MODULE: u32 = 1;
pub const CONFIG_HW_RANDOM_TPM: u32 = 1;
pub const CONFIG_COMPAT_FOR_U64_ALIGNMENT: u32 = 1;
pub const CONFIG_ILLEGAL_POINTER_VALUE: i64 = -2401263026318606336;
pub const CONFIG_HI8435_MODULE: u32 = 1;
pub const CONFIG_INPUT_MATRIXKMAP_MODULE: u32 = 1;
pub const CONFIG_VME_FAKE_MODULE: u32 = 1;
pub const CONFIG_IP_NF_MATCH_AH_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_SIMPLE_MODULE: u32 = 1;
pub const CONFIG_UPROBES: u32 = 1;
pub const CONFIG_TOUCHSCREEN_CYTTSP_CORE_MODULE: u32 = 1;
pub const CONFIG_VP_VDPA_MODULE: u32 = 1;
pub const CONFIG_DW_XDATA_PCIE_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_MAX8907_MODULE: u32 = 1;
pub const CONFIG_AD525X_DPOT_MODULE: u32 = 1;
pub const CONFIG_ADIS16400_MODULE: u32 = 1;
pub const CONFIG_ARCH_CORRECT_STACKTRACE_ON_KRETPROBE: u32 = 1;
pub const CONFIG_NFT_NAT_MODULE: u32 = 1;
pub const CONFIG_ZSWAP_COMPRESSOR_DEFAULT: &[u8; 4] = b"lzo\0";
pub const CONFIG_VIDEO_CS53L32A_MODULE: u32 = 1;
pub const CONFIG_MAX31827_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_LUNARLAKE_MODULE: u32 = 1;
pub const CONFIG_VFIO_MDEV_MODULE: u32 = 1;
pub const CONFIG_NXP_TJA11XX_PHY_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_MAX8998_MODULE: u32 = 1;
pub const CONFIG_NF_CONNTRACK_ZONES: u32 = 1;
pub const CONFIG_LEGACY_VSYSCALL_XONLY: u32 = 1;
pub const CONFIG_SCSI_AM53C974_MODULE: u32 = 1;
pub const CONFIG_MFD_SMPRO_MODULE: u32 = 1;
pub const CONFIG_USB_UHCI_HCD: u32 = 1;
pub const CONFIG_SENSORS_VIA686A_MODULE: u32 = 1;
pub const CONFIG_MT76x0E_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_MULTIPORT_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_PCPU_KTHREAD: u32 = 1;
pub const CONFIG_CRYPTO_NHPOLY1305_MODULE: u32 = 1;
pub const CONFIG_IIO_KX022A_I2C_MODULE: u32 = 1;
pub const CONFIG_GENERIC_PHY: u32 = 1;
pub const CONFIG_FCOE_MODULE: u32 = 1;
pub const CONFIG_HYPERV_IOMMU: u32 = 1;
pub const CONFIG_XILINX_SDFEC_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_LIMIT_MODULE: u32 = 1;
pub const CONFIG_IPV6_MROUTE: u32 = 1;
pub const CONFIG_USB_RAINSHADOW_CEC_MODULE: u32 = 1;
pub const CONFIG_INET6_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_OCFS2_FS_STATS: u32 = 1;
pub const CONFIG_GUEST_PERF_EVENTS: u32 = 1;
pub const CONFIG_SCSI_ADVANSYS_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_SERPENT_AVX2_X86_64_MODULE: u32 = 1;
pub const CONFIG_MCP4728_MODULE: u32 = 1;
pub const CONFIG_XEN_FBDEV_FRONTEND_MODULE: u32 = 1;
pub const CONFIG_MPL3115_MODULE: u32 = 1;
pub const CONFIG_DVB_BT8XX_MODULE: u32 = 1;
pub const CONFIG_VIDEO_ET8EK8_MODULE: u32 = 1;
pub const CONFIG_MT7925U_MODULE: u32 = 1;
pub const CONFIG_IWL3945_MODULE: u32 = 1;
pub const CONFIG_USB_EHCI_FSL_MODULE: u32 = 1;
pub const CONFIG_DUMMY_CONSOLE: u32 = 1;
pub const CONFIG_FB_TILEBLITTING: u32 = 1;
pub const CONFIG_MFD_TI_LMU_MODULE: u32 = 1;
pub const CONFIG_RTL_CARDS_MODULE: u32 = 1;
pub const CONFIG_JOYSTICK_TURBOGRAFX_MODULE: u32 = 1;
pub const CONFIG_VFIO_PCI_IGD: u32 = 1;
pub const CONFIG_PANTHERLORD_FF: u32 = 1;
pub const CONFIG_DVB_TUNER_DIB0090_MODULE: u32 = 1;
pub const CONFIG_DMA_OPS: u32 = 1;
pub const CONFIG_USB_F_TCM_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRACEHOOK: u32 = 1;
pub const CONFIG_IXGBE_HWMON: u32 = 1;
pub const CONFIG_X86_INTEL_PSTATE: u32 = 1;
pub const CONFIG_ACPI_FPDT: u32 = 1;
pub const CONFIG_CRYPTO_DEV_AMLOGIC_GXL_MODULE: u32 = 1;
pub const CONFIG_DVB_PT3_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_SMSC_LAN9303_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_XR_MODULE: u32 = 1;
pub const CONFIG_ARCNET_COM90xx_MODULE: u32 = 1;
pub const CONFIG_REED_SOLOMON_DEC16: u32 = 1;
pub const CONFIG_ARCNET_1201_MODULE: u32 = 1;
pub const CONFIG_IP_SET_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS530X_MODULE: u32 = 1;
pub const CONFIG_IP_SET_BITMAP_PORT_MODULE: u32 = 1;
pub const CONFIG_ACPI_APEI: u32 = 1;
pub const CONFIG_TCP_CONG_NV_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_AMD_ACP_MODULE: u32 = 1;
pub const CONFIG_AD8801_MODULE: u32 = 1;
pub const CONFIG_VIDEO_CCS_MODULE: u32 = 1;
pub const CONFIG_SAMPLES: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_TCPMSS_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_WILCO_EC_MODULE: u32 = 1;
pub const CONFIG_SLHC: u32 = 1;
pub const CONFIG_VIDEO_WM8775_MODULE: u32 = 1;
pub const CONFIG_SLUB_DEBUG: u32 = 1;
pub const CONFIG_SND_SOC_SRC4XXX_MODULE: u32 = 1;
pub const CONFIG_PPS_CLIENT_LDISC_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SQ905_MODULE: u32 = 1;
pub const CONFIG_CCS811_MODULE: u32 = 1;
pub const CONFIG_W1_MASTER_MATROX_MODULE: u32 = 1;
pub const CONFIG_BACKLIGHT_MAX8925_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_GENERAL_TOUCH: u32 = 1;
pub const CONFIG_SND_SOC_CS35L41_I2C_MODULE: u32 = 1;
pub const CONFIG_DVB_CX24120_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_MCP23S08_MODULE: u32 = 1;
pub const CONFIG_NET_DSA_TAG_RZN1_A5PSW_MODULE: u32 = 1;
pub const CONFIG_ATH10K_SDIO_MODULE: u32 = 1;
pub const CONFIG_EFI_CAPSULE_LOADER_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_DIBUSB_MB_MODULE: u32 = 1;
pub const CONFIG_BRIDGE_CFM: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_SST_TOPLEVEL: u32 = 1;
pub const CONFIG_BAREUDP_MODULE: u32 = 1;
pub const CONFIG_PATA_HPT37X_MODULE: u32 = 1;
pub const CONFIG_LEDS_BLINKM_MODULE: u32 = 1;
pub const CONFIG_SFC_MODULE: u32 = 1;
pub const CONFIG_RADIO_TEA575X_MODULE: u32 = 1;
pub const CONFIG_MMC_RICOH_MMC: u32 = 1;
pub const CONFIG_CRYPTO_SHA256: u32 = 1;
pub const CONFIG_DRM_XE_TIMESLICE_MAX: u32 = 10000000;
pub const CONFIG_ATH10K_MODULE: u32 = 1;
pub const CONFIG_SND_CTL_LED_MODULE: u32 = 1;
pub const CONFIG_NUMA_BALANCING: u32 = 1;
pub const CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES: u32 = 1;
pub const CONFIG_HAVE_BUILDTIME_MCOUNT_SORT: u32 = 1;
pub const CONFIG_ATM_LANE_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_KONICA_MODULE: u32 = 1;
pub const CONFIG_NET_EMATCH_CMP_MODULE: u32 = 1;
pub const CONFIG_MTD_COMPLEX_MAPPINGS: u32 = 1;
pub const CONFIG_QUOTACTL: u32 = 1;
pub const CONFIG_BRIDGE_NF_EBTABLES_MODULE: u32 = 1;
pub const CONFIG_EXFAT_DEFAULT_IOCHARSET: &[u8; 5] = b"utf8\0";
pub const CONFIG_VIDEOBUF2_V4L2_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_ARC: u32 = 1;
pub const CONFIG_WIL6210_DEBUGFS: u32 = 1;
pub const CONFIG_BT_HCIUART_BCM: u32 = 1;
pub const CONFIG_SND_SOC_SOF_KABYLAKE_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_NVIDIA: u32 = 1;
pub const CONFIG_UNIX: u32 = 1;
pub const CONFIG_TINYDRM_ST7586_MODULE: u32 = 1;
pub const CONFIG_GPIO_SLOPPY_LOGIC_ANALYZER_MODULE: u32 = 1;
pub const CONFIG_CEC_SECO_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_M88RS6000T_MODULE: u32 = 1;
pub const CONFIG_IRQ_WORK: u32 = 1;
pub const CONFIG_ARCH_ENABLE_MEMORY_HOTREMOVE: u32 = 1;
pub const CONFIG_SND_SOC_WSA884X_MODULE: u32 = 1;
pub const CONFIG_SATA_DWC_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_COMMENT_MODULE: u32 = 1;
pub const CONFIG_INPUT_APANEL_MODULE: u32 = 1;
pub const CONFIG_EROFS_FS_XATTR: u32 = 1;
pub const CONFIG_SMSC37B787_WDT_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_CURVE25519_GENERIC_MODULE: u32 = 1;
pub const CONFIG_FB_HECUBA_MODULE: u32 = 1;
pub const CONFIG_TRACING_MAP: u32 = 1;
pub const CONFIG_NLS_MAC_CROATIAN_MODULE: u32 = 1;
pub const CONFIG_SCSI_HPSA_MODULE: u32 = 1;
pub const CONFIG_APPLE_GMUX_MODULE: u32 = 1;
pub const CONFIG_HYPERVISOR_GUEST: u32 = 1;
pub const CONFIG_BT_HCIBT3C_MODULE: u32 = 1;
pub const CONFIG_XEN_HAVE_VPMU: u32 = 1;
pub const CONFIG_PWM_LP3943_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_TPROXY_MODULE: u32 = 1;
pub const CONFIG_SGI_PARTITION: u32 = 1;
pub const CONFIG_DUMMY_CONSOLE_COLUMNS: u32 = 80;
pub const CONFIG_MENF21BMC_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_SUNGEM_MODULE: u32 = 1;
pub const CONFIG_NF_LOG_IPV4_MODULE: u32 = 1;
pub const CONFIG_TLS_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_LABPC_ISADMA_MODULE: u32 = 1;
pub const CONFIG_PCI_HYPERV_INTERFACE_MODULE: u32 = 1;
pub const CONFIG_I2C_COMPAT: u32 = 1;
pub const CONFIG_ATH9K_PCI: u32 = 1;
pub const CONFIG_B43LEGACY_LEDS: u32 = 1;
pub const CONFIG_SND_INTEL8X0_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_HTCP_MODULE: u32 = 1;
pub const CONFIG_CAN_SJA1000_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_SND_LAYLA24_MODULE: u32 = 1;
pub const CONFIG_HID_PICOLCD_BACKLIGHT: u32 = 1;
pub const CONFIG_STACKTRACE: u32 = 1;
pub const CONFIG_AD7280_MODULE: u32 = 1;
pub const CONFIG_WCN36XX_MODULE: u32 = 1;
pub const CONFIG_SND_DICE_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_CINERGY_T2_MODULE: u32 = 1;
pub const CONFIG_RXPERF_MODULE: u32 = 1;
pub const CONFIG_BT_HCIBTUSB_AUTOSUSPEND: u32 = 1;
pub const CONFIG_BCMA_SFLASH: u32 = 1;
pub const CONFIG_TYPHOON_MODULE: u32 = 1;
pub const CONFIG_8139TOO_8129: u32 = 1;
pub const CONFIG_X86_NEED_RELOCS: u32 = 1;
pub const CONFIG_PINCTRL_SX150X: u32 = 1;
pub const CONFIG_6LOWPAN_NHC_HOP_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE_PUD: u32 = 1;
pub const CONFIG_NET_IEEE8021Q_HELPERS: u32 = 1;
pub const CONFIG_COMPAT_32: u32 = 1;
pub const CONFIG_DEFAULT_SECURITY_APPARMOR: u32 = 1;
pub const CONFIG_TUN: u32 = 1;
pub const CONFIG_SCSI_IPR_DUMP: u32 = 1;
pub const CONFIG_SCA3000_MODULE: u32 = 1;
pub const CONFIG_CAN_CC770_MODULE: u32 = 1;
pub const CONFIG_INTEL_TPMI_POWER_DOMAINS_MODULE: u32 = 1;
pub const CONFIG_FB_SVGALIB_MODULE: u32 = 1;
pub const CONFIG_NET_CLS_BASIC_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_PCF50633_MODULE: u32 = 1;
pub const CONFIG_TCP_CONG_LP_MODULE: u32 = 1;
pub const CONFIG_ADF4350_MODULE: u32 = 1;
pub const CONFIG_CAN_M_CAN_TCAN4X5X_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_TECHNISAT_USB2_MODULE: u32 = 1;
pub const CONFIG_CLKEVT_I8253: u32 = 1;
pub const CONFIG_SATA_QSTOR_MODULE: u32 = 1;
pub const CONFIG_ARCH_USE_SYM_ANNOTATIONS: u32 = 1;
pub const CONFIG_XEN_VIRTIO: u32 = 1;
pub const CONFIG_RTC_DRV_RV3029_HWMON: u32 = 1;
pub const CONFIG_SENSORS_IBMPEX_MODULE: u32 = 1;
pub const CONFIG_MAC80211_DEBUGFS: u32 = 1;
pub const CONFIG_USB_G_NOKIA_MODULE: u32 = 1;
pub const CONFIG_SOUNDWIRE_CADENCE_MODULE: u32 = 1;
pub const CONFIG_IXGBE_DCB: u32 = 1;
pub const CONFIG_MOUSE_BCM5974_MODULE: u32 = 1;
pub const CONFIG_ATH5K_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX6639_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX31790_MODULE: u32 = 1;
pub const CONFIG_SERIAL_ALTERA_UART_MAXPORTS: u32 = 4;
pub const CONFIG_WQ_CPU_INTENSIVE_REPORT: u32 = 1;
pub const CONFIG_CRYPTO_XCBC_MODULE: u32 = 1;
pub const CONFIG_GPIO_WM831X_MODULE: u32 = 1;
pub const CONFIG_MFD_MADERA_I2C_MODULE: u32 = 1;
pub const CONFIG_AR5523_MODULE: u32 = 1;
pub const CONFIG_MLX4_CORE_GEN2: u32 = 1;
pub const CONFIG_CROS_EC_DEBUGFS_MODULE: u32 = 1;
pub const CONFIG_CHROMEOS_TBMC_MODULE: u32 = 1;
pub const CONFIG_HW_RANDOM: u32 = 1;
pub const CONFIG_GPIO_FXL6408_MODULE: u32 = 1;
pub const CONFIG_CPU_IDLE_GOV_HALTPOLL: u32 = 1;
pub const CONFIG_IP_NF_TARGET_MASQUERADE_MODULE: u32 = 1;
pub const CONFIG_RCU_NEED_SEGCBLIST: u32 = 1;
pub const CONFIG_SND_SOC_WM8940_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LM80_MODULE: u32 = 1;
pub const CONFIG_USB_NET_CX82310_ETH_MODULE: u32 = 1;
pub const CONFIG_AD5755_MODULE: u32 = 1;
pub const CONFIG_BT_QCA_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_RV8803_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_FSL_SAI_MODULE: u32 = 1;
pub const CONFIG_COMEDI_NI_660X_MODULE: u32 = 1;
pub const CONFIG_SLIP_SMART: u32 = 1;
pub const CONFIG_NEED_DMA_MAP_STATE: u32 = 1;
pub const CONFIG_SND_SOC_IMG_I2S_OUT_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_GPIO_MODULE: u32 = 1;
pub const CONFIG_BT_MTKUART_MODULE: u32 = 1;
pub const CONFIG_TCM_FC_MODULE: u32 = 1;
pub const CONFIG_UBIFS_FS_MODULE: u32 = 1;
pub const CONFIG_NFC_FDP_MODULE: u32 = 1;
pub const CONFIG_RCU_EXP_CPU_STALL_TIMEOUT: u32 = 0;
pub const CONFIG_KEYBOARD_MTK_PMIC_MODULE: u32 = 1;
pub const CONFIG_MOUSE_PS2_LIFEBOOK: u32 = 1;
pub const CONFIG_MODULE_SIG_KEY: &[u8; 22] = b"certs/signing_key.pem\0";
pub const CONFIG_ARCH_MMAP_RND_BITS_MIN: u32 = 28;
pub const CONFIG_ARCH_WANT_OPTIMIZE_DAX_VMEMMAP: u32 = 1;
pub const CONFIG_ISA_BUS_API: u32 = 1;
pub const CONFIG_UBSAN_SHIFT: u32 = 1;
pub const CONFIG_USB_SERIAL_SYMBOL_MODULE: u32 = 1;
pub const CONFIG_OPENVSWITCH_VXLAN_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_BLAKE2B_MODULE: u32 = 1;
pub const CONFIG_NVDIMM_DAX: u32 = 1;
pub const CONFIG_USB_DYNAMIC_MINORS: u32 = 1;
pub const CONFIG_IO_DELAY_0XED: u32 = 1;
pub const CONFIG_SENSORS_PLI1209BC_MODULE: u32 = 1;
pub const CONFIG_USB_NET2272_MODULE: u32 = 1;
pub const CONFIG_GFS2_FS_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_ADDR_TRANS_CONFIGFS: u32 = 1;
pub const CONFIG_UIO_DFL_MODULE: u32 = 1;
pub const CONFIG_ATA_FORCE: u32 = 1;
pub const CONFIG_NET_VENDOR_DEC: u32 = 1;
pub const CONFIG_IP_SET_HASH_IPMAC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX98373_I2C_MODULE: u32 = 1;
pub const CONFIG_SND_ES1968_INPUT: u32 = 1;
pub const CONFIG_BLK_MQ_PCI: u32 = 1;
pub const CONFIG_SND_HDA_CODEC_CA0132_DSP: u32 = 1;
pub const CONFIG_SENSORS_DS1621_MODULE: u32 = 1;
pub const CONFIG_RT2800USB_UNKNOWN: u32 = 1;
pub const CONFIG_SYSVIPC: u32 = 1;
pub const CONFIG_LOCKDEP_SUPPORT: u32 = 1;
pub const CONFIG_PHY_QCOM_USB_HS_MODULE: u32 = 1;
pub const CONFIG_NFT_FIB_IPV6_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TDA18250_MODULE: u32 = 1;
pub const CONFIG_MEDIA_TUNER_QM1D1B0004_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_NETERION: u32 = 1;
pub const CONFIG_IIO_ST_GYRO_3AXIS_MODULE: u32 = 1;
pub const CONFIG_MTD_NETtel_MODULE: u32 = 1;
pub const CONFIG_BT_HCIUART_LL: u32 = 1;
pub const CONFIG_AD5933_MODULE: u32 = 1;
pub const CONFIG_TCP_SIGPOOL: u32 = 1;
pub const CONFIG_PINCTRL_CEDARFORK_MODULE: u32 = 1;
pub const CONFIG_RT2X00_LIB_PCI_MODULE: u32 = 1;
pub const CONFIG_FIREWIRE_NOSY_MODULE: u32 = 1;
pub const CONFIG_LTC2632_MODULE: u32 = 1;
pub const CONFIG_FSCACHE: u32 = 1;
pub const CONFIG_SND_SOC_TAS5086_MODULE: u32 = 1;
pub const CONFIG_MFD_SM501_MODULE: u32 = 1;
pub const CONFIG_DM_INTEGRITY_MODULE: u32 = 1;
pub const CONFIG_USB_CONFIGFS_MODULE: u32 = 1;
pub const CONFIG_USB_F_ECM_MODULE: u32 = 1;
pub const CONFIG_INFINIBAND_VMWARE_PVRDMA_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_LOOPBACK_MODULE: u32 = 1;
pub const CONFIG_X86_PKG_TEMP_THERMAL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_SOF_INTEL_APL_MODULE: u32 = 1;
pub const CONFIG_MEDIA_SUPPORT_FILTER: u32 = 1;
pub const CONFIG_CRYPTO: u32 = 1;
pub const CONFIG_NF_TABLES_BRIDGE_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_ELFCORE_COMPAT: u32 = 1;
pub const CONFIG_DELL_SMO8800_MODULE: u32 = 1;
pub const CONFIG_PCIEAER_CXL: u32 = 1;
pub const CONFIG_PARAVIRT: u32 = 1;
pub const CONFIG_HID_ELECOM_MODULE: u32 = 1;
pub const CONFIG_HAVE_ARCH_SECCOMP: u32 = 1;
pub const CONFIG_PATA_PARPORT_FRIQ_MODULE: u32 = 1;
pub const CONFIG_DVB_TUNER_CX24113_MODULE: u32 = 1;
pub const CONFIG_IOMMU_IOPF: u32 = 1;
pub const CONFIG_REISERFS_FS_MODULE: u32 = 1;
pub const CONFIG_HID_MCP2221_MODULE: u32 = 1;
pub const CONFIG_VFIO_GROUP: u32 = 1;
pub const CONFIG_VIDEO_OV9640_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MT6351_MODULE: u32 = 1;
pub const CONFIG_TI_ADC081C_MODULE: u32 = 1;
pub const CONFIG_MFD_PCF50633_MODULE: u32 = 1;
pub const CONFIG_USB_ISP1760_DUAL_ROLE: u32 = 1;
pub const CONFIG_SENSORS_LM70_MODULE: u32 = 1;
pub const CONFIG_BATTERY_88PM860X_MODULE: u32 = 1;
pub const CONFIG_VIDEO_VIVID_MAX_DEVS: u32 = 64;
pub const CONFIG_NFC_MICROREAD_MEI_MODULE: u32 = 1;
pub const CONFIG_BLK_CGROUP_FC_APPID: u32 = 1;
pub const CONFIG_PROC_FS: u32 = 1;
pub const CONFIG_SPI_CS42L43_MODULE: u32 = 1;
pub const CONFIG_USB_ALI_M5632: u32 = 1;
pub const CONFIG_RSI_SDIO_MODULE: u32 = 1;
pub const CONFIG_HAVE_UACCESS_VALIDATION: u32 = 1;
pub const CONFIG_VIDEO_OV2740_MODULE: u32 = 1;
pub const CONFIG_DVB_USB_DIBUSB_MC_MODULE: u32 = 1;
pub const CONFIG_TXGBE_MODULE: u32 = 1;
pub const CONFIG_ARCH_USE_MEMREMAP_PROT: u32 = 1;
pub const CONFIG_BMA220_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX16064_MODULE: u32 = 1;
pub const CONFIG_CROS_EC_LPC_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS35L56_SDW_MODULE: u32 = 1;
pub const CONFIG_DEBUG_INFO_COMPRESSED_NONE: u32 = 1;
pub const CONFIG_CRYPTO_MICHAEL_MIC_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_ATMEL_ECC_MODULE: u32 = 1;
pub const CONFIG_PM_DEVFREQ: u32 = 1;
pub const CONFIG_TI_ST_MODULE: u32 = 1;
pub const CONFIG_SENSORS_F71805F_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_TEHUTI: u32 = 1;
pub const CONFIG_NF_CT_PROTO_SCTP: u32 = 1;
pub const CONFIG_BLK_DEV_PMEM_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_SPCA508_MODULE: u32 = 1;
pub const CONFIG_SX_COMMON_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_CS53L30_MODULE: u32 = 1;
pub const CONFIG_PINCTRL_CS47L85: u32 = 1;
pub const CONFIG_MITIGATION_UNRET_ENTRY: u32 = 1;
pub const CONFIG_BPF_EVENTS: u32 = 1;
pub const CONFIG_GENERIC_ENTRY: u32 = 1;
pub const CONFIG_MEDIA_PLATFORM_SUPPORT: u32 = 1;
pub const CONFIG_TMPFS_QUOTA: u32 = 1;
pub const CONFIG_VIDEO_VISL_MODULE: u32 = 1;
pub const CONFIG_POSIX_TIMERS: u32 = 1;
pub const CONFIG_HID_BELKIN_MODULE: u32 = 1;
pub const CONFIG_USB_NET2272_DMA: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_FINALIZE_INIT: u32 = 1;
pub const CONFIG_DVB_ISL6421_MODULE: u32 = 1;
pub const CONFIG_UIO_CIF_MODULE: u32 = 1;
pub const CONFIG_SND_OXYGEN_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_KLSI_MODULE: u32 = 1;
pub const CONFIG_PROC_CPU_RESCTRL: u32 = 1;
pub const CONFIG_ADVANTECH_WDT_MODULE: u32 = 1;
pub const CONFIG_LEDS_TI_LMU_COMMON_MODULE: u32 = 1;
pub const CONFIG_BME680_MODULE: u32 = 1;
pub const CONFIG_PCS_LYNX_MODULE: u32 = 1;
pub const CONFIG_RPMSG_VIRTIO_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_AD7879_SPI_MODULE: u32 = 1;
pub const CONFIG_NOP_USB_XCEIV_MODULE: u32 = 1;
pub const CONFIG_GENERIC_TRACER: u32 = 1;
pub const CONFIG_NET_DSA_MT7530_MDIO_MODULE: u32 = 1;
pub const CONFIG_ATA_GENERIC: u32 = 1;
pub const CONFIG_I2C_I801_MODULE: u32 = 1;
pub const CONFIG_CPU_SUP_ZHAOXIN: u32 = 1;
pub const CONFIG_KS8842_MODULE: u32 = 1;
pub const CONFIG_SQUASHFS_XZ: u32 = 1;
pub const CONFIG_SCHED_DEBUG: u32 = 1;
pub const CONFIG_INTEL_PLR_TPMI_MODULE: u32 = 1;
pub const CONFIG_SCSI_SMARTPQI_MODULE: u32 = 1;
pub const CONFIG_PPP_ASYNC_MODULE: u32 = 1;
pub const CONFIG_S2IO_MODULE: u32 = 1;
pub const CONFIG_OSF_PARTITION: u32 = 1;
pub const CONFIG_DVB_MAX_ADAPTERS: u32 = 8;
pub const CONFIG_INPUT_PCAP_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_SIS: u32 = 1;
pub const CONFIG_BCMA_BLOCKIO: u32 = 1;
pub const CONFIG_V4L2_MEM2MEM_DEV_MODULE: u32 = 1;
pub const CONFIG_CMDLINE_PARTITION: u32 = 1;
pub const CONFIG_KERNEL_ZSTD: u32 = 1;
pub const CONFIG_LEDS_REGULATOR_MODULE: u32 = 1;
pub const CONFIG_SENSEAIR_SUNRISE_CO2_MODULE: u32 = 1;
pub const CONFIG_NOUVEAU_DEBUG_DEFAULT: u32 = 3;
pub const CONFIG_RTC_DRV_RS5C372_MODULE: u32 = 1;
pub const CONFIG_XFRM_AH_MODULE: u32 = 1;
pub const CONFIG_DVB_DIB8000_MODULE: u32 = 1;
pub const CONFIG_EFI_BOOTLOADER_CONTROL_MODULE: u32 = 1;
pub const CONFIG_INET_DIAG_MODULE: u32 = 1;
pub const CONFIG_FONT_6x10: u32 = 1;
pub const CONFIG_JOYSTICK_A3D_MODULE: u32 = 1;
pub const CONFIG_ATM_ENI_MODULE: u32 = 1;
pub const CONFIG_SMB_SERVER_SMBDIRECT: u32 = 1;
pub const CONFIG_INPUT_88PM80X_ONKEY_MODULE: u32 = 1;
pub const CONFIG_FS_IOMAP: u32 = 1;
pub const CONFIG_DRM_PANEL_AUO_A030JTN01_MODULE: u32 = 1;
pub const CONFIG_FB_IOMEM_HELPERS: u32 = 1;
pub const CONFIG_USB_R8A66597_MODULE: u32 = 1;
pub const CONFIG_NATIONAL_PHY_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MLXREG_FAN_MODULE: u32 = 1;
pub const CONFIG_DRM_QXL_MODULE: u32 = 1;
pub const CONFIG_INPUT_VIVALDIFMAP: u32 = 1;
pub const CONFIG_CHARGER_CROS_USBPD_MODULE: u32 = 1;
pub const CONFIG_SCSI_IMM_MODULE: u32 = 1;
pub const CONFIG_THERMAL_STATISTICS: u32 = 1;
pub const CONFIG_USB_GSPCA_DTCS033_MODULE: u32 = 1;
pub const CONFIG_IP_VS_PROTO_TCP: u32 = 1;
pub const CONFIG_USB_GL860_MODULE: u32 = 1;
pub const CONFIG_ALLOW_DEV_COREDUMP: u32 = 1;
pub const CONFIG_ASN1: u32 = 1;
pub const CONFIG_NF_NAT_PPTP_MODULE: u32 = 1;
pub const CONFIG_STAGING_MEDIA: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_AVS_MACH_ES8336_MODULE: u32 = 1;
pub const CONFIG_RAID_ATTRS_MODULE: u32 = 1;
pub const CONFIG_MMC_CQHCI_MODULE: u32 = 1;
pub const CONFIG_SND_ASIHPI_MODULE: u32 = 1;
pub const CONFIG_AD5624R_SPI_MODULE: u32 = 1;
pub const CONFIG_DEVTMPFS_MOUNT: u32 = 1;
pub const CONFIG_REGULATOR_BD9571MWV_MODULE: u32 = 1;
pub const CONFIG_NFC_ST21NFCA_I2C_MODULE: u32 = 1;
pub const CONFIG_HAVE_FTRACE_MCOUNT_RECORD: u32 = 1;
pub const CONFIG_FIREWIRE_NET_MODULE: u32 = 1;
pub const CONFIG_HID_LOGITECH_DJ_MODULE: u32 = 1;
pub const CONFIG_SND_PCMCIA: u32 = 1;
pub const CONFIG_LEDS_MT6370_FLASH_MODULE: u32 = 1;
pub const CONFIG_USB_SERIAL_EDGEPORT_TI_MODULE: u32 = 1;
pub const CONFIG_USB_MV_U3D_MODULE: u32 = 1;
pub const CONFIG_CONSOLE_LOGLEVEL_QUIET: u32 = 3;
pub const CONFIG_AD5592R_BASE_MODULE: u32 = 1;
pub const CONFIG_ACPI_PCC: u32 = 1;
pub const CONFIG_VIDEO_BT819_MODULE: u32 = 1;
pub const CONFIG_SERIO_GPIO_PS2_MODULE: u32 = 1;
pub const CONFIG_NETFILTER_XT_TARGET_NFLOG_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_DEV_IAA_CRYPTO_MODULE: u32 = 1;
pub const CONFIG_FB_VOODOO1_MODULE: u32 = 1;
pub const CONFIG_SCSI_EFCT_MODULE: u32 = 1;
pub const CONFIG_USB_ETH_MODULE: u32 = 1;
pub const CONFIG_XILINX_PR_DECOUPLER_MODULE: u32 = 1;
pub const CONFIG_INET_TUNNEL_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_NAU8822_MODULE: u32 = 1;
pub const CONFIG_XEN_SYS_HYPERVISOR: u32 = 1;
pub const CONFIG_W1_MASTER_AMD_AXI_MODULE: u32 = 1;
pub const CONFIG_VIDEO_WM8739_MODULE: u32 = 1;
pub const CONFIG_HTE: u32 = 1;
pub const CONFIG_SONYPI_COMPAT: u32 = 1;
pub const CONFIG_IEEE802154_CA8210_MODULE: u32 = 1;
pub const CONFIG_LZO_DECOMPRESS: u32 = 1;
pub const CONFIG_DM_UNSTRIPED_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_VSOCKETS_MODULE: u32 = 1;
pub const CONFIG_JUMP_LABEL: u32 = 1;
pub const CONFIG_GENERIC_SMP_IDLE_THREAD: u32 = 1;
pub const CONFIG_X86_MCELOG_LEGACY: u32 = 1;
pub const CONFIG_USB_ARCH_HAS_HCD: u32 = 1;
pub const CONFIG_GPIO_TPS65086_MODULE: u32 = 1;
pub const CONFIG_REED_SOLOMON_ENC8: u32 = 1;
pub const CONFIG_NET_EMATCH_STACK: u32 = 32;
pub const CONFIG_NF_NAT_FTP_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_AEGIS128_MODULE: u32 = 1;
pub const CONFIG_XEN_PVCALLS_FRONTEND_MODULE: u32 = 1;
pub const CONFIG_DPOT_DAC_MODULE: u32 = 1;
pub const CONFIG_LDM_PARTITION: u32 = 1;
pub const CONFIG_INPUT_WM831X_ON_MODULE: u32 = 1;
pub const CONFIG_EEPROM_EE1004_MODULE: u32 = 1;
pub const CONFIG_IAVF_MODULE: u32 = 1;
pub const CONFIG_UBSAN_BOUNDS_STRICT: u32 = 1;
pub const CONFIG_TOUCHSCREEN_AD7879_I2C_MODULE: u32 = 1;
pub const CONFIG_VIDEO_UDA1342_MODULE: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MIN: u32 = 8;
pub const CONFIG_NET_EMATCH_CANID_MODULE: u32 = 1;
pub const CONFIG_RTC_HCTOSYS: u32 = 1;
pub const CONFIG_EXTRA_FIRMWARE: &[u8; 1] = b"\0";
pub const CONFIG_IP_MULTICAST: u32 = 1;
pub const CONFIG_SCSI_PPA_MODULE: u32 = 1;
pub const CONFIG_LATENCYTOP: u32 = 1;
pub const CONFIG_FB_MATROX_MILLENIUM: u32 = 1;
pub const CONFIG_DVB_BUDGET_MODULE: u32 = 1;
pub const CONFIG_MFD_WM8994_MODULE: u32 = 1;
pub const CONFIG_SERIAL_MULTI_INSTANTIATE_MODULE: u32 = 1;
pub const CONFIG_NFC_ST_NCI_MODULE: u32 = 1;
pub const CONFIG_PNPACPI: u32 = 1;
pub const CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE: u32 = 1;
pub const CONFIG_LEDS_TPS6105X_MODULE: u32 = 1;
pub const CONFIG_DVB_STV0288_MODULE: u32 = 1;
pub const CONFIG_X86_MEM_ENCRYPT: u32 = 1;
pub const CONFIG_SCSI_UFSHCD_PCI_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX6650_MODULE: u32 = 1;
pub const CONFIG_KGDB_KDB: u32 = 1;
pub const CONFIG_LOCKUP_DETECTOR: u32 = 1;
pub const CONFIG_FUSE_FS: u32 = 1;
pub const CONFIG_DMAR_TABLE: u32 = 1;
pub const CONFIG_USB_STV06XX_MODULE: u32 = 1;
pub const CONFIG_KS0108_DELAY: u32 = 2;
pub const CONFIG_INTEL_ATOMISP2_LED_MODULE: u32 = 1;
pub const CONFIG_NFC_PN533_USB_MODULE: u32 = 1;
pub const CONFIG_SENSORS_LIS3LV02D_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_ADS7846_MODULE: u32 = 1;
pub const CONFIG_MFD_MC13XXX_I2C_MODULE: u32 = 1;
pub const CONFIG_SERIAL_8250_DWLIB: u32 = 1;
pub const CONFIG_MFD_TPS65912: u32 = 1;
pub const CONFIG_USB_F_ACM_MODULE: u32 = 1;
pub const CONFIG_KSZ884X_PCI_MODULE: u32 = 1;
pub const CONFIG_RTW88_CORE_MODULE: u32 = 1;
pub const CONFIG_PCI_EPF_MHI_MODULE: u32 = 1;
pub const CONFIG_PSTORE_RAM_MODULE: u32 = 1;
pub const CONFIG_EFI_CUSTOM_SSDT_OVERLAYS: u32 = 1;
pub const CONFIG_MEDIA_TUNER_TUA9001_MODULE: u32 = 1;
pub const CONFIG_X86_PAT: u32 = 1;
pub const CONFIG_BT_HCIUART_NOKIA_MODULE: u32 = 1;
pub const CONFIG_NOP_TRACER: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_INES_MODULE: u32 = 1;
pub const CONFIG_HAVE_KVM_DIRTY_RING_ACQ_REL: u32 = 1;
pub const CONFIG_MICREL_PHY_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_CACHE_INVALIDATE_MEMREGION: u32 = 1;
pub const CONFIG_BMA400_MODULE: u32 = 1;
pub const CONFIG_DRM_VRAM_HELPER_MODULE: u32 = 1;
pub const CONFIG_LZ4_COMPRESS_MODULE: u32 = 1;
pub const CONFIG_TOUCHSCREEN_USB_ETURBO: u32 = 1;
pub const CONFIG_NETFILTER_XT_MATCH_SOCKET_MODULE: u32 = 1;
pub const CONFIG_ARCH_HAS_FORCE_DMA_UNENCRYPTED: u32 = 1;
pub const CONFIG_SMB_SERVER_KERBEROS5: u32 = 1;
pub const CONFIG_IP_VS_LBLCR_MODULE: u32 = 1;
pub const CONFIG_HDLC_PPP_MODULE: u32 = 1;
pub const CONFIG_COMEDI_ADL_PCI8164_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_AW37503_MODULE: u32 = 1;
pub const CONFIG_BTREE: u32 = 1;
pub const CONFIG_PNFS_FLEXFILE_LAYOUT_MODULE: u32 = 1;
pub const CONFIG_IRSD200_MODULE: u32 = 1;
pub const CONFIG_EDAC_X38_MODULE: u32 = 1;
pub const CONFIG_VETH_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_CONEX_MODULE: u32 = 1;
pub const CONFIG_LEDS_MT6370_RGB_MODULE: u32 = 1;
pub const CONFIG_TLAN_MODULE: u32 = 1;
pub const CONFIG_RV_MON_WWNR: u32 = 1;
pub const CONFIG_IP_VS_NFCT: u32 = 1;
pub const CONFIG_NSM_MODULE: u32 = 1;
pub const CONFIG_INTEL_SPEED_SELECT_INTERFACE_MODULE: u32 = 1;
pub const CONFIG_GREYBUS_MODULE: u32 = 1;
pub const CONFIG_MAX5522_MODULE: u32 = 1;
pub const CONFIG_AD7303_MODULE: u32 = 1;
pub const CONFIG_DVB_CXD2099_MODULE: u32 = 1;
pub const CONFIG_SDIO_UART_MODULE: u32 = 1;
pub const CONFIG_SSB_B43_PCI_BRIDGE: u32 = 1;
pub const CONFIG_NET_SCH_PIE_MODULE: u32 = 1;
pub const CONFIG_UCLAMP_TASK_GROUP: u32 = 1;
pub const CONFIG_USB_SERIAL_MOS7720_MODULE: u32 = 1;
pub const CONFIG_NET_VENDOR_LITEX: u32 = 1;
pub const CONFIG_RTW88_8822CE_MODULE: u32 = 1;
pub const CONFIG_DVB_PLATFORM_DRIVERS: u32 = 1;
pub const CONFIG_VIDEO_V4L2_SUBDEV_API: u32 = 1;
pub const CONFIG_CEPH_LIB_USE_DNS_RESOLVER: u32 = 1;
pub const CONFIG_GPIO_TANGIER_MODULE: u32 = 1;
pub const CONFIG_SCSI_SAS_ATA: u32 = 1;
pub const CONFIG_INV_MPU6050_I2C_MODULE: u32 = 1;
pub const CONFIG_IKHEADERS_MODULE: u32 = 1;
pub const CONFIG_SENSORS_MAX31722_MODULE: u32 = 1;
pub const CONFIG_MICROCODE: u32 = 1;
pub const CONFIG_NVME_TARGET_FC_MODULE: u32 = 1;
pub const CONFIG_ARCH_USES_PG_UNCACHED: u32 = 1;
pub const CONFIG_SENSORS_MAX16065_MODULE: u32 = 1;
pub const CONFIG_VIRTIO_BALLOON: u32 = 1;
pub const CONFIG_BCMA_HOST_PCI_POSSIBLE: u32 = 1;
pub const CONFIG_VHOST_RING_MODULE: u32 = 1;
pub const CONFIG_CPU_ISOLATION: u32 = 1;
pub const CONFIG_GENERIC_CMOS_UPDATE: u32 = 1;
pub const CONFIG_SERIAL_8250_PCI: u32 = 1;
pub const CONFIG_NET_VENDOR_QLOGIC: u32 = 1;
pub const CONFIG_USB_GSPCA_SONIXJ_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8904_MODULE: u32 = 1;
pub const CONFIG_ZSWAP_ZPOOL_DEFAULT: &[u8; 5] = b"zbud\0";
pub const CONFIG_EXTCON_PALMAS_MODULE: u32 = 1;
pub const CONFIG_LWTUNNEL_BPF: u32 = 1;
pub const CONFIG_NET_ACT_CTINFO_MODULE: u32 = 1;
pub const CONFIG_DLM_MODULE: u32 = 1;
pub const CONFIG_SERIO: u32 = 1;
pub const CONFIG_CHR_DEV_SCH_MODULE: u32 = 1;
pub const CONFIG_SC92031_MODULE: u32 = 1;
pub const CONFIG_USB_GSPCA_OV519_MODULE: u32 = 1;
pub const CONFIG_NET_VRF_MODULE: u32 = 1;
pub const CONFIG_DRM_GEM_SHMEM_HELPER: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ATOMIC_RMW: u32 = 1;
pub const CONFIG_HARDLOCKUP_DETECTOR_PERF: u32 = 1;
pub const CONFIG_FB_TFT_ST7789V_MODULE: u32 = 1;
pub const CONFIG_DVB_TDA826X_MODULE: u32 = 1;
pub const CONFIG_FTRACE_MCOUNT_USE_CC: u32 = 1;
pub const CONFIG_NTB_TOOL_MODULE: u32 = 1;
pub const CONFIG_BT_INTEL_PCIE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_LIB_AES: u32 = 1;
pub const CONFIG_CRYPTO_TWOFISH_X86_64_3WAY_MODULE: u32 = 1;
pub const CONFIG_TYPEC_MUX_WCD939X_USBSS_MODULE: u32 = 1;
pub const CONFIG_FB_ARC_MODULE: u32 = 1;
pub const CONFIG_HYPERV_VSOCKETS_MODULE: u32 = 1;
pub const CONFIG_BMI160_SPI_MODULE: u32 = 1;
pub const CONFIG_SND_GINA24_MODULE: u32 = 1;
pub const CONFIG_CROS_USBPD_LOGGER_MODULE: u32 = 1;
pub const CONFIG_MLX5_VDPA_NET_MODULE: u32 = 1;
pub const CONFIG_REGULATOR_SY7636A_MODULE: u32 = 1;
pub const CONFIG_NF_LOG_SYSLOG_MODULE: u32 = 1;
pub const CONFIG_LTRF216A_MODULE: u32 = 1;
pub const CONFIG_USB_OHCI_HCD: u32 = 1;
pub const CONFIG_PATA_LEGACY_MODULE: u32 = 1;
pub const CONFIG_VFIO_VIRQFD: u32 = 1;
pub const CONFIG_HSA_AMD_P2P: u32 = 1;
pub const CONFIG_BMA400_I2C_MODULE: u32 = 1;
pub const CONFIG_FB_IOMEM_FOPS: u32 = 1;
pub const CONFIG_FW_CACHE: u32 = 1;
pub const CONFIG_AGP_VIA: u32 = 1;
pub const CONFIG_REGMAP_I2C: u32 = 1;
pub const CONFIG_STMMAC_PLATFORM_MODULE: u32 = 1;
pub const CONFIG_IP_NF_TARGET_REDIRECT_MODULE: u32 = 1;
pub const CONFIG_MTD_MTDRAM_MODULE: u32 = 1;
pub const CONFIG_HID_TOPRE_MODULE: u32 = 1;
pub const CONFIG_SENSORS_ABITUGURU3_MODULE: u32 = 1;
pub const CONFIG_SCSI_MPT2SAS_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_WM8731_SPI_MODULE: u32 = 1;
pub const CONFIG_MMC_SDHCI_MODULE: u32 = 1;
pub const CONFIG_IOMMUFD_DRIVER: u32 = 1;
pub const CONFIG_PRINTK: u32 = 1;
pub const CONFIG_SND_SOC_INTEL_KBL_MODULE: u32 = 1;
pub const CONFIG_LEDS_TRIGGER_DISK: u32 = 1;
pub const CONFIG_FIREWIRE_MODULE: u32 = 1;
pub const CONFIG_MTD_NAND_DENALI_MODULE: u32 = 1;
pub const CONFIG_DM_SWITCH_MODULE: u32 = 1;
pub const CONFIG_VIDEO_EM28XX_DVB_MODULE: u32 = 1;
pub const CONFIG_DRM_I915_FORCE_PROBE: &[u8; 1] = b"\0";
pub const CONFIG_NETLABEL: u32 = 1;
pub const CONFIG_PINCTRL_CS42L43_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_MAX9860_MODULE: u32 = 1;
pub const CONFIG_PCI_STUB_MODULE: u32 = 1;
pub const CONFIG_LEDS_CHT_WCOVE_MODULE: u32 = 1;
pub const CONFIG_CRYPTO_RMD160_MODULE: u32 = 1;
pub const CONFIG_COMEDI_PCL726_MODULE: u32 = 1;
pub const CONFIG_UEVENT_HELPER_PATH: &[u8; 1] = b"\0";
pub const CONFIG_INTEL_TH_MSU_MODULE: u32 = 1;
pub const CONFIG_RTC_DRV_88PM80X_MODULE: u32 = 1;
pub const CONFIG_HAVE_STATIC_CALL: u32 = 1;
pub const CONFIG_USB_NET_CDC_NCM_MODULE: u32 = 1;
pub const CONFIG_AGP_INTEL: u32 = 1;
pub const CONFIG_CC_VERSION_TEXT: &[u8; 39] = b"gcc-14 (Ubuntu 14.2.0-4ubuntu2) 14.2.0\0";
pub const CONFIG_TOUCHSCREEN_BU21013_MODULE: u32 = 1;
pub const CONFIG_EQUALIZER_MODULE: u32 = 1;
pub const CONFIG_RADIO_WL128X_MODULE: u32 = 1;
pub const CONFIG_INTEL_ISH_FIRMWARE_DOWNLOADER_MODULE: u32 = 1;
pub const CONFIG_VIDEO_IVTV_MODULE: u32 = 1;
pub const CONFIG_DVB_BUDGET_AV_MODULE: u32 = 1;
pub const CONFIG_IP6_NF_MATCH_SRH_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_NAU8821_MODULE: u32 = 1;
pub const CONFIG_BINFMT_ELF: u32 = 1;
pub const CONFIG_BLK_DEV_RNBD: u32 = 1;
pub const CONFIG_HIGH_RES_TIMERS: u32 = 1;
pub const CONFIG_I2C_SMBUS_MODULE: u32 = 1;
pub const CONFIG_DEBUG_FS_ALLOW_ALL: u32 = 1;
pub const CONFIG_NULL_TTY_MODULE: u32 = 1;
pub const CONFIG_QED_RDMA: u32 = 1;
pub const CONFIG_HAVE_SAMPLE_FTRACE_DIRECT_MULTI: u32 = 1;
pub const CONFIG_TI_TMAG5273_MODULE: u32 = 1;
pub const CONFIG_WIREGUARD_MODULE: u32 = 1;
pub const CONFIG_MEMFD_CREATE: u32 = 1;
pub const CONFIG_FPGA_MGR_MICROCHIP_SPI_MODULE: u32 = 1;
pub const CONFIG_FB_TFT_SSD1351_MODULE: u32 = 1;
pub const CONFIG_HDMI_LPE_AUDIO_MODULE: u32 = 1;
pub const CONFIG_SND_SOC_RT715_SDCA_SDW_MODULE: u32 = 1;
pub const CONFIG_FXLS8962AF_MODULE: u32 = 1;
pub const CONFIG_USB_HSIC_USB3503_MODULE: u32 = 1;
pub const CONFIG_GPIO_DA9055_MODULE: u32 = 1;
pub const CONFIG_SENSORS_HMC5843_I2C_MODULE: u32 = 1;
pub const CONFIG_DA9055_WATCHDOG_MODULE: u32 = 1;
pub const CONFIG_WIZNET_W5100_SPI_MODULE: u32 = 1;
pub const CONFIG_DRM_AMD_DC_SI: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const KASAN_ABI_VERSION: u32 = 5;
pub const ASM_INPUT_G: &[u8; 3] = b"ir\0";
pub const ASM_INPUT_RM: &[u8; 2] = b"r\0";
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const BITS_PER_LONG: u32 = 64;
pub const BITS_PER_LONG_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const KCSAN_ACCESS_WRITE: u32 = 1;
pub const KCSAN_ACCESS_COMPOUND: u32 = 2;
pub const KCSAN_ACCESS_ATOMIC: u32 = 4;
pub const KCSAN_ACCESS_ASSERT: u32 = 8;
pub const KCSAN_ACCESS_SCOPED: u32 = 16;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const MAX_ERRNO: u32 = 4095;
pub const ERESTARTSYS: u32 = 512;
pub const ERESTARTNOINTR: u32 = 513;
pub const ERESTARTNOHAND: u32 = 514;
pub const ENOIOCTLCMD: u32 = 515;
pub const ERESTART_RESTARTBLOCK: u32 = 516;
pub const EPROBE_DEFER: u32 = 517;
pub const EOPENSTALE: u32 = 518;
pub const ENOPARAM: u32 = 519;
pub const EBADHANDLE: u32 = 521;
pub const ENOTSYNC: u32 = 522;
pub const EBADCOOKIE: u32 = 523;
pub const ENOTSUPP: u32 = 524;
pub const ETOOSMALL: u32 = 525;
pub const ESERVERFAULT: u32 = 526;
pub const EBADTYPE: u32 = 527;
pub const EJUKEBOX: u32 = 528;
pub const EIOCBQUEUED: u32 = 529;
pub const ERECALLCONFLICT: u32 = 530;
pub const ENOGRACE: u32 = 531;
pub const SI_LOAD_SHIFT: u32 = 16;
pub const HAS_KERNEL_IBT: u32 = 0;
pub const ENDBR_INSN_SIZE: u32 = 0;
pub const ASM_RET: &[u8; 25] = b"jmp __x86_return_thunk\n\t\0";
pub const L1_CACHE_SHIFT: u32 = 6;
pub const L1_CACHE_BYTES: u32 = 64;
pub const INTERNODE_CACHE_SHIFT: u32 = 6;
pub const INTERNODE_CACHE_BYTES: u32 = 64;
pub const SMP_CACHE_BYTES: u32 = 64;
pub const EX_DATA_REG_SHIFT: u32 = 8;
pub const EX_DATA_FLAG_SHIFT: u32 = 12;
pub const EX_DATA_IMM_SHIFT: u32 = 16;
pub const EX_TYPE_NONE: u32 = 0;
pub const EX_TYPE_DEFAULT: u32 = 1;
pub const EX_TYPE_FAULT: u32 = 2;
pub const EX_TYPE_UACCESS: u32 = 3;
pub const EX_TYPE_CLEAR_FS: u32 = 5;
pub const EX_TYPE_FPU_RESTORE: u32 = 6;
pub const EX_TYPE_BPF: u32 = 7;
pub const EX_TYPE_WRMSR: u32 = 8;
pub const EX_TYPE_RDMSR: u32 = 9;
pub const EX_TYPE_WRMSR_SAFE: u32 = 10;
pub const EX_TYPE_RDMSR_SAFE: u32 = 11;
pub const EX_TYPE_WRMSR_IN_MCE: u32 = 12;
pub const EX_TYPE_RDMSR_IN_MCE: u32 = 13;
pub const EX_TYPE_DEFAULT_MCE_SAFE: u32 = 14;
pub const EX_TYPE_FAULT_MCE_SAFE: u32 = 15;
pub const EX_TYPE_POP_REG: u32 = 16;
pub const EX_TYPE_IMM_REG: u32 = 17;
pub const EX_TYPE_FAULT_SGX: u32 = 18;
pub const EX_TYPE_UCOPY_LEN: u32 = 19;
pub const EX_TYPE_ZEROPAD: u32 = 20;
pub const EX_TYPE_ERETU: u32 = 21;
pub const DEFINE_EXTABLE_TYPE_REG : & [u8 ; 533] = b".macro extable_type_reg type:req reg:req\n.set .Lfound, 0\n.set .Lregnr, 0\n.irp rs,rax,rcx,rdx,rbx,rsp,rbp,rsi,rdi,r8,r9,r10,r11,r12,r13,r14,r15\n.ifc \\reg, %%\\rs\n.set .Lfound, .Lfound+1\n.long \\type + (.Lregnr << 8)\n.endif\n.set .Lregnr, .Lregnr+1\n.endr\n.set .Lregnr, 0\n.irp rs,eax,ecx,edx,ebx,esp,ebp,esi,edi,r8d,r9d,r10d,r11d,r12d,r13d,r14d,r15d\n.ifc \\reg, %%\\rs\n.set .Lfound, .Lfound+1\n.long \\type + (.Lregnr << 8)\n.endif\n.set .Lregnr, .Lregnr+1\n.endr\n.if (.Lfound != 1)\n.error \"extable_type_reg: bad register argument\"\n.endif\n.endm\n\0" ;
pub const UNDEFINE_EXTABLE_TYPE_REG: &[u8; 26] = b".purgem extable_type_reg\n\0";
pub const __percpu_prefix: &[u8; 1] = b"\0";
pub const NR_CPUS: u32 = 8192;
pub const MIN_THREADS_LEFT_FOR_ROOT: u32 = 4;
pub const PIDS_PER_CPU_DEFAULT: u32 = 1024;
pub const PIDS_PER_CPU_MIN: u32 = 8;
pub const PER_CPU_SHARED_ALIGNED_SECTION: &[u8; 17] = b"..shared_aligned\0";
pub const PER_CPU_ALIGNED_SECTION: &[u8; 17] = b"..shared_aligned\0";
pub const PER_CPU_FIRST_SECTION: &[u8; 8] = b"..first\0";
pub const PER_CPU_BASE_SECTION: &[u8; 14] = b".data..percpu\0";
pub const PAGE_POISON: u32 = 170;
pub const SLUB_RED_INACTIVE: u32 = 187;
pub const SLUB_RED_ACTIVE: u32 = 204;
pub const POISON_INUSE: u32 = 90;
pub const POISON_FREE: u32 = 107;
pub const POISON_END: u32 = 165;
pub const POISON_FREE_INITMEM: u32 = 204;
pub const JBD_POISON_FREE: u32 = 91;
pub const JBD2_POISON_FREE: u32 = 92;
pub const POOL_POISON_FREED: u32 = 167;
pub const POOL_POISON_ALLOCATED: u32 = 169;
pub const ATM_POISON_FREE: u32 = 18;
pub const ATM_POISON: u32 = 3735928559;
pub const MUTEX_DEBUG_INIT: u32 = 17;
pub const MUTEX_DEBUG_FREE: u32 = 34;
pub const KEY_DESTROY: u32 = 189;
pub const ALT_FLAGS_SHIFT: u32 = 16;
pub const ALT_FLAG_NOT: u32 = 1;
pub const ALT_FLAG_DIRECT_CALL: u32 = 2;
pub const LOCK_PREFIX_HERE: &[u8; 70] =
    b".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\0";
pub const LOCK_PREFIX: &[u8; 78] =
    b".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; \0";
pub const ANNOTATE_IGNORE_ALTERNATIVE: &[u8; 67] =
    b"999:\n\t.pushsection .discard.ignore_alts\n\t.long 999b\n\t.popsection\n\t\0";
pub const ALT_CALL_INSTR: &[u8; 14] = b"call BUG_func\0";
pub const alt_slen: &[u8; 10] = b"772b-771b\0";
pub const alt_total_slen: &[u8; 10] = b"773b-771b\0";
pub const alt_rlen: &[u8; 10] = b"775f-774f\0";
pub const BYTES_NOP1: u32 = 144;
pub const ASM_NOP_MAX: u32 = 11;
pub const _Q_LOCKED_OFFSET: u32 = 0;
pub const _Q_LOCKED_BITS: u32 = 8;
pub const _Q_PENDING_OFFSET: u32 = 8;
pub const _Q_PENDING_BITS: u32 = 8;
pub const _Q_TAIL_IDX_OFFSET: u32 = 16;
pub const _Q_TAIL_IDX_BITS: u32 = 2;
pub const _Q_TAIL_CPU_OFFSET: u32 = 18;
pub const _Q_TAIL_CPU_BITS: u32 = 14;
pub const _Q_TAIL_OFFSET: u32 = 16;
pub const _Q_LOCKED_VAL: u32 = 1;
pub const _Q_PENDING_VAL: u32 = 256;
pub const MAX_LOCKDEP_SUBCLASSES: u32 = 8;
pub const SPINLOCK_MAGIC: u32 = 3735899821;
pub const RWLOCK_MAGIC: u32 = 3736018669;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const UINT_MAX: i32 = -1;
pub const ULONG_MAX: i32 = -1;
pub const ULLONG_MAX: i32 = -1;
pub const UINTPTR_MAX: i32 = -1;
pub const BITS_PER_BYTE: u32 = 8;
pub const _BITOPS_LONG_SHIFT: u32 = 6;
pub const NEED_3DNOW: u32 = 0;
pub const NEED_MOVBE: u32 = 0;
pub const NEED_PSE: u32 = 0;
pub const NEED_PGE: u32 = 0;
pub const REQUIRED_MASK2: u32 = 0;
pub const REQUIRED_MASK4: u32 = 0;
pub const REQUIRED_MASK5: u32 = 0;
pub const REQUIRED_MASK6: u32 = 0;
pub const REQUIRED_MASK7: u32 = 0;
pub const REQUIRED_MASK8: u32 = 0;
pub const REQUIRED_MASK9: u32 = 0;
pub const REQUIRED_MASK10: u32 = 0;
pub const REQUIRED_MASK11: u32 = 0;
pub const REQUIRED_MASK12: u32 = 0;
pub const REQUIRED_MASK13: u32 = 0;
pub const REQUIRED_MASK14: u32 = 0;
pub const REQUIRED_MASK15: u32 = 0;
pub const REQUIRED_MASK16: u32 = 0;
pub const REQUIRED_MASK17: u32 = 0;
pub const REQUIRED_MASK18: u32 = 0;
pub const REQUIRED_MASK19: u32 = 0;
pub const REQUIRED_MASK20: u32 = 0;
pub const REQUIRED_MASK21: u32 = 0;
pub const DISABLE_UMIP: u32 = 0;
pub const DISABLE_PCID: u32 = 0;
pub const DISABLE_PKU: u32 = 0;
pub const DISABLE_OSPKE: u32 = 0;
pub const DISABLE_LA57: u32 = 0;
pub const DISABLE_PTI: u32 = 0;
pub const DISABLE_RETPOLINE: u32 = 0;
pub const DISABLE_RETHUNK: u32 = 0;
pub const DISABLE_UNRET: u32 = 0;
pub const DISABLE_CALL_DEPTH_TRACKING: u32 = 0;
pub const DISABLE_LAM: u32 = 0;
pub const DISABLE_ENQCMD: u32 = 0;
pub const DISABLE_SGX: u32 = 0;
pub const DISABLE_XENPV: u32 = 0;
pub const DISABLE_TDX_GUEST: u32 = 0;
pub const DISABLE_USER_SHSTK: u32 = 0;
pub const DISABLE_FRED: u32 = 0;
pub const DISABLE_SEV_SNP: u32 = 0;
pub const DISABLED_MASK1: u32 = 0;
pub const DISABLED_MASK2: u32 = 0;
pub const DISABLED_MASK4: u32 = 0;
pub const DISABLED_MASK5: u32 = 0;
pub const DISABLED_MASK6: u32 = 0;
pub const DISABLED_MASK7: u32 = 0;
pub const DISABLED_MASK8: u32 = 0;
pub const DISABLED_MASK9: u32 = 0;
pub const DISABLED_MASK10: u32 = 0;
pub const DISABLED_MASK11: u32 = 0;
pub const DISABLED_MASK12: u32 = 0;
pub const DISABLED_MASK13: u32 = 0;
pub const DISABLED_MASK14: u32 = 0;
pub const DISABLED_MASK15: u32 = 0;
pub const DISABLED_MASK16: u32 = 0;
pub const DISABLED_MASK17: u32 = 0;
pub const DISABLED_MASK19: u32 = 0;
pub const DISABLED_MASK20: u32 = 0;
pub const DISABLED_MASK21: u32 = 0;
pub const NCAPINTS: u32 = 22;
pub const NBUGINTS: u32 = 2;
pub const X86_FEATURE_FPU: u32 = 0;
pub const X86_FEATURE_VME: u32 = 1;
pub const X86_FEATURE_DE: u32 = 2;
pub const X86_FEATURE_PSE: u32 = 3;
pub const X86_FEATURE_TSC: u32 = 4;
pub const X86_FEATURE_MSR: u32 = 5;
pub const X86_FEATURE_PAE: u32 = 6;
pub const X86_FEATURE_MCE: u32 = 7;
pub const X86_FEATURE_CX8: u32 = 8;
pub const X86_FEATURE_APIC: u32 = 9;
pub const X86_FEATURE_SEP: u32 = 11;
pub const X86_FEATURE_MTRR: u32 = 12;
pub const X86_FEATURE_PGE: u32 = 13;
pub const X86_FEATURE_MCA: u32 = 14;
pub const X86_FEATURE_CMOV: u32 = 15;
pub const X86_FEATURE_PAT: u32 = 16;
pub const X86_FEATURE_PSE36: u32 = 17;
pub const X86_FEATURE_PN: u32 = 18;
pub const X86_FEATURE_CLFLUSH: u32 = 19;
pub const X86_FEATURE_DS: u32 = 21;
pub const X86_FEATURE_ACPI: u32 = 22;
pub const X86_FEATURE_MMX: u32 = 23;
pub const X86_FEATURE_FXSR: u32 = 24;
pub const X86_FEATURE_XMM: u32 = 25;
pub const X86_FEATURE_XMM2: u32 = 26;
pub const X86_FEATURE_SELFSNOOP: u32 = 27;
pub const X86_FEATURE_HT: u32 = 28;
pub const X86_FEATURE_ACC: u32 = 29;
pub const X86_FEATURE_IA64: u32 = 30;
pub const X86_FEATURE_PBE: u32 = 31;
pub const X86_FEATURE_SYSCALL: u32 = 43;
pub const X86_FEATURE_MP: u32 = 51;
pub const X86_FEATURE_NX: u32 = 52;
pub const X86_FEATURE_MMXEXT: u32 = 54;
pub const X86_FEATURE_FXSR_OPT: u32 = 57;
pub const X86_FEATURE_GBPAGES: u32 = 58;
pub const X86_FEATURE_RDTSCP: u32 = 59;
pub const X86_FEATURE_LM: u32 = 61;
pub const X86_FEATURE_3DNOWEXT: u32 = 62;
pub const X86_FEATURE_3DNOW: u32 = 63;
pub const X86_FEATURE_RECOVERY: u32 = 64;
pub const X86_FEATURE_LONGRUN: u32 = 65;
pub const X86_FEATURE_LRTI: u32 = 67;
pub const X86_FEATURE_CXMMX: u32 = 96;
pub const X86_FEATURE_K6_MTRR: u32 = 97;
pub const X86_FEATURE_CYRIX_ARR: u32 = 98;
pub const X86_FEATURE_CENTAUR_MCR: u32 = 99;
pub const X86_FEATURE_K8: u32 = 100;
pub const X86_FEATURE_ZEN5: u32 = 101;
pub const X86_FEATURE_P3: u32 = 102;
pub const X86_FEATURE_P4: u32 = 103;
pub const X86_FEATURE_CONSTANT_TSC: u32 = 104;
pub const X86_FEATURE_UP: u32 = 105;
pub const X86_FEATURE_ART: u32 = 106;
pub const X86_FEATURE_ARCH_PERFMON: u32 = 107;
pub const X86_FEATURE_PEBS: u32 = 108;
pub const X86_FEATURE_BTS: u32 = 109;
pub const X86_FEATURE_SYSCALL32: u32 = 110;
pub const X86_FEATURE_SYSENTER32: u32 = 111;
pub const X86_FEATURE_REP_GOOD: u32 = 112;
pub const X86_FEATURE_AMD_LBR_V2: u32 = 113;
pub const X86_FEATURE_CLEAR_CPU_BUF: u32 = 114;
pub const X86_FEATURE_ACC_POWER: u32 = 115;
pub const X86_FEATURE_NOPL: u32 = 116;
pub const X86_FEATURE_ALWAYS: u32 = 117;
pub const X86_FEATURE_XTOPOLOGY: u32 = 118;
pub const X86_FEATURE_TSC_RELIABLE: u32 = 119;
pub const X86_FEATURE_NONSTOP_TSC: u32 = 120;
pub const X86_FEATURE_CPUID: u32 = 121;
pub const X86_FEATURE_EXTD_APICID: u32 = 122;
pub const X86_FEATURE_AMD_DCM: u32 = 123;
pub const X86_FEATURE_APERFMPERF: u32 = 124;
pub const X86_FEATURE_RAPL: u32 = 125;
pub const X86_FEATURE_NONSTOP_TSC_S3: u32 = 126;
pub const X86_FEATURE_TSC_KNOWN_FREQ: u32 = 127;
pub const X86_FEATURE_XMM3: u32 = 128;
pub const X86_FEATURE_PCLMULQDQ: u32 = 129;
pub const X86_FEATURE_DTES64: u32 = 130;
pub const X86_FEATURE_MWAIT: u32 = 131;
pub const X86_FEATURE_DSCPL: u32 = 132;
pub const X86_FEATURE_VMX: u32 = 133;
pub const X86_FEATURE_SMX: u32 = 134;
pub const X86_FEATURE_EST: u32 = 135;
pub const X86_FEATURE_TM2: u32 = 136;
pub const X86_FEATURE_SSSE3: u32 = 137;
pub const X86_FEATURE_CID: u32 = 138;
pub const X86_FEATURE_SDBG: u32 = 139;
pub const X86_FEATURE_FMA: u32 = 140;
pub const X86_FEATURE_CX16: u32 = 141;
pub const X86_FEATURE_XTPR: u32 = 142;
pub const X86_FEATURE_PDCM: u32 = 143;
pub const X86_FEATURE_PCID: u32 = 145;
pub const X86_FEATURE_DCA: u32 = 146;
pub const X86_FEATURE_XMM4_1: u32 = 147;
pub const X86_FEATURE_XMM4_2: u32 = 148;
pub const X86_FEATURE_X2APIC: u32 = 149;
pub const X86_FEATURE_MOVBE: u32 = 150;
pub const X86_FEATURE_POPCNT: u32 = 151;
pub const X86_FEATURE_TSC_DEADLINE_TIMER: u32 = 152;
pub const X86_FEATURE_AES: u32 = 153;
pub const X86_FEATURE_XSAVE: u32 = 154;
pub const X86_FEATURE_OSXSAVE: u32 = 155;
pub const X86_FEATURE_AVX: u32 = 156;
pub const X86_FEATURE_F16C: u32 = 157;
pub const X86_FEATURE_RDRAND: u32 = 158;
pub const X86_FEATURE_HYPERVISOR: u32 = 159;
pub const X86_FEATURE_XSTORE: u32 = 162;
pub const X86_FEATURE_XSTORE_EN: u32 = 163;
pub const X86_FEATURE_XCRYPT: u32 = 166;
pub const X86_FEATURE_XCRYPT_EN: u32 = 167;
pub const X86_FEATURE_ACE2: u32 = 168;
pub const X86_FEATURE_ACE2_EN: u32 = 169;
pub const X86_FEATURE_PHE: u32 = 170;
pub const X86_FEATURE_PHE_EN: u32 = 171;
pub const X86_FEATURE_PMM: u32 = 172;
pub const X86_FEATURE_PMM_EN: u32 = 173;
pub const X86_FEATURE_LAHF_LM: u32 = 192;
pub const X86_FEATURE_CMP_LEGACY: u32 = 193;
pub const X86_FEATURE_SVM: u32 = 194;
pub const X86_FEATURE_EXTAPIC: u32 = 195;
pub const X86_FEATURE_CR8_LEGACY: u32 = 196;
pub const X86_FEATURE_ABM: u32 = 197;
pub const X86_FEATURE_SSE4A: u32 = 198;
pub const X86_FEATURE_MISALIGNSSE: u32 = 199;
pub const X86_FEATURE_3DNOWPREFETCH: u32 = 200;
pub const X86_FEATURE_OSVW: u32 = 201;
pub const X86_FEATURE_IBS: u32 = 202;
pub const X86_FEATURE_XOP: u32 = 203;
pub const X86_FEATURE_SKINIT: u32 = 204;
pub const X86_FEATURE_WDT: u32 = 205;
pub const X86_FEATURE_LWP: u32 = 207;
pub const X86_FEATURE_FMA4: u32 = 208;
pub const X86_FEATURE_TCE: u32 = 209;
pub const X86_FEATURE_NODEID_MSR: u32 = 211;
pub const X86_FEATURE_TBM: u32 = 213;
pub const X86_FEATURE_TOPOEXT: u32 = 214;
pub const X86_FEATURE_PERFCTR_CORE: u32 = 215;
pub const X86_FEATURE_PERFCTR_NB: u32 = 216;
pub const X86_FEATURE_BPEXT: u32 = 218;
pub const X86_FEATURE_PTSC: u32 = 219;
pub const X86_FEATURE_PERFCTR_LLC: u32 = 220;
pub const X86_FEATURE_MWAITX: u32 = 221;
pub const X86_FEATURE_RING3MWAIT: u32 = 224;
pub const X86_FEATURE_CPUID_FAULT: u32 = 225;
pub const X86_FEATURE_CPB: u32 = 226;
pub const X86_FEATURE_EPB: u32 = 227;
pub const X86_FEATURE_CAT_L3: u32 = 228;
pub const X86_FEATURE_CAT_L2: u32 = 229;
pub const X86_FEATURE_CDP_L3: u32 = 230;
pub const X86_FEATURE_TDX_HOST_PLATFORM: u32 = 231;
pub const X86_FEATURE_HW_PSTATE: u32 = 232;
pub const X86_FEATURE_PROC_FEEDBACK: u32 = 233;
pub const X86_FEATURE_XCOMPACTED: u32 = 234;
pub const X86_FEATURE_PTI: u32 = 235;
pub const X86_FEATURE_KERNEL_IBRS: u32 = 236;
pub const X86_FEATURE_RSB_VMEXIT: u32 = 237;
pub const X86_FEATURE_INTEL_PPIN: u32 = 238;
pub const X86_FEATURE_CDP_L2: u32 = 239;
pub const X86_FEATURE_MSR_SPEC_CTRL: u32 = 240;
pub const X86_FEATURE_SSBD: u32 = 241;
pub const X86_FEATURE_MBA: u32 = 242;
pub const X86_FEATURE_RSB_CTXSW: u32 = 243;
pub const X86_FEATURE_PERFMON_V2: u32 = 244;
pub const X86_FEATURE_USE_IBPB: u32 = 245;
pub const X86_FEATURE_USE_IBRS_FW: u32 = 246;
pub const X86_FEATURE_SPEC_STORE_BYPASS_DISABLE: u32 = 247;
pub const X86_FEATURE_LS_CFG_SSBD: u32 = 248;
pub const X86_FEATURE_IBRS: u32 = 249;
pub const X86_FEATURE_IBPB: u32 = 250;
pub const X86_FEATURE_STIBP: u32 = 251;
pub const X86_FEATURE_ZEN: u32 = 252;
pub const X86_FEATURE_L1TF_PTEINV: u32 = 253;
pub const X86_FEATURE_IBRS_ENHANCED: u32 = 254;
pub const X86_FEATURE_MSR_IA32_FEAT_CTL: u32 = 255;
pub const X86_FEATURE_TPR_SHADOW: u32 = 256;
pub const X86_FEATURE_FLEXPRIORITY: u32 = 257;
pub const X86_FEATURE_EPT: u32 = 258;
pub const X86_FEATURE_VPID: u32 = 259;
pub const X86_FEATURE_VMMCALL: u32 = 271;
pub const X86_FEATURE_XENPV: u32 = 272;
pub const X86_FEATURE_EPT_AD: u32 = 273;
pub const X86_FEATURE_VMCALL: u32 = 274;
pub const X86_FEATURE_VMW_VMMCALL: u32 = 275;
pub const X86_FEATURE_PVUNLOCK: u32 = 276;
pub const X86_FEATURE_VCPUPREEMPT: u32 = 277;
pub const X86_FEATURE_TDX_GUEST: u32 = 278;
pub const X86_FEATURE_FSGSBASE: u32 = 288;
pub const X86_FEATURE_TSC_ADJUST: u32 = 289;
pub const X86_FEATURE_SGX: u32 = 290;
pub const X86_FEATURE_BMI1: u32 = 291;
pub const X86_FEATURE_HLE: u32 = 292;
pub const X86_FEATURE_AVX2: u32 = 293;
pub const X86_FEATURE_FDP_EXCPTN_ONLY: u32 = 294;
pub const X86_FEATURE_SMEP: u32 = 295;
pub const X86_FEATURE_BMI2: u32 = 296;
pub const X86_FEATURE_ERMS: u32 = 297;
pub const X86_FEATURE_INVPCID: u32 = 298;
pub const X86_FEATURE_RTM: u32 = 299;
pub const X86_FEATURE_CQM: u32 = 300;
pub const X86_FEATURE_ZERO_FCS_FDS: u32 = 301;
pub const X86_FEATURE_MPX: u32 = 302;
pub const X86_FEATURE_RDT_A: u32 = 303;
pub const X86_FEATURE_AVX512F: u32 = 304;
pub const X86_FEATURE_AVX512DQ: u32 = 305;
pub const X86_FEATURE_RDSEED: u32 = 306;
pub const X86_FEATURE_ADX: u32 = 307;
pub const X86_FEATURE_SMAP: u32 = 308;
pub const X86_FEATURE_AVX512IFMA: u32 = 309;
pub const X86_FEATURE_CLFLUSHOPT: u32 = 311;
pub const X86_FEATURE_CLWB: u32 = 312;
pub const X86_FEATURE_INTEL_PT: u32 = 313;
pub const X86_FEATURE_AVX512PF: u32 = 314;
pub const X86_FEATURE_AVX512ER: u32 = 315;
pub const X86_FEATURE_AVX512CD: u32 = 316;
pub const X86_FEATURE_SHA_NI: u32 = 317;
pub const X86_FEATURE_AVX512BW: u32 = 318;
pub const X86_FEATURE_AVX512VL: u32 = 319;
pub const X86_FEATURE_XSAVEOPT: u32 = 320;
pub const X86_FEATURE_XSAVEC: u32 = 321;
pub const X86_FEATURE_XGETBV1: u32 = 322;
pub const X86_FEATURE_XSAVES: u32 = 323;
pub const X86_FEATURE_XFD: u32 = 324;
pub const X86_FEATURE_CQM_LLC: u32 = 352;
pub const X86_FEATURE_CQM_OCCUP_LLC: u32 = 353;
pub const X86_FEATURE_CQM_MBM_TOTAL: u32 = 354;
pub const X86_FEATURE_CQM_MBM_LOCAL: u32 = 355;
pub const X86_FEATURE_FENCE_SWAPGS_USER: u32 = 356;
pub const X86_FEATURE_FENCE_SWAPGS_KERNEL: u32 = 357;
pub const X86_FEATURE_SPLIT_LOCK_DETECT: u32 = 358;
pub const X86_FEATURE_PER_THREAD_MBA: u32 = 359;
pub const X86_FEATURE_SGX1: u32 = 360;
pub const X86_FEATURE_SGX2: u32 = 361;
pub const X86_FEATURE_ENTRY_IBPB: u32 = 362;
pub const X86_FEATURE_RRSBA_CTRL: u32 = 363;
pub const X86_FEATURE_RETPOLINE: u32 = 364;
pub const X86_FEATURE_RETPOLINE_LFENCE: u32 = 365;
pub const X86_FEATURE_RETHUNK: u32 = 366;
pub const X86_FEATURE_UNRET: u32 = 367;
pub const X86_FEATURE_USE_IBPB_FW: u32 = 368;
pub const X86_FEATURE_RSB_VMEXIT_LITE: u32 = 369;
pub const X86_FEATURE_SGX_EDECCSSA: u32 = 370;
pub const X86_FEATURE_CALL_DEPTH: u32 = 371;
pub const X86_FEATURE_MSR_TSX_CTRL: u32 = 372;
pub const X86_FEATURE_SMBA: u32 = 373;
pub const X86_FEATURE_BMEC: u32 = 374;
pub const X86_FEATURE_USER_SHSTK: u32 = 375;
pub const X86_FEATURE_SRSO: u32 = 376;
pub const X86_FEATURE_SRSO_ALIAS: u32 = 377;
pub const X86_FEATURE_IBPB_ON_VMEXIT: u32 = 378;
pub const X86_FEATURE_APIC_MSRS_FENCE: u32 = 379;
pub const X86_FEATURE_ZEN2: u32 = 380;
pub const X86_FEATURE_ZEN3: u32 = 381;
pub const X86_FEATURE_ZEN4: u32 = 382;
pub const X86_FEATURE_ZEN1: u32 = 383;
pub const X86_FEATURE_AVX_VNNI: u32 = 388;
pub const X86_FEATURE_AVX512_BF16: u32 = 389;
pub const X86_FEATURE_CMPCCXADD: u32 = 391;
pub const X86_FEATURE_ARCH_PERFMON_EXT: u32 = 392;
pub const X86_FEATURE_FZRM: u32 = 394;
pub const X86_FEATURE_FSRS: u32 = 395;
pub const X86_FEATURE_FSRC: u32 = 396;
pub const X86_FEATURE_FRED: u32 = 401;
pub const X86_FEATURE_LKGS: u32 = 402;
pub const X86_FEATURE_WRMSRNS: u32 = 403;
pub const X86_FEATURE_AMX_FP16: u32 = 405;
pub const X86_FEATURE_AVX_IFMA: u32 = 407;
pub const X86_FEATURE_LAM: u32 = 410;
pub const X86_FEATURE_CLZERO: u32 = 416;
pub const X86_FEATURE_IRPERF: u32 = 417;
pub const X86_FEATURE_XSAVEERPTR: u32 = 418;
pub const X86_FEATURE_RDPRU: u32 = 420;
pub const X86_FEATURE_WBNOINVD: u32 = 425;
pub const X86_FEATURE_AMD_IBPB: u32 = 428;
pub const X86_FEATURE_AMD_IBRS: u32 = 430;
pub const X86_FEATURE_AMD_STIBP: u32 = 431;
pub const X86_FEATURE_AMD_STIBP_ALWAYS_ON: u32 = 433;
pub const X86_FEATURE_AMD_PPIN: u32 = 439;
pub const X86_FEATURE_AMD_SSBD: u32 = 440;
pub const X86_FEATURE_VIRT_SSBD: u32 = 441;
pub const X86_FEATURE_AMD_SSB_NO: u32 = 442;
pub const X86_FEATURE_CPPC: u32 = 443;
pub const X86_FEATURE_AMD_PSFD: u32 = 444;
pub const X86_FEATURE_BTC_NO: u32 = 445;
pub const X86_FEATURE_BRS: u32 = 447;
pub const X86_FEATURE_DTHERM: u32 = 448;
pub const X86_FEATURE_IDA: u32 = 449;
pub const X86_FEATURE_ARAT: u32 = 450;
pub const X86_FEATURE_PLN: u32 = 452;
pub const X86_FEATURE_PTS: u32 = 454;
pub const X86_FEATURE_HWP: u32 = 455;
pub const X86_FEATURE_HWP_NOTIFY: u32 = 456;
pub const X86_FEATURE_HWP_ACT_WINDOW: u32 = 457;
pub const X86_FEATURE_HWP_EPP: u32 = 458;
pub const X86_FEATURE_HWP_PKG_REQ: u32 = 459;
pub const X86_FEATURE_HWP_HIGHEST_PERF_CHANGE: u32 = 463;
pub const X86_FEATURE_HFI: u32 = 467;
pub const X86_FEATURE_NPT: u32 = 480;
pub const X86_FEATURE_LBRV: u32 = 481;
pub const X86_FEATURE_SVML: u32 = 482;
pub const X86_FEATURE_NRIPS: u32 = 483;
pub const X86_FEATURE_TSCRATEMSR: u32 = 484;
pub const X86_FEATURE_VMCBCLEAN: u32 = 485;
pub const X86_FEATURE_FLUSHBYASID: u32 = 486;
pub const X86_FEATURE_DECODEASSISTS: u32 = 487;
pub const X86_FEATURE_PAUSEFILTER: u32 = 490;
pub const X86_FEATURE_PFTHRESHOLD: u32 = 492;
pub const X86_FEATURE_AVIC: u32 = 493;
pub const X86_FEATURE_V_VMSAVE_VMLOAD: u32 = 495;
pub const X86_FEATURE_VGIF: u32 = 496;
pub const X86_FEATURE_X2AVIC: u32 = 498;
pub const X86_FEATURE_V_SPEC_CTRL: u32 = 500;
pub const X86_FEATURE_VNMI: u32 = 505;
pub const X86_FEATURE_SVME_ADDR_CHK: u32 = 508;
pub const X86_FEATURE_AVX512VBMI: u32 = 513;
pub const X86_FEATURE_UMIP: u32 = 514;
pub const X86_FEATURE_PKU: u32 = 515;
pub const X86_FEATURE_OSPKE: u32 = 516;
pub const X86_FEATURE_WAITPKG: u32 = 517;
pub const X86_FEATURE_AVX512_VBMI2: u32 = 518;
pub const X86_FEATURE_SHSTK: u32 = 519;
pub const X86_FEATURE_GFNI: u32 = 520;
pub const X86_FEATURE_VAES: u32 = 521;
pub const X86_FEATURE_VPCLMULQDQ: u32 = 522;
pub const X86_FEATURE_AVX512_VNNI: u32 = 523;
pub const X86_FEATURE_AVX512_BITALG: u32 = 524;
pub const X86_FEATURE_TME: u32 = 525;
pub const X86_FEATURE_AVX512_VPOPCNTDQ: u32 = 526;
pub const X86_FEATURE_LA57: u32 = 528;
pub const X86_FEATURE_RDPID: u32 = 534;
pub const X86_FEATURE_BUS_LOCK_DETECT: u32 = 536;
pub const X86_FEATURE_CLDEMOTE: u32 = 537;
pub const X86_FEATURE_MOVDIRI: u32 = 539;
pub const X86_FEATURE_MOVDIR64B: u32 = 540;
pub const X86_FEATURE_ENQCMD: u32 = 541;
pub const X86_FEATURE_SGX_LC: u32 = 542;
pub const X86_FEATURE_OVERFLOW_RECOV: u32 = 544;
pub const X86_FEATURE_SUCCOR: u32 = 545;
pub const X86_FEATURE_SMCA: u32 = 547;
pub const X86_FEATURE_AVX512_4VNNIW: u32 = 578;
pub const X86_FEATURE_AVX512_4FMAPS: u32 = 579;
pub const X86_FEATURE_FSRM: u32 = 580;
pub const X86_FEATURE_AVX512_VP2INTERSECT: u32 = 584;
pub const X86_FEATURE_SRBDS_CTRL: u32 = 585;
pub const X86_FEATURE_MD_CLEAR: u32 = 586;
pub const X86_FEATURE_RTM_ALWAYS_ABORT: u32 = 587;
pub const X86_FEATURE_TSX_FORCE_ABORT: u32 = 589;
pub const X86_FEATURE_SERIALIZE: u32 = 590;
pub const X86_FEATURE_HYBRID_CPU: u32 = 591;
pub const X86_FEATURE_TSXLDTRK: u32 = 592;
pub const X86_FEATURE_PCONFIG: u32 = 594;
pub const X86_FEATURE_ARCH_LBR: u32 = 595;
pub const X86_FEATURE_IBT: u32 = 596;
pub const X86_FEATURE_AMX_BF16: u32 = 598;
pub const X86_FEATURE_AVX512_FP16: u32 = 599;
pub const X86_FEATURE_AMX_TILE: u32 = 600;
pub const X86_FEATURE_AMX_INT8: u32 = 601;
pub const X86_FEATURE_SPEC_CTRL: u32 = 602;
pub const X86_FEATURE_INTEL_STIBP: u32 = 603;
pub const X86_FEATURE_FLUSH_L1D: u32 = 604;
pub const X86_FEATURE_ARCH_CAPABILITIES: u32 = 605;
pub const X86_FEATURE_CORE_CAPABILITIES: u32 = 606;
pub const X86_FEATURE_SPEC_CTRL_SSBD: u32 = 607;
pub const X86_FEATURE_SME: u32 = 608;
pub const X86_FEATURE_SEV: u32 = 609;
pub const X86_FEATURE_VM_PAGE_FLUSH: u32 = 610;
pub const X86_FEATURE_SEV_ES: u32 = 611;
pub const X86_FEATURE_SEV_SNP: u32 = 612;
pub const X86_FEATURE_V_TSC_AUX: u32 = 617;
pub const X86_FEATURE_SME_COHERENT: u32 = 618;
pub const X86_FEATURE_DEBUG_SWAP: u32 = 622;
pub const X86_FEATURE_SVSM: u32 = 636;
pub const X86_FEATURE_NO_NESTED_DATA_BP: u32 = 640;
pub const X86_FEATURE_WRMSR_XX_BASE_NS: u32 = 641;
pub const X86_FEATURE_LFENCE_RDTSC: u32 = 642;
pub const X86_FEATURE_NULL_SEL_CLR_BASE: u32 = 646;
pub const X86_FEATURE_AUTOIBRS: u32 = 648;
pub const X86_FEATURE_NO_SMM_CTL_MSR: u32 = 649;
pub const X86_FEATURE_SBPB: u32 = 667;
pub const X86_FEATURE_IBPB_BRTYPE: u32 = 668;
pub const X86_FEATURE_SRSO_NO: u32 = 669;
pub const X86_FEATURE_AMD_LBR_PMC_FREEZE: u32 = 672;
pub const X86_FEATURE_CLEAR_BHB_LOOP: u32 = 673;
pub const X86_FEATURE_BHI_CTRL: u32 = 674;
pub const X86_FEATURE_CLEAR_BHB_HW: u32 = 675;
pub const X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT: u32 = 676;
pub const X86_FEATURE_FAST_CPPC: u32 = 677;
pub const REG_IN: &[u8; 2] = b"D\0";
pub const REG_OUT: &[u8; 2] = b"a\0";
pub const BITOP_LE_SWIZZLE: u32 = 0;
pub const PANIC_CPU_INVALID: i32 = -1;
pub const TAINT_PROPRIETARY_MODULE: u32 = 0;
pub const TAINT_FORCED_MODULE: u32 = 1;
pub const TAINT_CPU_OUT_OF_SPEC: u32 = 2;
pub const TAINT_FORCED_RMMOD: u32 = 3;
pub const TAINT_MACHINE_CHECK: u32 = 4;
pub const TAINT_BAD_PAGE: u32 = 5;
pub const TAINT_USER: u32 = 6;
pub const TAINT_DIE: u32 = 7;
pub const TAINT_OVERRIDDEN_ACPI_TABLE: u32 = 8;
pub const TAINT_WARN: u32 = 9;
pub const TAINT_CRAP: u32 = 10;
pub const TAINT_FIRMWARE_WORKAROUND: u32 = 11;
pub const TAINT_OOT_MODULE: u32 = 12;
pub const TAINT_UNSIGNED_MODULE: u32 = 13;
pub const TAINT_SOFTLOCKUP: u32 = 14;
pub const TAINT_LIVEPATCH: u32 = 15;
pub const TAINT_AUX: u32 = 16;
pub const TAINT_RANDSTRUCT: u32 = 17;
pub const TAINT_TEST: u32 = 18;
pub const TAINT_FLAGS_COUNT: u32 = 19;
pub const TAINT_FLAGS_MAX: u32 = 524287;
pub const KERN_SOH: &[u8; 2] = b"\x01\0";
pub const KERN_SOH_ASCII: u8 = 1u8;
pub const KERN_EMERG: &[u8; 3] = b"\x010\0";
pub const KERN_ALERT: &[u8; 3] = b"\x011\0";
pub const KERN_CRIT: &[u8; 3] = b"\x012\0";
pub const KERN_ERR: &[u8; 3] = b"\x013\0";
pub const KERN_WARNING: &[u8; 3] = b"\x014\0";
pub const KERN_NOTICE: &[u8; 3] = b"\x015\0";
pub const KERN_INFO: &[u8; 3] = b"\x016\0";
pub const KERN_DEBUG: &[u8; 3] = b"\x017\0";
pub const KERN_DEFAULT: &[u8; 1] = b"\0";
pub const KERN_CONT: &[u8; 3] = b"\x01c\0";
pub const LOGLEVEL_SCHED: i32 = -2;
pub const LOGLEVEL_DEFAULT: i32 = -1;
pub const LOGLEVEL_EMERG: u32 = 0;
pub const LOGLEVEL_ALERT: u32 = 1;
pub const LOGLEVEL_CRIT: u32 = 2;
pub const LOGLEVEL_ERR: u32 = 3;
pub const LOGLEVEL_WARNING: u32 = 4;
pub const LOGLEVEL_NOTICE: u32 = 5;
pub const LOGLEVEL_INFO: u32 = 6;
pub const LOGLEVEL_DEBUG: u32 = 7;
pub const HZ: u32 = 100;
pub const EXEC_PAGESIZE: u32 = 4096;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const USER_HZ: u32 = 100;
pub const CLOCKS_PER_SEC: u32 = 100;
pub const DEFAULT_RATELIMIT_INTERVAL: u32 = 5000;
pub const DEFAULT_RATELIMIT_BURST: u32 = 10;
pub const PRINTK_MAX_SINGLE_HEADER_LEN: u32 = 2;
pub const MESSAGE_LOGLEVEL_DEFAULT: u32 = 4;
pub const CONSOLE_LOGLEVEL_SILENT: u32 = 0;
pub const CONSOLE_LOGLEVEL_MIN: u32 = 1;
pub const CONSOLE_LOGLEVEL_DEBUG: u32 = 10;
pub const CONSOLE_LOGLEVEL_MOTORMOUTH: u32 = 15;
pub const CONSOLE_LOGLEVEL_DEFAULT: u32 = 7;
pub const CONSOLE_LOGLEVEL_QUIET: u32 = 3;
pub const DEVKMSG_STR_MAX_SIZE: u32 = 10;
pub const FW_BUG: &[u8; 17] = b"[Firmware Bug]: \0";
pub const FW_WARN: &[u8; 18] = b"[Firmware Warn]: \0";
pub const FW_INFO: &[u8; 18] = b"[Firmware Info]: \0";
pub const HW_ERR: &[u8; 19] = b"[Hardware Error]: \0";
pub const DEPRECATED: &[u8; 15] = b"[Deprecated]: \0";
pub const JUMP_TYPE_FALSE: u32 = 0;
pub const JUMP_TYPE_TRUE: u32 = 1;
pub const JUMP_TYPE_LINKED: u32 = 2;
pub const JUMP_TYPE_MASK: u32 = 3;
pub const CLS_BITS: u32 = 6;
pub const _DPRINTK_CLASS_DFLT: u32 = 63;
pub const _DPRINTK_FLAGS_NONE: u32 = 0;
pub const _DPRINTK_FLAGS_PRINT: u32 = 1;
pub const _DPRINTK_FLAGS_INCL_MODNAME: u32 = 2;
pub const _DPRINTK_FLAGS_INCL_FUNCNAME: u32 = 4;
pub const _DPRINTK_FLAGS_INCL_LINENO: u32 = 8;
pub const _DPRINTK_FLAGS_INCL_TID: u32 = 16;
pub const _DPRINTK_FLAGS_INCL_SOURCENAME: u32 = 32;
pub const _DPRINTK_FLAGS_INCL_ANY: u32 = 62;
pub const _DPRINTK_FLAGS_DEFAULT: u32 = 0;
pub const STATIC_CALL_SITE_TAIL: u32 = 1;
pub const STATIC_CALL_SITE_INIT: u32 = 2;
pub const STATIC_CALL_SITE_FLAGS: u32 = 3;
pub const STACK_MAGIC: u32 = 3735928559;
pub const READ: u32 = 0;
pub const WRITE: u32 = 1;
pub const __HAVE_ARCH_MEMCPY: u32 = 1;
pub const __HAVE_ARCH_MEMCPY_FLUSHCACHE: u32 = 1;
pub const BITMAP_MEM_ALIGNMENT: u32 = 8;
pub const BITMAP_MEM_MASK: u32 = 7;
pub const __X86_CASE_B: u32 = 1;
pub const __X86_CASE_W: u32 = 2;
pub const __X86_CASE_L: u32 = 4;
pub const __X86_CASE_Q: u32 = 8;
pub const UNWIND_HINT_TYPE_UNDEFINED: u32 = 0;
pub const UNWIND_HINT_TYPE_END_OF_STACK: u32 = 1;
pub const UNWIND_HINT_TYPE_CALL: u32 = 2;
pub const UNWIND_HINT_TYPE_REGS: u32 = 3;
pub const UNWIND_HINT_TYPE_REGS_PARTIAL: u32 = 4;
pub const UNWIND_HINT_TYPE_FUNC: u32 = 5;
pub const UNWIND_HINT_TYPE_SAVE: u32 = 6;
pub const UNWIND_HINT_TYPE_RESTORE: u32 = 7;
pub const ANNOTATE_NOENDBR: &[u8; 64] =
    b"986: \n\t.pushsection .discard.noendbr\n\t.long 986b\n\t.popsection\n\t\0";
pub const ASM_REACHABLE: &[u8; 65] =
    b"998:\n\t.pushsection .discard.reachable\n\t.long 998b\n\t.popsection\n\t\0";
pub const ASM_UD2: &[u8; 17] = b".byte 0x0f, 0x0b\0";
pub const INSN_UD2: u32 = 2831;
pub const LEN_UD2: u32 = 2;
pub const CUT_HERE: &[u8; 38] = b"------------[ cut here ]------------\n\0";
pub const BUGFLAG_WARNING: u32 = 1;
pub const BUGFLAG_ONCE: u32 = 2;
pub const BUGFLAG_DONE: u32 = 4;
pub const BUGFLAG_NO_CUT_HERE: u32 = 8;
pub const ___GFP_SKIP_ZERO: u32 = 0;
pub const ___GFP_SKIP_KASAN: u32 = 0;
pub const ___GFP_NOLOCKDEP: u32 = 0;
pub const NODES_SHIFT: u32 = 10;
pub const MAX_NUMNODES: u32 = 1024;
pub const NUMA_NO_NODE: i32 = -1;
pub const NUMA_NO_MEMBLK: i32 = -1;
pub const SECTION_SIZE_BITS: u32 = 27;
pub const PREEMPT_BITS: u32 = 8;
pub const SOFTIRQ_BITS: u32 = 8;
pub const HARDIRQ_BITS: u32 = 4;
pub const NMI_BITS: u32 = 4;
pub const PREEMPT_SHIFT: u32 = 0;
pub const SOFTIRQ_SHIFT: u32 = 8;
pub const HARDIRQ_SHIFT: u32 = 16;
pub const NMI_SHIFT: u32 = 20;
pub const PREEMPT_OFFSET: u32 = 1;
pub const SOFTIRQ_OFFSET: u32 = 256;
pub const HARDIRQ_OFFSET: u32 = 65536;
pub const NMI_OFFSET: u32 = 1048576;
pub const SOFTIRQ_DISABLE_OFFSET: u32 = 512;
pub const INIT_PREEMPT_COUNT: u32 = 1;
pub const PREEMPT_NEED_RESCHED: u32 = 2147483648;
pub const PREEMPT_ENABLED: u32 = 2147483648;
pub const PREEMPT_DISABLE_OFFSET: u32 = 1;
pub const PREEMPT_LOCK_OFFSET: u32 = 1;
pub const SOFTIRQ_LOCK_OFFSET: u32 = 513;
pub const PAGE_SHIFT: u32 = 12;
pub const HUGE_MAX_HSTATE: u32 = 2;
pub const LOAD_PHYSICAL_ADDR: u32 = 16777216;
pub const KASAN_STACK_ORDER: u32 = 0;
pub const THREAD_SIZE_ORDER: u32 = 2;
pub const EXCEPTION_STACK_ORDER: u32 = 1;
pub const IRQ_STACK_ORDER: u32 = 2;
pub const IST_INDEX_DF: u32 = 0;
pub const IST_INDEX_NMI: u32 = 1;
pub const IST_INDEX_DB: u32 = 2;
pub const IST_INDEX_MCE: u32 = 3;
pub const IST_INDEX_VC: u32 = 4;
pub const __PHYSICAL_MASK_SHIFT: u32 = 52;
pub const KERNEL_IMAGE_SIZE: u32 = 1073741824;
pub const __HAVE_ARCH_GATE_AREA: u32 = 1;
pub const TOP_OF_KERNEL_STACK_PADDING: u32 = 16;
pub const X86_EFLAGS_CF_BIT: u32 = 0;
pub const X86_EFLAGS_FIXED_BIT: u32 = 1;
pub const X86_EFLAGS_PF_BIT: u32 = 2;
pub const X86_EFLAGS_AF_BIT: u32 = 4;
pub const X86_EFLAGS_ZF_BIT: u32 = 6;
pub const X86_EFLAGS_SF_BIT: u32 = 7;
pub const X86_EFLAGS_TF_BIT: u32 = 8;
pub const X86_EFLAGS_IF_BIT: u32 = 9;
pub const X86_EFLAGS_DF_BIT: u32 = 10;
pub const X86_EFLAGS_OF_BIT: u32 = 11;
pub const X86_EFLAGS_IOPL_BIT: u32 = 12;
pub const X86_EFLAGS_NT_BIT: u32 = 14;
pub const X86_EFLAGS_RF_BIT: u32 = 16;
pub const X86_EFLAGS_VM_BIT: u32 = 17;
pub const X86_EFLAGS_AC_BIT: u32 = 18;
pub const X86_EFLAGS_VIF_BIT: u32 = 19;
pub const X86_EFLAGS_VIP_BIT: u32 = 20;
pub const X86_EFLAGS_ID_BIT: u32 = 21;
pub const X86_CR0_PE_BIT: u32 = 0;
pub const X86_CR0_MP_BIT: u32 = 1;
pub const X86_CR0_EM_BIT: u32 = 2;
pub const X86_CR0_TS_BIT: u32 = 3;
pub const X86_CR0_ET_BIT: u32 = 4;
pub const X86_CR0_NE_BIT: u32 = 5;
pub const X86_CR0_WP_BIT: u32 = 16;
pub const X86_CR0_AM_BIT: u32 = 18;
pub const X86_CR0_NW_BIT: u32 = 29;
pub const X86_CR0_CD_BIT: u32 = 30;
pub const X86_CR0_PG_BIT: u32 = 31;
pub const X86_CR3_PWT_BIT: u32 = 3;
pub const X86_CR3_PCD_BIT: u32 = 4;
pub const X86_CR3_PCID_BITS: u32 = 12;
pub const X86_CR3_LAM_U57_BIT: u32 = 61;
pub const X86_CR3_LAM_U48_BIT: u32 = 62;
pub const X86_CR3_PCID_NOFLUSH_BIT: u32 = 63;
pub const X86_CR4_VME_BIT: u32 = 0;
pub const X86_CR4_PVI_BIT: u32 = 1;
pub const X86_CR4_TSD_BIT: u32 = 2;
pub const X86_CR4_DE_BIT: u32 = 3;
pub const X86_CR4_PSE_BIT: u32 = 4;
pub const X86_CR4_PAE_BIT: u32 = 5;
pub const X86_CR4_MCE_BIT: u32 = 6;
pub const X86_CR4_PGE_BIT: u32 = 7;
pub const X86_CR4_PCE_BIT: u32 = 8;
pub const X86_CR4_OSFXSR_BIT: u32 = 9;
pub const X86_CR4_OSXMMEXCPT_BIT: u32 = 10;
pub const X86_CR4_UMIP_BIT: u32 = 11;
pub const X86_CR4_LA57_BIT: u32 = 12;
pub const X86_CR4_VMXE_BIT: u32 = 13;
pub const X86_CR4_SMXE_BIT: u32 = 14;
pub const X86_CR4_FSGSBASE_BIT: u32 = 16;
pub const X86_CR4_PCIDE_BIT: u32 = 17;
pub const X86_CR4_OSXSAVE_BIT: u32 = 18;
pub const X86_CR4_SMEP_BIT: u32 = 20;
pub const X86_CR4_SMAP_BIT: u32 = 21;
pub const X86_CR4_PKE_BIT: u32 = 22;
pub const X86_CR4_CET_BIT: u32 = 23;
pub const X86_CR4_LAM_SUP_BIT: u32 = 28;
pub const X86_CR4_FRED_BIT: u32 = 32;
pub const CX86_PCR0: u32 = 32;
pub const CX86_GCR: u32 = 184;
pub const CX86_CCR0: u32 = 192;
pub const CX86_CCR1: u32 = 193;
pub const CX86_CCR2: u32 = 194;
pub const CX86_CCR3: u32 = 195;
pub const CX86_CCR4: u32 = 232;
pub const CX86_CCR5: u32 = 233;
pub const CX86_CCR6: u32 = 234;
pub const CX86_CCR7: u32 = 235;
pub const CX86_PCR1: u32 = 240;
pub const CX86_DIR0: u32 = 254;
pub const CX86_DIR1: u32 = 255;
pub const CX86_ARR_BASE: u32 = 196;
pub const CX86_RCR_BASE: u32 = 220;
pub const X86_VM_MASK: u32 = 0;
pub const CR3_PCID_MASK: u32 = 4095;
pub const X86_CR3_PTI_PCID_USER_BIT: u32 = 11;
pub const GDT_ENTRY_BOOT_CS: u32 = 2;
pub const GDT_ENTRY_BOOT_DS: u32 = 3;
pub const GDT_ENTRY_BOOT_TSS: u32 = 4;
pub const __BOOT_CS: u32 = 16;
pub const __BOOT_DS: u32 = 24;
pub const __BOOT_TSS: u32 = 32;
pub const SEGMENT_RPL_MASK: u32 = 3;
pub const USER_SEGMENT_RPL_MASK: u32 = 2;
pub const USER_RPL: u32 = 3;
pub const SEGMENT_TI_MASK: u32 = 4;
pub const SEGMENT_LDT: u32 = 4;
pub const SEGMENT_GDT: u32 = 0;
pub const GDT_ENTRY_INVALID_SEG: u32 = 0;
pub const GDT_ENTRY_KERNEL32_CS: u32 = 1;
pub const GDT_ENTRY_KERNEL_CS: u32 = 2;
pub const GDT_ENTRY_KERNEL_DS: u32 = 3;
pub const GDT_ENTRY_DEFAULT_USER32_CS: u32 = 4;
pub const GDT_ENTRY_DEFAULT_USER_DS: u32 = 5;
pub const GDT_ENTRY_DEFAULT_USER_CS: u32 = 6;
pub const GDT_ENTRY_TSS: u32 = 8;
pub const GDT_ENTRY_LDT: u32 = 10;
pub const GDT_ENTRY_TLS_MIN: u32 = 12;
pub const GDT_ENTRY_TLS_MAX: u32 = 14;
pub const GDT_ENTRY_CPUNODE: u32 = 15;
pub const GDT_ENTRIES: u32 = 16;
pub const __KERNEL32_CS: u32 = 8;
pub const __KERNEL_CS: u32 = 16;
pub const __KERNEL_DS: u32 = 24;
pub const __USER32_CS: u32 = 35;
pub const __USER_DS: u32 = 43;
pub const __USER_CS: u32 = 51;
pub const __CPUNODE_SEG: u32 = 123;
pub const IDT_ENTRIES: u32 = 256;
pub const NUM_EXCEPTION_VECTORS: u32 = 32;
pub const EXCEPTION_ERRCODE_MASK: u32 = 537033984;
pub const GDT_SIZE: u32 = 128;
pub const GDT_ENTRY_TLS_ENTRIES: u32 = 3;
pub const TLS_SIZE: u32 = 24;
pub const VDSO_CPUNODE_BITS: u32 = 12;
pub const VDSO_CPUNODE_MASK: u32 = 4095;
pub const EARLY_IDT_HANDLER_SIZE: u32 = 9;
pub const XEN_EARLY_IDT_HANDLER_SIZE: u32 = 8;
pub const FRAME_SIZE: u32 = 168;
pub const PTRACE_GETREGS: u32 = 12;
pub const PTRACE_SETREGS: u32 = 13;
pub const PTRACE_GETFPREGS: u32 = 14;
pub const PTRACE_SETFPREGS: u32 = 15;
pub const PTRACE_GETFPXREGS: u32 = 18;
pub const PTRACE_SETFPXREGS: u32 = 19;
pub const PTRACE_OLDSETOPTIONS: u32 = 21;
pub const PTRACE_GET_THREAD_AREA: u32 = 25;
pub const PTRACE_SET_THREAD_AREA: u32 = 26;
pub const PTRACE_ARCH_PRCTL: u32 = 30;
pub const PTRACE_SYSEMU: u32 = 31;
pub const PTRACE_SYSEMU_SINGLESTEP: u32 = 32;
pub const PTRACE_SINGLEBLOCK: u32 = 33;
pub const _DESC_ACCESSED: u32 = 1;
pub const _DESC_DATA_WRITABLE: u32 = 2;
pub const _DESC_CODE_READABLE: u32 = 2;
pub const _DESC_DATA_EXPAND_DOWN: u32 = 4;
pub const _DESC_CODE_CONFORMING: u32 = 4;
pub const _DESC_CODE_EXECUTABLE: u32 = 8;
pub const _DESC_S: u32 = 16;
pub const _DESC_PRESENT: u32 = 128;
pub const _DESC_LONG_CODE: u32 = 8192;
pub const _DESC_DB: u32 = 16384;
pub const _DESC_GRANULARITY_4K: u32 = 32768;
pub const _DESC_DATA: u32 = 147;
pub const _DESC_CODE: u32 = 155;
pub const DESC_DATA16: u32 = 147;
pub const DESC_CODE16: u32 = 155;
pub const DESC_DATA32: u32 = 49299;
pub const DESC_DATA32_BIOS: u32 = 16531;
pub const DESC_CODE32: u32 = 49307;
pub const DESC_CODE32_BIOS: u32 = 16539;
pub const DESC_DATA64: u32 = 49299;
pub const DESC_CODE64: u32 = 41115;
pub const BOOT_IDT_ENTRIES: u32 = 32;
pub const AR_TYPE_RODATA: u32 = 0;
pub const AR_TYPE_RWDATA: u32 = 512;
pub const AR_TYPE_RODATA_EXPDOWN: u32 = 1024;
pub const AR_TYPE_RWDATA_EXPDOWN: u32 = 1536;
pub const AR_TYPE_XOCODE: u32 = 2048;
pub const AR_TYPE_XRCODE: u32 = 2560;
pub const AR_TYPE_XOCODE_CONF: u32 = 3072;
pub const AR_TYPE_XRCODE_CONF: u32 = 3584;
pub const AR_TYPE_MASK: u32 = 3584;
pub const AR_DPL0: u32 = 0;
pub const AR_DPL3: u32 = 24576;
pub const AR_DPL_MASK: u32 = 24576;
pub const AR_A: u32 = 256;
pub const AR_S: u32 = 4096;
pub const AR_P: u32 = 32768;
pub const AR_AVL: u32 = 1048576;
pub const AR_L: u32 = 2097152;
pub const AR_DB: u32 = 4194304;
pub const AR_G: u32 = 8388608;
pub const _PAGE_BIT_PRESENT: u32 = 0;
pub const _PAGE_BIT_RW: u32 = 1;
pub const _PAGE_BIT_USER: u32 = 2;
pub const _PAGE_BIT_PWT: u32 = 3;
pub const _PAGE_BIT_PCD: u32 = 4;
pub const _PAGE_BIT_ACCESSED: u32 = 5;
pub const _PAGE_BIT_DIRTY: u32 = 6;
pub const _PAGE_BIT_PSE: u32 = 7;
pub const _PAGE_BIT_PAT: u32 = 7;
pub const _PAGE_BIT_GLOBAL: u32 = 8;
pub const _PAGE_BIT_SOFTW1: u32 = 9;
pub const _PAGE_BIT_SOFTW2: u32 = 10;
pub const _PAGE_BIT_SOFTW3: u32 = 11;
pub const _PAGE_BIT_PAT_LARGE: u32 = 12;
pub const _PAGE_BIT_SOFTW4: u32 = 57;
pub const _PAGE_BIT_SOFTW5: u32 = 58;
pub const _PAGE_BIT_PKEY_BIT0: u32 = 59;
pub const _PAGE_BIT_PKEY_BIT1: u32 = 60;
pub const _PAGE_BIT_PKEY_BIT2: u32 = 61;
pub const _PAGE_BIT_PKEY_BIT3: u32 = 62;
pub const _PAGE_BIT_NX: u32 = 63;
pub const _PAGE_BIT_SPECIAL: u32 = 9;
pub const _PAGE_BIT_CPA_TEST: u32 = 9;
pub const _PAGE_BIT_UFFD_WP: u32 = 10;
pub const _PAGE_BIT_SOFT_DIRTY: u32 = 11;
pub const _PAGE_BIT_DEVMAP: u32 = 57;
pub const _PAGE_BIT_SAVED_DIRTY: u32 = 58;
pub const _PAGE_BIT_PROTNONE: u32 = 8;
pub const SHARED_KERNEL_PMD: u32 = 0;
pub const PTRS_PER_PGD: u32 = 512;
pub const P4D_SHIFT: u32 = 39;
pub const MAX_PTRS_PER_P4D: u32 = 512;
pub const MAX_POSSIBLE_PHYSMEM_BITS: u32 = 52;
pub const PUD_SHIFT: u32 = 30;
pub const PTRS_PER_PUD: u32 = 512;
pub const PMD_SHIFT: u32 = 21;
pub const PTRS_PER_PMD: u32 = 512;
pub const PTRS_PER_PTE: u32 = 512;
pub const GUARD_HOLE_PGD_ENTRY: i32 = -256;
pub const LDT_PGD_ENTRY: i32 = -240;
pub const __VMALLOC_BASE_L4: i64 = -60473139527680;
pub const __VMALLOC_BASE_L5: i64 = -27021597764222976;
pub const VMALLOC_SIZE_TB_L4: u32 = 32;
pub const VMALLOC_SIZE_TB_L5: u32 = 12800;
pub const __VMEMMAP_BASE_L4: i64 = -24189255811072;
pub const __VMEMMAP_BASE_L5: i64 = -12384898975268864;
pub const EARLY_DYNAMIC_PAGE_TABLES: u32 = 64;
pub const PGD_ALLOWED_BITS: i32 = -1;
pub const MSR_EFER: u32 = 3221225600;
pub const MSR_STAR: u32 = 3221225601;
pub const MSR_LSTAR: u32 = 3221225602;
pub const MSR_CSTAR: u32 = 3221225603;
pub const MSR_SYSCALL_MASK: u32 = 3221225604;
pub const MSR_FS_BASE: u32 = 3221225728;
pub const MSR_GS_BASE: u32 = 3221225729;
pub const MSR_KERNEL_GS_BASE: u32 = 3221225730;
pub const MSR_TSC_AUX: u32 = 3221225731;
pub const _EFER_SCE: u32 = 0;
pub const _EFER_LME: u32 = 8;
pub const _EFER_LMA: u32 = 10;
pub const _EFER_NX: u32 = 11;
pub const _EFER_SVME: u32 = 12;
pub const _EFER_LMSLE: u32 = 13;
pub const _EFER_FFXSR: u32 = 14;
pub const _EFER_AUTOIBRS: u32 = 21;
pub const EFER_SCE: u32 = 1;
pub const EFER_LME: u32 = 256;
pub const EFER_LMA: u32 = 1024;
pub const EFER_NX: u32 = 2048;
pub const EFER_SVME: u32 = 4096;
pub const EFER_LMSLE: u32 = 8192;
pub const EFER_FFXSR: u32 = 16384;
pub const EFER_AUTOIBRS: u32 = 2097152;
pub const MSR_IA32_FRED_RSP0: u32 = 460;
pub const MSR_IA32_FRED_RSP1: u32 = 461;
pub const MSR_IA32_FRED_RSP2: u32 = 462;
pub const MSR_IA32_FRED_RSP3: u32 = 463;
pub const MSR_IA32_FRED_STKLVLS: u32 = 464;
pub const MSR_IA32_FRED_SSP1: u32 = 465;
pub const MSR_IA32_FRED_SSP2: u32 = 466;
pub const MSR_IA32_FRED_SSP3: u32 = 467;
pub const MSR_IA32_FRED_CONFIG: u32 = 468;
pub const MSR_TEST_CTRL: u32 = 51;
pub const MSR_TEST_CTRL_SPLIT_LOCK_DETECT_BIT: u32 = 29;
pub const MSR_IA32_SPEC_CTRL: u32 = 72;
pub const SPEC_CTRL_STIBP_SHIFT: u32 = 1;
pub const SPEC_CTRL_SSBD_SHIFT: u32 = 2;
pub const SPEC_CTRL_RRSBA_DIS_S_SHIFT: u32 = 6;
pub const SPEC_CTRL_BHI_DIS_S_SHIFT: u32 = 10;
pub const MSR_IA32_PRED_CMD: u32 = 73;
pub const MSR_PPIN_CTL: u32 = 78;
pub const MSR_PPIN: u32 = 79;
pub const MSR_IA32_PERFCTR0: u32 = 193;
pub const MSR_IA32_PERFCTR1: u32 = 194;
pub const MSR_FSB_FREQ: u32 = 205;
pub const MSR_PLATFORM_INFO: u32 = 206;
pub const MSR_PLATFORM_INFO_CPUID_FAULT_BIT: u32 = 31;
pub const MSR_IA32_UMWAIT_CONTROL: u32 = 225;
pub const MSR_IA32_UMWAIT_CONTROL_TIME_MASK: i32 = -4;
pub const MSR_IA32_CORE_CAPS: u32 = 207;
pub const MSR_IA32_CORE_CAPS_INTEGRITY_CAPS_BIT: u32 = 2;
pub const MSR_IA32_CORE_CAPS_SPLIT_LOCK_DETECT_BIT: u32 = 5;
pub const MSR_PKG_CST_CONFIG_CONTROL: u32 = 226;
pub const NHM_C3_AUTO_DEMOTE: u32 = 33554432;
pub const NHM_C1_AUTO_DEMOTE: u32 = 67108864;
pub const ATM_LNC_C6_AUTO_DEMOTE: u32 = 33554432;
pub const SNB_C3_AUTO_UNDEMOTE: u32 = 134217728;
pub const SNB_C1_AUTO_UNDEMOTE: u32 = 268435456;
pub const MSR_MTRRcap: u32 = 254;
pub const MSR_IA32_ARCH_CAPABILITIES: u32 = 266;
pub const MSR_IA32_FLUSH_CMD: u32 = 267;
pub const MSR_IA32_BBL_CR_CTL: u32 = 281;
pub const MSR_IA32_BBL_CR_CTL3: u32 = 286;
pub const MSR_IA32_TSX_CTRL: u32 = 290;
pub const MSR_IA32_MCU_OPT_CTRL: u32 = 291;
pub const MSR_IA32_SYSENTER_CS: u32 = 372;
pub const MSR_IA32_SYSENTER_ESP: u32 = 373;
pub const MSR_IA32_SYSENTER_EIP: u32 = 374;
pub const MSR_IA32_MCG_CAP: u32 = 377;
pub const MSR_IA32_MCG_STATUS: u32 = 378;
pub const MSR_IA32_MCG_CTL: u32 = 379;
pub const MSR_ERROR_CONTROL: u32 = 383;
pub const MSR_IA32_MCG_EXT_CTL: u32 = 1232;
pub const MSR_OFFCORE_RSP_0: u32 = 422;
pub const MSR_OFFCORE_RSP_1: u32 = 423;
pub const MSR_TURBO_RATIO_LIMIT: u32 = 429;
pub const MSR_TURBO_RATIO_LIMIT1: u32 = 430;
pub const MSR_TURBO_RATIO_LIMIT2: u32 = 431;
pub const MSR_SNOOP_RSP_0: u32 = 4904;
pub const MSR_SNOOP_RSP_1: u32 = 4905;
pub const MSR_LBR_SELECT: u32 = 456;
pub const MSR_LBR_TOS: u32 = 457;
pub const MSR_IA32_POWER_CTL: u32 = 508;
pub const MSR_IA32_POWER_CTL_BIT_EE: u32 = 19;
pub const MSR_INTEGRITY_CAPS: u32 = 729;
pub const MSR_INTEGRITY_CAPS_ARRAY_BIST_BIT: u32 = 2;
pub const MSR_INTEGRITY_CAPS_PERIODIC_BIST_BIT: u32 = 4;
pub const MSR_LBR_NHM_FROM: u32 = 1664;
pub const MSR_LBR_NHM_TO: u32 = 1728;
pub const MSR_LBR_CORE_FROM: u32 = 64;
pub const MSR_LBR_CORE_TO: u32 = 96;
pub const MSR_LBR_INFO_0: u32 = 3520;
pub const LBR_INFO_CYCLES: u32 = 65535;
pub const LBR_INFO_BR_TYPE_OFFSET: u32 = 56;
pub const LBR_INFO_BR_TYPE: u64 = 1080863910568919040;
pub const LBR_INFO_BR_CNTR_OFFSET: u32 = 32;
pub const LBR_INFO_BR_CNTR_NUM: u32 = 4;
pub const LBR_INFO_BR_CNTR_BITS: u32 = 2;
pub const MSR_ARCH_LBR_CTL: u32 = 5326;
pub const ARCH_LBR_CTL_CPL_OFFSET: u32 = 1;
pub const ARCH_LBR_CTL_CPL: u32 = 6;
pub const ARCH_LBR_CTL_STACK_OFFSET: u32 = 3;
pub const ARCH_LBR_CTL_STACK: u32 = 8;
pub const ARCH_LBR_CTL_FILTER_OFFSET: u32 = 16;
pub const ARCH_LBR_CTL_FILTER: u32 = 8323072;
pub const MSR_ARCH_LBR_DEPTH: u32 = 5327;
pub const MSR_ARCH_LBR_FROM_0: u32 = 5376;
pub const MSR_ARCH_LBR_TO_0: u32 = 5632;
pub const MSR_ARCH_LBR_INFO_0: u32 = 4608;
pub const MSR_IA32_PEBS_ENABLE: u32 = 1009;
pub const MSR_PEBS_DATA_CFG: u32 = 1010;
pub const MSR_IA32_DS_AREA: u32 = 1536;
pub const MSR_IA32_PERF_CAPABILITIES: u32 = 837;
pub const PERF_CAP_METRICS_IDX: u32 = 15;
pub const PERF_CAP_PT_IDX: u32 = 16;
pub const MSR_PEBS_LD_LAT_THRESHOLD: u32 = 1014;
pub const PERF_CAP_PEBS_FORMAT: u32 = 3840;
pub const MSR_IA32_RTIT_CTL: u32 = 1392;
pub const RTIT_CTL_MTC_RANGE_OFFSET: u32 = 14;
pub const RTIT_CTL_MTC_RANGE: u32 = 245760;
pub const RTIT_CTL_CYC_THRESH_OFFSET: u32 = 19;
pub const RTIT_CTL_CYC_THRESH: u32 = 7864320;
pub const RTIT_CTL_PSB_FREQ_OFFSET: u32 = 24;
pub const RTIT_CTL_PSB_FREQ: u32 = 251658240;
pub const RTIT_CTL_ADDR0_OFFSET: u32 = 32;
pub const RTIT_CTL_ADDR0: u64 = 64424509440;
pub const RTIT_CTL_ADDR1_OFFSET: u32 = 36;
pub const RTIT_CTL_ADDR1: u64 = 1030792151040;
pub const RTIT_CTL_ADDR2_OFFSET: u32 = 40;
pub const RTIT_CTL_ADDR2: u64 = 16492674416640;
pub const RTIT_CTL_ADDR3_OFFSET: u32 = 44;
pub const RTIT_CTL_ADDR3: u64 = 263882790666240;
pub const MSR_IA32_RTIT_STATUS: u32 = 1393;
pub const RTIT_STATUS_BYTECNT_OFFSET: u32 = 32;
pub const RTIT_STATUS_BYTECNT: u64 = 562945658454016;
pub const MSR_IA32_RTIT_ADDR0_A: u32 = 1408;
pub const MSR_IA32_RTIT_ADDR0_B: u32 = 1409;
pub const MSR_IA32_RTIT_ADDR1_A: u32 = 1410;
pub const MSR_IA32_RTIT_ADDR1_B: u32 = 1411;
pub const MSR_IA32_RTIT_ADDR2_A: u32 = 1412;
pub const MSR_IA32_RTIT_ADDR2_B: u32 = 1413;
pub const MSR_IA32_RTIT_ADDR3_A: u32 = 1414;
pub const MSR_IA32_RTIT_ADDR3_B: u32 = 1415;
pub const MSR_IA32_RTIT_CR3_MATCH: u32 = 1394;
pub const MSR_IA32_RTIT_OUTPUT_BASE: u32 = 1376;
pub const MSR_IA32_RTIT_OUTPUT_MASK: u32 = 1377;
pub const MSR_MTRRfix64K_00000: u32 = 592;
pub const MSR_MTRRfix16K_80000: u32 = 600;
pub const MSR_MTRRfix16K_A0000: u32 = 601;
pub const MSR_MTRRfix4K_C0000: u32 = 616;
pub const MSR_MTRRfix4K_C8000: u32 = 617;
pub const MSR_MTRRfix4K_D0000: u32 = 618;
pub const MSR_MTRRfix4K_D8000: u32 = 619;
pub const MSR_MTRRfix4K_E0000: u32 = 620;
pub const MSR_MTRRfix4K_E8000: u32 = 621;
pub const MSR_MTRRfix4K_F0000: u32 = 622;
pub const MSR_MTRRfix4K_F8000: u32 = 623;
pub const MSR_MTRRdefType: u32 = 767;
pub const MSR_IA32_CR_PAT: u32 = 631;
pub const MSR_IA32_DEBUGCTLMSR: u32 = 473;
pub const MSR_IA32_LASTBRANCHFROMIP: u32 = 475;
pub const MSR_IA32_LASTBRANCHTOIP: u32 = 476;
pub const MSR_IA32_LASTINTFROMIP: u32 = 477;
pub const MSR_IA32_LASTINTTOIP: u32 = 478;
pub const MSR_IA32_PASID: u32 = 3475;
pub const DEBUGCTLMSR_LBR: u32 = 1;
pub const DEBUGCTLMSR_BTF_SHIFT: u32 = 1;
pub const DEBUGCTLMSR_BTF: u32 = 2;
pub const DEBUGCTLMSR_BUS_LOCK_DETECT: u32 = 4;
pub const DEBUGCTLMSR_TR: u32 = 64;
pub const DEBUGCTLMSR_BTS: u32 = 128;
pub const DEBUGCTLMSR_BTINT: u32 = 256;
pub const DEBUGCTLMSR_BTS_OFF_OS: u32 = 512;
pub const DEBUGCTLMSR_BTS_OFF_USR: u32 = 1024;
pub const DEBUGCTLMSR_FREEZE_LBRS_ON_PMI: u32 = 2048;
pub const DEBUGCTLMSR_FREEZE_PERFMON_ON_PMI: u32 = 4096;
pub const DEBUGCTLMSR_FREEZE_IN_SMM_BIT: u32 = 14;
pub const DEBUGCTLMSR_FREEZE_IN_SMM: u32 = 16384;
pub const MSR_PEBS_FRONTEND: u32 = 1015;
pub const MSR_IA32_MC0_CTL: u32 = 1024;
pub const MSR_IA32_MC0_STATUS: u32 = 1025;
pub const MSR_IA32_MC0_ADDR: u32 = 1026;
pub const MSR_IA32_MC0_MISC: u32 = 1027;
pub const MSR_PKG_C3_RESIDENCY: u32 = 1016;
pub const MSR_PKG_C6_RESIDENCY: u32 = 1017;
pub const MSR_ATOM_PKG_C6_RESIDENCY: u32 = 1018;
pub const MSR_PKG_C7_RESIDENCY: u32 = 1018;
pub const MSR_CORE_C3_RESIDENCY: u32 = 1020;
pub const MSR_CORE_C6_RESIDENCY: u32 = 1021;
pub const MSR_CORE_C7_RESIDENCY: u32 = 1022;
pub const MSR_KNL_CORE_C6_RESIDENCY: u32 = 1023;
pub const MSR_PKG_C2_RESIDENCY: u32 = 1549;
pub const MSR_PKG_C8_RESIDENCY: u32 = 1584;
pub const MSR_PKG_C9_RESIDENCY: u32 = 1585;
pub const MSR_PKG_C10_RESIDENCY: u32 = 1586;
pub const MSR_PKGC3_IRTL: u32 = 1546;
pub const MSR_PKGC6_IRTL: u32 = 1547;
pub const MSR_PKGC7_IRTL: u32 = 1548;
pub const MSR_PKGC8_IRTL: u32 = 1587;
pub const MSR_PKGC9_IRTL: u32 = 1588;
pub const MSR_PKGC10_IRTL: u32 = 1589;
pub const MSR_VR_CURRENT_CONFIG: u32 = 1537;
pub const MSR_RAPL_POWER_UNIT: u32 = 1542;
pub const MSR_PKG_POWER_LIMIT: u32 = 1552;
pub const MSR_PKG_ENERGY_STATUS: u32 = 1553;
pub const MSR_PKG_PERF_STATUS: u32 = 1555;
pub const MSR_PKG_POWER_INFO: u32 = 1556;
pub const MSR_DRAM_POWER_LIMIT: u32 = 1560;
pub const MSR_DRAM_ENERGY_STATUS: u32 = 1561;
pub const MSR_DRAM_PERF_STATUS: u32 = 1563;
pub const MSR_DRAM_POWER_INFO: u32 = 1564;
pub const MSR_PP0_POWER_LIMIT: u32 = 1592;
pub const MSR_PP0_ENERGY_STATUS: u32 = 1593;
pub const MSR_PP0_POLICY: u32 = 1594;
pub const MSR_PP0_PERF_STATUS: u32 = 1595;
pub const MSR_PP1_POWER_LIMIT: u32 = 1600;
pub const MSR_PP1_ENERGY_STATUS: u32 = 1601;
pub const MSR_PP1_POLICY: u32 = 1602;
pub const MSR_AMD_RAPL_POWER_UNIT: u32 = 3221291673;
pub const MSR_AMD_CORE_ENERGY_STATUS: u32 = 3221291674;
pub const MSR_AMD_PKG_ENERGY_STATUS: u32 = 3221291675;
pub const MSR_CONFIG_TDP_NOMINAL: u32 = 1608;
pub const MSR_CONFIG_TDP_LEVEL_1: u32 = 1609;
pub const MSR_CONFIG_TDP_LEVEL_2: u32 = 1610;
pub const MSR_CONFIG_TDP_CONTROL: u32 = 1611;
pub const MSR_TURBO_ACTIVATION_RATIO: u32 = 1612;
pub const MSR_PLATFORM_ENERGY_STATUS: u32 = 1613;
pub const MSR_SECONDARY_TURBO_RATIO_LIMIT: u32 = 1616;
pub const MSR_PKG_WEIGHTED_CORE_C0_RES: u32 = 1624;
pub const MSR_PKG_ANY_CORE_C0_RES: u32 = 1625;
pub const MSR_PKG_ANY_GFXE_C0_RES: u32 = 1626;
pub const MSR_PKG_BOTH_CORE_GFXE_C0_RES: u32 = 1627;
pub const MSR_CORE_C1_RES: u32 = 1632;
pub const MSR_MODULE_C6_RES_MS: u32 = 1636;
pub const MSR_CC6_DEMOTION_POLICY_CONFIG: u32 = 1640;
pub const MSR_MC6_DEMOTION_POLICY_CONFIG: u32 = 1641;
pub const MSR_ATOM_CORE_RATIOS: u32 = 1642;
pub const MSR_ATOM_CORE_VIDS: u32 = 1643;
pub const MSR_ATOM_CORE_TURBO_RATIOS: u32 = 1644;
pub const MSR_ATOM_CORE_TURBO_VIDS: u32 = 1645;
pub const MSR_CORE_PERF_LIMIT_REASONS: u32 = 1680;
pub const MSR_GFX_PERF_LIMIT_REASONS: u32 = 1712;
pub const MSR_RING_PERF_LIMIT_REASONS: u32 = 1713;
pub const MSR_IA32_U_CET: u32 = 1696;
pub const MSR_IA32_S_CET: u32 = 1698;
pub const MSR_IA32_PL0_SSP: u32 = 1700;
pub const MSR_IA32_PL1_SSP: u32 = 1701;
pub const MSR_IA32_PL2_SSP: u32 = 1702;
pub const MSR_IA32_PL3_SSP: u32 = 1703;
pub const MSR_IA32_INT_SSP_TAB: u32 = 1704;
pub const MSR_PPERF: u32 = 1614;
pub const MSR_PERF_LIMIT_REASONS: u32 = 1615;
pub const MSR_PM_ENABLE: u32 = 1904;
pub const MSR_HWP_CAPABILITIES: u32 = 1905;
pub const MSR_HWP_REQUEST_PKG: u32 = 1906;
pub const MSR_HWP_INTERRUPT: u32 = 1907;
pub const MSR_HWP_REQUEST: u32 = 1908;
pub const MSR_HWP_STATUS: u32 = 1911;
pub const HWP_BASE_BIT: u32 = 128;
pub const HWP_NOTIFICATIONS_BIT: u32 = 256;
pub const HWP_ACTIVITY_WINDOW_BIT: u32 = 512;
pub const HWP_ENERGY_PERF_PREFERENCE_BIT: u32 = 1024;
pub const HWP_PACKAGE_LEVEL_REQUEST_BIT: u32 = 2048;
pub const HWP_EPP_PERFORMANCE: u32 = 0;
pub const HWP_EPP_BALANCE_PERFORMANCE: u32 = 128;
pub const HWP_EPP_BALANCE_POWERSAVE: u32 = 192;
pub const HWP_EPP_POWERSAVE: u32 = 255;
pub const MSR_AMD64_MC0_MASK: u32 = 3221291076;
pub const MSR_IA32_MC0_CTL2: u32 = 640;
pub const MSR_P6_PERFCTR0: u32 = 193;
pub const MSR_P6_PERFCTR1: u32 = 194;
pub const MSR_P6_EVNTSEL0: u32 = 390;
pub const MSR_P6_EVNTSEL1: u32 = 391;
pub const MSR_KNC_PERFCTR0: u32 = 32;
pub const MSR_KNC_PERFCTR1: u32 = 33;
pub const MSR_KNC_EVNTSEL0: u32 = 40;
pub const MSR_KNC_EVNTSEL1: u32 = 41;
pub const MSR_IA32_PMC0: u32 = 1217;
pub const MSR_RELOAD_PMC0: u32 = 5313;
pub const MSR_RELOAD_FIXED_CTR0: u32 = 4873;
pub const MSR_IA32_PMC_V6_GP0_CTR: u32 = 6400;
pub const MSR_IA32_PMC_V6_GP0_CFG_A: u32 = 6401;
pub const MSR_IA32_PMC_V6_FX0_CTR: u32 = 6528;
pub const MSR_IA32_PMC_V6_STEP: u32 = 4;
pub const MSR_IA32_MKTME_KEYID_PARTITIONING: u32 = 135;
pub const MSR_AMD64_PATCH_LEVEL: u32 = 139;
pub const MSR_AMD64_TSC_RATIO: u32 = 3221225732;
pub const MSR_AMD64_NB_CFG: u32 = 3221291039;
pub const MSR_AMD64_PATCH_LOADER: u32 = 3221291040;
pub const MSR_AMD_PERF_CTL: u32 = 3221291106;
pub const MSR_AMD_PERF_STATUS: u32 = 3221291107;
pub const MSR_AMD_PSTATE_DEF_BASE: u32 = 3221291108;
pub const MSR_AMD64_OSVW_ID_LENGTH: u32 = 3221291328;
pub const MSR_AMD64_OSVW_STATUS: u32 = 3221291329;
pub const MSR_AMD_PPIN_CTL: u32 = 3221291760;
pub const MSR_AMD_PPIN: u32 = 3221291761;
pub const MSR_AMD64_CPUID_FN_1: u32 = 3221295108;
pub const MSR_AMD64_LS_CFG: u32 = 3221295136;
pub const MSR_AMD64_DC_CFG: u32 = 3221295138;
pub const MSR_AMD64_TW_CFG: u32 = 3221295139;
pub const MSR_AMD64_DE_CFG: u32 = 3221295145;
pub const MSR_AMD64_DE_CFG_LFENCE_SERIALIZE_BIT: u32 = 1;
pub const MSR_AMD64_DE_CFG_ZEN2_FP_BACKUP_FIX_BIT: u32 = 9;
pub const MSR_AMD64_BU_CFG2: u32 = 3221295146;
pub const MSR_AMD64_IBSFETCHCTL: u32 = 3221295152;
pub const MSR_AMD64_IBSFETCHLINAD: u32 = 3221295153;
pub const MSR_AMD64_IBSFETCHPHYSAD: u32 = 3221295154;
pub const MSR_AMD64_IBSFETCH_REG_COUNT: u32 = 3;
pub const MSR_AMD64_IBSFETCH_REG_MASK: u32 = 7;
pub const MSR_AMD64_IBSOPCTL: u32 = 3221295155;
pub const MSR_AMD64_IBSOPRIP: u32 = 3221295156;
pub const MSR_AMD64_IBSOPDATA: u32 = 3221295157;
pub const MSR_AMD64_IBSOPDATA2: u32 = 3221295158;
pub const MSR_AMD64_IBSOPDATA3: u32 = 3221295159;
pub const MSR_AMD64_IBSDCLINAD: u32 = 3221295160;
pub const MSR_AMD64_IBSDCPHYSAD: u32 = 3221295161;
pub const MSR_AMD64_IBSOP_REG_COUNT: u32 = 7;
pub const MSR_AMD64_IBSOP_REG_MASK: u32 = 127;
pub const MSR_AMD64_IBSCTL: u32 = 3221295162;
pub const MSR_AMD64_IBSBRTARGET: u32 = 3221295163;
pub const MSR_AMD64_ICIBSEXTDCTL: u32 = 3221295164;
pub const MSR_AMD64_IBSOPDATA4: u32 = 3221295165;
pub const MSR_AMD64_IBS_REG_COUNT_MAX: u32 = 8;
pub const MSR_AMD64_SVM_AVIC_DOORBELL: u32 = 3221291291;
pub const MSR_AMD64_VM_PAGE_FLUSH: u32 = 3221291294;
pub const MSR_AMD64_SEV_ES_GHCB: u32 = 3221291312;
pub const MSR_AMD64_SEV: u32 = 3221291313;
pub const MSR_AMD64_SEV_ENABLED_BIT: u32 = 0;
pub const MSR_AMD64_SEV_ES_ENABLED_BIT: u32 = 1;
pub const MSR_AMD64_SEV_SNP_ENABLED_BIT: u32 = 2;
pub const MSR_AMD64_SNP_VTOM_BIT: u32 = 3;
pub const MSR_AMD64_SNP_REFLECT_VC_BIT: u32 = 4;
pub const MSR_AMD64_SNP_RESTRICTED_INJ_BIT: u32 = 5;
pub const MSR_AMD64_SNP_ALT_INJ_BIT: u32 = 6;
pub const MSR_AMD64_SNP_DEBUG_SWAP_BIT: u32 = 7;
pub const MSR_AMD64_SNP_PREVENT_HOST_IBS_BIT: u32 = 8;
pub const MSR_AMD64_SNP_BTB_ISOLATION_BIT: u32 = 9;
pub const MSR_AMD64_SNP_VMPL_SSS_BIT: u32 = 10;
pub const MSR_AMD64_SNP_SECURE_TSC_BIT: u32 = 11;
pub const MSR_AMD64_SNP_VMGEXIT_PARAM_BIT: u32 = 12;
pub const MSR_AMD64_SNP_IBS_VIRT_BIT: u32 = 14;
pub const MSR_AMD64_SNP_VMSA_REG_PROT_BIT: u32 = 16;
pub const MSR_AMD64_SNP_SMT_PROT_BIT: u32 = 17;
pub const MSR_AMD64_SNP_RESV_BIT: u32 = 18;
pub const MSR_AMD64_VIRT_SPEC_CTRL: u32 = 3221291295;
pub const MSR_AMD64_RMP_BASE: u32 = 3221291314;
pub const MSR_AMD64_RMP_END: u32 = 3221291315;
pub const MSR_SVSM_CAA: u32 = 3221352448;
pub const MSR_AMD_CPPC_CAP1: u32 = 3221291696;
pub const MSR_AMD_CPPC_ENABLE: u32 = 3221291697;
pub const MSR_AMD_CPPC_CAP2: u32 = 3221291698;
pub const MSR_AMD_CPPC_REQ: u32 = 3221291699;
pub const MSR_AMD_CPPC_STATUS: u32 = 3221291700;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_STATUS: u32 = 3221226240;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_CTL: u32 = 3221226241;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR: u32 = 3221226242;
pub const MSR_AMD64_LBR_SELECT: u32 = 3221225742;
pub const MSR_ZEN4_BP_CFG: u32 = 3221295150;
pub const MSR_ZEN4_BP_CFG_SHARED_BTB_FIX_BIT: u32 = 5;
pub const MSR_F19H_UMC_PERF_CTL: u32 = 3221293056;
pub const MSR_F19H_UMC_PERF_CTR: u32 = 3221293057;
pub const MSR_ZEN2_SPECTRAL_CHICKEN: u32 = 3221295331;
pub const MSR_F17H_IRPERF: u32 = 3221225705;
pub const MSR_F16H_L2I_PERF_CTL: u32 = 3221291568;
pub const MSR_F16H_L2I_PERF_CTR: u32 = 3221291569;
pub const MSR_F16H_DR1_ADDR_MASK: u32 = 3221295129;
pub const MSR_F16H_DR2_ADDR_MASK: u32 = 3221295130;
pub const MSR_F16H_DR3_ADDR_MASK: u32 = 3221295131;
pub const MSR_F16H_DR0_ADDR_MASK: u32 = 3221295143;
pub const MSR_F15H_CU_PWR_ACCUMULATOR: u32 = 3221291130;
pub const MSR_F15H_CU_MAX_PWR_ACCUMULATOR: u32 = 3221291131;
pub const MSR_F15H_PERF_CTL: u32 = 3221291520;
pub const MSR_F15H_PERF_CTL0: u32 = 3221291520;
pub const MSR_F15H_PERF_CTL1: u32 = 3221291522;
pub const MSR_F15H_PERF_CTL2: u32 = 3221291524;
pub const MSR_F15H_PERF_CTL3: u32 = 3221291526;
pub const MSR_F15H_PERF_CTL4: u32 = 3221291528;
pub const MSR_F15H_PERF_CTL5: u32 = 3221291530;
pub const MSR_F15H_PERF_CTR: u32 = 3221291521;
pub const MSR_F15H_PERF_CTR0: u32 = 3221291521;
pub const MSR_F15H_PERF_CTR1: u32 = 3221291523;
pub const MSR_F15H_PERF_CTR2: u32 = 3221291525;
pub const MSR_F15H_PERF_CTR3: u32 = 3221291527;
pub const MSR_F15H_PERF_CTR4: u32 = 3221291529;
pub const MSR_F15H_PERF_CTR5: u32 = 3221291531;
pub const MSR_F15H_NB_PERF_CTL: u32 = 3221291584;
pub const MSR_F15H_NB_PERF_CTR: u32 = 3221291585;
pub const MSR_F15H_PTSC: u32 = 3221291648;
pub const MSR_F15H_IC_CFG: u32 = 3221295137;
pub const MSR_F15H_EX_CFG: u32 = 3221295148;
pub const MSR_FAM10H_MMIO_CONF_BASE: u32 = 3221291096;
pub const FAM10H_MMIO_CONF_ENABLE: u32 = 1;
pub const FAM10H_MMIO_CONF_BUSRANGE_MASK: u32 = 15;
pub const FAM10H_MMIO_CONF_BUSRANGE_SHIFT: u32 = 2;
pub const FAM10H_MMIO_CONF_BASE_MASK: u32 = 268435455;
pub const FAM10H_MMIO_CONF_BASE_SHIFT: u32 = 20;
pub const MSR_FAM10H_NODE_ID: u32 = 3221295116;
pub const MSR_K8_TOP_MEM1: u32 = 3221291034;
pub const MSR_K8_TOP_MEM2: u32 = 3221291037;
pub const MSR_AMD64_SYSCFG: u32 = 3221291024;
pub const MSR_AMD64_SYSCFG_MEM_ENCRYPT_BIT: u32 = 23;
pub const MSR_AMD64_SYSCFG_SNP_EN_BIT: u32 = 24;
pub const MSR_AMD64_SYSCFG_SNP_VMPL_EN_BIT: u32 = 25;
pub const MSR_AMD64_SYSCFG_MFDM_BIT: u32 = 19;
pub const MSR_K8_INT_PENDING_MSG: u32 = 3221291093;
pub const K8_INTP_C1E_ACTIVE_MASK: u32 = 402653184;
pub const MSR_K8_TSEG_ADDR: u32 = 3221291282;
pub const MSR_K8_TSEG_MASK: u32 = 3221291283;
pub const K8_MTRRFIXRANGE_DRAM_ENABLE: u32 = 262144;
pub const K8_MTRRFIXRANGE_DRAM_MODIFY: u32 = 524288;
pub const K8_MTRR_RDMEM_WRMEM_MASK: u32 = 404232216;
pub const MSR_K7_EVNTSEL0: u32 = 3221291008;
pub const MSR_K7_PERFCTR0: u32 = 3221291012;
pub const MSR_K7_EVNTSEL1: u32 = 3221291009;
pub const MSR_K7_PERFCTR1: u32 = 3221291013;
pub const MSR_K7_EVNTSEL2: u32 = 3221291010;
pub const MSR_K7_PERFCTR2: u32 = 3221291014;
pub const MSR_K7_EVNTSEL3: u32 = 3221291011;
pub const MSR_K7_PERFCTR3: u32 = 3221291015;
pub const MSR_K7_CLK_CTL: u32 = 3221291035;
pub const MSR_K7_HWCR: u32 = 3221291029;
pub const MSR_K7_HWCR_SMMLOCK_BIT: u32 = 0;
pub const MSR_K7_HWCR_IRPERF_EN_BIT: u32 = 30;
pub const MSR_K7_FID_VID_CTL: u32 = 3221291073;
pub const MSR_K7_FID_VID_STATUS: u32 = 3221291074;
pub const MSR_K7_HWCR_CPB_DIS_BIT: u32 = 25;
pub const MSR_K6_WHCR: u32 = 3221225602;
pub const MSR_K6_UWCCR: u32 = 3221225605;
pub const MSR_K6_EPMR: u32 = 3221225606;
pub const MSR_K6_PSOR: u32 = 3221225607;
pub const MSR_K6_PFIR: u32 = 3221225608;
pub const MSR_IDT_FCR1: u32 = 263;
pub const MSR_IDT_FCR2: u32 = 264;
pub const MSR_IDT_FCR3: u32 = 265;
pub const MSR_IDT_FCR4: u32 = 266;
pub const MSR_IDT_MCR0: u32 = 272;
pub const MSR_IDT_MCR1: u32 = 273;
pub const MSR_IDT_MCR2: u32 = 274;
pub const MSR_IDT_MCR3: u32 = 275;
pub const MSR_IDT_MCR4: u32 = 276;
pub const MSR_IDT_MCR5: u32 = 277;
pub const MSR_IDT_MCR6: u32 = 278;
pub const MSR_IDT_MCR7: u32 = 279;
pub const MSR_IDT_MCR_CTRL: u32 = 288;
pub const MSR_VIA_FCR: u32 = 4359;
pub const MSR_VIA_LONGHAUL: u32 = 4362;
pub const MSR_VIA_RNG: u32 = 4363;
pub const MSR_VIA_BCR2: u32 = 4423;
pub const MSR_TMTA_LONGRUN_CTRL: u32 = 2156298256;
pub const MSR_TMTA_LONGRUN_FLAGS: u32 = 2156298257;
pub const MSR_TMTA_LRTI_READOUT: u32 = 2156298264;
pub const MSR_TMTA_LRTI_VOLT_MHZ: u32 = 2156298266;
pub const MSR_IA32_P5_MC_ADDR: u32 = 0;
pub const MSR_IA32_P5_MC_TYPE: u32 = 1;
pub const MSR_IA32_TSC: u32 = 16;
pub const MSR_IA32_PLATFORM_ID: u32 = 23;
pub const MSR_IA32_EBL_CR_POWERON: u32 = 42;
pub const MSR_EBC_FREQUENCY_ID: u32 = 44;
pub const MSR_SMI_COUNT: u32 = 52;
pub const MSR_IA32_FEAT_CTL: u32 = 58;
pub const MSR_IA32_TSC_ADJUST: u32 = 59;
pub const MSR_IA32_BNDCFGS: u32 = 3472;
pub const MSR_IA32_BNDCFGS_RSVD: u32 = 4092;
pub const MSR_IA32_XFD: u32 = 452;
pub const MSR_IA32_XFD_ERR: u32 = 453;
pub const MSR_IA32_XSS: u32 = 3488;
pub const MSR_IA32_APICBASE: u32 = 27;
pub const MSR_IA32_APICBASE_BSP: u32 = 256;
pub const MSR_IA32_APICBASE_ENABLE: u32 = 2048;
pub const MSR_IA32_APICBASE_BASE: u32 = 4294963200;
pub const MSR_IA32_UCODE_WRITE: u32 = 121;
pub const MSR_IA32_UCODE_REV: u32 = 139;
pub const MSR_IA32_SGXLEPUBKEYHASH0: u32 = 140;
pub const MSR_IA32_SGXLEPUBKEYHASH1: u32 = 141;
pub const MSR_IA32_SGXLEPUBKEYHASH2: u32 = 142;
pub const MSR_IA32_SGXLEPUBKEYHASH3: u32 = 143;
pub const MSR_IA32_SMM_MONITOR_CTL: u32 = 155;
pub const MSR_IA32_SMBASE: u32 = 158;
pub const MSR_IA32_PERF_STATUS: u32 = 408;
pub const MSR_IA32_PERF_CTL: u32 = 409;
pub const INTEL_PERF_CTL_MASK: u32 = 65535;
pub const MSR_AMD_DBG_EXTN_CFG: u32 = 3221225743;
pub const MSR_AMD_SAMP_BR_FROM: u32 = 3221291776;
pub const MSR_IA32_MPERF: u32 = 231;
pub const MSR_IA32_APERF: u32 = 232;
pub const MSR_IA32_THERM_CONTROL: u32 = 410;
pub const MSR_IA32_THERM_INTERRUPT: u32 = 411;
pub const THERM_INT_HIGH_ENABLE: u32 = 1;
pub const THERM_INT_LOW_ENABLE: u32 = 2;
pub const THERM_INT_PLN_ENABLE: u32 = 16777216;
pub const MSR_IA32_THERM_STATUS: u32 = 412;
pub const THERM_STATUS_PROCHOT: u32 = 1;
pub const THERM_STATUS_POWER_LIMIT: u32 = 1024;
pub const MSR_THERM2_CTL: u32 = 413;
pub const MSR_THERM2_CTL_TM_SELECT: u32 = 65536;
pub const MSR_IA32_MISC_ENABLE: u32 = 416;
pub const MSR_IA32_TEMPERATURE_TARGET: u32 = 418;
pub const MSR_MISC_FEATURE_CONTROL: u32 = 420;
pub const MSR_MISC_PWR_MGMT: u32 = 426;
pub const MSR_IA32_ENERGY_PERF_BIAS: u32 = 432;
pub const ENERGY_PERF_BIAS_PERFORMANCE: u32 = 0;
pub const ENERGY_PERF_BIAS_BALANCE_PERFORMANCE: u32 = 4;
pub const ENERGY_PERF_BIAS_NORMAL: u32 = 6;
pub const ENERGY_PERF_BIAS_NORMAL_POWERSAVE: u32 = 7;
pub const ENERGY_PERF_BIAS_BALANCE_POWERSAVE: u32 = 8;
pub const ENERGY_PERF_BIAS_POWERSAVE: u32 = 15;
pub const MSR_IA32_PACKAGE_THERM_STATUS: u32 = 433;
pub const PACKAGE_THERM_STATUS_PROCHOT: u32 = 1;
pub const PACKAGE_THERM_STATUS_POWER_LIMIT: u32 = 1024;
pub const PACKAGE_THERM_STATUS_HFI_UPDATED: u32 = 67108864;
pub const MSR_IA32_PACKAGE_THERM_INTERRUPT: u32 = 434;
pub const PACKAGE_THERM_INT_HIGH_ENABLE: u32 = 1;
pub const PACKAGE_THERM_INT_LOW_ENABLE: u32 = 2;
pub const PACKAGE_THERM_INT_PLN_ENABLE: u32 = 16777216;
pub const PACKAGE_THERM_INT_HFI_ENABLE: u32 = 33554432;
pub const THERM_INT_THRESHOLD0_ENABLE: u32 = 32768;
pub const THERM_SHIFT_THRESHOLD0: u32 = 8;
pub const THERM_MASK_THRESHOLD0: u32 = 32512;
pub const THERM_INT_THRESHOLD1_ENABLE: u32 = 8388608;
pub const THERM_SHIFT_THRESHOLD1: u32 = 16;
pub const THERM_MASK_THRESHOLD1: u32 = 8323072;
pub const THERM_STATUS_THRESHOLD0: u32 = 64;
pub const THERM_LOG_THRESHOLD0: u32 = 128;
pub const THERM_STATUS_THRESHOLD1: u32 = 256;
pub const THERM_LOG_THRESHOLD1: u32 = 512;
pub const MSR_IA32_MISC_ENABLE_FAST_STRING_BIT: u32 = 0;
pub const MSR_IA32_MISC_ENABLE_FAST_STRING: u32 = 1;
pub const MSR_IA32_MISC_ENABLE_TCC_BIT: u32 = 1;
pub const MSR_IA32_MISC_ENABLE_TCC: u32 = 2;
pub const MSR_IA32_MISC_ENABLE_EMON_BIT: u32 = 7;
pub const MSR_IA32_MISC_ENABLE_EMON: u32 = 128;
pub const MSR_IA32_MISC_ENABLE_BTS_UNAVAIL_BIT: u32 = 11;
pub const MSR_IA32_MISC_ENABLE_BTS_UNAVAIL: u32 = 2048;
pub const MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL_BIT: u32 = 12;
pub const MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL: u32 = 4096;
pub const MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP_BIT: u32 = 16;
pub const MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP: u32 = 65536;
pub const MSR_IA32_MISC_ENABLE_MWAIT_BIT: u32 = 18;
pub const MSR_IA32_MISC_ENABLE_MWAIT: u32 = 262144;
pub const MSR_IA32_MISC_ENABLE_LIMIT_CPUID_BIT: u32 = 22;
pub const MSR_IA32_MISC_ENABLE_LIMIT_CPUID: u32 = 4194304;
pub const MSR_IA32_MISC_ENABLE_XTPR_DISABLE_BIT: u32 = 23;
pub const MSR_IA32_MISC_ENABLE_XTPR_DISABLE: u32 = 8388608;
pub const MSR_IA32_MISC_ENABLE_XD_DISABLE_BIT: u32 = 34;
pub const MSR_IA32_MISC_ENABLE_XD_DISABLE: u64 = 17179869184;
pub const MSR_IA32_MISC_ENABLE_X87_COMPAT_BIT: u32 = 2;
pub const MSR_IA32_MISC_ENABLE_X87_COMPAT: u32 = 4;
pub const MSR_IA32_MISC_ENABLE_TM1_BIT: u32 = 3;
pub const MSR_IA32_MISC_ENABLE_TM1: u32 = 8;
pub const MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE_BIT: u32 = 4;
pub const MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE: u32 = 16;
pub const MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE_BIT: u32 = 6;
pub const MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE: u32 = 64;
pub const MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK_BIT: u32 = 8;
pub const MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK: u32 = 256;
pub const MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE_BIT: u32 = 9;
pub const MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE: u32 = 512;
pub const MSR_IA32_MISC_ENABLE_FERR_BIT: u32 = 10;
pub const MSR_IA32_MISC_ENABLE_FERR: u32 = 1024;
pub const MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX_BIT: u32 = 10;
pub const MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX: u32 = 1024;
pub const MSR_IA32_MISC_ENABLE_TM2_BIT: u32 = 13;
pub const MSR_IA32_MISC_ENABLE_TM2: u32 = 8192;
pub const MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE_BIT: u32 = 19;
pub const MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE: u32 = 524288;
pub const MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK_BIT: u32 = 20;
pub const MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK: u32 = 1048576;
pub const MSR_IA32_MISC_ENABLE_L1D_CONTEXT_BIT: u32 = 24;
pub const MSR_IA32_MISC_ENABLE_L1D_CONTEXT: u32 = 16777216;
pub const MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE_BIT: u32 = 37;
pub const MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE: u64 = 137438953472;
pub const MSR_IA32_MISC_ENABLE_TURBO_DISABLE_BIT: u32 = 38;
pub const MSR_IA32_MISC_ENABLE_TURBO_DISABLE: u64 = 274877906944;
pub const MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE_BIT: u32 = 39;
pub const MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE: u64 = 549755813888;
pub const MSR_MISC_FEATURES_ENABLES: u32 = 320;
pub const MSR_MISC_FEATURES_ENABLES_CPUID_FAULT_BIT: u32 = 0;
pub const MSR_MISC_FEATURES_ENABLES_RING3MWAIT_BIT: u32 = 1;
pub const MSR_IA32_TSC_DEADLINE: u32 = 1760;
pub const MSR_TSX_FORCE_ABORT: u32 = 271;
pub const MSR_TFA_RTM_FORCE_ABORT_BIT: u32 = 0;
pub const MSR_TFA_TSX_CPUID_CLEAR_BIT: u32 = 1;
pub const MSR_TFA_SDV_ENABLE_RTM_BIT: u32 = 2;
pub const MSR_IA32_MCG_EAX: u32 = 384;
pub const MSR_IA32_MCG_EBX: u32 = 385;
pub const MSR_IA32_MCG_ECX: u32 = 386;
pub const MSR_IA32_MCG_EDX: u32 = 387;
pub const MSR_IA32_MCG_ESI: u32 = 388;
pub const MSR_IA32_MCG_EDI: u32 = 389;
pub const MSR_IA32_MCG_EBP: u32 = 390;
pub const MSR_IA32_MCG_ESP: u32 = 391;
pub const MSR_IA32_MCG_EFLAGS: u32 = 392;
pub const MSR_IA32_MCG_EIP: u32 = 393;
pub const MSR_IA32_MCG_RESERVED: u32 = 394;
pub const MSR_P4_BPU_PERFCTR0: u32 = 768;
pub const MSR_P4_BPU_PERFCTR1: u32 = 769;
pub const MSR_P4_BPU_PERFCTR2: u32 = 770;
pub const MSR_P4_BPU_PERFCTR3: u32 = 771;
pub const MSR_P4_MS_PERFCTR0: u32 = 772;
pub const MSR_P4_MS_PERFCTR1: u32 = 773;
pub const MSR_P4_MS_PERFCTR2: u32 = 774;
pub const MSR_P4_MS_PERFCTR3: u32 = 775;
pub const MSR_P4_FLAME_PERFCTR0: u32 = 776;
pub const MSR_P4_FLAME_PERFCTR1: u32 = 777;
pub const MSR_P4_FLAME_PERFCTR2: u32 = 778;
pub const MSR_P4_FLAME_PERFCTR3: u32 = 779;
pub const MSR_P4_IQ_PERFCTR0: u32 = 780;
pub const MSR_P4_IQ_PERFCTR1: u32 = 781;
pub const MSR_P4_IQ_PERFCTR2: u32 = 782;
pub const MSR_P4_IQ_PERFCTR3: u32 = 783;
pub const MSR_P4_IQ_PERFCTR4: u32 = 784;
pub const MSR_P4_IQ_PERFCTR5: u32 = 785;
pub const MSR_P4_BPU_CCCR0: u32 = 864;
pub const MSR_P4_BPU_CCCR1: u32 = 865;
pub const MSR_P4_BPU_CCCR2: u32 = 866;
pub const MSR_P4_BPU_CCCR3: u32 = 867;
pub const MSR_P4_MS_CCCR0: u32 = 868;
pub const MSR_P4_MS_CCCR1: u32 = 869;
pub const MSR_P4_MS_CCCR2: u32 = 870;
pub const MSR_P4_MS_CCCR3: u32 = 871;
pub const MSR_P4_FLAME_CCCR0: u32 = 872;
pub const MSR_P4_FLAME_CCCR1: u32 = 873;
pub const MSR_P4_FLAME_CCCR2: u32 = 874;
pub const MSR_P4_FLAME_CCCR3: u32 = 875;
pub const MSR_P4_IQ_CCCR0: u32 = 876;
pub const MSR_P4_IQ_CCCR1: u32 = 877;
pub const MSR_P4_IQ_CCCR2: u32 = 878;
pub const MSR_P4_IQ_CCCR3: u32 = 879;
pub const MSR_P4_IQ_CCCR4: u32 = 880;
pub const MSR_P4_IQ_CCCR5: u32 = 881;
pub const MSR_P4_ALF_ESCR0: u32 = 970;
pub const MSR_P4_ALF_ESCR1: u32 = 971;
pub const MSR_P4_BPU_ESCR0: u32 = 946;
pub const MSR_P4_BPU_ESCR1: u32 = 947;
pub const MSR_P4_BSU_ESCR0: u32 = 928;
pub const MSR_P4_BSU_ESCR1: u32 = 929;
pub const MSR_P4_CRU_ESCR0: u32 = 952;
pub const MSR_P4_CRU_ESCR1: u32 = 953;
pub const MSR_P4_CRU_ESCR2: u32 = 972;
pub const MSR_P4_CRU_ESCR3: u32 = 973;
pub const MSR_P4_CRU_ESCR4: u32 = 992;
pub const MSR_P4_CRU_ESCR5: u32 = 993;
pub const MSR_P4_DAC_ESCR0: u32 = 936;
pub const MSR_P4_DAC_ESCR1: u32 = 937;
pub const MSR_P4_FIRM_ESCR0: u32 = 932;
pub const MSR_P4_FIRM_ESCR1: u32 = 933;
pub const MSR_P4_FLAME_ESCR0: u32 = 934;
pub const MSR_P4_FLAME_ESCR1: u32 = 935;
pub const MSR_P4_FSB_ESCR0: u32 = 930;
pub const MSR_P4_FSB_ESCR1: u32 = 931;
pub const MSR_P4_IQ_ESCR0: u32 = 954;
pub const MSR_P4_IQ_ESCR1: u32 = 955;
pub const MSR_P4_IS_ESCR0: u32 = 948;
pub const MSR_P4_IS_ESCR1: u32 = 949;
pub const MSR_P4_ITLB_ESCR0: u32 = 950;
pub const MSR_P4_ITLB_ESCR1: u32 = 951;
pub const MSR_P4_IX_ESCR0: u32 = 968;
pub const MSR_P4_IX_ESCR1: u32 = 969;
pub const MSR_P4_MOB_ESCR0: u32 = 938;
pub const MSR_P4_MOB_ESCR1: u32 = 939;
pub const MSR_P4_MS_ESCR0: u32 = 960;
pub const MSR_P4_MS_ESCR1: u32 = 961;
pub const MSR_P4_PMH_ESCR0: u32 = 940;
pub const MSR_P4_PMH_ESCR1: u32 = 941;
pub const MSR_P4_RAT_ESCR0: u32 = 956;
pub const MSR_P4_RAT_ESCR1: u32 = 957;
pub const MSR_P4_SAAT_ESCR0: u32 = 942;
pub const MSR_P4_SAAT_ESCR1: u32 = 943;
pub const MSR_P4_SSU_ESCR0: u32 = 958;
pub const MSR_P4_SSU_ESCR1: u32 = 959;
pub const MSR_P4_TBPU_ESCR0: u32 = 962;
pub const MSR_P4_TBPU_ESCR1: u32 = 963;
pub const MSR_P4_TC_ESCR0: u32 = 964;
pub const MSR_P4_TC_ESCR1: u32 = 965;
pub const MSR_P4_U2L_ESCR0: u32 = 944;
pub const MSR_P4_U2L_ESCR1: u32 = 945;
pub const MSR_P4_PEBS_MATRIX_VERT: u32 = 1010;
pub const MSR_CORE_PERF_FIXED_CTR0: u32 = 777;
pub const MSR_CORE_PERF_FIXED_CTR1: u32 = 778;
pub const MSR_CORE_PERF_FIXED_CTR2: u32 = 779;
pub const MSR_CORE_PERF_FIXED_CTR3: u32 = 780;
pub const MSR_CORE_PERF_FIXED_CTR_CTRL: u32 = 909;
pub const MSR_CORE_PERF_GLOBAL_STATUS: u32 = 910;
pub const MSR_CORE_PERF_GLOBAL_CTRL: u32 = 911;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL: u32 = 912;
pub const MSR_PERF_METRICS: u32 = 809;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI_BIT: u32 = 55;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI: u64 = 36028797018963968;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF_BIT: u32 = 62;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF: u64 = 4611686018427387904;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD_BIT: u32 = 63;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD: i64 = -9223372036854775808;
pub const MSR_GEODE_BUSCONT_CONF0: u32 = 6400;
pub const MSR_IA32_VMX_BASIC: u32 = 1152;
pub const MSR_IA32_VMX_PINBASED_CTLS: u32 = 1153;
pub const MSR_IA32_VMX_PROCBASED_CTLS: u32 = 1154;
pub const MSR_IA32_VMX_EXIT_CTLS: u32 = 1155;
pub const MSR_IA32_VMX_ENTRY_CTLS: u32 = 1156;
pub const MSR_IA32_VMX_MISC: u32 = 1157;
pub const MSR_IA32_VMX_CR0_FIXED0: u32 = 1158;
pub const MSR_IA32_VMX_CR0_FIXED1: u32 = 1159;
pub const MSR_IA32_VMX_CR4_FIXED0: u32 = 1160;
pub const MSR_IA32_VMX_CR4_FIXED1: u32 = 1161;
pub const MSR_IA32_VMX_VMCS_ENUM: u32 = 1162;
pub const MSR_IA32_VMX_PROCBASED_CTLS2: u32 = 1163;
pub const MSR_IA32_VMX_EPT_VPID_CAP: u32 = 1164;
pub const MSR_IA32_VMX_TRUE_PINBASED_CTLS: u32 = 1165;
pub const MSR_IA32_VMX_TRUE_PROCBASED_CTLS: u32 = 1166;
pub const MSR_IA32_VMX_TRUE_EXIT_CTLS: u32 = 1167;
pub const MSR_IA32_VMX_TRUE_ENTRY_CTLS: u32 = 1168;
pub const MSR_IA32_VMX_VMFUNC: u32 = 1169;
pub const MSR_IA32_VMX_PROCBASED_CTLS3: u32 = 1170;
pub const VMX_BASIC_VMCS_SIZE_SHIFT: u32 = 32;
pub const VMX_BASIC_TRUE_CTLS: u64 = 36028797018963968;
pub const VMX_BASIC_64: u64 = 281474976710656;
pub const VMX_BASIC_MEM_TYPE_SHIFT: u32 = 50;
pub const VMX_BASIC_MEM_TYPE_MASK: u64 = 16888498602639360;
pub const VMX_BASIC_MEM_TYPE_WB: u32 = 6;
pub const VMX_BASIC_INOUT: u64 = 18014398509481984;
pub const MSR_IA32_L3_QOS_CFG: u32 = 3201;
pub const MSR_IA32_L2_QOS_CFG: u32 = 3202;
pub const MSR_IA32_QM_EVTSEL: u32 = 3213;
pub const MSR_IA32_QM_CTR: u32 = 3214;
pub const MSR_IA32_PQR_ASSOC: u32 = 3215;
pub const MSR_IA32_L3_CBM_BASE: u32 = 3216;
pub const MSR_RMID_SNC_CONFIG: u32 = 3232;
pub const MSR_IA32_L2_CBM_BASE: u32 = 3344;
pub const MSR_IA32_MBA_THRTL_BASE: u32 = 3408;
pub const MSR_IA32_MBA_BW_BASE: u32 = 3221225984;
pub const MSR_IA32_SMBA_BW_BASE: u32 = 3221226112;
pub const MSR_IA32_EVT_CFG_BASE: u32 = 3221226496;
pub const MSR_IA32_VMX_MISC_INTEL_PT: u32 = 16384;
pub const MSR_IA32_VMX_MISC_VMWRITE_SHADOW_RO_FIELDS: u32 = 536870912;
pub const MSR_IA32_VMX_MISC_PREEMPTION_TIMER_SCALE: u32 = 31;
pub const MSR_VM_CR: u32 = 3221291284;
pub const MSR_VM_IGNNE: u32 = 3221291285;
pub const MSR_VM_HSAVE_PA: u32 = 3221291287;
pub const SVM_VM_CR_VALID_MASK: u32 = 31;
pub const SVM_VM_CR_SVM_LOCK_MASK: u32 = 8;
pub const SVM_VM_CR_SVM_DIS_MASK: u32 = 16;
pub const MSR_IA32_HW_FEEDBACK_PTR: u32 = 6096;
pub const MSR_IA32_HW_FEEDBACK_CONFIG: u32 = 6097;
pub const MSR_IA32_XAPIC_DISABLE_STATUS: u32 = 189;
pub const ORC_REG_UNDEFINED: u32 = 0;
pub const ORC_REG_PREV_SP: u32 = 1;
pub const ORC_REG_DX: u32 = 2;
pub const ORC_REG_DI: u32 = 3;
pub const ORC_REG_BP: u32 = 4;
pub const ORC_REG_SP: u32 = 5;
pub const ORC_REG_R10: u32 = 6;
pub const ORC_REG_R13: u32 = 7;
pub const ORC_REG_BP_INDIRECT: u32 = 8;
pub const ORC_REG_SP_INDIRECT: u32 = 9;
pub const ORC_REG_MAX: u32 = 15;
pub const ORC_TYPE_UNDEFINED: u32 = 0;
pub const ORC_TYPE_END_OF_STACK: u32 = 1;
pub const ORC_TYPE_CALL: u32 = 2;
pub const ORC_TYPE_REGS: u32 = 3;
pub const ORC_TYPE_REGS_PARTIAL: u32 = 4;
pub const RET_DEPTH_SHIFT: u32 = 5;
pub const RSB_RET_STUFF_LOOPS: u32 = 16;
pub const RET_DEPTH_INIT: i64 = -9223372036854775808;
pub const RET_DEPTH_INIT_FROM_CALL: i64 = -288230376151711744;
pub const RET_DEPTH_CREDIT: i32 = -1;
pub const KVM_STEAL_TIME_preempted: u32 = 16;
pub const pt_regs_bx: u32 = 40;
pub const pt_regs_cx: u32 = 88;
pub const pt_regs_dx: u32 = 96;
pub const pt_regs_sp: u32 = 152;
pub const pt_regs_bp: u32 = 32;
pub const pt_regs_si: u32 = 104;
pub const pt_regs_di: u32 = 112;
pub const pt_regs_r8: u32 = 72;
pub const pt_regs_r9: u32 = 64;
pub const pt_regs_r10: u32 = 56;
pub const pt_regs_r11: u32 = 48;
pub const pt_regs_r12: u32 = 24;
pub const pt_regs_r13: u32 = 16;
pub const pt_regs_r14: u32 = 8;
pub const pt_regs_r15: u32 = 0;
pub const pt_regs_flags: u32 = 144;
pub const saved_context_cr0: u32 = 200;
pub const saved_context_cr2: u32 = 208;
pub const saved_context_cr3: u32 = 216;
pub const saved_context_cr4: u32 = 224;
pub const saved_context_gdt_desc: u32 = 266;
pub const FIXED_stack_canary: u32 = 40;
pub const TASK_threadsp: u32 = 9304;
pub const TASK_stack_canary: u32 = 2504;
pub const pbe_address: u32 = 0;
pub const pbe_orig_address: u32 = 8;
pub const pbe_next: u32 = 16;
pub const IA32_SIGCONTEXT_ax: u32 = 44;
pub const IA32_SIGCONTEXT_bx: u32 = 32;
pub const IA32_SIGCONTEXT_cx: u32 = 40;
pub const IA32_SIGCONTEXT_dx: u32 = 36;
pub const IA32_SIGCONTEXT_si: u32 = 20;
pub const IA32_SIGCONTEXT_di: u32 = 16;
pub const IA32_SIGCONTEXT_bp: u32 = 24;
pub const IA32_SIGCONTEXT_sp: u32 = 28;
pub const IA32_SIGCONTEXT_ip: u32 = 56;
pub const IA32_RT_SIGFRAME_sigcontext: u32 = 164;
pub const XEN_vcpu_info_mask: u32 = 1;
pub const XEN_vcpu_info_pending: u32 = 0;
pub const XEN_vcpu_info_arch_cr2: u32 = 16;
pub const TDX_MODULE_rcx: u32 = 0;
pub const TDX_MODULE_rdx: u32 = 8;
pub const TDX_MODULE_r8: u32 = 16;
pub const TDX_MODULE_r9: u32 = 24;
pub const TDX_MODULE_r10: u32 = 32;
pub const TDX_MODULE_r11: u32 = 40;
pub const TDX_MODULE_r12: u32 = 48;
pub const TDX_MODULE_r13: u32 = 56;
pub const TDX_MODULE_r14: u32 = 64;
pub const TDX_MODULE_r15: u32 = 72;
pub const TDX_MODULE_rbx: u32 = 80;
pub const TDX_MODULE_rdi: u32 = 88;
pub const TDX_MODULE_rsi: u32 = 96;
pub const BP_scratch: u32 = 484;
pub const BP_secure_boot: u32 = 492;
pub const BP_loadflags: u32 = 529;
pub const BP_hardware_subarch: u32 = 572;
pub const BP_version: u32 = 518;
pub const BP_kernel_alignment: u32 = 560;
pub const BP_init_size: u32 = 608;
pub const BP_pref_address: u32 = 600;
pub const PTREGS_SIZE: u32 = 168;
pub const TLB_STATE_user_pcid_flush_mask: u32 = 22;
pub const CPU_ENTRY_AREA_entry_stack: u32 = 4096;
pub const SIZEOF_entry_stack: u32 = 4096;
pub const MASK_entry_stack: i32 = -4096;
pub const TSS_sp0: u32 = 4;
pub const TSS_sp1: u32 = 12;
pub const TSS_sp2: u32 = 20;
pub const X86_top_of_stack: u32 = 24;
pub const X86_current_task: u32 = 0;
pub const X86_call_depth: u32 = 16;
pub const ARIA_CTX_enc_key: u32 = 0;
pub const ARIA_CTX_dec_key: u32 = 272;
pub const ARIA_CTX_rounds: u32 = 544;
pub const RETPOLINE_THUNK_SIZE: u32 = 32;
pub const RSB_CLEAR_LOOPS: u32 = 32;
pub const ANNOTATE_RETPOLINE_SAFE: &[u8; 70] =
    b"999:\n\t.pushsection .discard.retpoline_safe\n\t.long 999b\n\t.popsection\n\t\0";
pub const PARAVIRT_CALL : & [u8 ; 94] = b"999:\n\t.pushsection .discard.retpoline_safe\n\t.long 999b\n\t.popsection\n\tcall *%[paravirt_opptr];\0" ;
pub const LDT_ENTRIES: u32 = 8192;
pub const LDT_ENTRY_SIZE: u32 = 8;
pub const MODIFY_LDT_CONTENTS_DATA: u32 = 0;
pub const MODIFY_LDT_CONTENTS_STACK: u32 = 1;
pub const MODIFY_LDT_CONTENTS_CODE: u32 = 2;
pub const NR_REG_ARGUMENTS: u32 = 6;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const X86_FXSR_MAGIC: u32 = 0;
pub const ENCODE_FRAME_POINTER: &[u8; 20] = b"lea 1(%rsp), %rbp\n\t\0";
pub const PV_SAVE_ALL_CALLER_REGS: &[u8; 79] =
    b"push %rcx;push %rdx;push %rsi;push %rdi;push %r8;push %r9;push %r10;push %r11;\0";
pub const PV_RESTORE_ALL_CALLER_REGS: &[u8; 71] =
    b"pop %r11;pop %r10;pop %r9;pop %r8;pop %rdi;pop %rsi;pop %rdx;pop %rcx;\0";
pub const MXCSR_DEFAULT: u32 = 8064;
pub const NVMXINTS: u32 = 5;
pub const VMX_FEATURE_INTR_EXITING: u32 = 0;
pub const VMX_FEATURE_NMI_EXITING: u32 = 3;
pub const VMX_FEATURE_VIRTUAL_NMIS: u32 = 5;
pub const VMX_FEATURE_PREEMPTION_TIMER: u32 = 6;
pub const VMX_FEATURE_POSTED_INTR: u32 = 7;
pub const VMX_FEATURE_INVVPID: u32 = 16;
pub const VMX_FEATURE_EPT_EXECUTE_ONLY: u32 = 17;
pub const VMX_FEATURE_EPT_AD: u32 = 18;
pub const VMX_FEATURE_EPT_1GB: u32 = 19;
pub const VMX_FEATURE_EPT_5LEVEL: u32 = 20;
pub const VMX_FEATURE_FLEXPRIORITY: u32 = 24;
pub const VMX_FEATURE_APICV: u32 = 25;
pub const VMX_FEATURE_EPTP_SWITCHING: u32 = 28;
pub const VMX_FEATURE_INTR_WINDOW_EXITING: u32 = 34;
pub const VMX_FEATURE_USE_TSC_OFFSETTING: u32 = 35;
pub const VMX_FEATURE_HLT_EXITING: u32 = 39;
pub const VMX_FEATURE_INVLPG_EXITING: u32 = 41;
pub const VMX_FEATURE_MWAIT_EXITING: u32 = 42;
pub const VMX_FEATURE_RDPMC_EXITING: u32 = 43;
pub const VMX_FEATURE_RDTSC_EXITING: u32 = 44;
pub const VMX_FEATURE_CR3_LOAD_EXITING: u32 = 47;
pub const VMX_FEATURE_CR3_STORE_EXITING: u32 = 48;
pub const VMX_FEATURE_TERTIARY_CONTROLS: u32 = 49;
pub const VMX_FEATURE_CR8_LOAD_EXITING: u32 = 51;
pub const VMX_FEATURE_CR8_STORE_EXITING: u32 = 52;
pub const VMX_FEATURE_VIRTUAL_TPR: u32 = 53;
pub const VMX_FEATURE_NMI_WINDOW_EXITING: u32 = 54;
pub const VMX_FEATURE_MOV_DR_EXITING: u32 = 55;
pub const VMX_FEATURE_UNCOND_IO_EXITING: u32 = 56;
pub const VMX_FEATURE_USE_IO_BITMAPS: u32 = 57;
pub const VMX_FEATURE_MONITOR_TRAP_FLAG: u32 = 59;
pub const VMX_FEATURE_USE_MSR_BITMAPS: u32 = 60;
pub const VMX_FEATURE_MONITOR_EXITING: u32 = 61;
pub const VMX_FEATURE_PAUSE_EXITING: u32 = 62;
pub const VMX_FEATURE_SEC_CONTROLS: u32 = 63;
pub const VMX_FEATURE_VIRT_APIC_ACCESSES: u32 = 64;
pub const VMX_FEATURE_EPT: u32 = 65;
pub const VMX_FEATURE_DESC_EXITING: u32 = 66;
pub const VMX_FEATURE_RDTSCP: u32 = 67;
pub const VMX_FEATURE_VIRTUAL_X2APIC: u32 = 68;
pub const VMX_FEATURE_VPID: u32 = 69;
pub const VMX_FEATURE_WBINVD_EXITING: u32 = 70;
pub const VMX_FEATURE_UNRESTRICTED_GUEST: u32 = 71;
pub const VMX_FEATURE_APIC_REGISTER_VIRT: u32 = 72;
pub const VMX_FEATURE_VIRT_INTR_DELIVERY: u32 = 73;
pub const VMX_FEATURE_PAUSE_LOOP_EXITING: u32 = 74;
pub const VMX_FEATURE_RDRAND_EXITING: u32 = 75;
pub const VMX_FEATURE_INVPCID: u32 = 76;
pub const VMX_FEATURE_VMFUNC: u32 = 77;
pub const VMX_FEATURE_SHADOW_VMCS: u32 = 78;
pub const VMX_FEATURE_ENCLS_EXITING: u32 = 79;
pub const VMX_FEATURE_RDSEED_EXITING: u32 = 80;
pub const VMX_FEATURE_PAGE_MOD_LOGGING: u32 = 81;
pub const VMX_FEATURE_EPT_VIOLATION_VE: u32 = 82;
pub const VMX_FEATURE_PT_CONCEAL_VMX: u32 = 83;
pub const VMX_FEATURE_XSAVES: u32 = 84;
pub const VMX_FEATURE_MODE_BASED_EPT_EXEC: u32 = 86;
pub const VMX_FEATURE_PT_USE_GPA: u32 = 88;
pub const VMX_FEATURE_TSC_SCALING: u32 = 89;
pub const VMX_FEATURE_USR_WAIT_PAUSE: u32 = 90;
pub const VMX_FEATURE_ENCLV_EXITING: u32 = 92;
pub const VMX_FEATURE_BUS_LOCK_DETECTION: u32 = 94;
pub const VMX_FEATURE_NOTIFY_VM_EXITING: u32 = 95;
pub const VMX_FEATURE_IPI_VIRT: u32 = 100;
pub const NET_IP_ALIGN: u32 = 0;
pub const HBP_NUM: u32 = 4;
pub const ARCH_MIN_MMSTRUCT_ALIGN: u32 = 0;
pub const X86_VENDOR_INTEL: u32 = 0;
pub const X86_VENDOR_CYRIX: u32 = 1;
pub const X86_VENDOR_AMD: u32 = 2;
pub const X86_VENDOR_UMC: u32 = 3;
pub const X86_VENDOR_CENTAUR: u32 = 5;
pub const X86_VENDOR_TRANSMETA: u32 = 7;
pub const X86_VENDOR_NSC: u32 = 8;
pub const X86_VENDOR_HYGON: u32 = 9;
pub const X86_VENDOR_ZHAOXIN: u32 = 10;
pub const X86_VENDOR_VORTEX: u32 = 11;
pub const X86_VENDOR_NUM: u32 = 12;
pub const X86_VENDOR_UNKNOWN: u32 = 255;
pub const IO_BITMAP_BITS: u32 = 65536;
pub const IO_BITMAP_BYTES: u32 = 8192;
pub const HAVE_ARCH_PICK_MMAP_LAYOUT: u32 = 1;
pub const BASE_PREFETCH: &[u8; 14] = b"prefetcht0 %1\0";
pub const X86_CAP_FMT_NUM: &[u8; 6] = b"%d:%d\0";
pub const X86_CAP_FMT: &[u8; 3] = b"%s\0";
pub const MAX_CPU_FEATURES: u32 = 704;
pub const CPU_FEATURE_TYPEFMT: &[u8; 26] = b"x86,ven%04Xfam%04Xmod%04X\0";
pub const TIF_NOTIFY_RESUME: u32 = 1;
pub const TIF_SIGPENDING: u32 = 2;
pub const TIF_NEED_RESCHED: u32 = 3;
pub const TIF_SINGLESTEP: u32 = 4;
pub const TIF_SSBD: u32 = 5;
pub const TIF_SPEC_IB: u32 = 9;
pub const TIF_SPEC_L1D_FLUSH: u32 = 10;
pub const TIF_USER_RETURN_NOTIFY: u32 = 11;
pub const TIF_UPROBE: u32 = 12;
pub const TIF_PATCH_PENDING: u32 = 13;
pub const TIF_NEED_FPU_LOAD: u32 = 14;
pub const TIF_NOCPUID: u32 = 15;
pub const TIF_NOTSC: u32 = 16;
pub const TIF_NOTIFY_SIGNAL: u32 = 17;
pub const TIF_MEMDIE: u32 = 20;
pub const TIF_POLLING_NRFLAG: u32 = 21;
pub const TIF_IO_BITMAP: u32 = 22;
pub const TIF_SPEC_FORCE_UPDATE: u32 = 23;
pub const TIF_FORCED_TF: u32 = 24;
pub const TIF_BLOCKSTEP: u32 = 25;
pub const TIF_LAZY_MMU_UPDATES: u32 = 27;
pub const TIF_ADDR32: u32 = 29;
pub const _TIF_NOTIFY_RESUME: u32 = 2;
pub const _TIF_SIGPENDING: u32 = 4;
pub const _TIF_NEED_RESCHED: u32 = 8;
pub const _TIF_SINGLESTEP: u32 = 16;
pub const _TIF_SSBD: u32 = 32;
pub const _TIF_SPEC_IB: u32 = 512;
pub const _TIF_SPEC_L1D_FLUSH: u32 = 1024;
pub const _TIF_USER_RETURN_NOTIFY: u32 = 2048;
pub const _TIF_UPROBE: u32 = 4096;
pub const _TIF_PATCH_PENDING: u32 = 8192;
pub const _TIF_NEED_FPU_LOAD: u32 = 16384;
pub const _TIF_NOCPUID: u32 = 32768;
pub const _TIF_NOTSC: u32 = 65536;
pub const _TIF_NOTIFY_SIGNAL: u32 = 131072;
pub const _TIF_POLLING_NRFLAG: u32 = 2097152;
pub const _TIF_IO_BITMAP: u32 = 4194304;
pub const _TIF_SPEC_FORCE_UPDATE: u32 = 8388608;
pub const _TIF_FORCED_TF: u32 = 16777216;
pub const _TIF_BLOCKSTEP: u32 = 33554432;
pub const _TIF_LAZY_MMU_UPDATES: u32 = 134217728;
pub const _TIF_ADDR32: u32 = 536870912;
pub const _TIF_WORK_CTXSW_BASE: u32 = 42041376;
pub const _TIF_WORK_CTXSW: u32 = 42041888;
pub const _TIF_WORK_CTXSW_PREV: u32 = 46238240;
pub const _TIF_WORK_CTXSW_NEXT: u32 = 42041888;
pub const TS_COMPAT: u32 = 2;
pub const TS_I386_REGS_POKED: u32 = 4;
pub const STARTUP_READ_APICID: u32 = 2147483648;
pub const STARTUP_PARALLEL_MASK: u32 = 4278190080;
pub const force_read_lock_recursive: u32 = 0;
pub const SINGLE_DEPTH_NESTING: u32 = 1;
pub const OSQ_UNLOCKED_VAL: u32 = 0;
pub const LOCK_SECTION_END: &[u8; 12] = b".previous\n\t\0";
pub const SPIN_THRESHOLD: u32 = 32768;
pub const _Q_PENDING_LOOPS: u32 = 512;
pub const _QW_WAITING: u32 = 256;
pub const _QW_LOCKED: u32 = 255;
pub const _QW_WMASK: u32 = 511;
pub const _QR_SHIFT: u32 = 9;
pub const _QR_BIAS: u32 = 512;
pub const RWSEM_UNLOCKED_VALUE: u32 = 0;
pub const RWSEM_WRITER_LOCKED: u32 = 1;
pub const NUM_ACTIVE_RCU_POLL_OLDSTATE: u32 = 2;
pub const TRC_NEED_QS: u32 = 1;
pub const TRC_NEED_QS_CHECKED: u32 = 2;
pub const NUM_ACTIVE_RCU_POLL_FULL_OLDSTATE: u32 = 4;
pub const MSEC_PER_SEC: u32 = 1000;
pub const USEC_PER_MSEC: u32 = 1000;
pub const NSEC_PER_USEC: u32 = 1000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const PSEC_PER_SEC: u64 = 1000000000000;
pub const FSEC_PER_SEC: u64 = 1000000000000000;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_SGI_CYCLE: u32 = 10;
pub const CLOCK_TAI: u32 = 11;
pub const MAX_CLOCKS: u32 = 16;
pub const CLOCKS_MASK: u32 = 1;
pub const CLOCKS_MONO: u32 = 1;
pub const TIMER_ABSTIME: u32 = 1;
pub const PSEC_PER_NSEC: u32 = 1000;
pub const TIME_UPTIME_SEC_MAX: u32 = 946080000;
pub const NTP_API: u32 = 4;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const TIME_OK: u32 = 0;
pub const TIME_INS: u32 = 1;
pub const TIME_DEL: u32 = 2;
pub const TIME_OOP: u32 = 3;
pub const TIME_WAIT: u32 = 4;
pub const TIME_ERROR: u32 = 5;
pub const TIME_BAD: u32 = 5;
pub const ADJ_ADJTIME: u32 = 32768;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 1;
pub const ADJ_OFFSET_READONLY: u32 = 8192;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const LINUX_MM_DEBUG_H: u32 = 1;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const CLONE_CLEAR_SIGHAND: u64 = 4294967296;
pub const CLONE_INTO_CGROUP: u64 = 8589934592;
pub const CLONE_NEWTIME: u32 = 128;
pub const CLONE_ARGS_SIZE_VER0: u32 = 64;
pub const CLONE_ARGS_SIZE_VER1: u32 = 80;
pub const CLONE_ARGS_SIZE_VER2: u32 = 88;
pub const SCHED_NORMAL: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const SCHED_FLAG_RESET_ON_FORK: u32 = 1;
pub const SCHED_FLAG_RECLAIM: u32 = 2;
pub const SCHED_FLAG_DL_OVERRUN: u32 = 4;
pub const SCHED_FLAG_KEEP_POLICY: u32 = 8;
pub const SCHED_FLAG_KEEP_PARAMS: u32 = 16;
pub const SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
pub const SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
pub const SCHED_FLAG_KEEP_ALL: u32 = 24;
pub const SCHED_FLAG_UTIL_CLAMP: u32 = 96;
pub const SCHED_FLAG_ALL: u32 = 127;
pub const KMSAN_RETVAL_SIZE: u32 = 800;
pub const KMSAN_PARAM_SIZE: u32 = 800;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_BOTH: i32 = -2;
pub const RUSAGE_THREAD: u32 = 1;
pub const RLIM64_INFINITY: i32 = -1;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const _STK_LIM: u32 = 8388608;
pub const MLOCK_LIMIT: u32 = 8388608;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_NPROC: u32 = 6;
pub const RLIMIT_NOFILE: u32 = 7;
pub const RLIMIT_MEMLOCK: u32 = 8;
pub const RLIMIT_AS: u32 = 9;
pub const RLIMIT_LOCKS: u32 = 10;
pub const RLIMIT_SIGPENDING: u32 = 11;
pub const RLIMIT_MSGQUEUE: u32 = 12;
pub const RLIMIT_NICE: u32 = 13;
pub const RLIMIT_RTPRIO: u32 = 14;
pub const RLIMIT_RTTIME: u32 = 15;
pub const RLIM_NLIMITS: u32 = 16;
pub const RLIM_INFINITY: i32 = -1;
pub const LT_SAVECOUNT: u32 = 32;
pub const LT_BACKTRACEDEPTH: u32 = 12;
pub const MAX_NICE: u32 = 19;
pub const MIN_NICE: i32 = -20;
pub const NICE_WIDTH: u32 = 40;
pub const MAX_RT_PRIO: u32 = 100;
pub const MAX_PRIO: u32 = 140;
pub const DEFAULT_PRIO: u32 = 120;
pub const _NSIG: u32 = 64;
pub const _NSIG_BPW: u32 = 64;
pub const _NSIG_WORDS: u32 = 1;
pub const SA_IA32_ABI: u32 = 33554432;
pub const SA_X32_ABI: u32 = 16777216;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGBUS: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGUSR1: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGUSR2: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGSTKFLT: u32 = 16;
pub const SIGCHLD: u32 = 17;
pub const SIGCONT: u32 = 18;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGURG: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGPOLL: u32 = 29;
pub const SIGPWR: u32 = 30;
pub const SIGSYS: u32 = 31;
pub const SIGUNUSED: u32 = 31;
pub const SIGRTMIN: u32 = 32;
pub const SIGRTMAX: u32 = 64;
pub const SA_RESTORER: u32 = 67108864;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_UNSUPPORTED: u32 = 1024;
pub const SA_EXPOSE_TAGBITS: u32 = 2048;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const SI_MAX_SIZE: u32 = 128;
pub const SI_USER: u32 = 0;
pub const SI_KERNEL: u32 = 128;
pub const SI_QUEUE: i32 = -1;
pub const SI_TIMER: i32 = -2;
pub const SI_MESGQ: i32 = -3;
pub const SI_ASYNCIO: i32 = -4;
pub const SI_SIGIO: i32 = -5;
pub const SI_TKILL: i32 = -6;
pub const SI_DETHREAD: i32 = -7;
pub const SI_ASYNCNL: i32 = -60;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLOPN: u32 = 2;
pub const ILL_ILLADR: u32 = 3;
pub const ILL_ILLTRP: u32 = 4;
pub const ILL_PRVOPC: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const ILL_BADIADDR: u32 = 9;
pub const __ILL_BREAK: u32 = 10;
pub const __ILL_BNDMOD: u32 = 11;
pub const NSIGILL: u32 = 11;
pub const FPE_INTDIV: u32 = 1;
pub const FPE_INTOVF: u32 = 2;
pub const FPE_FLTDIV: u32 = 3;
pub const FPE_FLTOVF: u32 = 4;
pub const FPE_FLTUND: u32 = 5;
pub const FPE_FLTRES: u32 = 6;
pub const FPE_FLTINV: u32 = 7;
pub const FPE_FLTSUB: u32 = 8;
pub const __FPE_DECOVF: u32 = 9;
pub const __FPE_DECDIV: u32 = 10;
pub const __FPE_DECERR: u32 = 11;
pub const __FPE_INVASC: u32 = 12;
pub const __FPE_INVDEC: u32 = 13;
pub const FPE_FLTUNK: u32 = 14;
pub const FPE_CONDTRAP: u32 = 15;
pub const NSIGFPE: u32 = 15;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const SEGV_BNDERR: u32 = 3;
pub const SEGV_PKUERR: u32 = 4;
pub const SEGV_ACCADI: u32 = 5;
pub const SEGV_ADIDERR: u32 = 6;
pub const SEGV_ADIPERR: u32 = 7;
pub const SEGV_MTEAERR: u32 = 8;
pub const SEGV_MTESERR: u32 = 9;
pub const SEGV_CPERR: u32 = 10;
pub const NSIGSEGV: u32 = 10;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const BUS_MCEERR_AR: u32 = 4;
pub const BUS_MCEERR_AO: u32 = 5;
pub const NSIGBUS: u32 = 5;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const TRAP_BRANCH: u32 = 3;
pub const TRAP_HWBKPT: u32 = 4;
pub const TRAP_UNK: u32 = 5;
pub const TRAP_PERF: u32 = 6;
pub const NSIGTRAP: u32 = 6;
pub const TRAP_PERF_FLAG_ASYNC: u32 = 1;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const NSIGCHLD: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const NSIGPOLL: u32 = 6;
pub const SYS_SECCOMP: u32 = 1;
pub const SYS_USER_DISPATCH: u32 = 2;
pub const NSIGSYS: u32 = 2;
pub const EMT_TAGOVF: u32 = 1;
pub const NSIGEMT: u32 = 1;
pub const SIGEV_SIGNAL: u32 = 0;
pub const SIGEV_NONE: u32 = 1;
pub const SIGEV_THREAD: u32 = 2;
pub const SIGEV_THREAD_ID: u32 = 4;
pub const SIGEV_MAX_SIZE: u32 = 64;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 2;
pub const SS_AUTODISARM: u32 = 2147483648;
pub const SS_FLAG_BITS: u32 = 2147483648;
pub const SIGQUEUE_PREALLOC: u32 = 1;
pub const SA_IMMUTABLE: u32 = 8388608;
pub const __ARCH_UAPI_SA_FLAGS: u32 = 67108864;
pub const UAPI_SA_FLAGS: u32 = 3690989575;
pub const CPUCLOCK_PERTHREAD_MASK: u32 = 4;
pub const CPUCLOCK_CLOCK_MASK: u32 = 3;
pub const CPUCLOCK_PROF: u32 = 0;
pub const CPUCLOCK_VIRT: u32 = 1;
pub const CPUCLOCK_SCHED: u32 = 2;
pub const CPUCLOCK_MAX: u32 = 3;
pub const CLOCKFD: u32 = 3;
pub const CLOCKFD_MASK: u32 = 7;
pub const MAX_DA_NAME_LEN: u32 = 24;
pub const RV_PER_TASK_MONITORS: u32 = 1;
pub const RV_PER_TASK_MONITOR_INIT: u32 = 1;
pub const KM_MAX_IDX: u32 = 16;
pub const TASK_RUNNING: u32 = 0;
pub const TASK_INTERRUPTIBLE: u32 = 1;
pub const TASK_UNINTERRUPTIBLE: u32 = 2;
pub const __TASK_STOPPED: u32 = 4;
pub const __TASK_TRACED: u32 = 8;
pub const EXIT_DEAD: u32 = 16;
pub const EXIT_ZOMBIE: u32 = 32;
pub const EXIT_TRACE: u32 = 48;
pub const TASK_PARKED: u32 = 64;
pub const TASK_DEAD: u32 = 128;
pub const TASK_WAKEKILL: u32 = 256;
pub const TASK_WAKING: u32 = 512;
pub const TASK_NOLOAD: u32 = 1024;
pub const TASK_NEW: u32 = 2048;
pub const TASK_RTLOCK_WAIT: u32 = 4096;
pub const TASK_FREEZABLE: u32 = 8192;
pub const TASK_FROZEN: u32 = 32768;
pub const TASK_STATE_MAX: u32 = 65536;
pub const TASK_ANY: u32 = 65535;
pub const TASK_KILLABLE: u32 = 258;
pub const TASK_STOPPED: u32 = 260;
pub const TASK_TRACED: u32 = 8;
pub const TASK_IDLE: u32 = 1026;
pub const TASK_NORMAL: u32 = 3;
pub const TASK_REPORT: u32 = 127;
pub const SCHED_FIXEDPOINT_SHIFT: u32 = 10;
pub const SCHED_FIXEDPOINT_SCALE: u32 = 1024;
pub const SCHED_CAPACITY_SHIFT: u32 = 10;
pub const SCHED_CAPACITY_SCALE: u32 = 1024;
pub const UTIL_EST_WEIGHT_SHIFT: u32 = 2;
pub const UTIL_AVG_UNCHANGED: u32 = 2147483648;
pub const UCLAMP_BUCKETS: u32 = 5;
pub const PERF_NR_CONTEXTS: u32 = 4;
pub const TASK_REPORT_IDLE: u32 = 128;
pub const TASK_REPORT_MAX: u32 = 256;
pub const PF_VCPU: u32 = 1;
pub const PF_IDLE: u32 = 2;
pub const PF_EXITING: u32 = 4;
pub const PF_POSTCOREDUMP: u32 = 8;
pub const PF_IO_WORKER: u32 = 16;
pub const PF_WQ_WORKER: u32 = 32;
pub const PF_FORKNOEXEC: u32 = 64;
pub const PF_MCE_PROCESS: u32 = 128;
pub const PF_SUPERPRIV: u32 = 256;
pub const PF_DUMPCORE: u32 = 512;
pub const PF_SIGNALED: u32 = 1024;
pub const PF_MEMALLOC: u32 = 2048;
pub const PF_NPROC_EXCEEDED: u32 = 4096;
pub const PF_USED_MATH: u32 = 8192;
pub const PF_USER_WORKER: u32 = 16384;
pub const PF_NOFREEZE: u32 = 32768;
pub const PF__HOLE__00010000: u32 = 65536;
pub const PF_KSWAPD: u32 = 131072;
pub const PF_MEMALLOC_NOFS: u32 = 262144;
pub const PF_MEMALLOC_NOIO: u32 = 524288;
pub const PF_LOCAL_THROTTLE: u32 = 1048576;
pub const PF_KTHREAD: u32 = 2097152;
pub const PF_RANDOMIZE: u32 = 4194304;
pub const PF_MEMALLOC_NORECLAIM: u32 = 8388608;
pub const PF_MEMALLOC_NOWARN: u32 = 16777216;
pub const PF__HOLE__02000000: u32 = 33554432;
pub const PF_NO_SETAFFINITY: u32 = 67108864;
pub const PF_MCE_EARLY: u32 = 134217728;
pub const PF_MEMALLOC_PIN: u32 = 268435456;
pub const PF_BLOCK_TS: u32 = 536870912;
pub const PF__HOLE__40000000: u32 = 1073741824;
pub const PF_SUSPEND_TASK: u32 = 2147483648;
pub const PFA_NO_NEW_PRIVS: u32 = 0;
pub const PFA_SPREAD_PAGE: u32 = 1;
pub const PFA_SPREAD_SLAB: u32 = 2;
pub const PFA_SPEC_SSB_DISABLE: u32 = 3;
pub const PFA_SPEC_SSB_FORCE_DISABLE: u32 = 4;
pub const PFA_SPEC_IB_DISABLE: u32 = 5;
pub const PFA_SPEC_IB_FORCE_DISABLE: u32 = 6;
pub const PFA_SPEC_SSB_NOEXEC: u32 = 7;
pub const MIGHT_RESCHED_RCU_SHIFT: u32 = 8;
pub const MIGHT_RESCHED_PREEMPT_MASK: u32 = 255;
pub const PREEMPT_LOCK_RESCHED_OFFSETS: u32 = 1;
pub const PERCPU_MODULE_RESERVE: u32 = 8192;
pub const PCPU_MIN_ALLOC_SHIFT: u32 = 2;
pub const PCPU_MIN_ALLOC_SIZE: u32 = 4;
pub const PERCPU_DYNAMIC_SIZE_SHIFT: u32 = 12;
pub const PERCPU_DYNAMIC_EARLY_SIZE: u32 = 81920;
pub const PERCPU_DYNAMIC_RESERVE: u32 = 114688;
pub const TRACEPOINT_DEFS_H: u32 = 1;
pub const SHIFT_PLL: u32 = 2;
pub const SHIFT_FLL: u32 = 2;
pub const MAXTC: u32 = 10;
pub const SHIFT_USEC: u32 = 16;
pub const PPM_SCALE_INV_SHIFT: u32 = 19;
pub const MAXPHASE: u32 = 500000000;
pub const MAXFREQ: u32 = 500000;
pub const MINSEC: u32 = 256;
pub const MAXSEC: u32 = 2048;
pub const NTP_PHASE_LIMIT: u32 = 16000000;
pub const NTP_SCALE_SHIFT: u32 = 32;
pub const NTP_INTERVAL_FREQ: u32 = 1000;
pub const NTP_INTERVAL_LENGTH: u32 = 1000000;
pub const PIT_TICK_RATE: u32 = 1193182;
pub const TICK_NSEC: u32 = 1000000;
pub const HZ_TO_MSEC_SHR32: u32 = 31;
pub const MSEC_TO_HZ_SHR32: u32 = 31;
pub const HZ_TO_MSEC_NUM: u32 = 1;
pub const HZ_TO_MSEC_DEN: u32 = 1;
pub const MSEC_TO_HZ_NUM: u32 = 1;
pub const MSEC_TO_HZ_DEN: u32 = 1;
pub const HZ_TO_USEC_SHR32: u32 = 22;
pub const USEC_TO_HZ_SHR32: u32 = 41;
pub const HZ_TO_USEC_NUM: u32 = 1000;
pub const HZ_TO_USEC_DEN: u32 = 1;
pub const USEC_TO_HZ_NUM: u32 = 1;
pub const USEC_TO_HZ_DEN: u32 = 1000;
pub const HZ_TO_NSEC_NUM: u32 = 1000000;
pub const HZ_TO_NSEC_DEN: u32 = 1;
pub const NSEC_TO_HZ_NUM: u32 = 1;
pub const NSEC_TO_HZ_DEN: u32 = 1000000;
pub const SHIFT_HZ: u32 = 10;
pub const TICK_USEC: u32 = 1000;
pub const USER_TICK_USEC: u32 = 10000;
pub const SEC_JIFFIE_SC: u32 = 21;
pub const NSEC_JIFFIE_SC: u32 = 51;
pub const TIMESTAMP_SIZE: u32 = 30;
pub const LOW_RES_NSEC: u32 = 1000000;
pub const KTIME_LOW_RES: u32 = 1000000;
pub const TIMER_CPUMASK: u32 = 262143;
pub const TIMER_MIGRATING: u32 = 262144;
pub const TIMER_BASEMASK: u32 = 524287;
pub const TIMER_DEFERRABLE: u32 = 524288;
pub const TIMER_PINNED: u32 = 1048576;
pub const TIMER_IRQSAFE: u32 = 2097152;
pub const TIMER_INIT_FLAGS: u32 = 3670016;
pub const TIMER_ARRAYSHIFT: u32 = 22;
pub const TIMER_ARRAYMASK: u32 = 4290772992;
pub const TIMER_TRACE_FLAGMASK: u32 = 3932160;
pub const NEXT_TIMER_MAX_DELTA: u32 = 1073741823;
pub const RCU_DONE_TAIL: u32 = 0;
pub const RCU_WAIT_TAIL: u32 = 1;
pub const RCU_NEXT_READY_TAIL: u32 = 2;
pub const RCU_NEXT_TAIL: u32 = 3;
pub const RCU_CBLIST_NSEGS: u32 = 4;
pub const RCU_FANOUT: u32 = 64;
pub const RCU_FANOUT_LEAF: u32 = 16;
pub const RCU_FANOUT_1: u32 = 16;
pub const RCU_FANOUT_2: u32 = 1024;
pub const RCU_FANOUT_3: u32 = 65536;
pub const RCU_FANOUT_4: u32 = 4194304;
pub const RCU_NUM_LVLS: u32 = 3;
pub const NUM_RCU_LVL_0: u32 = 1;
pub const WQ_FLAG_EXCLUSIVE: u32 = 1;
pub const WQ_FLAG_WOKEN: u32 = 2;
pub const WQ_FLAG_CUSTOM: u32 = 4;
pub const WQ_FLAG_DONE: u32 = 8;
pub const WQ_FLAG_PRIORITY: u32 = 16;
pub const SRCU_SIZE_SMALL: u32 = 0;
pub const SRCU_SIZE_ALLOC: u32 = 1;
pub const SRCU_SIZE_WAIT_BARRIER: u32 = 2;
pub const SRCU_SIZE_WAIT_CALL: u32 = 3;
pub const SRCU_SIZE_WAIT_CBS1: u32 = 4;
pub const SRCU_SIZE_WAIT_CBS2: u32 = 5;
pub const SRCU_SIZE_WAIT_CBS3: u32 = 6;
pub const SRCU_SIZE_WAIT_CBS4: u32 = 7;
pub const SRCU_SIZE_BIG: u32 = 8;
pub const SRCU_STATE_IDLE: u32 = 0;
pub const SRCU_STATE_SCAN1: u32 = 1;
pub const SRCU_STATE_SCAN2: u32 = 2;
pub const SRCU_GET_STATE_COMPLETED: u32 = 1;
pub const NUM_ACTIVE_SRCU_POLL_OLDSTATE: u32 = 2;
pub const SRCU_NMI_UNKNOWN: u32 = 0;
pub const SRCU_NMI_UNSAFE: u32 = 1;
pub const SRCU_NMI_SAFE: u32 = 2;
pub const NOTIFY_DONE: u32 = 0;
pub const NOTIFY_OK: u32 = 1;
pub const NOTIFY_STOP_MASK: u32 = 32768;
pub const NOTIFY_BAD: u32 = 32770;
pub const NOTIFY_STOP: u32 = 32769;
pub const NETLINK_URELEASE: u32 = 1;
pub const KBD_KEYCODE: u32 = 1;
pub const KBD_UNBOUND_KEYCODE: u32 = 2;
pub const KBD_UNICODE: u32 = 3;
pub const KBD_KEYSYM: u32 = 4;
pub const KBD_POST_KEYSYM: u32 = 5;
pub const KCSAN_SEQLOCK_REGION_MAX: u32 = 1000;
pub const HIGH_RES_NSEC: u32 = 1;
pub const KTIME_HIGH_RES: u32 = 1;
pub const MONOTONIC_RES_NSEC: u32 = 1;
pub const KTIME_MONOTONIC_RES: u32 = 1;
pub const HRTIMER_STATE_INACTIVE: u32 = 0;
pub const HRTIMER_STATE_ENQUEUED: u32 = 1;
pub const IO_APIC_DEFAULT_PHYS_BASE: u32 = 4273995776;
pub const APIC_DEFAULT_PHYS_BASE: u32 = 4276092928;
pub const IO_APIC_SLOT_SIZE: u32 = 1024;
pub const APIC_DELIVERY_MODE_FIXED: u32 = 0;
pub const APIC_DELIVERY_MODE_LOWESTPRIO: u32 = 1;
pub const APIC_DELIVERY_MODE_SMI: u32 = 2;
pub const APIC_DELIVERY_MODE_NMI: u32 = 4;
pub const APIC_DELIVERY_MODE_INIT: u32 = 5;
pub const APIC_DELIVERY_MODE_EXTINT: u32 = 7;
pub const APIC_ID: u32 = 32;
pub const APIC_LVR: u32 = 48;
pub const APIC_LVR_MASK: u32 = 16711935;
pub const APIC_LVR_DIRECTED_EOI: u32 = 16777216;
pub const APIC_TASKPRI: u32 = 128;
pub const APIC_TPRI_MASK: u32 = 255;
pub const APIC_ARBPRI: u32 = 144;
pub const APIC_ARBPRI_MASK: u32 = 255;
pub const APIC_PROCPRI: u32 = 160;
pub const APIC_EOI: u32 = 176;
pub const APIC_EOI_ACK: u32 = 0;
pub const APIC_RRR: u32 = 192;
pub const APIC_LDR: u32 = 208;
pub const APIC_LDR_MASK: u32 = 4278190080;
pub const APIC_ALL_CPUS: u32 = 255;
pub const APIC_DFR: u32 = 224;
pub const APIC_DFR_CLUSTER: u32 = 268435455;
pub const APIC_DFR_FLAT: u32 = 4294967295;
pub const APIC_SPIV: u32 = 240;
pub const APIC_SPIV_DIRECTED_EOI: u32 = 4096;
pub const APIC_SPIV_FOCUS_DISABLED: u32 = 512;
pub const APIC_SPIV_APIC_ENABLED: u32 = 256;
pub const APIC_ISR: u32 = 256;
pub const APIC_ISR_NR: u32 = 8;
pub const APIC_TMR: u32 = 384;
pub const APIC_IRR: u32 = 512;
pub const APIC_ESR: u32 = 640;
pub const APIC_ESR_SEND_CS: u32 = 1;
pub const APIC_ESR_RECV_CS: u32 = 2;
pub const APIC_ESR_SEND_ACC: u32 = 4;
pub const APIC_ESR_RECV_ACC: u32 = 8;
pub const APIC_ESR_SENDILL: u32 = 32;
pub const APIC_ESR_RECVILL: u32 = 64;
pub const APIC_ESR_ILLREGA: u32 = 128;
pub const APIC_LVTCMCI: u32 = 752;
pub const APIC_ICR: u32 = 768;
pub const APIC_DEST_SELF: u32 = 262144;
pub const APIC_DEST_ALLINC: u32 = 524288;
pub const APIC_DEST_ALLBUT: u32 = 786432;
pub const APIC_ICR_RR_MASK: u32 = 196608;
pub const APIC_ICR_RR_INVALID: u32 = 0;
pub const APIC_ICR_RR_INPROG: u32 = 65536;
pub const APIC_ICR_RR_VALID: u32 = 131072;
pub const APIC_INT_LEVELTRIG: u32 = 32768;
pub const APIC_INT_ASSERT: u32 = 16384;
pub const APIC_ICR_BUSY: u32 = 4096;
pub const APIC_DEST_LOGICAL: u32 = 2048;
pub const APIC_DEST_PHYSICAL: u32 = 0;
pub const APIC_DM_FIXED: u32 = 0;
pub const APIC_DM_FIXED_MASK: u32 = 1792;
pub const APIC_DM_LOWEST: u32 = 256;
pub const APIC_DM_SMI: u32 = 512;
pub const APIC_DM_REMRD: u32 = 768;
pub const APIC_DM_NMI: u32 = 1024;
pub const APIC_DM_INIT: u32 = 1280;
pub const APIC_DM_STARTUP: u32 = 1536;
pub const APIC_DM_EXTINT: u32 = 1792;
pub const APIC_VECTOR_MASK: u32 = 255;
pub const APIC_ICR2: u32 = 784;
pub const APIC_LVTT: u32 = 800;
pub const APIC_LVTTHMR: u32 = 816;
pub const APIC_LVTPC: u32 = 832;
pub const APIC_LVT0: u32 = 848;
pub const APIC_LVT_TIMER_ONESHOT: u32 = 0;
pub const APIC_LVT_TIMER_PERIODIC: u32 = 131072;
pub const APIC_LVT_TIMER_TSCDEADLINE: u32 = 262144;
pub const APIC_LVT_MASKED: u32 = 65536;
pub const APIC_LVT_LEVEL_TRIGGER: u32 = 32768;
pub const APIC_LVT_REMOTE_IRR: u32 = 16384;
pub const APIC_INPUT_POLARITY: u32 = 8192;
pub const APIC_SEND_PENDING: u32 = 4096;
pub const APIC_MODE_MASK: u32 = 1792;
pub const APIC_MODE_FIXED: u32 = 0;
pub const APIC_MODE_NMI: u32 = 4;
pub const APIC_MODE_EXTINT: u32 = 7;
pub const APIC_LVT1: u32 = 864;
pub const APIC_LVTERR: u32 = 880;
pub const APIC_TMICT: u32 = 896;
pub const APIC_TMCCT: u32 = 912;
pub const APIC_TDCR: u32 = 992;
pub const APIC_SELF_IPI: u32 = 1008;
pub const APIC_TDR_DIV_TMBASE: u32 = 4;
pub const APIC_TDR_DIV_1: u32 = 11;
pub const APIC_TDR_DIV_2: u32 = 0;
pub const APIC_TDR_DIV_4: u32 = 1;
pub const APIC_TDR_DIV_8: u32 = 2;
pub const APIC_TDR_DIV_16: u32 = 3;
pub const APIC_TDR_DIV_32: u32 = 8;
pub const APIC_TDR_DIV_64: u32 = 9;
pub const APIC_TDR_DIV_128: u32 = 10;
pub const APIC_EFEAT: u32 = 1024;
pub const APIC_ECTRL: u32 = 1040;
pub const APIC_EILVT_NR_AMD_K8: u32 = 1;
pub const APIC_EILVT_NR_AMD_10H: u32 = 4;
pub const APIC_EILVT_NR_MAX: u32 = 4;
pub const APIC_EILVT_MSG_FIX: u32 = 0;
pub const APIC_EILVT_MSG_SMI: u32 = 2;
pub const APIC_EILVT_MSG_NMI: u32 = 4;
pub const APIC_EILVT_MSG_EXT: u32 = 7;
pub const APIC_EILVT_MASKED: u32 = 65536;
pub const APIC_BASE_MSR: u32 = 2048;
pub const APIC_X2APIC_ID_MSR: u32 = 2050;
pub const MAX_IO_APICS: u32 = 128;
pub const MAX_LOCAL_APIC: u32 = 32768;
pub const XAPIC_DEST_CPUS_SHIFT: u32 = 4;
pub const XAPIC_DEST_CPUS_MASK: u32 = 15;
pub const XAPIC_DEST_CLUSTER_MASK: u32 = 240;
pub const BAD_APICID: u32 = 65535;
pub const NMI_VECTOR: u32 = 2;
pub const FIRST_EXTERNAL_VECTOR: u32 = 32;
pub const IA32_SYSCALL_VECTOR: u32 = 128;
pub const SPURIOUS_APIC_VECTOR: u32 = 255;
pub const ERROR_APIC_VECTOR: u32 = 254;
pub const RESCHEDULE_VECTOR: u32 = 253;
pub const CALL_FUNCTION_VECTOR: u32 = 252;
pub const CALL_FUNCTION_SINGLE_VECTOR: u32 = 251;
pub const THERMAL_APIC_VECTOR: u32 = 250;
pub const THRESHOLD_APIC_VECTOR: u32 = 249;
pub const REBOOT_VECTOR: u32 = 248;
pub const X86_PLATFORM_IPI_VECTOR: u32 = 247;
pub const IRQ_WORK_VECTOR: u32 = 246;
pub const DEFERRED_ERROR_VECTOR: u32 = 244;
pub const HYPERVISOR_CALLBACK_VECTOR: u32 = 243;
pub const POSTED_INTR_VECTOR: u32 = 242;
pub const POSTED_INTR_WAKEUP_VECTOR: u32 = 241;
pub const POSTED_INTR_NESTED_VECTOR: u32 = 240;
pub const MANAGED_IRQ_SHUTDOWN_VECTOR: u32 = 239;
pub const HYPERV_REENLIGHTENMENT_VECTOR: u32 = 238;
pub const HYPERV_STIMER0_VECTOR: u32 = 237;
pub const LOCAL_TIMER_VECTOR: u32 = 236;
pub const POSTED_MSI_NOTIFICATION_VECTOR: u32 = 235;
pub const NR_VECTORS: u32 = 256;
pub const FIRST_SYSTEM_VECTOR: u32 = 235;
pub const NR_EXTERNAL_VECTORS: u32 = 203;
pub const NR_SYSTEM_VECTORS: u32 = 21;
pub const NR_IRQS_LEGACY: u32 = 16;
pub const CPU_VECTOR_LIMIT: u32 = 524288;
pub const IO_APIC_VECTOR_LIMIT: u32 = 4096;
pub const IRQF_TRIGGER_NONE: u32 = 0;
pub const IRQF_TRIGGER_RISING: u32 = 1;
pub const IRQF_TRIGGER_FALLING: u32 = 2;
pub const IRQF_TRIGGER_HIGH: u32 = 4;
pub const IRQF_TRIGGER_LOW: u32 = 8;
pub const IRQF_TRIGGER_MASK: u32 = 15;
pub const IRQF_TRIGGER_PROBE: u32 = 16;
pub const IRQF_SHARED: u32 = 128;
pub const IRQF_PROBE_SHARED: u32 = 256;
pub const __IRQF_TIMER: u32 = 512;
pub const IRQF_PERCPU: u32 = 1024;
pub const IRQF_NOBALANCING: u32 = 2048;
pub const IRQF_IRQPOLL: u32 = 4096;
pub const IRQF_ONESHOT: u32 = 8192;
pub const IRQF_NO_SUSPEND: u32 = 16384;
pub const IRQF_FORCE_RESUME: u32 = 32768;
pub const IRQF_NO_THREAD: u32 = 65536;
pub const IRQF_EARLY_RESUME: u32 = 131072;
pub const IRQF_COND_SUSPEND: u32 = 262144;
pub const IRQF_NO_AUTOEN: u32 = 524288;
pub const IRQF_NO_DEBUG: u32 = 1048576;
pub const IRQF_COND_ONESHOT: u32 = 2097152;
pub const IRQF_TIMER: u32 = 82432;
pub const IRQ_NOTCONNECTED: u32 = 2147483648;
pub const IRQ_AFFINITY_MAX_SETS: u32 = 4;
pub const PRINTK_INFO_SUBSYSTEM_LEN: u32 = 16;
pub const PRINTK_INFO_DEVICE_LEN: u32 = 48;
pub const GRND_NONBLOCK: u32 = 1;
pub const GRND_RANDOM: u32 = 2;
pub const GRND_INSECURE: u32 = 4;
pub const PB_migratetype_bits: u32 = 3;
pub const NR_PAGEFLAGS: u32 = 25;
pub const MAX_NR_ZONES: u32 = 5;
pub const NR_CPUS_BITS: u32 = 13;
pub const SPINLOCK_SIZE: u32 = 4;
pub const LRU_GEN_WIDTH: u32 = 3;
pub const __LRU_REFS_WIDTH: u32 = 2;
pub const ZONES_SHIFT: u32 = 3;
pub const ZONES_WIDTH: u32 = 3;
pub const SECTIONS_WIDTH: u32 = 0;
pub const NODES_WIDTH: u32 = 10;
pub const KASAN_TAG_WIDTH: u32 = 0;
pub const LAST__PID_SHIFT: u32 = 8;
pub const LAST__PID_MASK: u32 = 255;
pub const LAST__CPU_SHIFT: u32 = 13;
pub const LAST__CPU_MASK: u32 = 8191;
pub const LAST_CPUPID_SHIFT: u32 = 21;
pub const LAST_CPUPID_WIDTH: u32 = 21;
pub const AT_SYSINFO_EHDR: u32 = 33;
pub const AT_VECTOR_SIZE_ARCH: u32 = 3;
pub const AT_NULL: u32 = 0;
pub const AT_IGNORE: u32 = 1;
pub const AT_EXECFD: u32 = 2;
pub const AT_PHDR: u32 = 3;
pub const AT_PHENT: u32 = 4;
pub const AT_PHNUM: u32 = 5;
pub const AT_PAGESZ: u32 = 6;
pub const AT_BASE: u32 = 7;
pub const AT_FLAGS: u32 = 8;
pub const AT_ENTRY: u32 = 9;
pub const AT_NOTELF: u32 = 10;
pub const AT_UID: u32 = 11;
pub const AT_EUID: u32 = 12;
pub const AT_GID: u32 = 13;
pub const AT_EGID: u32 = 14;
pub const AT_PLATFORM: u32 = 15;
pub const AT_HWCAP: u32 = 16;
pub const AT_CLKTCK: u32 = 17;
pub const AT_SECURE: u32 = 23;
pub const AT_BASE_PLATFORM: u32 = 24;
pub const AT_RANDOM: u32 = 25;
pub const AT_HWCAP2: u32 = 26;
pub const AT_RSEQ_FEATURE_SIZE: u32 = 27;
pub const AT_RSEQ_ALIGN: u32 = 28;
pub const AT_HWCAP3: u32 = 29;
pub const AT_HWCAP4: u32 = 30;
pub const AT_EXECFN: u32 = 31;
pub const AT_MINSIGSTKSZ: u32 = 51;
pub const AT_VECTOR_SIZE_BASE: u32 = 22;
pub const MAPLE_NODE_SLOTS: u32 = 31;
pub const MAPLE_RANGE64_SLOTS: u32 = 16;
pub const MAPLE_ARANGE64_SLOTS: u32 = 10;
pub const MAPLE_ALLOC_SLOTS: u32 = 30;
pub const MAPLE_NODE_MASK: u32 = 255;
pub const MT_FLAGS_ALLOC_RANGE: u32 = 1;
pub const MT_FLAGS_USE_RCU: u32 = 2;
pub const MT_FLAGS_HEIGHT_OFFSET: u32 = 2;
pub const MT_FLAGS_HEIGHT_MASK: u32 = 124;
pub const MT_FLAGS_LOCK_MASK: u32 = 768;
pub const MT_FLAGS_LOCK_IRQ: u32 = 256;
pub const MT_FLAGS_LOCK_BH: u32 = 512;
pub const MT_FLAGS_LOCK_EXTERN: u32 = 768;
pub const MT_FLAGS_ALLOC_WRAPPED: u32 = 2048;
pub const MAPLE_HEIGHT_MAX: u32 = 31;
pub const MAPLE_NODE_TYPE_MASK: u32 = 15;
pub const MAPLE_NODE_TYPE_SHIFT: u32 = 3;
pub const MAPLE_RESERVED_RANGE: u32 = 4096;
pub const UPROBE_HANDLER_REMOVE: u32 = 1;
pub const UPROBE_HANDLER_MASK: u32 = 1;
pub const MAX_URETPROBE_DEPTH: u32 = 64;
pub const MAX_UINSN_BYTES: u32 = 16;
pub const UPROBE_XOL_SLOT_BYTES: u32 = 128;
pub const UPROBE_SWBP_INSN: u32 = 204;
pub const UPROBE_SWBP_INSN_SIZE: u32 = 1;
pub const MM_CONTEXT_UPROBE_IA32: u32 = 0;
pub const MM_CONTEXT_HAS_VSYSCALL: u32 = 1;
pub const MM_CONTEXT_LOCK_LAM: u32 = 2;
pub const MM_CONTEXT_FORCE_TAGGED_SVA: u32 = 3;
pub const AT_VECTOR_SIZE: u32 = 52;
pub const INIT_PASID: u32 = 0;
pub const ENCODED_PAGE_BITS: u32 = 3;
pub const ENCODED_PAGE_BIT_DELAY_RMAP: u32 = 1;
pub const ENCODED_PAGE_BIT_NR_PAGES_NEXT: u32 = 2;
pub const MM_MT_FLAGS: u32 = 771;
pub const PAGEFLAGS_MASK: u32 = 33554431;
pub const PAGE_POISON_PATTERN: i32 = -1;
pub const FOLIO_PF_ANY: u32 = 0;
pub const FOLIO_PF_HEAD: u32 = 0;
pub const FOLIO_PF_NO_TAIL: u32 = 0;
pub const FOLIO_PF_NO_COMPOUND: u32 = 0;
pub const FOLIO_PF_SECOND: u32 = 1;
pub const FOLIO_HEAD_PAGE: u32 = 0;
pub const FOLIO_SECOND_PAGE: u32 = 1;
pub const PAGE_MAPPING_ANON: u32 = 1;
pub const PAGE_MAPPING_MOVABLE: u32 = 2;
pub const PAGE_MAPPING_KSM: u32 = 3;
pub const PAGE_MAPPING_FLAGS: u32 = 3;
pub const MAX_PAGE_ORDER: u32 = 10;
pub const MAX_ORDER_NR_PAGES: u32 = 1024;
pub const NR_PAGE_ORDERS: u32 = 11;
pub const PAGE_ALLOC_COSTLY_ORDER: u32 = 3;
pub const MIGRATETYPE_MASK: u32 = 7;
pub const LRU_BASE: u32 = 0;
pub const LRU_ACTIVE: u32 = 1;
pub const LRU_FILE: u32 = 2;
pub const WORKINGSET_ANON: u32 = 0;
pub const WORKINGSET_FILE: u32 = 1;
pub const ANON_AND_FILE: u32 = 2;
pub const MIN_NR_GENS: u32 = 2;
pub const MAX_NR_GENS: u32 = 4;
pub const MAX_NR_TIERS: u32 = 4;
pub const MIN_LRU_BATCH: u32 = 64;
pub const MAX_LRU_BATCH: u32 = 4096;
pub const NR_HIST_GENS: u32 = 1;
pub const NR_BLOOM_FILTERS: u32 = 2;
pub const MEMCG_NR_GENS: u32 = 3;
pub const MEMCG_NR_BINS: u32 = 8;
pub const NR_PCP_THP: u32 = 2;
pub const ASYNC_AND_SYNC: u32 = 2;
pub const ZONEID_SHIFT: u32 = 13;
pub const ZONES_MASK: u32 = 7;
pub const NODES_MASK: u32 = 1023;
pub const SECTIONS_MASK: u32 = 0;
pub const LAST_CPUPID_MASK: u32 = 2097151;
pub const KASAN_TAG_MASK: u32 = 0;
pub const ZONEID_MASK: u32 = 8191;
pub const DEF_PRIORITY: u32 = 12;
pub const MAX_ZONES_PER_ZONELIST: u32 = 5120;
pub const PA_SECTION_SHIFT: u32 = 27;
pub const PFN_SECTION_SHIFT: u32 = 15;
pub const PAGES_PER_SECTION: u32 = 32768;
pub const PAGE_SECTION_MASK: i32 = -32768;
pub const SUBSECTION_SHIFT: u32 = 21;
pub const SUBSECTION_SIZE: u32 = 2097152;
pub const PFN_SUBSECTION_SHIFT: u32 = 9;
pub const PAGES_PER_SUBSECTION: u32 = 512;
pub const PAGE_SUBSECTION_MASK: i32 = -512;
pub const SUBSECTIONS_PER_SECTION: u32 = 64;
pub const MPC_SIGNATURE: &[u8; 5] = b"PCMP\0";
pub const MP_PROCESSOR: u32 = 0;
pub const MP_BUS: u32 = 1;
pub const MP_IOAPIC: u32 = 2;
pub const MP_INTSRC: u32 = 3;
pub const MP_LINTSRC: u32 = 4;
pub const MP_TRANSLATION: u32 = 192;
pub const CPU_ENABLED: u32 = 1;
pub const CPU_BOOTPROCESSOR: u32 = 2;
pub const CPU_STEPPING_MASK: u32 = 15;
pub const CPU_MODEL_MASK: u32 = 240;
pub const CPU_FAMILY_MASK: u32 = 3840;
pub const BUSTYPE_EISA: &[u8; 5] = b"EISA\0";
pub const BUSTYPE_ISA: &[u8; 4] = b"ISA\0";
pub const BUSTYPE_INTERN: &[u8; 7] = b"INTERN\0";
pub const BUSTYPE_MCA: &[u8; 4] = b"MCA\0";
pub const BUSTYPE_VL: &[u8; 3] = b"VL\0";
pub const BUSTYPE_PCI: &[u8; 4] = b"PCI\0";
pub const BUSTYPE_PCMCIA: &[u8; 7] = b"PCMCIA\0";
pub const BUSTYPE_CBUS: &[u8; 5] = b"CBUS\0";
pub const BUSTYPE_CBUSII: &[u8; 7] = b"CBUSII\0";
pub const BUSTYPE_FUTURE: &[u8; 7] = b"FUTURE\0";
pub const BUSTYPE_MBI: &[u8; 4] = b"MBI\0";
pub const BUSTYPE_MBII: &[u8; 5] = b"MBII\0";
pub const BUSTYPE_MPI: &[u8; 4] = b"MPI\0";
pub const BUSTYPE_MPSA: &[u8; 5] = b"MPSA\0";
pub const BUSTYPE_NUBUS: &[u8; 6] = b"NUBUS\0";
pub const BUSTYPE_TC: &[u8; 3] = b"TC\0";
pub const BUSTYPE_VME: &[u8; 4] = b"VME\0";
pub const BUSTYPE_XPRESS: &[u8; 7] = b"XPRESS\0";
pub const MPC_APIC_USABLE: u32 = 1;
pub const MP_IRQPOL_DEFAULT: u32 = 0;
pub const MP_IRQPOL_ACTIVE_HIGH: u32 = 1;
pub const MP_IRQPOL_RESERVED: u32 = 2;
pub const MP_IRQPOL_ACTIVE_LOW: u32 = 3;
pub const MP_IRQPOL_MASK: u32 = 3;
pub const MP_IRQTRIG_DEFAULT: u32 = 0;
pub const MP_IRQTRIG_EDGE: u32 = 4;
pub const MP_IRQTRIG_RESERVED: u32 = 8;
pub const MP_IRQTRIG_LEVEL: u32 = 12;
pub const MP_IRQTRIG_MASK: u32 = 12;
pub const MP_APIC_ALL: u32 = 255;
pub const MPC_OEM_SIGNATURE: &[u8; 5] = b"_OEM\0";
pub const MAX_MP_BUSSES: u32 = 256;
pub const MAX_IRQ_SOURCES: u32 = 1024;
pub const LOCAL_DISTANCE: u32 = 10;
pub const REMOTE_DISTANCE: u32 = 20;
pub const DISTANCE_BITS: u32 = 8;
pub const RECLAIM_DISTANCE: u32 = 30;
pub const PENALTY_FOR_NODE_WITH_CPUS: u32 = 1;
pub const GFP_MOVABLE_SHIFT: u32 = 3;
pub const GFP_ZONES_SHIFT: u32 = 2;
pub const SUID_DUMP_DISABLE: u32 = 0;
pub const SUID_DUMP_USER: u32 = 1;
pub const SUID_DUMP_ROOT: u32 = 2;
pub const MMF_DUMPABLE_BITS: u32 = 2;
pub const MMF_DUMPABLE_MASK: u32 = 3;
pub const MMF_DUMP_ANON_PRIVATE: u32 = 2;
pub const MMF_DUMP_ANON_SHARED: u32 = 3;
pub const MMF_DUMP_MAPPED_PRIVATE: u32 = 4;
pub const MMF_DUMP_MAPPED_SHARED: u32 = 5;
pub const MMF_DUMP_ELF_HEADERS: u32 = 6;
pub const MMF_DUMP_HUGETLB_PRIVATE: u32 = 7;
pub const MMF_DUMP_HUGETLB_SHARED: u32 = 8;
pub const MMF_DUMP_DAX_PRIVATE: u32 = 9;
pub const MMF_DUMP_DAX_SHARED: u32 = 10;
pub const MMF_DUMP_FILTER_SHIFT: u32 = 2;
pub const MMF_DUMP_FILTER_BITS: u32 = 9;
pub const MMF_DUMP_FILTER_MASK: u32 = 2044;
pub const MMF_DUMP_MASK_DEFAULT_ELF: u32 = 64;
pub const MMF_VM_MERGEABLE: u32 = 16;
pub const MMF_VM_HUGEPAGE: u32 = 17;
pub const MMF_HAS_UPROBES: u32 = 19;
pub const MMF_RECALC_UPROBES: u32 = 20;
pub const MMF_OOM_SKIP: u32 = 21;
pub const MMF_UNSTABLE: u32 = 22;
pub const MMF_HUGE_ZERO_PAGE: u32 = 23;
pub const MMF_DISABLE_THP: u32 = 24;
pub const MMF_DISABLE_THP_MASK: u32 = 16777216;
pub const MMF_OOM_REAP_QUEUED: u32 = 25;
pub const MMF_MULTIPROCESS: u32 = 26;
pub const MMF_HAS_PINNED: u32 = 27;
pub const MMF_HAS_MDWE: u32 = 28;
pub const MMF_HAS_MDWE_MASK: u32 = 268435456;
pub const MMF_HAS_MDWE_NO_INHERIT: u32 = 29;
pub const MMF_VM_MERGE_ANY: u32 = 30;
pub const MMF_VM_MERGE_ANY_MASK: u32 = 1073741824;
pub const MMF_TOPDOWN: u32 = 31;
pub const MMF_TOPDOWN_MASK: u32 = 2147483648;
pub const MMF_INIT_MASK: u32 = 3506440191;
pub const BITS_PER_XA_VALUE: u32 = 63;
pub const XA_MAX_MARKS: u32 = 3;
pub const RADIX_TREE_ENTRY_MASK: u32 = 3;
pub const RADIX_TREE_INTERNAL_NODE: u32 = 2;
pub const RADIX_TREE_MAX_TAGS: u32 = 3;
pub const IDR_FREE: u32 = 0;
pub const IDA_CHUNK_SIZE: u32 = 128;
pub const DEFAULT_OVERFLOWUID: u32 = 65534;
pub const DEFAULT_OVERFLOWGID: u32 = 65534;
pub const DEFAULT_FS_OVERFLOWUID: u32 = 65534;
pub const DEFAULT_FS_OVERFLOWGID: u32 = 65534;
pub const KERNFS_TYPE_MASK: u32 = 15;
pub const KERNFS_FLAG_MASK: i32 = -16;
pub const KERNFS_MAX_USER_XATTRS: u32 = 128;
pub const KERNFS_USER_XATTR_SIZE_LIMIT: u32 = 131072;
pub const STAT_HAVE_NSEC: u32 = 1;
pub const S_IFMT: u32 = 61440;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFLNK: u32 = 40960;
pub const S_IFREG: u32 = 32768;
pub const S_IFBLK: u32 = 24576;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFIFO: u32 = 4096;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const STATX_TYPE: u32 = 1;
pub const STATX_MODE: u32 = 2;
pub const STATX_NLINK: u32 = 4;
pub const STATX_UID: u32 = 8;
pub const STATX_GID: u32 = 16;
pub const STATX_ATIME: u32 = 32;
pub const STATX_MTIME: u32 = 64;
pub const STATX_CTIME: u32 = 128;
pub const STATX_INO: u32 = 256;
pub const STATX_SIZE: u32 = 512;
pub const STATX_BLOCKS: u32 = 1024;
pub const STATX_BASIC_STATS: u32 = 2047;
pub const STATX_BTIME: u32 = 2048;
pub const STATX_MNT_ID: u32 = 4096;
pub const STATX_DIOALIGN: u32 = 8192;
pub const STATX_MNT_ID_UNIQUE: u32 = 16384;
pub const STATX_SUBVOL: u32 = 32768;
pub const STATX_WRITE_ATOMIC: u32 = 65536;
pub const STATX__RESERVED: u32 = 2147483648;
pub const STATX_ATTR_COMPRESSED: u32 = 4;
pub const STATX_ATTR_IMMUTABLE: u32 = 16;
pub const STATX_ATTR_APPEND: u32 = 32;
pub const STATX_ATTR_NODUMP: u32 = 64;
pub const STATX_ATTR_ENCRYPTED: u32 = 2048;
pub const STATX_ATTR_AUTOMOUNT: u32 = 4096;
pub const STATX_ATTR_MOUNT_ROOT: u32 = 8192;
pub const STATX_ATTR_VERITY: u32 = 1048576;
pub const STATX_ATTR_DAX: u32 = 2097152;
pub const STATX_ATTR_WRITE_ATOMIC: u32 = 4194304;
pub const S_IRWXUGO: u32 = 511;
pub const S_IALLUGO: u32 = 4095;
pub const S_IRUGO: u32 = 292;
pub const S_IWUGO: u32 = 146;
pub const S_IXUGO: u32 = 73;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const KSTAT_ATTR_FS_IOC_FLAGS: u32 = 1050740;
pub const KSTAT_ATTR_VFS_FLAGS: u32 = 48;
pub const STATX_CHANGE_COOKIE: u32 = 1073741824;
pub const STATX_ATTR_CHANGE_MONOTONIC: i64 = -9223372036854775808;
pub const SYSFS_PREALLOC: u32 = 4096;
pub const SYSFS_GROUP_INVISIBLE: u32 = 8192;
pub const UEVENT_HELPER_PATH_LEN: u32 = 256;
pub const UEVENT_NUM_ENVP: u32 = 64;
pub const UEVENT_BUFFER_SIZE: u32 = 2048;
pub const SCHED_CPUFREQ_IOWAIT: u32 = 1;
pub const SDF_SHARED_CHILD: u32 = 1;
pub const SDF_SHARED_PARENT: u32 = 2;
pub const SDF_NEEDS_GROUPS: u32 = 4;
pub const SDTL_OVERLAP: u32 = 1;
pub const EM_MAX_POWER: u32 = 64000000;
pub const EM_MAX_NUM_CPUS: u32 = 4096;
pub const IORESOURCE_BITS: u32 = 255;
pub const IORESOURCE_TYPE_BITS: u32 = 7936;
pub const IORESOURCE_IO: u32 = 256;
pub const IORESOURCE_MEM: u32 = 512;
pub const IORESOURCE_REG: u32 = 768;
pub const IORESOURCE_IRQ: u32 = 1024;
pub const IORESOURCE_DMA: u32 = 2048;
pub const IORESOURCE_BUS: u32 = 4096;
pub const IORESOURCE_PREFETCH: u32 = 8192;
pub const IORESOURCE_READONLY: u32 = 16384;
pub const IORESOURCE_CACHEABLE: u32 = 32768;
pub const IORESOURCE_RANGELENGTH: u32 = 65536;
pub const IORESOURCE_SHADOWABLE: u32 = 131072;
pub const IORESOURCE_SIZEALIGN: u32 = 262144;
pub const IORESOURCE_STARTALIGN: u32 = 524288;
pub const IORESOURCE_MEM_64: u32 = 1048576;
pub const IORESOURCE_WINDOW: u32 = 2097152;
pub const IORESOURCE_MUXED: u32 = 4194304;
pub const IORESOURCE_EXT_TYPE_BITS: u32 = 16777216;
pub const IORESOURCE_SYSRAM: u32 = 16777216;
pub const IORESOURCE_SYSRAM_DRIVER_MANAGED: u32 = 33554432;
pub const IORESOURCE_SYSRAM_MERGEABLE: u32 = 67108864;
pub const IORESOURCE_EXCLUSIVE: u32 = 134217728;
pub const IORESOURCE_DISABLED: u32 = 268435456;
pub const IORESOURCE_UNSET: u32 = 536870912;
pub const IORESOURCE_AUTO: u32 = 1073741824;
pub const IORESOURCE_BUSY: u32 = 2147483648;
pub const IORESOURCE_SYSTEM_RAM: u32 = 16777728;
pub const IORESOURCE_IRQ_HIGHEDGE: u32 = 1;
pub const IORESOURCE_IRQ_LOWEDGE: u32 = 2;
pub const IORESOURCE_IRQ_HIGHLEVEL: u32 = 4;
pub const IORESOURCE_IRQ_LOWLEVEL: u32 = 8;
pub const IORESOURCE_IRQ_SHAREABLE: u32 = 16;
pub const IORESOURCE_IRQ_OPTIONAL: u32 = 32;
pub const IORESOURCE_IRQ_WAKECAPABLE: u32 = 64;
pub const IORESOURCE_DMA_TYPE_MASK: u32 = 3;
pub const IORESOURCE_DMA_8BIT: u32 = 0;
pub const IORESOURCE_DMA_8AND16BIT: u32 = 1;
pub const IORESOURCE_DMA_16BIT: u32 = 2;
pub const IORESOURCE_DMA_MASTER: u32 = 4;
pub const IORESOURCE_DMA_BYTE: u32 = 8;
pub const IORESOURCE_DMA_WORD: u32 = 16;
pub const IORESOURCE_DMA_SPEED_MASK: u32 = 192;
pub const IORESOURCE_DMA_COMPATIBLE: u32 = 0;
pub const IORESOURCE_DMA_TYPEA: u32 = 64;
pub const IORESOURCE_DMA_TYPEB: u32 = 128;
pub const IORESOURCE_DMA_TYPEF: u32 = 192;
pub const IORESOURCE_MEM_WRITEABLE: u32 = 1;
pub const IORESOURCE_MEM_CACHEABLE: u32 = 2;
pub const IORESOURCE_MEM_RANGELENGTH: u32 = 4;
pub const IORESOURCE_MEM_TYPE_MASK: u32 = 24;
pub const IORESOURCE_MEM_8BIT: u32 = 0;
pub const IORESOURCE_MEM_16BIT: u32 = 8;
pub const IORESOURCE_MEM_8AND16BIT: u32 = 16;
pub const IORESOURCE_MEM_32BIT: u32 = 24;
pub const IORESOURCE_MEM_SHADOWABLE: u32 = 32;
pub const IORESOURCE_MEM_EXPANSIONROM: u32 = 64;
pub const IORESOURCE_MEM_NONPOSTED: u32 = 128;
pub const IORESOURCE_IO_16BIT_ADDR: u32 = 1;
pub const IORESOURCE_IO_FIXED: u32 = 2;
pub const IORESOURCE_IO_SPARSE: u32 = 4;
pub const IORESOURCE_ROM_ENABLE: u32 = 1;
pub const IORESOURCE_ROM_SHADOW: u32 = 2;
pub const IORESOURCE_PCI_FIXED: u32 = 16;
pub const IORESOURCE_PCI_EA_BEI: u32 = 32;
pub const PM_EVENT_INVALID: i32 = -1;
pub const PM_EVENT_ON: u32 = 0;
pub const PM_EVENT_FREEZE: u32 = 1;
pub const PM_EVENT_SUSPEND: u32 = 2;
pub const PM_EVENT_HIBERNATE: u32 = 4;
pub const PM_EVENT_QUIESCE: u32 = 8;
pub const PM_EVENT_RESUME: u32 = 16;
pub const PM_EVENT_THAW: u32 = 32;
pub const PM_EVENT_RESTORE: u32 = 64;
pub const PM_EVENT_RECOVER: u32 = 128;
pub const PM_EVENT_USER: u32 = 256;
pub const PM_EVENT_REMOTE: u32 = 512;
pub const PM_EVENT_AUTO: u32 = 1024;
pub const PM_EVENT_SLEEP: u32 = 6;
pub const PM_EVENT_USER_SUSPEND: u32 = 258;
pub const PM_EVENT_USER_RESUME: u32 = 272;
pub const PM_EVENT_REMOTE_RESUME: u32 = 528;
pub const PM_EVENT_AUTO_SUSPEND: u32 = 1026;
pub const PM_EVENT_AUTO_RESUME: u32 = 1040;
pub const PM_EVENT_PRETHAW: u32 = 8;
pub const BUILD_ID_SIZE_MAX: u32 = 20;
pub const CTL_MAXNAME: u32 = 10;
pub const UMH_NO_WAIT: u32 = 0;
pub const UMH_WAIT_EXEC: u32 = 1;
pub const UMH_WAIT_PROC: u32 = 2;
pub const UMH_KILLABLE: u32 = 4;
pub const UMH_FREEZABLE: u32 = 8;
pub const KMOD_PATH_LEN: u32 = 256;
pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_DIPC: u32 = 4096;
pub const IPC_OWN: u32 = 8192;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const IPC_INFO: u32 = 3;
pub const IPC_OLD: u32 = 0;
pub const IPC_64: u32 = 256;
pub const SEMOP: u32 = 1;
pub const SEMGET: u32 = 2;
pub const SEMCTL: u32 = 3;
pub const SEMTIMEDOP: u32 = 4;
pub const MSGSND: u32 = 11;
pub const MSGRCV: u32 = 12;
pub const MSGGET: u32 = 13;
pub const MSGCTL: u32 = 14;
pub const SHMAT: u32 = 21;
pub const SHMDT: u32 = 22;
pub const SHMGET: u32 = 23;
pub const SHMCTL: u32 = 24;
pub const DIPC: u32 = 25;
pub const SEM_UNDO: u32 = 4096;
pub const GETPID: u32 = 11;
pub const GETVAL: u32 = 12;
pub const GETALL: u32 = 13;
pub const GETNCNT: u32 = 14;
pub const GETZCNT: u32 = 15;
pub const SETVAL: u32 = 16;
pub const SETALL: u32 = 17;
pub const SEM_STAT: u32 = 18;
pub const SEM_INFO: u32 = 19;
pub const SEM_STAT_ANY: u32 = 20;
pub const SEMMNI: u32 = 32000;
pub const SEMMSL: u32 = 32000;
pub const SEMMNS: u32 = 1024000000;
pub const SEMOPM: u32 = 500;
pub const SEMVMX: u32 = 32767;
pub const SEMAEM: u32 = 32767;
pub const SEMUME: u32 = 500;
pub const SEMMNU: u32 = 1024000000;
pub const SEMMAP: u32 = 1024000000;
pub const SEMUSZ: u32 = 20;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_RCVMARK: u32 = 75;
pub const SO_PASSPIDFD: u32 = 76;
pub const SO_PEERPIDFD: u32 = 77;
pub const SOCK_IOC_TYPE: u32 = 137;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCETHTOOL: u32 = 35142;
pub const SIOCGMIIPHY: u32 = 35143;
pub const SIOCGMIIREG: u32 = 35144;
pub const SIOCSMIIREG: u32 = 35145;
pub const SIOCWANDEV: u32 = 35146;
pub const SIOCOUTQNSD: u32 = 35147;
pub const SIOCGSKNS: u32 = 35148;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCGIFVLAN: u32 = 35202;
pub const SIOCSIFVLAN: u32 = 35203;
pub const SIOCBONDENSLAVE: u32 = 35216;
pub const SIOCBONDRELEASE: u32 = 35217;
pub const SIOCBONDSETHWADDR: u32 = 35218;
pub const SIOCBONDSLAVEINFOQUERY: u32 = 35219;
pub const SIOCBONDINFOQUERY: u32 = 35220;
pub const SIOCBONDCHANGEACTIVE: u32 = 35221;
pub const SIOCBRADDBR: u32 = 35232;
pub const SIOCBRDELBR: u32 = 35233;
pub const SIOCBRADDIF: u32 = 35234;
pub const SIOCBRDELIF: u32 = 35235;
pub const SIOCSHWTSTAMP: u32 = 35248;
pub const SIOCGHWTSTAMP: u32 = 35249;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const UIO_FASTIOV: u32 = 8;
pub const UIO_MAXIOV: u32 = 1024;
pub const ITER_SOURCE: u32 = 1;
pub const ITER_DEST: u32 = 0;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const SOCK_SNDBUF_LOCK: u32 = 1;
pub const SOCK_RCVBUF_LOCK: u32 = 2;
pub const SOCK_BUF_LOCK_MASK: u32 = 3;
pub const SOCK_TXREHASH_DEFAULT: u32 = 255;
pub const SOCK_TXREHASH_DISABLED: u32 = 0;
pub const SOCK_TXREHASH_ENABLED: u32 = 1;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_CREDENTIALS: u32 = 2;
pub const SCM_SECURITY: u32 = 3;
pub const SCM_PIDFD: u32 = 4;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const PF_UNSPEC: u32 = 0;
pub const PF_UNIX: u32 = 1;
pub const PF_LOCAL: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const SOMAXCONN: u32 = 4096;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_TRYHARD: u32 = 4;
pub const MSG_CTRUNC: u32 = 8;
pub const MSG_PROBE: u32 = 16;
pub const MSG_TRUNC: u32 = 32;
pub const MSG_DONTWAIT: u32 = 64;
pub const MSG_EOR: u32 = 128;
pub const MSG_WAITALL: u32 = 256;
pub const MSG_FIN: u32 = 512;
pub const MSG_SYN: u32 = 1024;
pub const MSG_CONFIRM: u32 = 2048;
pub const MSG_RST: u32 = 4096;
pub const MSG_ERRQUEUE: u32 = 8192;
pub const MSG_NOSIGNAL: u32 = 16384;
pub const MSG_MORE: u32 = 32768;
pub const MSG_WAITFORONE: u32 = 65536;
pub const MSG_SENDPAGE_NOPOLICY: u32 = 65536;
pub const MSG_BATCH: u32 = 262144;
pub const MSG_EOF: u32 = 512;
pub const MSG_NO_SHARED_FRAGS: u32 = 524288;
pub const MSG_SENDPAGE_DECRYPTED: u32 = 1048576;
pub const MSG_ZEROCOPY: u32 = 67108864;
pub const MSG_SPLICE_PAGES: u32 = 134217728;
pub const MSG_FASTOPEN: u32 = 536870912;
pub const MSG_CMSG_CLOEXEC: u32 = 1073741824;
pub const MSG_CMSG_COMPAT: u32 = 2147483648;
pub const MSG_INTERNAL_SENDMSG_FLAGS: u32 = 135331840;
pub const SOL_IP: u32 = 0;
pub const SOL_TCP: u32 = 6;
pub const SOL_UDP: u32 = 17;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const SOL_SCTP: u32 = 132;
pub const SOL_UDPLITE: u32 = 136;
pub const SOL_RAW: u32 = 255;
pub const SOL_IPX: u32 = 256;
pub const SOL_AX25: u32 = 257;
pub const SOL_ATALK: u32 = 258;
pub const SOL_NETROM: u32 = 259;
pub const SOL_ROSE: u32 = 260;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOL_SMC: u32 = 286;
pub const SOL_VSOCK: u32 = 287;
pub const IPX_TYPE: u32 = 1;
pub const __UAPI_DEF_IF_IFCONF: u32 = 1;
pub const __UAPI_DEF_IF_IFMAP: u32 = 1;
pub const __UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
pub const __UAPI_DEF_IF_IFREQ: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
pub const __UAPI_DEF_IN_ADDR: u32 = 1;
pub const __UAPI_DEF_IN_IPPROTO: u32 = 1;
pub const __UAPI_DEF_IN_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP_MREQ: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN: u32 = 1;
pub const __UAPI_DEF_IN_CLASS: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR_ALT: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN6: u32 = 1;
pub const __UAPI_DEF_IPV6_MREQ: u32 = 1;
pub const __UAPI_DEF_IPPROTO_V6: u32 = 1;
pub const __UAPI_DEF_IPV6_OPTIONS: u32 = 1;
pub const __UAPI_DEF_IN6_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP6_MTUINFO: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IPX: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_INTERFACE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_CONFIG_DATA: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEF: u32 = 1;
pub const __UAPI_DEF_XATTR: u32 = 1;
pub const IFNAMSIZ: u32 = 16;
pub const IFALIASZ: u32 = 256;
pub const ALTIFNAMSIZ: u32 = 128;
pub const GENERIC_HDLC_VERSION: u32 = 4;
pub const CLOCK_DEFAULT: u32 = 0;
pub const CLOCK_EXT: u32 = 1;
pub const CLOCK_INT: u32 = 2;
pub const CLOCK_TXINT: u32 = 3;
pub const CLOCK_TXFROMRX: u32 = 4;
pub const ENCODING_DEFAULT: u32 = 0;
pub const ENCODING_NRZ: u32 = 1;
pub const ENCODING_NRZI: u32 = 2;
pub const ENCODING_FM_MARK: u32 = 3;
pub const ENCODING_FM_SPACE: u32 = 4;
pub const ENCODING_MANCHESTER: u32 = 5;
pub const PARITY_DEFAULT: u32 = 0;
pub const PARITY_NONE: u32 = 1;
pub const PARITY_CRC16_PR0: u32 = 2;
pub const PARITY_CRC16_PR1: u32 = 3;
pub const PARITY_CRC16_PR0_CCITT: u32 = 4;
pub const PARITY_CRC16_PR1_CCITT: u32 = 5;
pub const PARITY_CRC32_PR0_CCITT: u32 = 6;
pub const PARITY_CRC32_PR1_CCITT: u32 = 7;
pub const LMI_DEFAULT: u32 = 0;
pub const LMI_NONE: u32 = 1;
pub const LMI_ANSI: u32 = 2;
pub const LMI_CCITT: u32 = 3;
pub const LMI_CISCO: u32 = 4;
pub const IF_GET_IFACE: u32 = 1;
pub const IF_GET_PROTO: u32 = 2;
pub const IF_IFACE_V35: u32 = 4096;
pub const IF_IFACE_V24: u32 = 4097;
pub const IF_IFACE_X21: u32 = 4098;
pub const IF_IFACE_T1: u32 = 4099;
pub const IF_IFACE_E1: u32 = 4100;
pub const IF_IFACE_SYNC_SERIAL: u32 = 4101;
pub const IF_IFACE_X21D: u32 = 4102;
pub const IF_PROTO_HDLC: u32 = 8192;
pub const IF_PROTO_PPP: u32 = 8193;
pub const IF_PROTO_CISCO: u32 = 8194;
pub const IF_PROTO_FR: u32 = 8195;
pub const IF_PROTO_FR_ADD_PVC: u32 = 8196;
pub const IF_PROTO_FR_DEL_PVC: u32 = 8197;
pub const IF_PROTO_X25: u32 = 8198;
pub const IF_PROTO_HDLC_ETH: u32 = 8199;
pub const IF_PROTO_FR_ADD_ETH_PVC: u32 = 8200;
pub const IF_PROTO_FR_DEL_ETH_PVC: u32 = 8201;
pub const IF_PROTO_FR_PVC: u32 = 8202;
pub const IF_PROTO_FR_ETH_PVC: u32 = 8203;
pub const IF_PROTO_RAW: u32 = 8204;
pub const IFHWADDRLEN: u32 = 6;
pub const MINORBITS: u32 = 20;
pub const MINORMASK: u32 = 1048575;
pub const LIST_BL_LOCKMASK: u32 = 1;
pub const GOLDEN_RATIO_32: u32 = 1640531527;
pub const GOLDEN_RATIO_64: u64 = 7046029254386353131;
pub const DNAME_INLINE_LEN: u32 = 40;
pub const DCACHE_ENTRY_TYPE: u32 = 7340032;
pub const DCACHE_MISS_TYPE: u32 = 0;
pub const DCACHE_WHITEOUT_TYPE: u32 = 1048576;
pub const DCACHE_DIRECTORY_TYPE: u32 = 2097152;
pub const DCACHE_AUTODIR_TYPE: u32 = 3145728;
pub const DCACHE_REGULAR_TYPE: u32 = 4194304;
pub const DCACHE_SPECIAL_TYPE: u32 = 5242880;
pub const DCACHE_SYMLINK_TYPE: u32 = 6291456;
pub const SHRINKER_UNIT_BITS: u32 = 64;
pub const SHRINK_STOP: i32 = -1;
pub const SHRINK_EMPTY: i32 = -2;
pub const DEFAULT_SEEKS: u32 = 2;
pub const RESERVED_PIDS: u32 = 300;
pub const _LINUX_CAPABILITY_VERSION_1: u32 = 429392688;
pub const _LINUX_CAPABILITY_U32S_1: u32 = 1;
pub const _LINUX_CAPABILITY_VERSION_2: u32 = 537333798;
pub const _LINUX_CAPABILITY_U32S_2: u32 = 2;
pub const _LINUX_CAPABILITY_VERSION_3: u32 = 537396514;
pub const _LINUX_CAPABILITY_U32S_3: u32 = 2;
pub const VFS_CAP_REVISION_MASK: u32 = 4278190080;
pub const VFS_CAP_REVISION_SHIFT: u32 = 24;
pub const VFS_CAP_FLAGS_MASK: i64 = -4278190081;
pub const VFS_CAP_FLAGS_EFFECTIVE: u32 = 1;
pub const VFS_CAP_REVISION_1: u32 = 16777216;
pub const VFS_CAP_U32_1: u32 = 1;
pub const VFS_CAP_REVISION_2: u32 = 33554432;
pub const VFS_CAP_U32_2: u32 = 2;
pub const VFS_CAP_REVISION_3: u32 = 50331648;
pub const VFS_CAP_U32_3: u32 = 2;
pub const VFS_CAP_U32: u32 = 2;
pub const VFS_CAP_REVISION: u32 = 50331648;
pub const CAP_CHOWN: u32 = 0;
pub const CAP_DAC_OVERRIDE: u32 = 1;
pub const CAP_DAC_READ_SEARCH: u32 = 2;
pub const CAP_FOWNER: u32 = 3;
pub const CAP_FSETID: u32 = 4;
pub const CAP_KILL: u32 = 5;
pub const CAP_SETGID: u32 = 6;
pub const CAP_SETUID: u32 = 7;
pub const CAP_SETPCAP: u32 = 8;
pub const CAP_LINUX_IMMUTABLE: u32 = 9;
pub const CAP_NET_BIND_SERVICE: u32 = 10;
pub const CAP_NET_BROADCAST: u32 = 11;
pub const CAP_NET_ADMIN: u32 = 12;
pub const CAP_NET_RAW: u32 = 13;
pub const CAP_IPC_LOCK: u32 = 14;
pub const CAP_IPC_OWNER: u32 = 15;
pub const CAP_SYS_MODULE: u32 = 16;
pub const CAP_SYS_RAWIO: u32 = 17;
pub const CAP_SYS_CHROOT: u32 = 18;
pub const CAP_SYS_PTRACE: u32 = 19;
pub const CAP_SYS_PACCT: u32 = 20;
pub const CAP_SYS_ADMIN: u32 = 21;
pub const CAP_SYS_BOOT: u32 = 22;
pub const CAP_SYS_NICE: u32 = 23;
pub const CAP_SYS_RESOURCE: u32 = 24;
pub const CAP_SYS_TIME: u32 = 25;
pub const CAP_SYS_TTY_CONFIG: u32 = 26;
pub const CAP_MKNOD: u32 = 27;
pub const CAP_LEASE: u32 = 28;
pub const CAP_AUDIT_WRITE: u32 = 29;
pub const CAP_AUDIT_CONTROL: u32 = 30;
pub const CAP_SETFCAP: u32 = 31;
pub const CAP_MAC_OVERRIDE: u32 = 32;
pub const CAP_MAC_ADMIN: u32 = 33;
pub const CAP_SYSLOG: u32 = 34;
pub const CAP_WAKE_ALARM: u32 = 35;
pub const CAP_BLOCK_SUSPEND: u32 = 36;
pub const CAP_AUDIT_READ: u32 = 37;
pub const CAP_PERFMON: u32 = 38;
pub const CAP_BPF: u32 = 39;
pub const CAP_CHECKPOINT_RESTORE: u32 = 40;
pub const CAP_LAST_CAP: u32 = 40;
pub const _KERNEL_CAPABILITY_VERSION: u32 = 537396514;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_DSYNC: u32 = 4096;
pub const FASYNC: u32 = 8192;
pub const O_DIRECT: u32 = 16384;
pub const O_LARGEFILE: u32 = 32768;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_NOATIME: u32 = 262144;
pub const O_CLOEXEC: u32 = 524288;
pub const __O_SYNC: u32 = 1048576;
pub const O_SYNC: u32 = 1052672;
pub const O_PATH: u32 = 2097152;
pub const __O_TMPFILE: u32 = 4194304;
pub const O_TMPFILE: u32 = 4259840;
pub const O_NDELAY: u32 = 2048;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const F_SETSIG: u32 = 10;
pub const F_GETSIG: u32 = 11;
pub const F_GETLK64: u32 = 12;
pub const F_SETLK64: u32 = 13;
pub const F_SETLKW64: u32 = 14;
pub const F_SETOWN_EX: u32 = 15;
pub const F_GETOWN_EX: u32 = 16;
pub const F_GETOWNER_UIDS: u32 = 17;
pub const F_OFD_GETLK: u32 = 36;
pub const F_OFD_SETLK: u32 = 37;
pub const F_OFD_SETLKW: u32 = 38;
pub const F_OWNER_TID: u32 = 0;
pub const F_OWNER_PID: u32 = 1;
pub const F_OWNER_PGRP: u32 = 2;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const LOCK_MAND: u32 = 32;
pub const LOCK_READ: u32 = 64;
pub const LOCK_WRITE: u32 = 128;
pub const LOCK_RW: u32 = 192;
pub const F_LINUX_SPECIFIC_BASE: u32 = 1024;
pub const RESOLVE_NO_XDEV: u32 = 1;
pub const RESOLVE_NO_MAGICLINKS: u32 = 2;
pub const RESOLVE_NO_SYMLINKS: u32 = 4;
pub const RESOLVE_BENEATH: u32 = 8;
pub const RESOLVE_IN_ROOT: u32 = 16;
pub const RESOLVE_CACHED: u32 = 32;
pub const F_SETLEASE: u32 = 1024;
pub const F_GETLEASE: u32 = 1025;
pub const F_NOTIFY: u32 = 1026;
pub const F_DUPFD_QUERY: u32 = 1027;
pub const F_CANCELLK: u32 = 1029;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const F_SETPIPE_SZ: u32 = 1031;
pub const F_GETPIPE_SZ: u32 = 1032;
pub const F_ADD_SEALS: u32 = 1033;
pub const F_GET_SEALS: u32 = 1034;
pub const F_SEAL_SEAL: u32 = 1;
pub const F_SEAL_SHRINK: u32 = 2;
pub const F_SEAL_GROW: u32 = 4;
pub const F_SEAL_WRITE: u32 = 8;
pub const F_SEAL_FUTURE_WRITE: u32 = 16;
pub const F_SEAL_EXEC: u32 = 32;
pub const F_GET_RW_HINT: u32 = 1035;
pub const F_SET_RW_HINT: u32 = 1036;
pub const F_GET_FILE_RW_HINT: u32 = 1037;
pub const F_SET_FILE_RW_HINT: u32 = 1038;
pub const RWH_WRITE_LIFE_NOT_SET: u32 = 0;
pub const RWH_WRITE_LIFE_NONE: u32 = 1;
pub const RWH_WRITE_LIFE_SHORT: u32 = 2;
pub const RWH_WRITE_LIFE_MEDIUM: u32 = 3;
pub const RWH_WRITE_LIFE_LONG: u32 = 4;
pub const RWH_WRITE_LIFE_EXTREME: u32 = 5;
pub const RWF_WRITE_LIFE_NOT_SET: u32 = 0;
pub const DN_ACCESS: u32 = 1;
pub const DN_MODIFY: u32 = 2;
pub const DN_CREATE: u32 = 4;
pub const DN_DELETE: u32 = 8;
pub const DN_RENAME: u32 = 16;
pub const DN_ATTRIB: u32 = 32;
pub const DN_MULTISHOT: u32 = 2147483648;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_EACCESS: u32 = 512;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_NO_AUTOMOUNT: u32 = 2048;
pub const AT_EMPTY_PATH: u32 = 4096;
pub const AT_STATX_SYNC_TYPE: u32 = 24576;
pub const AT_STATX_SYNC_AS_STAT: u32 = 0;
pub const AT_STATX_FORCE_SYNC: u32 = 8192;
pub const AT_STATX_DONT_SYNC: u32 = 16384;
pub const AT_RECURSIVE: u32 = 32768;
pub const AT_HANDLE_FID: u32 = 512;
pub const AT_GETATTR_NOSEC: u32 = 2147483648;
pub const VALID_OPEN_FLAGS: u32 = 8388547;
pub const VALID_RESOLVE_FLAGS: u32 = 63;
pub const OPEN_HOW_SIZE_VER0: u32 = 24;
pub const OPEN_HOW_SIZE_LATEST: u32 = 24;
pub const SIGEMT_MASK: u32 = 0;
pub const JOBCTL_STOP_SIGMASK: u32 = 65535;
pub const JOBCTL_STOP_DEQUEUED_BIT: u32 = 16;
pub const JOBCTL_STOP_PENDING_BIT: u32 = 17;
pub const JOBCTL_STOP_CONSUME_BIT: u32 = 18;
pub const JOBCTL_TRAP_STOP_BIT: u32 = 19;
pub const JOBCTL_TRAP_NOTIFY_BIT: u32 = 20;
pub const JOBCTL_TRAPPING_BIT: u32 = 21;
pub const JOBCTL_LISTENING_BIT: u32 = 22;
pub const JOBCTL_TRAP_FREEZE_BIT: u32 = 23;
pub const JOBCTL_PTRACE_FROZEN_BIT: u32 = 24;
pub const JOBCTL_STOPPED_BIT: u32 = 26;
pub const JOBCTL_TRACED_BIT: u32 = 27;
pub const JOBCTL_STOP_DEQUEUED: u32 = 65536;
pub const JOBCTL_STOP_PENDING: u32 = 131072;
pub const JOBCTL_STOP_CONSUME: u32 = 262144;
pub const JOBCTL_TRAP_STOP: u32 = 524288;
pub const JOBCTL_TRAP_NOTIFY: u32 = 1048576;
pub const JOBCTL_TRAPPING: u32 = 2097152;
pub const JOBCTL_LISTENING: u32 = 4194304;
pub const JOBCTL_TRAP_FREEZE: u32 = 8388608;
pub const JOBCTL_PTRACE_FROZEN: u32 = 16777216;
pub const JOBCTL_STOPPED: u32 = 67108864;
pub const JOBCTL_TRACED: u32 = 134217728;
pub const JOBCTL_TRAP_MASK: u32 = 1572864;
pub const JOBCTL_PENDING_MASK: u32 = 1703936;
pub const __ASM_CLAC: &[u8; 21] = b".byte 0x0f,0x01,0xca\0";
pub const __ASM_STAC: &[u8; 21] = b".byte 0x0f,0x01,0xcb\0";
pub const MMU_NOTIFIER_RANGE_BLOCKABLE: u32 = 1;
pub const INVPCID_TYPE_INDIV_ADDR: u32 = 0;
pub const INVPCID_TYPE_SINGLE_CTXT: u32 = 1;
pub const INVPCID_TYPE_ALL_INCL_GLOBAL: u32 = 2;
pub const INVPCID_TYPE_ALL_NON_GLOBAL: u32 = 3;
pub const PKRU_AD_BIT: u32 = 1;
pub const PKRU_WD_BIT: u32 = 2;
pub const PKRU_BITS_PER_PKEY: u32 = 2;
pub const PFN_PTE_SHIFT: u32 = 12;
pub const FIXMAP_PMD_NUM: u32 = 2;
pub const FIXMAP_PMD_TOP: u32 = 507;
pub const VSYSCALL_ADDR: i32 = -10485760;
pub const NR_FIX_BTMAPS: u32 = 64;
pub const FIX_BTMAPS_SLOTS: u32 = 8;
pub const TOTAL_FIX_BTMAPS: u32 = 512;
pub const SWP_TYPE_BITS: u32 = 5;
pub const SWP_OFFSET_FIRST_BIT: u32 = 9;
pub const SWP_OFFSET_SHIFT: u32 = 14;
pub const HAVE_PAGE_AGP: u32 = 1;
pub const _ASM_PGTABLE_INVERT_H: u32 = 1;
pub const PTI_PGTABLE_SWITCH_BIT: u32 = 12;
pub const __HAVE_ARCH_PFN_MODIFY_ALLOWED: u32 = 1;
pub const TLB_FLUSH_ALL: i32 = -1;
pub const TLB_GENERATION_INVALID: u32 = 0;
pub const TLB_NR_DYN_ASIDS: u32 = 6;
pub const ARCH_HAS_NOCACHE_UACCESS: u32 = 1;
pub const CLONE_LEGACY_FLAGS: u32 = 4294967295;
pub const ASSOC_ARRAY_KEY_CHUNK_SIZE: u32 = 64;
pub const KEY_POS_VIEW: u32 = 16777216;
pub const KEY_POS_READ: u32 = 33554432;
pub const KEY_POS_WRITE: u32 = 67108864;
pub const KEY_POS_SEARCH: u32 = 134217728;
pub const KEY_POS_LINK: u32 = 268435456;
pub const KEY_POS_SETATTR: u32 = 536870912;
pub const KEY_POS_ALL: u32 = 1056964608;
pub const KEY_USR_VIEW: u32 = 65536;
pub const KEY_USR_READ: u32 = 131072;
pub const KEY_USR_WRITE: u32 = 262144;
pub const KEY_USR_SEARCH: u32 = 524288;
pub const KEY_USR_LINK: u32 = 1048576;
pub const KEY_USR_SETATTR: u32 = 2097152;
pub const KEY_USR_ALL: u32 = 4128768;
pub const KEY_GRP_VIEW: u32 = 256;
pub const KEY_GRP_READ: u32 = 512;
pub const KEY_GRP_WRITE: u32 = 1024;
pub const KEY_GRP_SEARCH: u32 = 2048;
pub const KEY_GRP_LINK: u32 = 4096;
pub const KEY_GRP_SETATTR: u32 = 8192;
pub const KEY_GRP_ALL: u32 = 16128;
pub const KEY_OTH_VIEW: u32 = 1;
pub const KEY_OTH_READ: u32 = 2;
pub const KEY_OTH_WRITE: u32 = 4;
pub const KEY_OTH_SEARCH: u32 = 8;
pub const KEY_OTH_LINK: u32 = 16;
pub const KEY_OTH_SETATTR: u32 = 32;
pub const KEY_OTH_ALL: u32 = 63;
pub const KEY_PERM_UNDEF: u32 = 4294967295;
pub const KEY_FLAG_DEAD: u32 = 0;
pub const KEY_FLAG_REVOKED: u32 = 1;
pub const KEY_FLAG_IN_QUOTA: u32 = 2;
pub const KEY_FLAG_USER_CONSTRUCT: u32 = 3;
pub const KEY_FLAG_ROOT_CAN_CLEAR: u32 = 4;
pub const KEY_FLAG_INVALIDATED: u32 = 5;
pub const KEY_FLAG_BUILTIN: u32 = 6;
pub const KEY_FLAG_ROOT_CAN_INVAL: u32 = 7;
pub const KEY_FLAG_KEEP: u32 = 8;
pub const KEY_FLAG_UID_KEYRING: u32 = 9;
pub const KEY_ALLOC_IN_QUOTA: u32 = 0;
pub const KEY_ALLOC_QUOTA_OVERRUN: u32 = 1;
pub const KEY_ALLOC_NOT_IN_QUOTA: u32 = 2;
pub const KEY_ALLOC_BUILT_IN: u32 = 4;
pub const KEY_ALLOC_BYPASS_RESTRICTION: u32 = 8;
pub const KEY_ALLOC_UID_KEYRING: u32 = 16;
pub const KEY_ALLOC_SET_KEEP: u32 = 32;
pub const ALARMTIMER_STATE_INACTIVE: u32 = 0;
pub const ALARMTIMER_STATE_ENQUEUED: u32 = 1;
pub const REQUEUE_PENDING: u32 = 1;
pub const SIGNAL_STOP_STOPPED: u32 = 1;
pub const SIGNAL_STOP_CONTINUED: u32 = 2;
pub const SIGNAL_GROUP_EXIT: u32 = 4;
pub const SIGNAL_CLD_STOPPED: u32 = 16;
pub const SIGNAL_CLD_CONTINUED: u32 = 32;
pub const SIGNAL_CLD_MASK: u32 = 48;
pub const SIGNAL_UNKILLABLE: u32 = 64;
pub const SIGNAL_STOP_MASK: u32 = 51;
pub const UUID_SIZE: u32 = 16;
pub const UUID_STRING_LEN: u32 = 36;
pub const RR_TIMESLICE: u32 = 100;
pub const IOPRIO_CLASS_SHIFT: u32 = 13;
pub const IOPRIO_NR_CLASSES: u32 = 8;
pub const IOPRIO_CLASS_MASK: u32 = 7;
pub const IOPRIO_PRIO_MASK: u32 = 8191;
pub const IOPRIO_LEVEL_NR_BITS: u32 = 3;
pub const IOPRIO_NR_LEVELS: u32 = 8;
pub const IOPRIO_LEVEL_MASK: u32 = 7;
pub const IOPRIO_BE_NR: u32 = 8;
pub const IOPRIO_NORM: u32 = 4;
pub const IOPRIO_BE_NORM: u32 = 4;
pub const IOPRIO_HINT_SHIFT: u32 = 3;
pub const IOPRIO_HINT_NR_BITS: u32 = 10;
pub const IOPRIO_NR_HINTS: u32 = 1024;
pub const IOPRIO_HINT_MASK: u32 = 1023;
pub const S_DT_SHIFT: u32 = 12;
pub const S_DT_MASK: u32 = 15;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DT_MAX: u32 = 16;
pub const FT_UNKNOWN: u32 = 0;
pub const FT_REG_FILE: u32 = 1;
pub const FT_DIR: u32 = 2;
pub const FT_CHRDEV: u32 = 3;
pub const FT_BLKDEV: u32 = 4;
pub const FT_FIFO: u32 = 5;
pub const FT_SOCK: u32 = 6;
pub const FT_SYMLINK: u32 = 7;
pub const FT_MAX: u32 = 8;
pub const MNT_NOSUID: u32 = 1;
pub const MNT_NODEV: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOATIME: u32 = 8;
pub const MNT_NODIRATIME: u32 = 16;
pub const MNT_RELATIME: u32 = 32;
pub const MNT_READONLY: u32 = 64;
pub const MNT_NOSYMFOLLOW: u32 = 128;
pub const MNT_SHRINKABLE: u32 = 256;
pub const MNT_WRITE_HOLD: u32 = 512;
pub const MNT_SHARED: u32 = 4096;
pub const MNT_UNBINDABLE: u32 = 8192;
pub const MNT_SHARED_MASK: u32 = 8192;
pub const MNT_USER_SETTABLE_MASK: u32 = 255;
pub const MNT_ATIME_MASK: u32 = 56;
pub const MNT_INTERNAL: u32 = 16384;
pub const MNT_LOCK_ATIME: u32 = 262144;
pub const MNT_LOCK_NOEXEC: u32 = 524288;
pub const MNT_LOCK_NOSUID: u32 = 1048576;
pub const MNT_LOCK_NODEV: u32 = 2097152;
pub const MNT_LOCK_READONLY: u32 = 4194304;
pub const MNT_LOCKED: u32 = 8388608;
pub const MNT_DOOMED: u32 = 16777216;
pub const MNT_SYNC_UMOUNT: u32 = 33554432;
pub const MNT_MARKED: u32 = 67108864;
pub const MNT_UMOUNT: u32 = 134217728;
pub const MNT_ONRB: u32 = 268435456;
pub const KASAN_TAG_KERNEL: u32 = 255;
pub const KASAN_TAG_INVALID: u32 = 254;
pub const KASAN_TAG_MAX: u32 = 253;
pub const KASAN_TAG_MIN: u32 = 0;
pub const KMALLOC_SHIFT_HIGH: u32 = 13;
pub const KMALLOC_SHIFT_MAX: u32 = 22;
pub const KMALLOC_SHIFT_LOW: u32 = 3;
pub const KMALLOC_MAX_SIZE: u32 = 4194304;
pub const KMALLOC_MAX_CACHE_SIZE: u32 = 8192;
pub const KMALLOC_MAX_ORDER: u32 = 10;
pub const KMALLOC_MIN_SIZE: u32 = 8;
pub const RANDOM_KMALLOC_CACHES_NR: u32 = 15;
pub const INR_OPEN_CUR: u32 = 1024;
pub const INR_OPEN_MAX: u32 = 4096;
pub const BLOCK_SIZE_BITS: u32 = 10;
pub const BLOCK_SIZE: u32 = 1024;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const SEEK_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const FILE_DEDUPE_RANGE_SAME: u32 = 0;
pub const FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
pub const NR_FILE: u32 = 8192;
pub const FS_XFLAG_REALTIME: u32 = 1;
pub const FS_XFLAG_PREALLOC: u32 = 2;
pub const FS_XFLAG_IMMUTABLE: u32 = 8;
pub const FS_XFLAG_APPEND: u32 = 16;
pub const FS_XFLAG_SYNC: u32 = 32;
pub const FS_XFLAG_NOATIME: u32 = 64;
pub const FS_XFLAG_NODUMP: u32 = 128;
pub const FS_XFLAG_RTINHERIT: u32 = 256;
pub const FS_XFLAG_PROJINHERIT: u32 = 512;
pub const FS_XFLAG_NOSYMLINKS: u32 = 1024;
pub const FS_XFLAG_EXTSIZE: u32 = 2048;
pub const FS_XFLAG_EXTSZINHERIT: u32 = 4096;
pub const FS_XFLAG_NODEFRAG: u32 = 8192;
pub const FS_XFLAG_FILESTREAM: u32 = 16384;
pub const FS_XFLAG_DAX: u32 = 32768;
pub const FS_XFLAG_COWEXTSIZE: u32 = 65536;
pub const FS_XFLAG_HASATTR: u32 = 2147483648;
pub const BMAP_IOCTL: u32 = 1;
pub const FSLABEL_MAX: u32 = 256;
pub const FS_SECRM_FL: u32 = 1;
pub const FS_UNRM_FL: u32 = 2;
pub const FS_COMPR_FL: u32 = 4;
pub const FS_SYNC_FL: u32 = 8;
pub const FS_IMMUTABLE_FL: u32 = 16;
pub const FS_APPEND_FL: u32 = 32;
pub const FS_NODUMP_FL: u32 = 64;
pub const FS_NOATIME_FL: u32 = 128;
pub const FS_DIRTY_FL: u32 = 256;
pub const FS_COMPRBLK_FL: u32 = 512;
pub const FS_NOCOMP_FL: u32 = 1024;
pub const FS_ENCRYPT_FL: u32 = 2048;
pub const FS_BTREE_FL: u32 = 4096;
pub const FS_INDEX_FL: u32 = 4096;
pub const FS_IMAGIC_FL: u32 = 8192;
pub const FS_JOURNAL_DATA_FL: u32 = 16384;
pub const FS_NOTAIL_FL: u32 = 32768;
pub const FS_DIRSYNC_FL: u32 = 65536;
pub const FS_TOPDIR_FL: u32 = 131072;
pub const FS_HUGE_FILE_FL: u32 = 262144;
pub const FS_EXTENT_FL: u32 = 524288;
pub const FS_VERITY_FL: u32 = 1048576;
pub const FS_EA_INODE_FL: u32 = 2097152;
pub const FS_EOFBLOCKS_FL: u32 = 4194304;
pub const FS_NOCOW_FL: u32 = 8388608;
pub const FS_DAX_FL: u32 = 33554432;
pub const FS_INLINE_DATA_FL: u32 = 268435456;
pub const FS_PROJINHERIT_FL: u32 = 536870912;
pub const FS_CASEFOLD_FL: u32 = 1073741824;
pub const FS_RESERVED_FL: u32 = 2147483648;
pub const FS_FL_USER_VISIBLE: u32 = 253951;
pub const FS_FL_USER_MODIFIABLE: u32 = 229631;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
pub const SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
pub const PROCFS_IOCTL_MAGIC: u8 = 102u8;
pub const PAGE_IS_WPALLOWED: u32 = 1;
pub const PAGE_IS_WRITTEN: u32 = 2;
pub const PAGE_IS_FILE: u32 = 4;
pub const PAGE_IS_PRESENT: u32 = 8;
pub const PAGE_IS_SWAPPED: u32 = 16;
pub const PAGE_IS_PFNZERO: u32 = 32;
pub const PAGE_IS_HUGE: u32 = 64;
pub const PAGE_IS_SOFT_DIRTY: u32 = 128;
pub const PM_SCAN_WP_MATCHING: u32 = 1;
pub const PM_SCAN_CHECK_WPASYNC: u32 = 2;
pub const MAY_EXEC: u32 = 1;
pub const MAY_WRITE: u32 = 2;
pub const MAY_READ: u32 = 4;
pub const MAY_APPEND: u32 = 8;
pub const MAY_ACCESS: u32 = 16;
pub const MAY_OPEN: u32 = 32;
pub const MAY_CHDIR: u32 = 64;
pub const MAY_NOT_BLOCK: u32 = 128;
pub const ATTR_MODE: u32 = 1;
pub const ATTR_UID: u32 = 2;
pub const ATTR_GID: u32 = 4;
pub const ATTR_SIZE: u32 = 8;
pub const ATTR_ATIME: u32 = 16;
pub const ATTR_MTIME: u32 = 32;
pub const ATTR_CTIME: u32 = 64;
pub const ATTR_ATIME_SET: u32 = 128;
pub const ATTR_MTIME_SET: u32 = 256;
pub const ATTR_FORCE: u32 = 512;
pub const ATTR_KILL_SUID: u32 = 2048;
pub const ATTR_KILL_SGID: u32 = 4096;
pub const ATTR_FILE: u32 = 8192;
pub const ATTR_KILL_PRIV: u32 = 16384;
pub const ATTR_OPEN: u32 = 32768;
pub const ATTR_TIMES_SET: u32 = 65536;
pub const ATTR_TOUCH: u32 = 131072;
pub const ATTR_DELEG: u32 = 262144;
pub const WHITEOUT_MODE: u32 = 0;
pub const WHITEOUT_DEV: u32 = 0;
pub const XQM_USRQUOTA: u32 = 0;
pub const XQM_GRPQUOTA: u32 = 1;
pub const XQM_PRJQUOTA: u32 = 2;
pub const XQM_MAXQUOTAS: u32 = 3;
pub const FS_DQUOT_VERSION: u32 = 1;
pub const FS_DQ_ISOFT: u32 = 1;
pub const FS_DQ_IHARD: u32 = 2;
pub const FS_DQ_BSOFT: u32 = 4;
pub const FS_DQ_BHARD: u32 = 8;
pub const FS_DQ_RTBSOFT: u32 = 16;
pub const FS_DQ_RTBHARD: u32 = 32;
pub const FS_DQ_LIMIT_MASK: u32 = 63;
pub const FS_DQ_BTIMER: u32 = 64;
pub const FS_DQ_ITIMER: u32 = 128;
pub const FS_DQ_RTBTIMER: u32 = 256;
pub const FS_DQ_TIMER_MASK: u32 = 448;
pub const FS_DQ_BWARNS: u32 = 512;
pub const FS_DQ_IWARNS: u32 = 1024;
pub const FS_DQ_RTBWARNS: u32 = 2048;
pub const FS_DQ_WARNS_MASK: u32 = 3584;
pub const FS_DQ_BCOUNT: u32 = 4096;
pub const FS_DQ_ICOUNT: u32 = 8192;
pub const FS_DQ_RTBCOUNT: u32 = 16384;
pub const FS_DQ_ACCT_MASK: u32 = 28672;
pub const FS_DQ_BIGTIME: u32 = 32768;
pub const FS_QUOTA_UDQ_ACCT: u32 = 1;
pub const FS_QUOTA_UDQ_ENFD: u32 = 2;
pub const FS_QUOTA_GDQ_ACCT: u32 = 4;
pub const FS_QUOTA_GDQ_ENFD: u32 = 8;
pub const FS_QUOTA_PDQ_ACCT: u32 = 16;
pub const FS_QUOTA_PDQ_ENFD: u32 = 32;
pub const FS_USER_QUOTA: u32 = 1;
pub const FS_PROJ_QUOTA: u32 = 2;
pub const FS_GROUP_QUOTA: u32 = 4;
pub const FS_QSTAT_VERSION: u32 = 1;
pub const FS_QSTATV_VERSION1: u32 = 1;
pub const V1_INIT_ALLOC: u32 = 1;
pub const V1_INIT_REWRITE: u32 = 1;
pub const V1_DEL_ALLOC: u32 = 0;
pub const V1_DEL_REWRITE: u32 = 2;
pub const QTREE_INIT_ALLOC: u32 = 4;
pub const QTREE_INIT_REWRITE: u32 = 2;
pub const QTREE_DEL_ALLOC: u32 = 0;
pub const QTREE_DEL_REWRITE: u32 = 6;
pub const V2_INIT_ALLOC: u32 = 4;
pub const V2_INIT_REWRITE: u32 = 2;
pub const V2_DEL_ALLOC: u32 = 0;
pub const V2_DEL_REWRITE: u32 = 6;
pub const OVERFLOW_PROJID: u32 = 65534;
pub const __DQUOT_VERSION__: &[u8; 12] = b"dquot_6.6.0\0";
pub const MAXQUOTAS: u32 = 3;
pub const USRQUOTA: u32 = 0;
pub const GRPQUOTA: u32 = 1;
pub const PRJQUOTA: u32 = 2;
pub const SUBCMDMASK: u32 = 255;
pub const SUBCMDSHIFT: u32 = 8;
pub const Q_SYNC: u32 = 8388609;
pub const Q_QUOTAON: u32 = 8388610;
pub const Q_QUOTAOFF: u32 = 8388611;
pub const Q_GETFMT: u32 = 8388612;
pub const Q_GETINFO: u32 = 8388613;
pub const Q_SETINFO: u32 = 8388614;
pub const Q_GETQUOTA: u32 = 8388615;
pub const Q_SETQUOTA: u32 = 8388616;
pub const Q_GETNEXTQUOTA: u32 = 8388617;
pub const QFMT_VFS_OLD: u32 = 1;
pub const QFMT_VFS_V0: u32 = 2;
pub const QFMT_OCFS2: u32 = 3;
pub const QFMT_VFS_V1: u32 = 4;
pub const QFMT_SHMEM: u32 = 5;
pub const QIF_DQBLKSIZE_BITS: u32 = 10;
pub const QIF_DQBLKSIZE: u32 = 1024;
pub const IIF_BGRACE: u32 = 1;
pub const IIF_IGRACE: u32 = 2;
pub const IIF_FLAGS: u32 = 4;
pub const IIF_ALL: u32 = 7;
pub const QUOTA_NL_NOWARN: u32 = 0;
pub const QUOTA_NL_IHARDWARN: u32 = 1;
pub const QUOTA_NL_ISOFTLONGWARN: u32 = 2;
pub const QUOTA_NL_ISOFTWARN: u32 = 3;
pub const QUOTA_NL_BHARDWARN: u32 = 4;
pub const QUOTA_NL_BSOFTLONGWARN: u32 = 5;
pub const QUOTA_NL_BSOFTWARN: u32 = 6;
pub const QUOTA_NL_IHARDBELOW: u32 = 7;
pub const QUOTA_NL_ISOFTBELOW: u32 = 8;
pub const QUOTA_NL_BHARDBELOW: u32 = 9;
pub const QUOTA_NL_BSOFTBELOW: u32 = 10;
pub const QTYPE_MASK_USR: u32 = 1;
pub const QTYPE_MASK_GRP: u32 = 2;
pub const QTYPE_MASK_PRJ: u32 = 4;
pub const DQ_MOD_B: u32 = 0;
pub const DQ_BLKS_B: u32 = 1;
pub const DQ_INODES_B: u32 = 2;
pub const DQ_FAKE_B: u32 = 3;
pub const DQ_READ_B: u32 = 4;
pub const DQ_ACTIVE_B: u32 = 5;
pub const DQ_RELEASING_B: u32 = 6;
pub const DQ_LASTSET_B: u32 = 7;
pub const QC_INO_SOFT: u32 = 1;
pub const QC_INO_HARD: u32 = 2;
pub const QC_SPC_SOFT: u32 = 4;
pub const QC_SPC_HARD: u32 = 8;
pub const QC_RT_SPC_SOFT: u32 = 16;
pub const QC_RT_SPC_HARD: u32 = 32;
pub const QC_LIMIT_MASK: u32 = 63;
pub const QC_SPC_TIMER: u32 = 64;
pub const QC_INO_TIMER: u32 = 128;
pub const QC_RT_SPC_TIMER: u32 = 256;
pub const QC_TIMER_MASK: u32 = 448;
pub const QC_SPC_WARNS: u32 = 512;
pub const QC_INO_WARNS: u32 = 1024;
pub const QC_RT_SPC_WARNS: u32 = 2048;
pub const QC_WARNS_MASK: u32 = 3584;
pub const QC_SPACE: u32 = 4096;
pub const QC_INO_COUNT: u32 = 8192;
pub const QC_RT_SPACE: u32 = 16384;
pub const QC_ACCT_MASK: u32 = 28672;
pub const QC_FLAGS: u32 = 32768;
pub const QCI_SYSFILE: u32 = 1;
pub const QCI_ROOT_SQUASH: u32 = 2;
pub const QCI_ACCT_ENABLED: u32 = 4;
pub const QCI_LIMITS_ENFORCED: u32 = 8;
pub const FILESYSTEM_MAX_STACK_DEPTH: u32 = 2;
pub const IOCB_EVENTFD: u32 = 65536;
pub const IOCB_DIRECT: u32 = 131072;
pub const IOCB_WRITE: u32 = 262144;
pub const IOCB_WAITQ: u32 = 524288;
pub const IOCB_NOIO: u32 = 1048576;
pub const IOCB_ALLOC_CACHE: u32 = 2097152;
pub const IOCB_DIO_CALLER_COMP: u32 = 4194304;
pub const IOCB_AIO_RW: u32 = 8388608;
pub const IOP_FASTPERM: u32 = 1;
pub const IOP_LOOKUP: u32 = 2;
pub const IOP_NOFOLLOW: u32 = 4;
pub const IOP_XATTR: u32 = 8;
pub const IOP_DEFAULT_READLINK: u32 = 16;
pub const MAX_NON_LFS: u32 = 2147483647;
pub const FASYNC_MAGIC: u32 = 17921;
pub const SB_ENC_STRICT_MODE_FL: u32 = 1;
pub const MNT_FORCE: u32 = 1;
pub const MNT_DETACH: u32 = 2;
pub const MNT_EXPIRE: u32 = 4;
pub const UMOUNT_NOFOLLOW: u32 = 8;
pub const UMOUNT_UNUSED: u32 = 2147483648;
pub const SB_I_CGROUPWB: u32 = 1;
pub const SB_I_NOEXEC: u32 = 2;
pub const SB_I_NODEV: u32 = 4;
pub const SB_I_STABLE_WRITES: u32 = 8;
pub const SB_I_USERNS_VISIBLE: u32 = 16;
pub const SB_I_IMA_UNVERIFIABLE_SIGNATURE: u32 = 32;
pub const SB_I_UNTRUSTED_MOUNTER: u32 = 64;
pub const SB_I_EVM_HMAC_UNSUPPORTED: u32 = 128;
pub const SB_I_SKIP_SYNC: u32 = 256;
pub const SB_I_PERSB_BDI: u32 = 512;
pub const SB_I_TS_EXPIRY_WARNED: u32 = 1024;
pub const SB_I_RETIRED: u32 = 2048;
pub const SB_I_NOUMASK: u32 = 4096;
pub const NOMMU_MAP_COPY: u32 = 1;
pub const NOMMU_MAP_DIRECT: u32 = 8;
pub const REMAP_FILE_DEDUP: u32 = 1;
pub const REMAP_FILE_CAN_SHORTEN: u32 = 2;
pub const REMAP_FILE_ADVISORY: u32 = 2;
pub const COPY_FILE_SPLICE: u32 = 1;
pub const S_SYNC: u32 = 1;
pub const S_NOATIME: u32 = 2;
pub const S_APPEND: u32 = 4;
pub const S_IMMUTABLE: u32 = 8;
pub const S_DEAD: u32 = 16;
pub const S_NOQUOTA: u32 = 32;
pub const S_DIRSYNC: u32 = 64;
pub const S_NOCMTIME: u32 = 128;
pub const S_SWAPFILE: u32 = 256;
pub const S_PRIVATE: u32 = 512;
pub const S_IMA: u32 = 1024;
pub const S_AUTOMOUNT: u32 = 2048;
pub const S_NOSEC: u32 = 4096;
pub const S_DAX: u32 = 8192;
pub const S_ENCRYPTED: u32 = 16384;
pub const S_CASEFOLD: u32 = 32768;
pub const S_VERITY: u32 = 65536;
pub const S_KERNEL_FILE: u32 = 131072;
pub const I_DIRTY_SYNC: u32 = 1;
pub const I_DIRTY_DATASYNC: u32 = 2;
pub const I_DIRTY_PAGES: u32 = 4;
pub const __I_NEW: u32 = 3;
pub const I_NEW: u32 = 8;
pub const I_WILL_FREE: u32 = 16;
pub const I_FREEING: u32 = 32;
pub const I_CLEAR: u32 = 64;
pub const __I_SYNC: u32 = 7;
pub const I_SYNC: u32 = 128;
pub const I_REFERENCED: u32 = 256;
pub const __I_DIO_WAKEUP: u32 = 9;
pub const I_DIO_WAKEUP: u32 = 512;
pub const I_LINKABLE: u32 = 1024;
pub const I_DIRTY_TIME: u32 = 2048;
pub const I_WB_SWITCH: u32 = 8192;
pub const I_OVL_INUSE: u32 = 16384;
pub const I_CREATING: u32 = 32768;
pub const I_DONTCACHE: u32 = 65536;
pub const I_SYNC_QUEUED: u32 = 131072;
pub const I_PINNING_NETFS_WB: u32 = 262144;
pub const __I_LRU_ISOLATING: u32 = 19;
pub const I_LRU_ISOLATING: u32 = 524288;
pub const I_DIRTY_INODE: u32 = 3;
pub const I_DIRTY: u32 = 7;
pub const I_DIRTY_ALL: u32 = 2055;
pub const FS_REQUIRES_DEV: u32 = 1;
pub const FS_BINARY_MOUNTDATA: u32 = 2;
pub const FS_HAS_SUBTYPE: u32 = 4;
pub const FS_USERNS_MOUNT: u32 = 8;
pub const FS_DISALLOW_NOTIFY_PERM: u32 = 16;
pub const FS_ALLOW_IDMAP: u32 = 32;
pub const FS_RENAME_DOES_D_MOVE: u32 = 32768;
pub const CHRDEV_MAJOR_MAX: u32 = 512;
pub const CHRDEV_MAJOR_DYN_END: u32 = 234;
pub const CHRDEV_MAJOR_DYN_EXT_START: u32 = 511;
pub const CHRDEV_MAJOR_DYN_EXT_END: u32 = 384;
pub const IOCB_FLAG_RESFD: u32 = 1;
pub const IOCB_FLAG_IOPRIO: u32 = 2;
pub const _ASM_X86_UNISTD_H: u32 = 1;
pub const __X32_SYSCALL_BIT: u32 = 1073741824;
pub const __NR_read: u32 = 0;
pub const __NR_write: u32 = 1;
pub const __NR_open: u32 = 2;
pub const __NR_close: u32 = 3;
pub const __NR_stat: u32 = 4;
pub const __NR_fstat: u32 = 5;
pub const __NR_lstat: u32 = 6;
pub const __NR_poll: u32 = 7;
pub const __NR_lseek: u32 = 8;
pub const __NR_mmap: u32 = 9;
pub const __NR_mprotect: u32 = 10;
pub const __NR_munmap: u32 = 11;
pub const __NR_brk: u32 = 12;
pub const __NR_rt_sigaction: u32 = 13;
pub const __NR_rt_sigprocmask: u32 = 14;
pub const __NR_rt_sigreturn: u32 = 15;
pub const __NR_ioctl: u32 = 16;
pub const __NR_pread64: u32 = 17;
pub const __NR_pwrite64: u32 = 18;
pub const __NR_readv: u32 = 19;
pub const __NR_writev: u32 = 20;
pub const __NR_access: u32 = 21;
pub const __NR_pipe: u32 = 22;
pub const __NR_select: u32 = 23;
pub const __NR_sched_yield: u32 = 24;
pub const __NR_mremap: u32 = 25;
pub const __NR_msync: u32 = 26;
pub const __NR_mincore: u32 = 27;
pub const __NR_madvise: u32 = 28;
pub const __NR_shmget: u32 = 29;
pub const __NR_shmat: u32 = 30;
pub const __NR_shmctl: u32 = 31;
pub const __NR_dup: u32 = 32;
pub const __NR_dup2: u32 = 33;
pub const __NR_pause: u32 = 34;
pub const __NR_nanosleep: u32 = 35;
pub const __NR_getitimer: u32 = 36;
pub const __NR_alarm: u32 = 37;
pub const __NR_setitimer: u32 = 38;
pub const __NR_getpid: u32 = 39;
pub const __NR_sendfile: u32 = 40;
pub const __NR_socket: u32 = 41;
pub const __NR_connect: u32 = 42;
pub const __NR_accept: u32 = 43;
pub const __NR_sendto: u32 = 44;
pub const __NR_recvfrom: u32 = 45;
pub const __NR_sendmsg: u32 = 46;
pub const __NR_recvmsg: u32 = 47;
pub const __NR_shutdown: u32 = 48;
pub const __NR_bind: u32 = 49;
pub const __NR_listen: u32 = 50;
pub const __NR_getsockname: u32 = 51;
pub const __NR_getpeername: u32 = 52;
pub const __NR_socketpair: u32 = 53;
pub const __NR_setsockopt: u32 = 54;
pub const __NR_getsockopt: u32 = 55;
pub const __NR_clone: u32 = 56;
pub const __NR_fork: u32 = 57;
pub const __NR_vfork: u32 = 58;
pub const __NR_execve: u32 = 59;
pub const __NR_exit: u32 = 60;
pub const __NR_wait4: u32 = 61;
pub const __NR_kill: u32 = 62;
pub const __NR_uname: u32 = 63;
pub const __NR_semget: u32 = 64;
pub const __NR_semop: u32 = 65;
pub const __NR_semctl: u32 = 66;
pub const __NR_shmdt: u32 = 67;
pub const __NR_msgget: u32 = 68;
pub const __NR_msgsnd: u32 = 69;
pub const __NR_msgrcv: u32 = 70;
pub const __NR_msgctl: u32 = 71;
pub const __NR_fcntl: u32 = 72;
pub const __NR_flock: u32 = 73;
pub const __NR_fsync: u32 = 74;
pub const __NR_fdatasync: u32 = 75;
pub const __NR_truncate: u32 = 76;
pub const __NR_ftruncate: u32 = 77;
pub const __NR_getdents: u32 = 78;
pub const __NR_getcwd: u32 = 79;
pub const __NR_chdir: u32 = 80;
pub const __NR_fchdir: u32 = 81;
pub const __NR_rename: u32 = 82;
pub const __NR_mkdir: u32 = 83;
pub const __NR_rmdir: u32 = 84;
pub const __NR_creat: u32 = 85;
pub const __NR_link: u32 = 86;
pub const __NR_unlink: u32 = 87;
pub const __NR_symlink: u32 = 88;
pub const __NR_readlink: u32 = 89;
pub const __NR_chmod: u32 = 90;
pub const __NR_fchmod: u32 = 91;
pub const __NR_chown: u32 = 92;
pub const __NR_fchown: u32 = 93;
pub const __NR_lchown: u32 = 94;
pub const __NR_umask: u32 = 95;
pub const __NR_gettimeofday: u32 = 96;
pub const __NR_getrlimit: u32 = 97;
pub const __NR_getrusage: u32 = 98;
pub const __NR_sysinfo: u32 = 99;
pub const __NR_times: u32 = 100;
pub const __NR_ptrace: u32 = 101;
pub const __NR_getuid: u32 = 102;
pub const __NR_syslog: u32 = 103;
pub const __NR_getgid: u32 = 104;
pub const __NR_setuid: u32 = 105;
pub const __NR_setgid: u32 = 106;
pub const __NR_geteuid: u32 = 107;
pub const __NR_getegid: u32 = 108;
pub const __NR_setpgid: u32 = 109;
pub const __NR_getppid: u32 = 110;
pub const __NR_getpgrp: u32 = 111;
pub const __NR_setsid: u32 = 112;
pub const __NR_setreuid: u32 = 113;
pub const __NR_setregid: u32 = 114;
pub const __NR_getgroups: u32 = 115;
pub const __NR_setgroups: u32 = 116;
pub const __NR_setresuid: u32 = 117;
pub const __NR_getresuid: u32 = 118;
pub const __NR_setresgid: u32 = 119;
pub const __NR_getresgid: u32 = 120;
pub const __NR_getpgid: u32 = 121;
pub const __NR_setfsuid: u32 = 122;
pub const __NR_setfsgid: u32 = 123;
pub const __NR_getsid: u32 = 124;
pub const __NR_capget: u32 = 125;
pub const __NR_capset: u32 = 126;
pub const __NR_rt_sigpending: u32 = 127;
pub const __NR_rt_sigtimedwait: u32 = 128;
pub const __NR_rt_sigqueueinfo: u32 = 129;
pub const __NR_rt_sigsuspend: u32 = 130;
pub const __NR_sigaltstack: u32 = 131;
pub const __NR_utime: u32 = 132;
pub const __NR_mknod: u32 = 133;
pub const __NR_uselib: u32 = 134;
pub const __NR_personality: u32 = 135;
pub const __NR_ustat: u32 = 136;
pub const __NR_statfs: u32 = 137;
pub const __NR_fstatfs: u32 = 138;
pub const __NR_sysfs: u32 = 139;
pub const __NR_getpriority: u32 = 140;
pub const __NR_setpriority: u32 = 141;
pub const __NR_sched_setparam: u32 = 142;
pub const __NR_sched_getparam: u32 = 143;
pub const __NR_sched_setscheduler: u32 = 144;
pub const __NR_sched_getscheduler: u32 = 145;
pub const __NR_sched_get_priority_max: u32 = 146;
pub const __NR_sched_get_priority_min: u32 = 147;
pub const __NR_sched_rr_get_interval: u32 = 148;
pub const __NR_mlock: u32 = 149;
pub const __NR_munlock: u32 = 150;
pub const __NR_mlockall: u32 = 151;
pub const __NR_munlockall: u32 = 152;
pub const __NR_vhangup: u32 = 153;
pub const __NR_modify_ldt: u32 = 154;
pub const __NR_pivot_root: u32 = 155;
pub const __NR__sysctl: u32 = 156;
pub const __NR_prctl: u32 = 157;
pub const __NR_arch_prctl: u32 = 158;
pub const __NR_adjtimex: u32 = 159;
pub const __NR_setrlimit: u32 = 160;
pub const __NR_chroot: u32 = 161;
pub const __NR_sync: u32 = 162;
pub const __NR_acct: u32 = 163;
pub const __NR_settimeofday: u32 = 164;
pub const __NR_mount: u32 = 165;
pub const __NR_umount2: u32 = 166;
pub const __NR_swapon: u32 = 167;
pub const __NR_swapoff: u32 = 168;
pub const __NR_reboot: u32 = 169;
pub const __NR_sethostname: u32 = 170;
pub const __NR_setdomainname: u32 = 171;
pub const __NR_iopl: u32 = 172;
pub const __NR_ioperm: u32 = 173;
pub const __NR_create_module: u32 = 174;
pub const __NR_init_module: u32 = 175;
pub const __NR_delete_module: u32 = 176;
pub const __NR_get_kernel_syms: u32 = 177;
pub const __NR_query_module: u32 = 178;
pub const __NR_quotactl: u32 = 179;
pub const __NR_nfsservctl: u32 = 180;
pub const __NR_getpmsg: u32 = 181;
pub const __NR_putpmsg: u32 = 182;
pub const __NR_afs_syscall: u32 = 183;
pub const __NR_tuxcall: u32 = 184;
pub const __NR_security: u32 = 185;
pub const __NR_gettid: u32 = 186;
pub const __NR_readahead: u32 = 187;
pub const __NR_setxattr: u32 = 188;
pub const __NR_lsetxattr: u32 = 189;
pub const __NR_fsetxattr: u32 = 190;
pub const __NR_getxattr: u32 = 191;
pub const __NR_lgetxattr: u32 = 192;
pub const __NR_fgetxattr: u32 = 193;
pub const __NR_listxattr: u32 = 194;
pub const __NR_llistxattr: u32 = 195;
pub const __NR_flistxattr: u32 = 196;
pub const __NR_removexattr: u32 = 197;
pub const __NR_lremovexattr: u32 = 198;
pub const __NR_fremovexattr: u32 = 199;
pub const __NR_tkill: u32 = 200;
pub const __NR_time: u32 = 201;
pub const __NR_futex: u32 = 202;
pub const __NR_sched_setaffinity: u32 = 203;
pub const __NR_sched_getaffinity: u32 = 204;
pub const __NR_set_thread_area: u32 = 205;
pub const __NR_io_setup: u32 = 206;
pub const __NR_io_destroy: u32 = 207;
pub const __NR_io_getevents: u32 = 208;
pub const __NR_io_submit: u32 = 209;
pub const __NR_io_cancel: u32 = 210;
pub const __NR_get_thread_area: u32 = 211;
pub const __NR_lookup_dcookie: u32 = 212;
pub const __NR_epoll_create: u32 = 213;
pub const __NR_epoll_ctl_old: u32 = 214;
pub const __NR_epoll_wait_old: u32 = 215;
pub const __NR_remap_file_pages: u32 = 216;
pub const __NR_getdents64: u32 = 217;
pub const __NR_set_tid_address: u32 = 218;
pub const __NR_restart_syscall: u32 = 219;
pub const __NR_semtimedop: u32 = 220;
pub const __NR_fadvise64: u32 = 221;
pub const __NR_timer_create: u32 = 222;
pub const __NR_timer_settime: u32 = 223;
pub const __NR_timer_gettime: u32 = 224;
pub const __NR_timer_getoverrun: u32 = 225;
pub const __NR_timer_delete: u32 = 226;
pub const __NR_clock_settime: u32 = 227;
pub const __NR_clock_gettime: u32 = 228;
pub const __NR_clock_getres: u32 = 229;
pub const __NR_clock_nanosleep: u32 = 230;
pub const __NR_exit_group: u32 = 231;
pub const __NR_epoll_wait: u32 = 232;
pub const __NR_epoll_ctl: u32 = 233;
pub const __NR_tgkill: u32 = 234;
pub const __NR_utimes: u32 = 235;
pub const __NR_vserver: u32 = 236;
pub const __NR_mbind: u32 = 237;
pub const __NR_set_mempolicy: u32 = 238;
pub const __NR_get_mempolicy: u32 = 239;
pub const __NR_mq_open: u32 = 240;
pub const __NR_mq_unlink: u32 = 241;
pub const __NR_mq_timedsend: u32 = 242;
pub const __NR_mq_timedreceive: u32 = 243;
pub const __NR_mq_notify: u32 = 244;
pub const __NR_mq_getsetattr: u32 = 245;
pub const __NR_kexec_load: u32 = 246;
pub const __NR_waitid: u32 = 247;
pub const __NR_add_key: u32 = 248;
pub const __NR_request_key: u32 = 249;
pub const __NR_keyctl: u32 = 250;
pub const __NR_ioprio_set: u32 = 251;
pub const __NR_ioprio_get: u32 = 252;
pub const __NR_inotify_init: u32 = 253;
pub const __NR_inotify_add_watch: u32 = 254;
pub const __NR_inotify_rm_watch: u32 = 255;
pub const __NR_migrate_pages: u32 = 256;
pub const __NR_openat: u32 = 257;
pub const __NR_mkdirat: u32 = 258;
pub const __NR_mknodat: u32 = 259;
pub const __NR_fchownat: u32 = 260;
pub const __NR_futimesat: u32 = 261;
pub const __NR_newfstatat: u32 = 262;
pub const __NR_unlinkat: u32 = 263;
pub const __NR_renameat: u32 = 264;
pub const __NR_linkat: u32 = 265;
pub const __NR_symlinkat: u32 = 266;
pub const __NR_readlinkat: u32 = 267;
pub const __NR_fchmodat: u32 = 268;
pub const __NR_faccessat: u32 = 269;
pub const __NR_pselect6: u32 = 270;
pub const __NR_ppoll: u32 = 271;
pub const __NR_unshare: u32 = 272;
pub const __NR_set_robust_list: u32 = 273;
pub const __NR_get_robust_list: u32 = 274;
pub const __NR_splice: u32 = 275;
pub const __NR_tee: u32 = 276;
pub const __NR_sync_file_range: u32 = 277;
pub const __NR_vmsplice: u32 = 278;
pub const __NR_move_pages: u32 = 279;
pub const __NR_utimensat: u32 = 280;
pub const __NR_epoll_pwait: u32 = 281;
pub const __NR_signalfd: u32 = 282;
pub const __NR_timerfd_create: u32 = 283;
pub const __NR_eventfd: u32 = 284;
pub const __NR_fallocate: u32 = 285;
pub const __NR_timerfd_settime: u32 = 286;
pub const __NR_timerfd_gettime: u32 = 287;
pub const __NR_accept4: u32 = 288;
pub const __NR_signalfd4: u32 = 289;
pub const __NR_eventfd2: u32 = 290;
pub const __NR_epoll_create1: u32 = 291;
pub const __NR_dup3: u32 = 292;
pub const __NR_pipe2: u32 = 293;
pub const __NR_inotify_init1: u32 = 294;
pub const __NR_preadv: u32 = 295;
pub const __NR_pwritev: u32 = 296;
pub const __NR_rt_tgsigqueueinfo: u32 = 297;
pub const __NR_perf_event_open: u32 = 298;
pub const __NR_recvmmsg: u32 = 299;
pub const __NR_fanotify_init: u32 = 300;
pub const __NR_fanotify_mark: u32 = 301;
pub const __NR_prlimit64: u32 = 302;
pub const __NR_name_to_handle_at: u32 = 303;
pub const __NR_open_by_handle_at: u32 = 304;
pub const __NR_clock_adjtime: u32 = 305;
pub const __NR_syncfs: u32 = 306;
pub const __NR_sendmmsg: u32 = 307;
pub const __NR_setns: u32 = 308;
pub const __NR_getcpu: u32 = 309;
pub const __NR_process_vm_readv: u32 = 310;
pub const __NR_process_vm_writev: u32 = 311;
pub const __NR_kcmp: u32 = 312;
pub const __NR_finit_module: u32 = 313;
pub const __NR_sched_setattr: u32 = 314;
pub const __NR_sched_getattr: u32 = 315;
pub const __NR_renameat2: u32 = 316;
pub const __NR_seccomp: u32 = 317;
pub const __NR_getrandom: u32 = 318;
pub const __NR_memfd_create: u32 = 319;
pub const __NR_kexec_file_load: u32 = 320;
pub const __NR_bpf: u32 = 321;
pub const __NR_execveat: u32 = 322;
pub const __NR_userfaultfd: u32 = 323;
pub const __NR_membarrier: u32 = 324;
pub const __NR_mlock2: u32 = 325;
pub const __NR_copy_file_range: u32 = 326;
pub const __NR_preadv2: u32 = 327;
pub const __NR_pwritev2: u32 = 328;
pub const __NR_pkey_mprotect: u32 = 329;
pub const __NR_pkey_alloc: u32 = 330;
pub const __NR_pkey_free: u32 = 331;
pub const __NR_statx: u32 = 332;
pub const __NR_io_pgetevents: u32 = 333;
pub const __NR_rseq: u32 = 334;
pub const __NR_uretprobe: u32 = 335;
pub const __NR_pidfd_send_signal: u32 = 424;
pub const __NR_io_uring_setup: u32 = 425;
pub const __NR_io_uring_enter: u32 = 426;
pub const __NR_io_uring_register: u32 = 427;
pub const __NR_open_tree: u32 = 428;
pub const __NR_move_mount: u32 = 429;
pub const __NR_fsopen: u32 = 430;
pub const __NR_fsconfig: u32 = 431;
pub const __NR_fsmount: u32 = 432;
pub const __NR_fspick: u32 = 433;
pub const __NR_pidfd_open: u32 = 434;
pub const __NR_clone3: u32 = 435;
pub const __NR_close_range: u32 = 436;
pub const __NR_openat2: u32 = 437;
pub const __NR_pidfd_getfd: u32 = 438;
pub const __NR_faccessat2: u32 = 439;
pub const __NR_process_madvise: u32 = 440;
pub const __NR_epoll_pwait2: u32 = 441;
pub const __NR_mount_setattr: u32 = 442;
pub const __NR_quotactl_fd: u32 = 443;
pub const __NR_landlock_create_ruleset: u32 = 444;
pub const __NR_landlock_add_rule: u32 = 445;
pub const __NR_landlock_restrict_self: u32 = 446;
pub const __NR_memfd_secret: u32 = 447;
pub const __NR_process_mrelease: u32 = 448;
pub const __NR_futex_waitv: u32 = 449;
pub const __NR_set_mempolicy_home_node: u32 = 450;
pub const __NR_cachestat: u32 = 451;
pub const __NR_fchmodat2: u32 = 452;
pub const __NR_map_shadow_stack: u32 = 453;
pub const __NR_futex_wake: u32 = 454;
pub const __NR_futex_wait: u32 = 455;
pub const __NR_futex_requeue: u32 = 456;
pub const __NR_statmount: u32 = 457;
pub const __NR_listmount: u32 = 458;
pub const __NR_lsm_get_self_attr: u32 = 459;
pub const __NR_lsm_set_self_attr: u32 = 460;
pub const __NR_lsm_list_modules: u32 = 461;
pub const __NR_mseal: u32 = 462;
pub const __NR_syscalls: u32 = 463;
pub const __NR_x32_rt_sigaction: u32 = 512;
pub const __NR_x32_rt_sigreturn: u32 = 513;
pub const __NR_x32_ioctl: u32 = 514;
pub const __NR_x32_readv: u32 = 515;
pub const __NR_x32_writev: u32 = 516;
pub const __NR_x32_recvfrom: u32 = 517;
pub const __NR_x32_sendmsg: u32 = 518;
pub const __NR_x32_recvmsg: u32 = 519;
pub const __NR_x32_execve: u32 = 520;
pub const __NR_x32_ptrace: u32 = 521;
pub const __NR_x32_rt_sigpending: u32 = 522;
pub const __NR_x32_rt_sigtimedwait: u32 = 523;
pub const __NR_x32_rt_sigqueueinfo: u32 = 524;
pub const __NR_x32_sigaltstack: u32 = 525;
pub const __NR_x32_timer_create: u32 = 526;
pub const __NR_x32_mq_notify: u32 = 527;
pub const __NR_x32_kexec_load: u32 = 528;
pub const __NR_x32_waitid: u32 = 529;
pub const __NR_x32_set_robust_list: u32 = 530;
pub const __NR_x32_get_robust_list: u32 = 531;
pub const __NR_x32_vmsplice: u32 = 532;
pub const __NR_x32_move_pages: u32 = 533;
pub const __NR_x32_preadv: u32 = 534;
pub const __NR_x32_pwritev: u32 = 535;
pub const __NR_x32_rt_tgsigqueueinfo: u32 = 536;
pub const __NR_x32_recvmmsg: u32 = 537;
pub const __NR_x32_sendmmsg: u32 = 538;
pub const __NR_x32_process_vm_readv: u32 = 539;
pub const __NR_x32_process_vm_writev: u32 = 540;
pub const __NR_x32_setsockopt: u32 = 541;
pub const __NR_x32_getsockopt: u32 = 542;
pub const __NR_x32_io_setup: u32 = 543;
pub const __NR_x32_io_submit: u32 = 544;
pub const __NR_x32_execveat: u32 = 545;
pub const __NR_x32_preadv2: u32 = 546;
pub const __NR_x32_pwritev2: u32 = 547;
pub const __NR_x32_syscalls: u32 = 548;
pub const __NR_ia32_restart_syscall: u32 = 0;
pub const __NR_ia32_exit: u32 = 1;
pub const __NR_ia32_fork: u32 = 2;
pub const __NR_ia32_read: u32 = 3;
pub const __NR_ia32_write: u32 = 4;
pub const __NR_ia32_open: u32 = 5;
pub const __NR_ia32_close: u32 = 6;
pub const __NR_ia32_waitpid: u32 = 7;
pub const __NR_ia32_creat: u32 = 8;
pub const __NR_ia32_link: u32 = 9;
pub const __NR_ia32_unlink: u32 = 10;
pub const __NR_ia32_execve: u32 = 11;
pub const __NR_ia32_chdir: u32 = 12;
pub const __NR_ia32_time: u32 = 13;
pub const __NR_ia32_mknod: u32 = 14;
pub const __NR_ia32_chmod: u32 = 15;
pub const __NR_ia32_lchown: u32 = 16;
pub const __NR_ia32_break: u32 = 17;
pub const __NR_ia32_oldstat: u32 = 18;
pub const __NR_ia32_lseek: u32 = 19;
pub const __NR_ia32_getpid: u32 = 20;
pub const __NR_ia32_mount: u32 = 21;
pub const __NR_ia32_umount: u32 = 22;
pub const __NR_ia32_setuid: u32 = 23;
pub const __NR_ia32_getuid: u32 = 24;
pub const __NR_ia32_stime: u32 = 25;
pub const __NR_ia32_ptrace: u32 = 26;
pub const __NR_ia32_alarm: u32 = 27;
pub const __NR_ia32_oldfstat: u32 = 28;
pub const __NR_ia32_pause: u32 = 29;
pub const __NR_ia32_utime: u32 = 30;
pub const __NR_ia32_stty: u32 = 31;
pub const __NR_ia32_gtty: u32 = 32;
pub const __NR_ia32_access: u32 = 33;
pub const __NR_ia32_nice: u32 = 34;
pub const __NR_ia32_ftime: u32 = 35;
pub const __NR_ia32_sync: u32 = 36;
pub const __NR_ia32_kill: u32 = 37;
pub const __NR_ia32_rename: u32 = 38;
pub const __NR_ia32_mkdir: u32 = 39;
pub const __NR_ia32_rmdir: u32 = 40;
pub const __NR_ia32_dup: u32 = 41;
pub const __NR_ia32_pipe: u32 = 42;
pub const __NR_ia32_times: u32 = 43;
pub const __NR_ia32_prof: u32 = 44;
pub const __NR_ia32_brk: u32 = 45;
pub const __NR_ia32_setgid: u32 = 46;
pub const __NR_ia32_getgid: u32 = 47;
pub const __NR_ia32_signal: u32 = 48;
pub const __NR_ia32_geteuid: u32 = 49;
pub const __NR_ia32_getegid: u32 = 50;
pub const __NR_ia32_acct: u32 = 51;
pub const __NR_ia32_umount2: u32 = 52;
pub const __NR_ia32_lock: u32 = 53;
pub const __NR_ia32_ioctl: u32 = 54;
pub const __NR_ia32_fcntl: u32 = 55;
pub const __NR_ia32_mpx: u32 = 56;
pub const __NR_ia32_setpgid: u32 = 57;
pub const __NR_ia32_ulimit: u32 = 58;
pub const __NR_ia32_oldolduname: u32 = 59;
pub const __NR_ia32_umask: u32 = 60;
pub const __NR_ia32_chroot: u32 = 61;
pub const __NR_ia32_ustat: u32 = 62;
pub const __NR_ia32_dup2: u32 = 63;
pub const __NR_ia32_getppid: u32 = 64;
pub const __NR_ia32_getpgrp: u32 = 65;
pub const __NR_ia32_setsid: u32 = 66;
pub const __NR_ia32_sigaction: u32 = 67;
pub const __NR_ia32_sgetmask: u32 = 68;
pub const __NR_ia32_ssetmask: u32 = 69;
pub const __NR_ia32_setreuid: u32 = 70;
pub const __NR_ia32_setregid: u32 = 71;
pub const __NR_ia32_sigsuspend: u32 = 72;
pub const __NR_ia32_sigpending: u32 = 73;
pub const __NR_ia32_sethostname: u32 = 74;
pub const __NR_ia32_setrlimit: u32 = 75;
pub const __NR_ia32_getrlimit: u32 = 76;
pub const __NR_ia32_getrusage: u32 = 77;
pub const __NR_ia32_gettimeofday: u32 = 78;
pub const __NR_ia32_settimeofday: u32 = 79;
pub const __NR_ia32_getgroups: u32 = 80;
pub const __NR_ia32_setgroups: u32 = 81;
pub const __NR_ia32_select: u32 = 82;
pub const __NR_ia32_symlink: u32 = 83;
pub const __NR_ia32_oldlstat: u32 = 84;
pub const __NR_ia32_readlink: u32 = 85;
pub const __NR_ia32_uselib: u32 = 86;
pub const __NR_ia32_swapon: u32 = 87;
pub const __NR_ia32_reboot: u32 = 88;
pub const __NR_ia32_readdir: u32 = 89;
pub const __NR_ia32_mmap: u32 = 90;
pub const __NR_ia32_munmap: u32 = 91;
pub const __NR_ia32_truncate: u32 = 92;
pub const __NR_ia32_ftruncate: u32 = 93;
pub const __NR_ia32_fchmod: u32 = 94;
pub const __NR_ia32_fchown: u32 = 95;
pub const __NR_ia32_getpriority: u32 = 96;
pub const __NR_ia32_setpriority: u32 = 97;
pub const __NR_ia32_profil: u32 = 98;
pub const __NR_ia32_statfs: u32 = 99;
pub const __NR_ia32_fstatfs: u32 = 100;
pub const __NR_ia32_ioperm: u32 = 101;
pub const __NR_ia32_socketcall: u32 = 102;
pub const __NR_ia32_syslog: u32 = 103;
pub const __NR_ia32_setitimer: u32 = 104;
pub const __NR_ia32_getitimer: u32 = 105;
pub const __NR_ia32_stat: u32 = 106;
pub const __NR_ia32_lstat: u32 = 107;
pub const __NR_ia32_fstat: u32 = 108;
pub const __NR_ia32_olduname: u32 = 109;
pub const __NR_ia32_iopl: u32 = 110;
pub const __NR_ia32_vhangup: u32 = 111;
pub const __NR_ia32_idle: u32 = 112;
pub const __NR_ia32_vm86old: u32 = 113;
pub const __NR_ia32_wait4: u32 = 114;
pub const __NR_ia32_swapoff: u32 = 115;
pub const __NR_ia32_sysinfo: u32 = 116;
pub const __NR_ia32_ipc: u32 = 117;
pub const __NR_ia32_fsync: u32 = 118;
pub const __NR_ia32_sigreturn: u32 = 119;
pub const __NR_ia32_clone: u32 = 120;
pub const __NR_ia32_setdomainname: u32 = 121;
pub const __NR_ia32_uname: u32 = 122;
pub const __NR_ia32_modify_ldt: u32 = 123;
pub const __NR_ia32_adjtimex: u32 = 124;
pub const __NR_ia32_mprotect: u32 = 125;
pub const __NR_ia32_sigprocmask: u32 = 126;
pub const __NR_ia32_create_module: u32 = 127;
pub const __NR_ia32_init_module: u32 = 128;
pub const __NR_ia32_delete_module: u32 = 129;
pub const __NR_ia32_get_kernel_syms: u32 = 130;
pub const __NR_ia32_quotactl: u32 = 131;
pub const __NR_ia32_getpgid: u32 = 132;
pub const __NR_ia32_fchdir: u32 = 133;
pub const __NR_ia32_bdflush: u32 = 134;
pub const __NR_ia32_sysfs: u32 = 135;
pub const __NR_ia32_personality: u32 = 136;
pub const __NR_ia32_afs_syscall: u32 = 137;
pub const __NR_ia32_setfsuid: u32 = 138;
pub const __NR_ia32_setfsgid: u32 = 139;
pub const __NR_ia32__llseek: u32 = 140;
pub const __NR_ia32_getdents: u32 = 141;
pub const __NR_ia32__newselect: u32 = 142;
pub const __NR_ia32_flock: u32 = 143;
pub const __NR_ia32_msync: u32 = 144;
pub const __NR_ia32_readv: u32 = 145;
pub const __NR_ia32_writev: u32 = 146;
pub const __NR_ia32_getsid: u32 = 147;
pub const __NR_ia32_fdatasync: u32 = 148;
pub const __NR_ia32__sysctl: u32 = 149;
pub const __NR_ia32_mlock: u32 = 150;
pub const __NR_ia32_munlock: u32 = 151;
pub const __NR_ia32_mlockall: u32 = 152;
pub const __NR_ia32_munlockall: u32 = 153;
pub const __NR_ia32_sched_setparam: u32 = 154;
pub const __NR_ia32_sched_getparam: u32 = 155;
pub const __NR_ia32_sched_setscheduler: u32 = 156;
pub const __NR_ia32_sched_getscheduler: u32 = 157;
pub const __NR_ia32_sched_yield: u32 = 158;
pub const __NR_ia32_sched_get_priority_max: u32 = 159;
pub const __NR_ia32_sched_get_priority_min: u32 = 160;
pub const __NR_ia32_sched_rr_get_interval: u32 = 161;
pub const __NR_ia32_nanosleep: u32 = 162;
pub const __NR_ia32_mremap: u32 = 163;
pub const __NR_ia32_setresuid: u32 = 164;
pub const __NR_ia32_getresuid: u32 = 165;
pub const __NR_ia32_vm86: u32 = 166;
pub const __NR_ia32_query_module: u32 = 167;
pub const __NR_ia32_poll: u32 = 168;
pub const __NR_ia32_nfsservctl: u32 = 169;
pub const __NR_ia32_setresgid: u32 = 170;
pub const __NR_ia32_getresgid: u32 = 171;
pub const __NR_ia32_prctl: u32 = 172;
pub const __NR_ia32_rt_sigreturn: u32 = 173;
pub const __NR_ia32_rt_sigaction: u32 = 174;
pub const __NR_ia32_rt_sigprocmask: u32 = 175;
pub const __NR_ia32_rt_sigpending: u32 = 176;
pub const __NR_ia32_rt_sigtimedwait: u32 = 177;
pub const __NR_ia32_rt_sigqueueinfo: u32 = 178;
pub const __NR_ia32_rt_sigsuspend: u32 = 179;
pub const __NR_ia32_pread64: u32 = 180;
pub const __NR_ia32_pwrite64: u32 = 181;
pub const __NR_ia32_chown: u32 = 182;
pub const __NR_ia32_getcwd: u32 = 183;
pub const __NR_ia32_capget: u32 = 184;
pub const __NR_ia32_capset: u32 = 185;
pub const __NR_ia32_sigaltstack: u32 = 186;
pub const __NR_ia32_sendfile: u32 = 187;
pub const __NR_ia32_getpmsg: u32 = 188;
pub const __NR_ia32_putpmsg: u32 = 189;
pub const __NR_ia32_vfork: u32 = 190;
pub const __NR_ia32_ugetrlimit: u32 = 191;
pub const __NR_ia32_mmap2: u32 = 192;
pub const __NR_ia32_truncate64: u32 = 193;
pub const __NR_ia32_ftruncate64: u32 = 194;
pub const __NR_ia32_stat64: u32 = 195;
pub const __NR_ia32_lstat64: u32 = 196;
pub const __NR_ia32_fstat64: u32 = 197;
pub const __NR_ia32_lchown32: u32 = 198;
pub const __NR_ia32_getuid32: u32 = 199;
pub const __NR_ia32_getgid32: u32 = 200;
pub const __NR_ia32_geteuid32: u32 = 201;
pub const __NR_ia32_getegid32: u32 = 202;
pub const __NR_ia32_setreuid32: u32 = 203;
pub const __NR_ia32_setregid32: u32 = 204;
pub const __NR_ia32_getgroups32: u32 = 205;
pub const __NR_ia32_setgroups32: u32 = 206;
pub const __NR_ia32_fchown32: u32 = 207;
pub const __NR_ia32_setresuid32: u32 = 208;
pub const __NR_ia32_getresuid32: u32 = 209;
pub const __NR_ia32_setresgid32: u32 = 210;
pub const __NR_ia32_getresgid32: u32 = 211;
pub const __NR_ia32_chown32: u32 = 212;
pub const __NR_ia32_setuid32: u32 = 213;
pub const __NR_ia32_setgid32: u32 = 214;
pub const __NR_ia32_setfsuid32: u32 = 215;
pub const __NR_ia32_setfsgid32: u32 = 216;
pub const __NR_ia32_pivot_root: u32 = 217;
pub const __NR_ia32_mincore: u32 = 218;
pub const __NR_ia32_madvise: u32 = 219;
pub const __NR_ia32_getdents64: u32 = 220;
pub const __NR_ia32_fcntl64: u32 = 221;
pub const __NR_ia32_gettid: u32 = 224;
pub const __NR_ia32_readahead: u32 = 225;
pub const __NR_ia32_setxattr: u32 = 226;
pub const __NR_ia32_lsetxattr: u32 = 227;
pub const __NR_ia32_fsetxattr: u32 = 228;
pub const __NR_ia32_getxattr: u32 = 229;
pub const __NR_ia32_lgetxattr: u32 = 230;
pub const __NR_ia32_fgetxattr: u32 = 231;
pub const __NR_ia32_listxattr: u32 = 232;
pub const __NR_ia32_llistxattr: u32 = 233;
pub const __NR_ia32_flistxattr: u32 = 234;
pub const __NR_ia32_removexattr: u32 = 235;
pub const __NR_ia32_lremovexattr: u32 = 236;
pub const __NR_ia32_fremovexattr: u32 = 237;
pub const __NR_ia32_tkill: u32 = 238;
pub const __NR_ia32_sendfile64: u32 = 239;
pub const __NR_ia32_futex: u32 = 240;
pub const __NR_ia32_sched_setaffinity: u32 = 241;
pub const __NR_ia32_sched_getaffinity: u32 = 242;
pub const __NR_ia32_set_thread_area: u32 = 243;
pub const __NR_ia32_get_thread_area: u32 = 244;
pub const __NR_ia32_io_setup: u32 = 245;
pub const __NR_ia32_io_destroy: u32 = 246;
pub const __NR_ia32_io_getevents: u32 = 247;
pub const __NR_ia32_io_submit: u32 = 248;
pub const __NR_ia32_io_cancel: u32 = 249;
pub const __NR_ia32_fadvise64: u32 = 250;
pub const __NR_ia32_exit_group: u32 = 252;
pub const __NR_ia32_lookup_dcookie: u32 = 253;
pub const __NR_ia32_epoll_create: u32 = 254;
pub const __NR_ia32_epoll_ctl: u32 = 255;
pub const __NR_ia32_epoll_wait: u32 = 256;
pub const __NR_ia32_remap_file_pages: u32 = 257;
pub const __NR_ia32_set_tid_address: u32 = 258;
pub const __NR_ia32_timer_create: u32 = 259;
pub const __NR_ia32_timer_settime: u32 = 260;
pub const __NR_ia32_timer_gettime: u32 = 261;
pub const __NR_ia32_timer_getoverrun: u32 = 262;
pub const __NR_ia32_timer_delete: u32 = 263;
pub const __NR_ia32_clock_settime: u32 = 264;
pub const __NR_ia32_clock_gettime: u32 = 265;
pub const __NR_ia32_clock_getres: u32 = 266;
pub const __NR_ia32_clock_nanosleep: u32 = 267;
pub const __NR_ia32_statfs64: u32 = 268;
pub const __NR_ia32_fstatfs64: u32 = 269;
pub const __NR_ia32_tgkill: u32 = 270;
pub const __NR_ia32_utimes: u32 = 271;
pub const __NR_ia32_fadvise64_64: u32 = 272;
pub const __NR_ia32_vserver: u32 = 273;
pub const __NR_ia32_mbind: u32 = 274;
pub const __NR_ia32_get_mempolicy: u32 = 275;
pub const __NR_ia32_set_mempolicy: u32 = 276;
pub const __NR_ia32_mq_open: u32 = 277;
pub const __NR_ia32_mq_unlink: u32 = 278;
pub const __NR_ia32_mq_timedsend: u32 = 279;
pub const __NR_ia32_mq_timedreceive: u32 = 280;
pub const __NR_ia32_mq_notify: u32 = 281;
pub const __NR_ia32_mq_getsetattr: u32 = 282;
pub const __NR_ia32_kexec_load: u32 = 283;
pub const __NR_ia32_waitid: u32 = 284;
pub const __NR_ia32_add_key: u32 = 286;
pub const __NR_ia32_request_key: u32 = 287;
pub const __NR_ia32_keyctl: u32 = 288;
pub const __NR_ia32_ioprio_set: u32 = 289;
pub const __NR_ia32_ioprio_get: u32 = 290;
pub const __NR_ia32_inotify_init: u32 = 291;
pub const __NR_ia32_inotify_add_watch: u32 = 292;
pub const __NR_ia32_inotify_rm_watch: u32 = 293;
pub const __NR_ia32_migrate_pages: u32 = 294;
pub const __NR_ia32_openat: u32 = 295;
pub const __NR_ia32_mkdirat: u32 = 296;
pub const __NR_ia32_mknodat: u32 = 297;
pub const __NR_ia32_fchownat: u32 = 298;
pub const __NR_ia32_futimesat: u32 = 299;
pub const __NR_ia32_fstatat64: u32 = 300;
pub const __NR_ia32_unlinkat: u32 = 301;
pub const __NR_ia32_renameat: u32 = 302;
pub const __NR_ia32_linkat: u32 = 303;
pub const __NR_ia32_symlinkat: u32 = 304;
pub const __NR_ia32_readlinkat: u32 = 305;
pub const __NR_ia32_fchmodat: u32 = 306;
pub const __NR_ia32_faccessat: u32 = 307;
pub const __NR_ia32_pselect6: u32 = 308;
pub const __NR_ia32_ppoll: u32 = 309;
pub const __NR_ia32_unshare: u32 = 310;
pub const __NR_ia32_set_robust_list: u32 = 311;
pub const __NR_ia32_get_robust_list: u32 = 312;
pub const __NR_ia32_splice: u32 = 313;
pub const __NR_ia32_sync_file_range: u32 = 314;
pub const __NR_ia32_tee: u32 = 315;
pub const __NR_ia32_vmsplice: u32 = 316;
pub const __NR_ia32_move_pages: u32 = 317;
pub const __NR_ia32_getcpu: u32 = 318;
pub const __NR_ia32_epoll_pwait: u32 = 319;
pub const __NR_ia32_utimensat: u32 = 320;
pub const __NR_ia32_signalfd: u32 = 321;
pub const __NR_ia32_timerfd_create: u32 = 322;
pub const __NR_ia32_eventfd: u32 = 323;
pub const __NR_ia32_fallocate: u32 = 324;
pub const __NR_ia32_timerfd_settime: u32 = 325;
pub const __NR_ia32_timerfd_gettime: u32 = 326;
pub const __NR_ia32_signalfd4: u32 = 327;
pub const __NR_ia32_eventfd2: u32 = 328;
pub const __NR_ia32_epoll_create1: u32 = 329;
pub const __NR_ia32_dup3: u32 = 330;
pub const __NR_ia32_pipe2: u32 = 331;
pub const __NR_ia32_inotify_init1: u32 = 332;
pub const __NR_ia32_preadv: u32 = 333;
pub const __NR_ia32_pwritev: u32 = 334;
pub const __NR_ia32_rt_tgsigqueueinfo: u32 = 335;
pub const __NR_ia32_perf_event_open: u32 = 336;
pub const __NR_ia32_recvmmsg: u32 = 337;
pub const __NR_ia32_fanotify_init: u32 = 338;
pub const __NR_ia32_fanotify_mark: u32 = 339;
pub const __NR_ia32_prlimit64: u32 = 340;
pub const __NR_ia32_name_to_handle_at: u32 = 341;
pub const __NR_ia32_open_by_handle_at: u32 = 342;
pub const __NR_ia32_clock_adjtime: u32 = 343;
pub const __NR_ia32_syncfs: u32 = 344;
pub const __NR_ia32_sendmmsg: u32 = 345;
pub const __NR_ia32_setns: u32 = 346;
pub const __NR_ia32_process_vm_readv: u32 = 347;
pub const __NR_ia32_process_vm_writev: u32 = 348;
pub const __NR_ia32_kcmp: u32 = 349;
pub const __NR_ia32_finit_module: u32 = 350;
pub const __NR_ia32_sched_setattr: u32 = 351;
pub const __NR_ia32_sched_getattr: u32 = 352;
pub const __NR_ia32_renameat2: u32 = 353;
pub const __NR_ia32_seccomp: u32 = 354;
pub const __NR_ia32_getrandom: u32 = 355;
pub const __NR_ia32_memfd_create: u32 = 356;
pub const __NR_ia32_bpf: u32 = 357;
pub const __NR_ia32_execveat: u32 = 358;
pub const __NR_ia32_socket: u32 = 359;
pub const __NR_ia32_socketpair: u32 = 360;
pub const __NR_ia32_bind: u32 = 361;
pub const __NR_ia32_connect: u32 = 362;
pub const __NR_ia32_listen: u32 = 363;
pub const __NR_ia32_accept4: u32 = 364;
pub const __NR_ia32_getsockopt: u32 = 365;
pub const __NR_ia32_setsockopt: u32 = 366;
pub const __NR_ia32_getsockname: u32 = 367;
pub const __NR_ia32_getpeername: u32 = 368;
pub const __NR_ia32_sendto: u32 = 369;
pub const __NR_ia32_sendmsg: u32 = 370;
pub const __NR_ia32_recvfrom: u32 = 371;
pub const __NR_ia32_recvmsg: u32 = 372;
pub const __NR_ia32_shutdown: u32 = 373;
pub const __NR_ia32_userfaultfd: u32 = 374;
pub const __NR_ia32_membarrier: u32 = 375;
pub const __NR_ia32_mlock2: u32 = 376;
pub const __NR_ia32_copy_file_range: u32 = 377;
pub const __NR_ia32_preadv2: u32 = 378;
pub const __NR_ia32_pwritev2: u32 = 379;
pub const __NR_ia32_pkey_mprotect: u32 = 380;
pub const __NR_ia32_pkey_alloc: u32 = 381;
pub const __NR_ia32_pkey_free: u32 = 382;
pub const __NR_ia32_statx: u32 = 383;
pub const __NR_ia32_arch_prctl: u32 = 384;
pub const __NR_ia32_io_pgetevents: u32 = 385;
pub const __NR_ia32_rseq: u32 = 386;
pub const __NR_ia32_semget: u32 = 393;
pub const __NR_ia32_semctl: u32 = 394;
pub const __NR_ia32_shmget: u32 = 395;
pub const __NR_ia32_shmctl: u32 = 396;
pub const __NR_ia32_shmat: u32 = 397;
pub const __NR_ia32_shmdt: u32 = 398;
pub const __NR_ia32_msgget: u32 = 399;
pub const __NR_ia32_msgsnd: u32 = 400;
pub const __NR_ia32_msgrcv: u32 = 401;
pub const __NR_ia32_msgctl: u32 = 402;
pub const __NR_ia32_clock_gettime64: u32 = 403;
pub const __NR_ia32_clock_settime64: u32 = 404;
pub const __NR_ia32_clock_adjtime64: u32 = 405;
pub const __NR_ia32_clock_getres_time64: u32 = 406;
pub const __NR_ia32_clock_nanosleep_time64: u32 = 407;
pub const __NR_ia32_timer_gettime64: u32 = 408;
pub const __NR_ia32_timer_settime64: u32 = 409;
pub const __NR_ia32_timerfd_gettime64: u32 = 410;
pub const __NR_ia32_timerfd_settime64: u32 = 411;
pub const __NR_ia32_utimensat_time64: u32 = 412;
pub const __NR_ia32_pselect6_time64: u32 = 413;
pub const __NR_ia32_ppoll_time64: u32 = 414;
pub const __NR_ia32_io_pgetevents_time64: u32 = 416;
pub const __NR_ia32_recvmmsg_time64: u32 = 417;
pub const __NR_ia32_mq_timedsend_time64: u32 = 418;
pub const __NR_ia32_mq_timedreceive_time64: u32 = 419;
pub const __NR_ia32_semtimedop_time64: u32 = 420;
pub const __NR_ia32_rt_sigtimedwait_time64: u32 = 421;
pub const __NR_ia32_futex_time64: u32 = 422;
pub const __NR_ia32_sched_rr_get_interval_time64: u32 = 423;
pub const __NR_ia32_pidfd_send_signal: u32 = 424;
pub const __NR_ia32_io_uring_setup: u32 = 425;
pub const __NR_ia32_io_uring_enter: u32 = 426;
pub const __NR_ia32_io_uring_register: u32 = 427;
pub const __NR_ia32_open_tree: u32 = 428;
pub const __NR_ia32_move_mount: u32 = 429;
pub const __NR_ia32_fsopen: u32 = 430;
pub const __NR_ia32_fsconfig: u32 = 431;
pub const __NR_ia32_fsmount: u32 = 432;
pub const __NR_ia32_fspick: u32 = 433;
pub const __NR_ia32_pidfd_open: u32 = 434;
pub const __NR_ia32_clone3: u32 = 435;
pub const __NR_ia32_close_range: u32 = 436;
pub const __NR_ia32_openat2: u32 = 437;
pub const __NR_ia32_pidfd_getfd: u32 = 438;
pub const __NR_ia32_faccessat2: u32 = 439;
pub const __NR_ia32_process_madvise: u32 = 440;
pub const __NR_ia32_epoll_pwait2: u32 = 441;
pub const __NR_ia32_mount_setattr: u32 = 442;
pub const __NR_ia32_quotactl_fd: u32 = 443;
pub const __NR_ia32_landlock_create_ruleset: u32 = 444;
pub const __NR_ia32_landlock_add_rule: u32 = 445;
pub const __NR_ia32_landlock_restrict_self: u32 = 446;
pub const __NR_ia32_memfd_secret: u32 = 447;
pub const __NR_ia32_process_mrelease: u32 = 448;
pub const __NR_ia32_futex_waitv: u32 = 449;
pub const __NR_ia32_set_mempolicy_home_node: u32 = 450;
pub const __NR_ia32_cachestat: u32 = 451;
pub const __NR_ia32_fchmodat2: u32 = 452;
pub const __NR_ia32_map_shadow_stack: u32 = 453;
pub const __NR_ia32_futex_wake: u32 = 454;
pub const __NR_ia32_futex_wait: u32 = 455;
pub const __NR_ia32_futex_requeue: u32 = 456;
pub const __NR_ia32_statmount: u32 = 457;
pub const __NR_ia32_listmount: u32 = 458;
pub const __NR_ia32_lsm_get_self_attr: u32 = 459;
pub const __NR_ia32_lsm_set_self_attr: u32 = 460;
pub const __NR_ia32_lsm_list_modules: u32 = 461;
pub const __NR_ia32_mseal: u32 = 462;
pub const __NR_ia32_syscalls: u32 = 463;
pub const X32_NR_syscalls: u32 = 548;
pub const IA32_NR_syscalls: u32 = 463;
pub const NR_syscalls: u32 = 463;
pub const ADFS_SUPER_MAGIC: u32 = 44533;
pub const AFFS_SUPER_MAGIC: u32 = 44543;
pub const AFS_SUPER_MAGIC: u32 = 1397113167;
pub const AUTOFS_SUPER_MAGIC: u32 = 391;
pub const CEPH_SUPER_MAGIC: u32 = 12805120;
pub const CODA_SUPER_MAGIC: u32 = 1937076805;
pub const CRAMFS_MAGIC: u32 = 684539205;
pub const CRAMFS_MAGIC_WEND: u32 = 1161678120;
pub const DEBUGFS_MAGIC: u32 = 1684170528;
pub const SECURITYFS_MAGIC: u32 = 1935894131;
pub const SELINUX_MAGIC: u32 = 4185718668;
pub const SMACK_MAGIC: u32 = 1128357203;
pub const RAMFS_MAGIC: u32 = 2240043254;
pub const TMPFS_MAGIC: u32 = 16914836;
pub const HUGETLBFS_MAGIC: u32 = 2508478710;
pub const SQUASHFS_MAGIC: u32 = 1936814952;
pub const ECRYPTFS_SUPER_MAGIC: u32 = 61791;
pub const EFS_SUPER_MAGIC: u32 = 4278867;
pub const EROFS_SUPER_MAGIC_V1: u32 = 3774210530;
pub const EXT2_SUPER_MAGIC: u32 = 61267;
pub const EXT3_SUPER_MAGIC: u32 = 61267;
pub const XENFS_SUPER_MAGIC: u32 = 2881100148;
pub const EXT4_SUPER_MAGIC: u32 = 61267;
pub const BTRFS_SUPER_MAGIC: u32 = 2435016766;
pub const NILFS_SUPER_MAGIC: u32 = 13364;
pub const F2FS_SUPER_MAGIC: u32 = 4076150800;
pub const HPFS_SUPER_MAGIC: u32 = 4187351113;
pub const ISOFS_SUPER_MAGIC: u32 = 38496;
pub const JFFS2_SUPER_MAGIC: u32 = 29366;
pub const XFS_SUPER_MAGIC: u32 = 1481003842;
pub const PSTOREFS_MAGIC: u32 = 1634035564;
pub const EFIVARFS_MAGIC: u32 = 3730735588;
pub const HOSTFS_SUPER_MAGIC: u32 = 12648430;
pub const OVERLAYFS_SUPER_MAGIC: u32 = 2035054128;
pub const FUSE_SUPER_MAGIC: u32 = 1702057286;
pub const BCACHEFS_SUPER_MAGIC: u32 = 3393526350;
pub const MINIX_SUPER_MAGIC: u32 = 4991;
pub const MINIX_SUPER_MAGIC2: u32 = 5007;
pub const MINIX2_SUPER_MAGIC: u32 = 9320;
pub const MINIX2_SUPER_MAGIC2: u32 = 9336;
pub const MINIX3_SUPER_MAGIC: u32 = 19802;
pub const MSDOS_SUPER_MAGIC: u32 = 19780;
pub const EXFAT_SUPER_MAGIC: u32 = 538032816;
pub const NCP_SUPER_MAGIC: u32 = 22092;
pub const NFS_SUPER_MAGIC: u32 = 26985;
pub const OCFS2_SUPER_MAGIC: u32 = 1952539503;
pub const OPENPROM_SUPER_MAGIC: u32 = 40865;
pub const QNX4_SUPER_MAGIC: u32 = 47;
pub const QNX6_SUPER_MAGIC: u32 = 1746473250;
pub const AFS_FS_MAGIC: u32 = 1799439955;
pub const REISERFS_SUPER_MAGIC: u32 = 1382369651;
pub const REISERFS_SUPER_MAGIC_STRING: &[u8; 9] = b"ReIsErFs\0";
pub const REISER2FS_SUPER_MAGIC_STRING: &[u8; 10] = b"ReIsEr2Fs\0";
pub const REISER2FS_JR_SUPER_MAGIC_STRING: &[u8; 10] = b"ReIsEr3Fs\0";
pub const SMB_SUPER_MAGIC: u32 = 20859;
pub const CIFS_SUPER_MAGIC: u32 = 4283649346;
pub const SMB2_SUPER_MAGIC: u32 = 4266872130;
pub const CGROUP_SUPER_MAGIC: u32 = 2613483;
pub const CGROUP2_SUPER_MAGIC: u32 = 1667723888;
pub const RDTGROUP_SUPER_MAGIC: u32 = 124082209;
pub const STACK_END_MAGIC: u32 = 1470918301;
pub const TRACEFS_MAGIC: u32 = 1953653091;
pub const V9FS_MAGIC: u32 = 16914839;
pub const BDEVFS_MAGIC: u32 = 1650746742;
pub const DAXFS_MAGIC: u32 = 1684300152;
pub const BINFMTFS_MAGIC: u32 = 1112100429;
pub const DEVPTS_SUPER_MAGIC: u32 = 7377;
pub const BINDERFS_SUPER_MAGIC: u32 = 1819242352;
pub const FUTEXFS_SUPER_MAGIC: u32 = 195894762;
pub const PIPEFS_MAGIC: u32 = 1346981957;
pub const PROC_SUPER_MAGIC: u32 = 40864;
pub const SOCKFS_MAGIC: u32 = 1397703499;
pub const SYSFS_MAGIC: u32 = 1650812274;
pub const USBDEVICE_SUPER_MAGIC: u32 = 40866;
pub const MTD_INODE_FS_MAGIC: u32 = 288389204;
pub const ANON_INODE_FS_MAGIC: u32 = 151263540;
pub const BTRFS_TEST_MAGIC: u32 = 1936880249;
pub const NSFS_MAGIC: u32 = 1853056627;
pub const BPF_FS_MAGIC: u32 = 3405662737;
pub const AAFS_MAGIC: u32 = 1513908720;
pub const ZONEFS_MAGIC: u32 = 1515144787;
pub const UDF_SUPER_MAGIC: u32 = 352400198;
pub const DMA_BUF_MAGIC: u32 = 1145913666;
pub const DEVMEM_MAGIC: u32 = 1162691661;
pub const SECRETMEM_MAGIC: u32 = 1397048141;
pub const PID_FS_MAGIC: u32 = 1346978886;
pub const COMPAT_USER_HZ: u32 = 100;
pub const COMPAT_RLIM_INFINITY: u32 = 4294967295;
pub const COMPAT_OFF_T_MAX: u32 = 2147483647;
pub const _COMPAT_NSIG: u32 = 64;
pub const _COMPAT_NSIG_BPW: u32 = 32;
pub const COMPAT_UTS_MACHINE: &[u8; 7] = b"i686\0\0\0";
pub const COMPAT_USE_64BIT_TIME: u32 = 0;
pub const COMPAT_MINSIGSTKSZ: u32 = 2048;
pub const _COMPAT_NSIG_WORDS: u32 = 2;
pub const STAT64_HAS_BROKEN_ST_INO: u32 = 1;
pub const USER_XSTATE_FX_SW_WORDS: u32 = 6;
pub const USER_XSTATE_XCR0_WORD: u32 = 0;
pub const R_X86_64_NONE: u32 = 0;
pub const R_X86_64_64: u32 = 1;
pub const R_X86_64_PC32: u32 = 2;
pub const R_X86_64_GOT32: u32 = 3;
pub const R_X86_64_PLT32: u32 = 4;
pub const R_X86_64_COPY: u32 = 5;
pub const R_X86_64_GLOB_DAT: u32 = 6;
pub const R_X86_64_JUMP_SLOT: u32 = 7;
pub const R_X86_64_RELATIVE: u32 = 8;
pub const R_X86_64_GOTPCREL: u32 = 9;
pub const R_X86_64_32: u32 = 10;
pub const R_X86_64_32S: u32 = 11;
pub const R_X86_64_16: u32 = 12;
pub const R_X86_64_PC16: u32 = 13;
pub const R_X86_64_8: u32 = 14;
pub const R_X86_64_PC8: u32 = 15;
pub const R_X86_64_PC64: u32 = 24;
pub const COMPAT_ELF_PLATFORM: &[u8; 5] = b"i686\0";
pub const ELF_PLATFORM: &[u8; 7] = b"x86_64\0";
pub const ELF_EXEC_PAGESIZE: u32 = 4096;
pub const AT_SYSINFO: u32 = 32;
pub const ARCH_HAS_SETUP_ADDITIONAL_PAGES: u32 = 1;
pub const EM_NONE: u32 = 0;
pub const EM_M32: u32 = 1;
pub const EM_SPARC: u32 = 2;
pub const EM_386: u32 = 3;
pub const EM_68K: u32 = 4;
pub const EM_88K: u32 = 5;
pub const EM_486: u32 = 6;
pub const EM_860: u32 = 7;
pub const EM_MIPS: u32 = 8;
pub const EM_MIPS_RS3_LE: u32 = 10;
pub const EM_MIPS_RS4_BE: u32 = 10;
pub const EM_PARISC: u32 = 15;
pub const EM_SPARC32PLUS: u32 = 18;
pub const EM_PPC: u32 = 20;
pub const EM_PPC64: u32 = 21;
pub const EM_SPU: u32 = 23;
pub const EM_ARM: u32 = 40;
pub const EM_SH: u32 = 42;
pub const EM_SPARCV9: u32 = 43;
pub const EM_H8_300: u32 = 46;
pub const EM_IA_64: u32 = 50;
pub const EM_X86_64: u32 = 62;
pub const EM_S390: u32 = 22;
pub const EM_CRIS: u32 = 76;
pub const EM_M32R: u32 = 88;
pub const EM_MN10300: u32 = 89;
pub const EM_OPENRISC: u32 = 92;
pub const EM_ARCOMPACT: u32 = 93;
pub const EM_XTENSA: u32 = 94;
pub const EM_BLACKFIN: u32 = 106;
pub const EM_UNICORE: u32 = 110;
pub const EM_ALTERA_NIOS2: u32 = 113;
pub const EM_TI_C6000: u32 = 140;
pub const EM_HEXAGON: u32 = 164;
pub const EM_NDS32: u32 = 167;
pub const EM_AARCH64: u32 = 183;
pub const EM_TILEPRO: u32 = 188;
pub const EM_MICROBLAZE: u32 = 189;
pub const EM_TILEGX: u32 = 191;
pub const EM_ARCV2: u32 = 195;
pub const EM_RISCV: u32 = 243;
pub const EM_BPF: u32 = 247;
pub const EM_CSKY: u32 = 252;
pub const EM_LOONGARCH: u32 = 258;
pub const EM_FRV: u32 = 21569;
pub const EM_ALPHA: u32 = 36902;
pub const EM_CYGNUS_M32R: u32 = 36929;
pub const EM_S390_OLD: u32 = 41872;
pub const EM_CYGNUS_MN10300: u32 = 48879;
pub const PT_NULL: u32 = 0;
pub const PT_LOAD: u32 = 1;
pub const PT_DYNAMIC: u32 = 2;
pub const PT_INTERP: u32 = 3;
pub const PT_NOTE: u32 = 4;
pub const PT_SHLIB: u32 = 5;
pub const PT_PHDR: u32 = 6;
pub const PT_TLS: u32 = 7;
pub const PT_LOOS: u32 = 1610612736;
pub const PT_HIOS: u32 = 1879048191;
pub const PT_LOPROC: u32 = 1879048192;
pub const PT_HIPROC: u32 = 2147483647;
pub const PT_GNU_EH_FRAME: u32 = 1685382480;
pub const PT_GNU_STACK: u32 = 1685382481;
pub const PT_GNU_RELRO: u32 = 1685382482;
pub const PT_GNU_PROPERTY: u32 = 1685382483;
pub const PT_AARCH64_MEMTAG_MTE: u32 = 1879048194;
pub const PN_XNUM: u32 = 65535;
pub const ET_NONE: u32 = 0;
pub const ET_REL: u32 = 1;
pub const ET_EXEC: u32 = 2;
pub const ET_DYN: u32 = 3;
pub const ET_CORE: u32 = 4;
pub const ET_LOPROC: u32 = 65280;
pub const ET_HIPROC: u32 = 65535;
pub const DT_NULL: u32 = 0;
pub const DT_NEEDED: u32 = 1;
pub const DT_PLTRELSZ: u32 = 2;
pub const DT_PLTGOT: u32 = 3;
pub const DT_HASH: u32 = 4;
pub const DT_STRTAB: u32 = 5;
pub const DT_SYMTAB: u32 = 6;
pub const DT_RELA: u32 = 7;
pub const DT_RELASZ: u32 = 8;
pub const DT_RELAENT: u32 = 9;
pub const DT_STRSZ: u32 = 10;
pub const DT_SYMENT: u32 = 11;
pub const DT_INIT: u32 = 12;
pub const DT_FINI: u32 = 13;
pub const DT_SONAME: u32 = 14;
pub const DT_RPATH: u32 = 15;
pub const DT_SYMBOLIC: u32 = 16;
pub const DT_REL: u32 = 17;
pub const DT_RELSZ: u32 = 18;
pub const DT_RELENT: u32 = 19;
pub const DT_PLTREL: u32 = 20;
pub const DT_DEBUG: u32 = 21;
pub const DT_TEXTREL: u32 = 22;
pub const DT_JMPREL: u32 = 23;
pub const DT_ENCODING: u32 = 32;
pub const OLD_DT_LOOS: u32 = 1610612736;
pub const DT_LOOS: u32 = 1610612749;
pub const DT_HIOS: u32 = 1879044096;
pub const DT_VALRNGLO: u32 = 1879047424;
pub const DT_VALRNGHI: u32 = 1879047679;
pub const DT_ADDRRNGLO: u32 = 1879047680;
pub const DT_ADDRRNGHI: u32 = 1879047935;
pub const DT_VERSYM: u32 = 1879048176;
pub const DT_RELACOUNT: u32 = 1879048185;
pub const DT_RELCOUNT: u32 = 1879048186;
pub const DT_FLAGS_1: u32 = 1879048187;
pub const DT_VERDEF: u32 = 1879048188;
pub const DT_VERDEFNUM: u32 = 1879048189;
pub const DT_VERNEED: u32 = 1879048190;
pub const DT_VERNEEDNUM: u32 = 1879048191;
pub const OLD_DT_HIOS: u32 = 1879048191;
pub const DT_LOPROC: u32 = 1879048192;
pub const DT_HIPROC: u32 = 2147483647;
pub const STB_LOCAL: u32 = 0;
pub const STB_GLOBAL: u32 = 1;
pub const STB_WEAK: u32 = 2;
pub const STT_NOTYPE: u32 = 0;
pub const STT_OBJECT: u32 = 1;
pub const STT_FUNC: u32 = 2;
pub const STT_SECTION: u32 = 3;
pub const STT_FILE: u32 = 4;
pub const STT_COMMON: u32 = 5;
pub const STT_TLS: u32 = 6;
pub const EI_NIDENT: u32 = 16;
pub const PF_R: u32 = 4;
pub const PF_W: u32 = 2;
pub const PF_X: u32 = 1;
pub const SHT_NULL: u32 = 0;
pub const SHT_PROGBITS: u32 = 1;
pub const SHT_SYMTAB: u32 = 2;
pub const SHT_STRTAB: u32 = 3;
pub const SHT_RELA: u32 = 4;
pub const SHT_HASH: u32 = 5;
pub const SHT_DYNAMIC: u32 = 6;
pub const SHT_NOTE: u32 = 7;
pub const SHT_NOBITS: u32 = 8;
pub const SHT_REL: u32 = 9;
pub const SHT_SHLIB: u32 = 10;
pub const SHT_DYNSYM: u32 = 11;
pub const SHT_NUM: u32 = 12;
pub const SHT_LOPROC: u32 = 1879048192;
pub const SHT_HIPROC: u32 = 2147483647;
pub const SHT_LOUSER: u32 = 2147483648;
pub const SHT_HIUSER: u32 = 4294967295;
pub const SHF_WRITE: u32 = 1;
pub const SHF_ALLOC: u32 = 2;
pub const SHF_EXECINSTR: u32 = 4;
pub const SHF_RELA_LIVEPATCH: u32 = 1048576;
pub const SHF_RO_AFTER_INIT: u32 = 2097152;
pub const SHF_MASKPROC: u32 = 4026531840;
pub const SHN_UNDEF: u32 = 0;
pub const SHN_LORESERVE: u32 = 65280;
pub const SHN_LOPROC: u32 = 65280;
pub const SHN_HIPROC: u32 = 65311;
pub const SHN_LIVEPATCH: u32 = 65312;
pub const SHN_ABS: u32 = 65521;
pub const SHN_COMMON: u32 = 65522;
pub const SHN_HIRESERVE: u32 = 65535;
pub const EI_MAG0: u32 = 0;
pub const EI_MAG1: u32 = 1;
pub const EI_MAG2: u32 = 2;
pub const EI_MAG3: u32 = 3;
pub const EI_CLASS: u32 = 4;
pub const EI_DATA: u32 = 5;
pub const EI_VERSION: u32 = 6;
pub const EI_OSABI: u32 = 7;
pub const EI_PAD: u32 = 8;
pub const ELFMAG0: u32 = 127;
pub const ELFMAG1: u8 = 69u8;
pub const ELFMAG2: u8 = 76u8;
pub const ELFMAG3: u8 = 70u8;
pub const ELFMAG: &[u8; 5] = b"\x7FELF\0";
pub const SELFMAG: u32 = 4;
pub const ELFCLASSNONE: u32 = 0;
pub const ELFCLASS32: u32 = 1;
pub const ELFCLASS64: u32 = 2;
pub const ELFCLASSNUM: u32 = 3;
pub const ELFDATANONE: u32 = 0;
pub const ELFDATA2LSB: u32 = 1;
pub const ELFDATA2MSB: u32 = 2;
pub const EV_NONE: u32 = 0;
pub const EV_CURRENT: u32 = 1;
pub const EV_NUM: u32 = 2;
pub const ELFOSABI_NONE: u32 = 0;
pub const ELFOSABI_LINUX: u32 = 3;
pub const ELF_OSABI: u32 = 0;
pub const NT_PRSTATUS: u32 = 1;
pub const NT_PRFPREG: u32 = 2;
pub const NT_PRPSINFO: u32 = 3;
pub const NT_TASKSTRUCT: u32 = 4;
pub const NT_AUXV: u32 = 6;
pub const NT_SIGINFO: u32 = 1397311305;
pub const NT_FILE: u32 = 1179208773;
pub const NT_PRXFPREG: u32 = 1189489535;
pub const NT_PPC_VMX: u32 = 256;
pub const NT_PPC_SPE: u32 = 257;
pub const NT_PPC_VSX: u32 = 258;
pub const NT_PPC_TAR: u32 = 259;
pub const NT_PPC_PPR: u32 = 260;
pub const NT_PPC_DSCR: u32 = 261;
pub const NT_PPC_EBB: u32 = 262;
pub const NT_PPC_PMU: u32 = 263;
pub const NT_PPC_TM_CGPR: u32 = 264;
pub const NT_PPC_TM_CFPR: u32 = 265;
pub const NT_PPC_TM_CVMX: u32 = 266;
pub const NT_PPC_TM_CVSX: u32 = 267;
pub const NT_PPC_TM_SPR: u32 = 268;
pub const NT_PPC_TM_CTAR: u32 = 269;
pub const NT_PPC_TM_CPPR: u32 = 270;
pub const NT_PPC_TM_CDSCR: u32 = 271;
pub const NT_PPC_PKEY: u32 = 272;
pub const NT_PPC_DEXCR: u32 = 273;
pub const NT_PPC_HASHKEYR: u32 = 274;
pub const NT_386_TLS: u32 = 512;
pub const NT_386_IOPERM: u32 = 513;
pub const NT_X86_XSTATE: u32 = 514;
pub const NT_X86_SHSTK: u32 = 516;
pub const NT_S390_HIGH_GPRS: u32 = 768;
pub const NT_S390_TIMER: u32 = 769;
pub const NT_S390_TODCMP: u32 = 770;
pub const NT_S390_TODPREG: u32 = 771;
pub const NT_S390_CTRS: u32 = 772;
pub const NT_S390_PREFIX: u32 = 773;
pub const NT_S390_LAST_BREAK: u32 = 774;
pub const NT_S390_SYSTEM_CALL: u32 = 775;
pub const NT_S390_TDB: u32 = 776;
pub const NT_S390_VXRS_LOW: u32 = 777;
pub const NT_S390_VXRS_HIGH: u32 = 778;
pub const NT_S390_GS_CB: u32 = 779;
pub const NT_S390_GS_BC: u32 = 780;
pub const NT_S390_RI_CB: u32 = 781;
pub const NT_S390_PV_CPU_DATA: u32 = 782;
pub const NT_ARM_VFP: u32 = 1024;
pub const NT_ARM_TLS: u32 = 1025;
pub const NT_ARM_HW_BREAK: u32 = 1026;
pub const NT_ARM_HW_WATCH: u32 = 1027;
pub const NT_ARM_SYSTEM_CALL: u32 = 1028;
pub const NT_ARM_SVE: u32 = 1029;
pub const NT_ARM_PAC_MASK: u32 = 1030;
pub const NT_ARM_PACA_KEYS: u32 = 1031;
pub const NT_ARM_PACG_KEYS: u32 = 1032;
pub const NT_ARM_TAGGED_ADDR_CTRL: u32 = 1033;
pub const NT_ARM_PAC_ENABLED_KEYS: u32 = 1034;
pub const NT_ARM_SSVE: u32 = 1035;
pub const NT_ARM_ZA: u32 = 1036;
pub const NT_ARM_ZT: u32 = 1037;
pub const NT_ARM_FPMR: u32 = 1038;
pub const NT_ARC_V2: u32 = 1536;
pub const NT_VMCOREDD: u32 = 1792;
pub const NT_MIPS_DSP: u32 = 2048;
pub const NT_MIPS_FP_MODE: u32 = 2049;
pub const NT_MIPS_MSA: u32 = 2050;
pub const NT_RISCV_CSR: u32 = 2304;
pub const NT_RISCV_VECTOR: u32 = 2305;
pub const NT_LOONGARCH_CPUCFG: u32 = 2560;
pub const NT_LOONGARCH_CSR: u32 = 2561;
pub const NT_LOONGARCH_LSX: u32 = 2562;
pub const NT_LOONGARCH_LASX: u32 = 2563;
pub const NT_LOONGARCH_LBT: u32 = 2564;
pub const NT_LOONGARCH_HW_BREAK: u32 = 2565;
pub const NT_LOONGARCH_HW_WATCH: u32 = 2566;
pub const NT_GNU_PROPERTY_TYPE_0: u32 = 5;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_AND: u32 = 3221225472;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_BTI: u32 = 1;
pub const ELF32_GNU_PROPERTY_ALIGN: u32 = 4;
pub const ELF64_GNU_PROPERTY_ALIGN: u32 = 8;
pub const ELF_GNU_PROPERTY_ALIGN: u32 = 8;
pub const NVMEM_DEVID_NONE: i32 = -1;
pub const NVMEM_DEVID_AUTO: i32 = -2;
pub const RTC_IRQF: u32 = 128;
pub const RTC_PF: u32 = 64;
pub const RTC_AF: u32 = 32;
pub const RTC_UF: u32 = 16;
pub const RTC_FEATURE_ALARM: u32 = 0;
pub const RTC_FEATURE_ALARM_RES_MINUTE: u32 = 1;
pub const RTC_FEATURE_NEED_WEEK_DAY: u32 = 2;
pub const RTC_FEATURE_ALARM_RES_2S: u32 = 3;
pub const RTC_FEATURE_UPDATE_INTERRUPT: u32 = 4;
pub const RTC_FEATURE_CORRECTION: u32 = 5;
pub const RTC_FEATURE_BACKUP_SWITCH_MODE: u32 = 6;
pub const RTC_FEATURE_ALARM_WAKEUP_ONLY: u32 = 7;
pub const RTC_FEATURE_CNT: u32 = 8;
pub const RTC_PARAM_FEATURES: u32 = 0;
pub const RTC_PARAM_CORRECTION: u32 = 1;
pub const RTC_PARAM_BACKUP_SWITCH_MODE: u32 = 2;
pub const RTC_BSM_DISABLED: u32 = 0;
pub const RTC_BSM_DIRECT: u32 = 1;
pub const RTC_BSM_LEVEL: u32 = 2;
pub const RTC_BSM_STANDBY: u32 = 3;
pub const RTC_MAX_FREQ: u32 = 8192;
pub const _U: u32 = 1;
pub const _L: u32 = 2;
pub const _D: u32 = 4;
pub const _C: u32 = 8;
pub const _P: u32 = 16;
pub const _S: u32 = 32;
pub const _X: u32 = 64;
pub const _SP: u32 = 128;
pub const SEQ_SKIP: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const POLLRDNORM: u32 = 64;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRNORM: u32 = 256;
pub const POLLWRBAND: u32 = 512;
pub const POLLMSG: u32 = 1024;
pub const POLLREMOVE: u32 = 4096;
pub const POLLRDHUP: u32 = 8192;
pub const EPOLL_CLOEXEC: u32 = 524288;
pub const EPOLL_CTL_ADD: u32 = 1;
pub const EPOLL_CTL_DEL: u32 = 2;
pub const EPOLL_CTL_MOD: u32 = 3;
pub const EPOLL_IOC_TYPE: u32 = 138;
pub const MAX_STACK_ALLOC: u32 = 832;
pub const FRONTEND_STACK_ALLOC: u32 = 256;
pub const SELECT_STACK_ALLOC: u32 = 256;
pub const POLL_STACK_ALLOC: u32 = 256;
pub const WQUEUES_STACK_ALLOC: u32 = 576;
pub const RTC_DEV_BUSY: u32 = 0;
pub const RTC_NO_CDEV: u32 = 1;
pub const RTC_TIMESTAMP_BEGIN_0000: i64 = -62167219200;
pub const RTC_TIMESTAMP_BEGIN_1900: i64 = -2208988800;
pub const RTC_TIMESTAMP_BEGIN_2000: u32 = 946684800;
pub const RTC_TIMESTAMP_END_2063: u32 = 2966371199;
pub const RTC_TIMESTAMP_END_2079: u32 = 3471292799;
pub const RTC_TIMESTAMP_END_2099: u32 = 4102444799;
pub const RTC_TIMESTAMP_END_2199: u64 = 7258118399;
pub const RTC_TIMESTAMP_END_9999: u64 = 253402300799;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ftrace_branch_data {
    pub func: *const ::std::os::raw::c_char,
    pub file: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: ftrace_branch_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ftrace_branch_data__bindgen_ty_1 {
    pub __bindgen_anon_1: ftrace_branch_data__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ftrace_branch_data__bindgen_ty_1__bindgen_ty_2,
    pub miss_hit: [::std::os::raw::c_ulong; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrace_branch_data__bindgen_ty_1__bindgen_ty_1 {
    pub correct: ::std::os::raw::c_ulong,
    pub incorrect: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrace_branch_data__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ftrace_branch_data__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of ftrace_branch_data__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ftrace_branch_data__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ftrace_branch_data__bindgen_ty_1__bindgen_ty_1::correct"]
        [::std::mem::offset_of!(ftrace_branch_data__bindgen_ty_1__bindgen_ty_1, correct) - 0usize];
    ["Offset of field: ftrace_branch_data__bindgen_ty_1__bindgen_ty_1::incorrect"][::std::mem::offset_of!(
        ftrace_branch_data__bindgen_ty_1__bindgen_ty_1,
        incorrect
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrace_branch_data__bindgen_ty_1__bindgen_ty_2 {
    pub miss: ::std::os::raw::c_ulong,
    pub hit: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrace_branch_data__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ftrace_branch_data__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of ftrace_branch_data__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ftrace_branch_data__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: ftrace_branch_data__bindgen_ty_1__bindgen_ty_2::miss"]
        [::std::mem::offset_of!(ftrace_branch_data__bindgen_ty_1__bindgen_ty_2, miss) - 0usize];
    ["Offset of field: ftrace_branch_data__bindgen_ty_1__bindgen_ty_2::hit"]
        [::std::mem::offset_of!(ftrace_branch_data__bindgen_ty_1__bindgen_ty_2, hit) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrace_branch_data__bindgen_ty_1"]
        [::std::mem::size_of::<ftrace_branch_data__bindgen_ty_1>() - 16usize];
    ["Alignment of ftrace_branch_data__bindgen_ty_1"]
        [::std::mem::align_of::<ftrace_branch_data__bindgen_ty_1>() - 8usize];
    ["Offset of field: ftrace_branch_data__bindgen_ty_1::miss_hit"]
        [::std::mem::offset_of!(ftrace_branch_data__bindgen_ty_1, miss_hit) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrace_branch_data"][::std::mem::size_of::<ftrace_branch_data>() - 40usize];
    ["Alignment of ftrace_branch_data"][::std::mem::align_of::<ftrace_branch_data>() - 8usize];
    ["Offset of field: ftrace_branch_data::func"]
        [::std::mem::offset_of!(ftrace_branch_data, func) - 0usize];
    ["Offset of field: ftrace_branch_data::file"]
        [::std::mem::offset_of!(ftrace_branch_data, file) - 8usize];
    ["Offset of field: ftrace_branch_data::line"]
        [::std::mem::offset_of!(ftrace_branch_data, line) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ftrace_likely_data {
    pub data: ftrace_branch_data,
    pub constant: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ftrace_likely_data"][::std::mem::size_of::<ftrace_likely_data>() - 48usize];
    ["Alignment of ftrace_likely_data"][::std::mem::align_of::<ftrace_likely_data>() - 8usize];
    ["Offset of field: ftrace_likely_data::data"]
        [::std::mem::offset_of!(ftrace_likely_data, data) - 0usize];
    ["Offset of field: ftrace_likely_data::constant"]
        [::std::mem::offset_of!(ftrace_likely_data, constant) - 40usize];
};
extern "C" {
    pub fn ftrace_likely_update(
        f: *mut ftrace_likely_data,
        val: ::std::os::raw::c_int,
        expect: ::std::os::raw::c_int,
        is_constant: ::std::os::raw::c_int,
    );
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type s8 = __s8;
pub type u8_ = __u8;
pub type s16 = __s16;
pub type u16_ = __u16;
pub type s32 = __s32;
pub type u32_ = __u32;
pub type s64 = __s64;
pub type u64_ = __u64;
pub const false_: _bindgen_ty_1 = 0;
pub const true_: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type s128 = __s128;
pub type u128_ = __u128;
pub type __kernel_dev_t = u32_;
pub type fd_set = __kernel_fd_set;
pub type dev_t = __kernel_dev_t;
pub type ino_t = __kernel_ulong_t;
pub type mode_t = __kernel_mode_t;
pub type umode_t = ::std::os::raw::c_ushort;
pub type nlink_t = u32_;
pub type off_t = __kernel_off_t;
pub type pid_t = __kernel_pid_t;
pub type daddr_t = __kernel_daddr_t;
pub type key_t = __kernel_key_t;
pub type suseconds_t = __kernel_suseconds_t;
pub type timer_t = __kernel_timer_t;
pub type clockid_t = __kernel_clockid_t;
pub type mqd_t = __kernel_mqd_t;
pub type bool_ = bool;
pub type uid_t = __kernel_uid32_t;
pub type gid_t = __kernel_gid32_t;
pub type uid16_t = __kernel_uid16_t;
pub type gid16_t = __kernel_gid16_t;
pub type old_uid_t = __kernel_old_uid_t;
pub type old_gid_t = __kernel_old_gid_t;
pub type loff_t = __kernel_loff_t;
pub type clock_t = __kernel_clock_t;
pub type caddr_t = __kernel_caddr_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type unchar = ::std::os::raw::c_uchar;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type ulong = ::std::os::raw::c_ulong;
pub type u_int8_t = u8_;
pub type u_int16_t = u16_;
pub type u_int32_t = u32_;
pub type u_int64_t = u64_;
pub type ktime_t = s64;
#[doc = " The type used for indexing onto a disc or disc partition.\n\n Linux always considers sectors to be 512 bytes long independently\n of the devices real block size.\n\n blkcnt_t is the type of the inode's block count."]
pub type sector_t = u64_;
pub type blkcnt_t = u64_;
pub type dma_addr_t = u64_;
pub type gfp_t = ::std::os::raw::c_uint;
pub type slab_flags_t = ::std::os::raw::c_uint;
pub type fmode_t = ::std::os::raw::c_uint;
pub type phys_addr_t = u64_;
pub type resource_size_t = phys_addr_t;
pub type irq_hw_number_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic_t {
    pub counter: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic_t"][::std::mem::size_of::<atomic_t>() - 4usize];
    ["Alignment of atomic_t"][::std::mem::align_of::<atomic_t>() - 4usize];
    ["Offset of field: atomic_t::counter"][::std::mem::offset_of!(atomic_t, counter) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic64_t {
    pub counter: s64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic64_t"][::std::mem::size_of::<atomic64_t>() - 8usize];
    ["Alignment of atomic64_t"][::std::mem::align_of::<atomic64_t>() - 8usize];
    ["Offset of field: atomic64_t::counter"][::std::mem::offset_of!(atomic64_t, counter) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcuref_t {
    pub refcnt: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcuref_t"][::std::mem::size_of::<rcuref_t>() - 4usize];
    ["Alignment of rcuref_t"][::std::mem::align_of::<rcuref_t>() - 4usize];
    ["Offset of field: rcuref_t::refcnt"][::std::mem::offset_of!(rcuref_t, refcnt) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    pub next: *mut list_head,
    pub prev: *mut list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_head"][::std::mem::size_of::<list_head>() - 16usize];
    ["Alignment of list_head"][::std::mem::align_of::<list_head>() - 8usize];
    ["Offset of field: list_head::next"][::std::mem::offset_of!(list_head, next) - 0usize];
    ["Offset of field: list_head::prev"][::std::mem::offset_of!(list_head, prev) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_head {
    pub first: *mut hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_head"][::std::mem::size_of::<hlist_head>() - 8usize];
    ["Alignment of hlist_head"][::std::mem::align_of::<hlist_head>() - 8usize];
    ["Offset of field: hlist_head::first"][::std::mem::offset_of!(hlist_head, first) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_node {
    pub next: *mut hlist_node,
    pub pprev: *mut *mut hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_node"][::std::mem::size_of::<hlist_node>() - 16usize];
    ["Alignment of hlist_node"][::std::mem::align_of::<hlist_node>() - 8usize];
    ["Offset of field: hlist_node::next"][::std::mem::offset_of!(hlist_node, next) - 0usize];
    ["Offset of field: hlist_node::pprev"][::std::mem::offset_of!(hlist_node, pprev) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ustat {
    pub f_tfree: __kernel_daddr_t,
    pub f_tinode: ::std::os::raw::c_ulong,
    pub f_fname: [::std::os::raw::c_char; 6usize],
    pub f_fpack: [::std::os::raw::c_char; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ustat"][::std::mem::size_of::<ustat>() - 32usize];
    ["Alignment of ustat"][::std::mem::align_of::<ustat>() - 8usize];
    ["Offset of field: ustat::f_tfree"][::std::mem::offset_of!(ustat, f_tfree) - 0usize];
    ["Offset of field: ustat::f_tinode"][::std::mem::offset_of!(ustat, f_tinode) - 8usize];
    ["Offset of field: ustat::f_fname"][::std::mem::offset_of!(ustat, f_fname) - 16usize];
    ["Offset of field: ustat::f_fpack"][::std::mem::offset_of!(ustat, f_fpack) - 22usize];
};
#[doc = " struct callback_head - callback structure for use with RCU and task_work\n @next: next update requests in a list\n @func: actual update function to call after the grace period.\n\n The struct is aligned to size of pointer. On most architectures it happens\n naturally due ABI requirements, but some architectures (like CRIS) have\n weird ABI and we need to ask it explicitly.\n\n The alignment is required to guarantee that bit 0 of @next will be\n clear under normal conditions -- as long as we use call_rcu() or\n call_srcu() to queue the callback.\n\n This guarantee is important for few reasons:\n  - future call_rcu_lazy() will make use of lower bits in the pointer;\n  - the structure shares storage space in struct page with @compound_head,\n    which encode PageTail() in bit 0. The guarantee is needed to avoid\n    false-positive PageTail()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct callback_head {
    pub next: *mut callback_head,
    pub func: ::std::option::Option<unsafe extern "C" fn(head: *mut callback_head)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of callback_head"][::std::mem::size_of::<callback_head>() - 16usize];
    ["Alignment of callback_head"][::std::mem::align_of::<callback_head>() - 8usize];
    ["Offset of field: callback_head::next"][::std::mem::offset_of!(callback_head, next) - 0usize];
    ["Offset of field: callback_head::func"][::std::mem::offset_of!(callback_head, func) - 8usize];
};
pub type rcu_callback_t = ::std::option::Option<unsafe extern "C" fn(head: *mut callback_head)>;
pub type call_rcu_func_t =
    ::std::option::Option<unsafe extern "C" fn(head: *mut callback_head, func: rcu_callback_t)>;
pub type swap_r_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut ::std::os::raw::c_void,
        b: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        priv_: *const ::std::os::raw::c_void,
    ),
>;
pub type swap_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut ::std::os::raw::c_void,
        b: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ),
>;
pub type cmp_r_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        priv_: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type cmp_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kcsan_scoped_access {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kcsan_scoped_access"][::std::mem::size_of::<kcsan_scoped_access>() - 0usize];
    ["Alignment of kcsan_scoped_access"][::std::mem::align_of::<kcsan_scoped_access>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysinfo"][::std::mem::size_of::<sysinfo>() - 112usize];
    ["Alignment of sysinfo"][::std::mem::align_of::<sysinfo>() - 8usize];
    ["Offset of field: sysinfo::uptime"][::std::mem::offset_of!(sysinfo, uptime) - 0usize];
    ["Offset of field: sysinfo::loads"][::std::mem::offset_of!(sysinfo, loads) - 8usize];
    ["Offset of field: sysinfo::totalram"][::std::mem::offset_of!(sysinfo, totalram) - 32usize];
    ["Offset of field: sysinfo::freeram"][::std::mem::offset_of!(sysinfo, freeram) - 40usize];
    ["Offset of field: sysinfo::sharedram"][::std::mem::offset_of!(sysinfo, sharedram) - 48usize];
    ["Offset of field: sysinfo::bufferram"][::std::mem::offset_of!(sysinfo, bufferram) - 56usize];
    ["Offset of field: sysinfo::totalswap"][::std::mem::offset_of!(sysinfo, totalswap) - 64usize];
    ["Offset of field: sysinfo::freeswap"][::std::mem::offset_of!(sysinfo, freeswap) - 72usize];
    ["Offset of field: sysinfo::procs"][::std::mem::offset_of!(sysinfo, procs) - 80usize];
    ["Offset of field: sysinfo::pad"][::std::mem::offset_of!(sysinfo, pad) - 82usize];
    ["Offset of field: sysinfo::totalhigh"][::std::mem::offset_of!(sysinfo, totalhigh) - 88usize];
    ["Offset of field: sysinfo::freehigh"][::std::mem::offset_of!(sysinfo, freehigh) - 96usize];
    ["Offset of field: sysinfo::mem_unit"][::std::mem::offset_of!(sysinfo, mem_unit) - 104usize];
    ["Offset of field: sysinfo::_f"][::std::mem::offset_of!(sysinfo, _f) - 108usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug)]
pub struct cacheline_padding {
    pub x: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cacheline_padding"][::std::mem::size_of::<cacheline_padding>() - 0usize];
    ["Alignment of cacheline_padding"][::std::mem::align_of::<cacheline_padding>() - 64usize];
    ["Offset of field: cacheline_padding::x"]
        [::std::mem::offset_of!(cacheline_padding, x) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}rsp"]
    pub static mut current_stack_pointer: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __bad_size_call_parameter();
}
extern "C" {
    pub static mut __per_cpu_offset: [::std::os::raw::c_ulong; 8192usize];
}
extern "C" {
    pub fn setup_per_cpu_areas();
}
extern "C" {
    pub static mut this_cpu_off: ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pcpu_hot {
    pub __bindgen_anon_1: pcpu_hot__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pcpu_hot__bindgen_ty_1 {
    pub __bindgen_anon_1: pcpu_hot__bindgen_ty_1__bindgen_ty_1,
    pub pad: [u8_; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcpu_hot__bindgen_ty_1__bindgen_ty_1 {
    pub current_task: *mut task_struct,
    pub preempt_count: ::std::os::raw::c_int,
    pub cpu_number: ::std::os::raw::c_int,
    pub call_depth: u64_,
    pub top_of_stack: ::std::os::raw::c_ulong,
    pub hardirq_stack_ptr: *mut ::std::os::raw::c_void,
    pub softirq_pending: u16_,
    pub hardirq_stack_inuse: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcpu_hot__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<pcpu_hot__bindgen_ty_1__bindgen_ty_1>() - 48usize];
    ["Alignment of pcpu_hot__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<pcpu_hot__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::current_task"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1__bindgen_ty_1, current_task) - 0usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::preempt_count"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1__bindgen_ty_1, preempt_count) - 8usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::cpu_number"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1__bindgen_ty_1, cpu_number) - 12usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::call_depth"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1__bindgen_ty_1, call_depth) - 16usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::top_of_stack"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1__bindgen_ty_1, top_of_stack) - 24usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::hardirq_stack_ptr"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1__bindgen_ty_1, hardirq_stack_ptr) - 32usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::softirq_pending"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1__bindgen_ty_1, softirq_pending) - 40usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1__bindgen_ty_1::hardirq_stack_inuse"][::std::mem::offset_of!(
        pcpu_hot__bindgen_ty_1__bindgen_ty_1,
        hardirq_stack_inuse
    ) - 42usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcpu_hot__bindgen_ty_1"][::std::mem::size_of::<pcpu_hot__bindgen_ty_1>() - 64usize];
    ["Alignment of pcpu_hot__bindgen_ty_1"]
        [::std::mem::align_of::<pcpu_hot__bindgen_ty_1>() - 8usize];
    ["Offset of field: pcpu_hot__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(pcpu_hot__bindgen_ty_1, pad) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcpu_hot"][::std::mem::size_of::<pcpu_hot>() - 64usize];
    ["Alignment of pcpu_hot"][::std::mem::align_of::<pcpu_hot>() - 8usize];
};
extern "C" {
    pub static mut pcpu_hot: pcpu_hot;
}
extern "C" {
    pub static mut const_pcpu_hot: pcpu_hot;
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct alt_instr {
    pub instr_offset: s32,
    pub repl_offset: s32,
    pub __bindgen_anon_1: alt_instr__bindgen_ty_1,
    pub instrlen: u8_,
    pub replacementlen: u8_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union alt_instr__bindgen_ty_1 {
    pub __bindgen_anon_1: alt_instr__bindgen_ty_1__bindgen_ty_1,
    pub ft_flags: u32_,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct alt_instr__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alt_instr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<alt_instr__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of alt_instr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<alt_instr__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl alt_instr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn cpuid(&self) -> u32_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_cpuid(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cpuid: u32_, flags: u32_) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let cpuid: u32 = unsafe { ::std::mem::transmute(cpuid) };
            cpuid as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alt_instr__bindgen_ty_1"][::std::mem::size_of::<alt_instr__bindgen_ty_1>() - 4usize];
    ["Alignment of alt_instr__bindgen_ty_1"]
        [::std::mem::align_of::<alt_instr__bindgen_ty_1>() - 4usize];
    ["Offset of field: alt_instr__bindgen_ty_1::ft_flags"]
        [::std::mem::offset_of!(alt_instr__bindgen_ty_1, ft_flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alt_instr"][::std::mem::size_of::<alt_instr>() - 14usize];
    ["Alignment of alt_instr"][::std::mem::align_of::<alt_instr>() - 1usize];
    ["Offset of field: alt_instr::instr_offset"]
        [::std::mem::offset_of!(alt_instr, instr_offset) - 0usize];
    ["Offset of field: alt_instr::repl_offset"]
        [::std::mem::offset_of!(alt_instr, repl_offset) - 4usize];
    ["Offset of field: alt_instr::instrlen"][::std::mem::offset_of!(alt_instr, instrlen) - 12usize];
    ["Offset of field: alt_instr::replacementlen"]
        [::std::mem::offset_of!(alt_instr, replacementlen) - 13usize];
};
extern "C" {
    pub static mut __alt_instructions: [alt_instr; 0usize];
}
extern "C" {
    pub static mut __alt_instructions_end: [alt_instr; 0usize];
}
extern "C" {
    pub static mut alternatives_patched: ::std::os::raw::c_int;
}
extern "C" {
    pub fn alternative_instructions();
}
extern "C" {
    pub fn apply_alternatives(start: *mut alt_instr, end: *mut alt_instr);
}
extern "C" {
    pub fn apply_retpolines(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_returns(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_seal_endbr(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_fineibt(
        start_retpoline: *mut s32,
        end_retpoine: *mut s32,
        start_cfi: *mut s32,
        end_cfi: *mut s32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct callthunk_sites {
    pub call_start: *mut s32,
    pub call_end: *mut s32,
    pub alt_start: *mut alt_instr,
    pub alt_end: *mut alt_instr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of callthunk_sites"][::std::mem::size_of::<callthunk_sites>() - 32usize];
    ["Alignment of callthunk_sites"][::std::mem::align_of::<callthunk_sites>() - 8usize];
    ["Offset of field: callthunk_sites::call_start"]
        [::std::mem::offset_of!(callthunk_sites, call_start) - 0usize];
    ["Offset of field: callthunk_sites::call_end"]
        [::std::mem::offset_of!(callthunk_sites, call_end) - 8usize];
    ["Offset of field: callthunk_sites::alt_start"]
        [::std::mem::offset_of!(callthunk_sites, alt_start) - 16usize];
    ["Offset of field: callthunk_sites::alt_end"]
        [::std::mem::offset_of!(callthunk_sites, alt_end) - 24usize];
};
extern "C" {
    pub fn callthunks_patch_builtin_calls();
}
extern "C" {
    pub fn callthunks_patch_module_calls(sites: *mut callthunk_sites, mod_: *mut module);
}
extern "C" {
    pub fn callthunks_translate_call_dest(
        dest: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn x86_call_depth_emit_accounting(
        pprog: *mut *mut u8_,
        func: *mut ::std::os::raw::c_void,
        ip: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alternatives_smp_module_add(
        mod_: *mut module,
        name: *mut ::std::os::raw::c_char,
        locks: *mut ::std::os::raw::c_void,
        locks_end: *mut ::std::os::raw::c_void,
        text: *mut ::std::os::raw::c_void,
        text_end: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn alternatives_smp_module_del(mod_: *mut module);
}
extern "C" {
    pub fn alternatives_enable_smp();
}
extern "C" {
    pub fn alternatives_text_reserved(
        start: *mut ::std::os::raw::c_void,
        end: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut skip_smp_alternatives: bool_;
}
extern "C" {
    pub fn BUG_func();
}
extern "C" {
    pub fn nop_func();
}
extern "C" {
    pub static x86_nops: [*const ::std::os::raw::c_uchar; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qspinlock {
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qspinlock__bindgen_ty_1 {
    pub val: atomic_t,
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: qspinlock__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_1 {
    pub locked: u8_,
    pub pending: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of qspinlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_1::locked"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_1, locked) - 0usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_1::pending"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_1, pending) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_2 {
    pub locked_pending: u16_,
    pub tail: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of qspinlock__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_2::locked_pending"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_2, locked_pending) - 0usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_2::tail"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_2, tail) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1"][::std::mem::size_of::<qspinlock__bindgen_ty_1>() - 4usize];
    ["Alignment of qspinlock__bindgen_ty_1"]
        [::std::mem::align_of::<qspinlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: qspinlock__bindgen_ty_1::val"]
        [::std::mem::offset_of!(qspinlock__bindgen_ty_1, val) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock"][::std::mem::size_of::<qspinlock>() - 4usize];
    ["Alignment of qspinlock"][::std::mem::align_of::<qspinlock>() - 4usize];
};
pub type arch_spinlock_t = qspinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qrwlock {
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1,
    pub wait_lock: arch_spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qrwlock__bindgen_ty_1 {
    pub cnts: atomic_t,
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qrwlock__bindgen_ty_1__bindgen_ty_1 {
    pub wlocked: u8_,
    pub __lstate: [u8_; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<qrwlock__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of qrwlock__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<qrwlock__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: qrwlock__bindgen_ty_1__bindgen_ty_1::wlocked"]
        [::std::mem::offset_of!(qrwlock__bindgen_ty_1__bindgen_ty_1, wlocked) - 0usize];
    ["Offset of field: qrwlock__bindgen_ty_1__bindgen_ty_1::__lstate"]
        [::std::mem::offset_of!(qrwlock__bindgen_ty_1__bindgen_ty_1, __lstate) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock__bindgen_ty_1"][::std::mem::size_of::<qrwlock__bindgen_ty_1>() - 4usize];
    ["Alignment of qrwlock__bindgen_ty_1"]
        [::std::mem::align_of::<qrwlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: qrwlock__bindgen_ty_1::cnts"]
        [::std::mem::offset_of!(qrwlock__bindgen_ty_1, cnts) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock"][::std::mem::size_of::<qrwlock>() - 8usize];
    ["Alignment of qrwlock"][::std::mem::align_of::<qrwlock>() - 4usize];
    ["Offset of field: qrwlock::wait_lock"][::std::mem::offset_of!(qrwlock, wait_lock) - 4usize];
};
pub type arch_rwlock_t = qrwlock;
pub const lockdep_wait_type_LD_WAIT_INV: lockdep_wait_type = 0;
pub const lockdep_wait_type_LD_WAIT_FREE: lockdep_wait_type = 1;
pub const lockdep_wait_type_LD_WAIT_SPIN: lockdep_wait_type = 2;
pub const lockdep_wait_type_LD_WAIT_CONFIG: lockdep_wait_type = 2;
pub const lockdep_wait_type_LD_WAIT_SLEEP: lockdep_wait_type = 3;
pub const lockdep_wait_type_LD_WAIT_MAX: lockdep_wait_type = 4;
pub type lockdep_wait_type = ::std::os::raw::c_uint;
pub const lockdep_lock_type_LD_LOCK_NORMAL: lockdep_lock_type = 0;
pub const lockdep_lock_type_LD_LOCK_PERCPU: lockdep_lock_type = 1;
pub const lockdep_lock_type_LD_LOCK_WAIT_OVERRIDE: lockdep_lock_type = 2;
pub const lockdep_lock_type_LD_LOCK_MAX: lockdep_lock_type = 3;
pub type lockdep_lock_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lock_class_key {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lock_class_key"][::std::mem::size_of::<lock_class_key>() - 0usize];
    ["Alignment of lock_class_key"][::std::mem::align_of::<lock_class_key>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockdep_map {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockdep_map"][::std::mem::size_of::<lockdep_map>() - 0usize];
    ["Alignment of lockdep_map"][::std::mem::align_of::<lockdep_map>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pin_cookie {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pin_cookie"][::std::mem::size_of::<pin_cookie>() - 0usize];
    ["Alignment of pin_cookie"][::std::mem::align_of::<pin_cookie>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct raw_spinlock {
    pub raw_lock: arch_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of raw_spinlock"][::std::mem::size_of::<raw_spinlock>() - 4usize];
    ["Alignment of raw_spinlock"][::std::mem::align_of::<raw_spinlock>() - 4usize];
    ["Offset of field: raw_spinlock::raw_lock"]
        [::std::mem::offset_of!(raw_spinlock, raw_lock) - 0usize];
};
pub type raw_spinlock_t = raw_spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spinlock {
    pub __bindgen_anon_1: spinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spinlock__bindgen_ty_1 {
    pub rlock: raw_spinlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spinlock__bindgen_ty_1"][::std::mem::size_of::<spinlock__bindgen_ty_1>() - 4usize];
    ["Alignment of spinlock__bindgen_ty_1"]
        [::std::mem::align_of::<spinlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: spinlock__bindgen_ty_1::rlock"]
        [::std::mem::offset_of!(spinlock__bindgen_ty_1, rlock) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spinlock"][::std::mem::size_of::<spinlock>() - 4usize];
    ["Alignment of spinlock"][::std::mem::align_of::<spinlock>() - 4usize];
};
pub type spinlock_t = spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rwlock_t {
    pub raw_lock: arch_rwlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rwlock_t"][::std::mem::size_of::<rwlock_t>() - 8usize];
    ["Alignment of rwlock_t"][::std::mem::align_of::<rwlock_t>() - 4usize];
    ["Offset of field: rwlock_t::raw_lock"][::std::mem::offset_of!(rwlock_t, raw_lock) - 0usize];
};
pub type va_list = __builtin_va_list;
extern "C" {
    pub fn __sw_hweight8(w: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __sw_hweight16(w: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __sw_hweight32(w: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __sw_hweight64(w: __u64) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub static hex_asc: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static hex_asc_upper: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn hex_to_bin(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hex2bin(
        dst: *mut u8_,
        src: *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bin2hex(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_void,
        count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mac_pton(s: *const ::std::os::raw::c_char, mac: *mut u8_) -> bool_;
}
extern "C" {
    pub fn _kstrtoul(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _kstrtol(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtoull(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtoll(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtouint(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtoint(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtou16(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtos16(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut s16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtou8(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtos8(
        s: *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_uint,
        res: *mut s8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtobool(s: *const ::std::os::raw::c_char, res: *mut bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtoull_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtoll_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtoul_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtol_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtouint_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtoint_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtou16_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtos16_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut s16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtou8_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtos8_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        base: ::std::os::raw::c_uint,
        res: *mut s8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrtobool_from_user(
        s: *const ::std::os::raw::c_char,
        count: usize,
        res: *mut bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_strtoul(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn simple_strtol(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn simple_strtoull(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn simple_strtoll(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_longlong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s8_fract {
    pub numerator: __s8,
    pub denominator: __s8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of s8_fract"][::std::mem::size_of::<s8_fract>() - 2usize];
    ["Alignment of s8_fract"][::std::mem::align_of::<s8_fract>() - 1usize];
    ["Offset of field: s8_fract::numerator"][::std::mem::offset_of!(s8_fract, numerator) - 0usize];
    ["Offset of field: s8_fract::denominator"]
        [::std::mem::offset_of!(s8_fract, denominator) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u8_fract {
    pub numerator: __u8,
    pub denominator: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u8_fract"][::std::mem::size_of::<u8_fract>() - 2usize];
    ["Alignment of u8_fract"][::std::mem::align_of::<u8_fract>() - 1usize];
    ["Offset of field: u8_fract::numerator"][::std::mem::offset_of!(u8_fract, numerator) - 0usize];
    ["Offset of field: u8_fract::denominator"]
        [::std::mem::offset_of!(u8_fract, denominator) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s16_fract {
    pub numerator: __s16,
    pub denominator: __s16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of s16_fract"][::std::mem::size_of::<s16_fract>() - 4usize];
    ["Alignment of s16_fract"][::std::mem::align_of::<s16_fract>() - 2usize];
    ["Offset of field: s16_fract::numerator"]
        [::std::mem::offset_of!(s16_fract, numerator) - 0usize];
    ["Offset of field: s16_fract::denominator"]
        [::std::mem::offset_of!(s16_fract, denominator) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u16_fract {
    pub numerator: __u16,
    pub denominator: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u16_fract"][::std::mem::size_of::<u16_fract>() - 4usize];
    ["Alignment of u16_fract"][::std::mem::align_of::<u16_fract>() - 2usize];
    ["Offset of field: u16_fract::numerator"]
        [::std::mem::offset_of!(u16_fract, numerator) - 0usize];
    ["Offset of field: u16_fract::denominator"]
        [::std::mem::offset_of!(u16_fract, denominator) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s32_fract {
    pub numerator: __s32,
    pub denominator: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of s32_fract"][::std::mem::size_of::<s32_fract>() - 8usize];
    ["Alignment of s32_fract"][::std::mem::align_of::<s32_fract>() - 4usize];
    ["Offset of field: s32_fract::numerator"]
        [::std::mem::offset_of!(s32_fract, numerator) - 0usize];
    ["Offset of field: s32_fract::denominator"]
        [::std::mem::offset_of!(s32_fract, denominator) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u32_fract {
    pub numerator: __u32,
    pub denominator: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u32_fract"][::std::mem::size_of::<u32_fract>() - 8usize];
    ["Alignment of u32_fract"][::std::mem::align_of::<u32_fract>() - 4usize];
    ["Offset of field: u32_fract::numerator"]
        [::std::mem::offset_of!(u32_fract, numerator) - 0usize];
    ["Offset of field: u32_fract::denominator"]
        [::std::mem::offset_of!(u32_fract, denominator) - 4usize];
};
extern "C" {
    pub fn int_pow(base: u64_, exp: ::std::os::raw::c_uint) -> u64_;
}
extern "C" {
    pub fn int_sqrt(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut panic_blink: ::std::option::Option<
        unsafe extern "C" fn(state: ::std::os::raw::c_int) -> ::std::os::raw::c_long,
    >;
}
extern "C" {
    pub fn panic(fmt: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn nmi_panic(regs: *mut pt_regs, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn check_panic_on_warn(origin: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn oops_enter();
}
extern "C" {
    pub fn oops_exit();
}
extern "C" {
    pub fn oops_may_print() -> bool_;
}
extern "C" {
    pub static mut panic_triggering_all_cpu_backtrace: bool_;
}
extern "C" {
    pub static mut panic_timeout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut panic_print: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut panic_on_oops: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut panic_on_unrecovered_nmi: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut panic_on_io_nmi: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut panic_on_warn: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut panic_on_taint: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut panic_on_taint_nousertaint: bool_;
}
extern "C" {
    pub static mut sysctl_panic_on_rcu_stall: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sysctl_max_rcu_stall_to_panic: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sysctl_panic_on_stackoverflow: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut crash_kexec_post_notifiers: bool_;
}
extern "C" {
    pub fn __stack_chk_fail();
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub static mut panic_cpu: atomic_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taint_flag {
    pub c_true: ::std::os::raw::c_char,
    pub c_false: ::std::os::raw::c_char,
    pub module: bool_,
    pub desc: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of taint_flag"][::std::mem::size_of::<taint_flag>() - 16usize];
    ["Alignment of taint_flag"][::std::mem::align_of::<taint_flag>() - 8usize];
    ["Offset of field: taint_flag::c_true"][::std::mem::offset_of!(taint_flag, c_true) - 0usize];
    ["Offset of field: taint_flag::c_false"][::std::mem::offset_of!(taint_flag, c_false) - 1usize];
    ["Offset of field: taint_flag::module"][::std::mem::offset_of!(taint_flag, module) - 2usize];
    ["Offset of field: taint_flag::desc"][::std::mem::offset_of!(taint_flag, desc) - 8usize];
};
extern "C" {
    pub static taint_flags: [taint_flag; 19usize];
}
pub const lockdep_ok_LOCKDEP_STILL_OK: lockdep_ok = 0;
pub const lockdep_ok_LOCKDEP_NOW_UNRELIABLE: lockdep_ok = 1;
pub type lockdep_ok = ::std::os::raw::c_uint;
extern "C" {
    pub fn print_tainted() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn print_tainted_verbose() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn add_taint(flag: ::std::os::raw::c_uint, arg1: lockdep_ok);
}
extern "C" {
    pub fn test_taint(flag: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_taint() -> ::std::os::raw::c_ulong;
}
pub type initcall_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type exitcall_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type initcall_entry_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut __con_initcall_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __con_initcall_end: [initcall_entry_t; 0usize];
}
pub type ctor_fn_t = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn do_one_initcall(fn_: initcall_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut boot_command_line: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut saved_command_line: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut saved_command_line_len: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut reset_devices: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setup_arch(arg1: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn prepare_namespace();
}
extern "C" {
    pub fn init_rootfs();
}
extern "C" {
    pub fn init_IRQ();
}
extern "C" {
    pub fn time_init();
}
extern "C" {
    pub fn poking_init();
}
extern "C" {
    pub fn pgtable_cache_init();
}
extern "C" {
    pub static mut __initcall_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall0_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall1_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall2_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall3_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall4_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall5_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall6_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall7_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall_end: [initcall_entry_t; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_system_type {
    pub name: *const ::std::os::raw::c_char,
    pub fs_flags: ::std::os::raw::c_int,
    pub init_fs_context:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut fs_context) -> ::std::os::raw::c_int>,
    pub parameters: *const fs_parameter_spec,
    pub mount: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file_system_type,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut ::std::os::raw::c_void,
        ) -> *mut dentry,
    >,
    pub kill_sb: ::std::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub owner: *mut module,
    pub next: *mut file_system_type,
    pub fs_supers: hlist_head,
    pub s_lock_key: lock_class_key,
    pub s_umount_key: lock_class_key,
    pub s_vfs_rename_key: lock_class_key,
    pub s_writers_key: [lock_class_key; 3usize],
    pub i_lock_key: lock_class_key,
    pub i_mutex_key: lock_class_key,
    pub invalidate_lock_key: lock_class_key,
    pub i_mutex_dir_key: lock_class_key,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_system_type"][::std::mem::size_of::<file_system_type>() - 72usize];
    ["Alignment of file_system_type"][::std::mem::align_of::<file_system_type>() - 8usize];
    ["Offset of field: file_system_type::name"]
        [::std::mem::offset_of!(file_system_type, name) - 0usize];
    ["Offset of field: file_system_type::fs_flags"]
        [::std::mem::offset_of!(file_system_type, fs_flags) - 8usize];
    ["Offset of field: file_system_type::init_fs_context"]
        [::std::mem::offset_of!(file_system_type, init_fs_context) - 16usize];
    ["Offset of field: file_system_type::parameters"]
        [::std::mem::offset_of!(file_system_type, parameters) - 24usize];
    ["Offset of field: file_system_type::mount"]
        [::std::mem::offset_of!(file_system_type, mount) - 32usize];
    ["Offset of field: file_system_type::kill_sb"]
        [::std::mem::offset_of!(file_system_type, kill_sb) - 40usize];
    ["Offset of field: file_system_type::owner"]
        [::std::mem::offset_of!(file_system_type, owner) - 48usize];
    ["Offset of field: file_system_type::next"]
        [::std::mem::offset_of!(file_system_type, next) - 56usize];
    ["Offset of field: file_system_type::fs_supers"]
        [::std::mem::offset_of!(file_system_type, fs_supers) - 64usize];
    ["Offset of field: file_system_type::s_lock_key"]
        [::std::mem::offset_of!(file_system_type, s_lock_key) - 72usize];
    ["Offset of field: file_system_type::s_umount_key"]
        [::std::mem::offset_of!(file_system_type, s_umount_key) - 72usize];
    ["Offset of field: file_system_type::s_vfs_rename_key"]
        [::std::mem::offset_of!(file_system_type, s_vfs_rename_key) - 72usize];
    ["Offset of field: file_system_type::s_writers_key"]
        [::std::mem::offset_of!(file_system_type, s_writers_key) - 72usize];
    ["Offset of field: file_system_type::i_lock_key"]
        [::std::mem::offset_of!(file_system_type, i_lock_key) - 72usize];
    ["Offset of field: file_system_type::i_mutex_key"]
        [::std::mem::offset_of!(file_system_type, i_mutex_key) - 72usize];
    ["Offset of field: file_system_type::invalidate_lock_key"]
        [::std::mem::offset_of!(file_system_type, invalidate_lock_key) - 72usize];
    ["Offset of field: file_system_type::i_mutex_dir_key"]
        [::std::mem::offset_of!(file_system_type, i_mutex_dir_key) - 72usize];
};
extern "C" {
    pub static mut rootfs_fs_type: file_system_type;
}
extern "C" {
    pub static mut rodata_enabled: bool_;
}
extern "C" {
    pub fn mark_rodata_ro();
}
extern "C" {
    pub static mut late_time_init: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut initcall_debug: bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obs_kernel_param {
    pub str_: *const ::std::os::raw::c_char,
    pub setup_func: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub early: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of obs_kernel_param"][::std::mem::size_of::<obs_kernel_param>() - 24usize];
    ["Alignment of obs_kernel_param"][::std::mem::align_of::<obs_kernel_param>() - 8usize];
    ["Offset of field: obs_kernel_param::str_"]
        [::std::mem::offset_of!(obs_kernel_param, str_) - 0usize];
    ["Offset of field: obs_kernel_param::setup_func"]
        [::std::mem::offset_of!(obs_kernel_param, setup_func) - 8usize];
    ["Offset of field: obs_kernel_param::early"]
        [::std::mem::offset_of!(obs_kernel_param, early) - 16usize];
};
extern "C" {
    pub static __setup_start: [obs_kernel_param; 0usize];
}
extern "C" {
    pub static __setup_end: [obs_kernel_param; 0usize];
}
extern "C" {
    pub fn parse_early_param();
}
extern "C" {
    pub fn parse_early_options(cmdline: *mut ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ratelimit_state {
    pub lock: raw_spinlock_t,
    pub interval: ::std::os::raw::c_int,
    pub burst: ::std::os::raw::c_int,
    pub printed: ::std::os::raw::c_int,
    pub missed: ::std::os::raw::c_int,
    pub begin: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ratelimit_state"][::std::mem::size_of::<ratelimit_state>() - 40usize];
    ["Alignment of ratelimit_state"][::std::mem::align_of::<ratelimit_state>() - 8usize];
    ["Offset of field: ratelimit_state::lock"]
        [::std::mem::offset_of!(ratelimit_state, lock) - 0usize];
    ["Offset of field: ratelimit_state::interval"]
        [::std::mem::offset_of!(ratelimit_state, interval) - 4usize];
    ["Offset of field: ratelimit_state::burst"]
        [::std::mem::offset_of!(ratelimit_state, burst) - 8usize];
    ["Offset of field: ratelimit_state::printed"]
        [::std::mem::offset_of!(ratelimit_state, printed) - 12usize];
    ["Offset of field: ratelimit_state::missed"]
        [::std::mem::offset_of!(ratelimit_state, missed) - 16usize];
    ["Offset of field: ratelimit_state::begin"]
        [::std::mem::offset_of!(ratelimit_state, begin) - 24usize];
    ["Offset of field: ratelimit_state::flags"]
        [::std::mem::offset_of!(ratelimit_state, flags) - 32usize];
};
extern "C" {
    pub fn ___ratelimit(
        rs: *mut ratelimit_state,
        func: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static linux_banner: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static linux_proc_banner: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut oops_in_progress: ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_devname_and_update_preferred_console(
        match_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut console_printk: [::std::os::raw::c_int; 0usize];
}
extern "C" {
    pub fn console_verbose();
}
extern "C" {
    pub static mut devkmsg_log_str: [::std::os::raw::c_char; 10usize];
}
extern "C" {
    pub static mut suppress_printk: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct va_format {
    pub fmt: *const ::std::os::raw::c_char,
    pub va: *mut va_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of va_format"][::std::mem::size_of::<va_format>() - 16usize];
    ["Alignment of va_format"][::std::mem::align_of::<va_format>() - 8usize];
    ["Offset of field: va_format::fmt"][::std::mem::offset_of!(va_format, fmt) - 0usize];
    ["Offset of field: va_format::va"][::std::mem::offset_of!(va_format, va) - 8usize];
};
extern "C" {
    pub fn early_printk(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vprintk_emit(
        facility: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        dev_info: *const dev_printk_info,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintk(
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _printk(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _printk_deferred(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __printk_safe_enter();
}
extern "C" {
    pub fn __printk_safe_exit();
}
extern "C" {
    pub fn __printk_ratelimit(func: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printk_timed_ratelimit(
        caller_jiffies: *mut ::std::os::raw::c_ulong,
        interval_msec: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub static mut printk_delay_msec: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut dmesg_restrict: ::std::os::raw::c_int;
}
extern "C" {
    pub fn wake_up_klogd();
}
extern "C" {
    pub fn log_buf_addr_get() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn log_buf_len_get() -> u32_;
}
extern "C" {
    pub fn log_buf_vmcoreinfo_setup();
}
extern "C" {
    pub fn setup_log_buf(early: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dump_stack_set_arch_desc(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dump_stack_print_info(log_lvl: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn show_regs_print_info(log_lvl: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dump_stack_lvl(log_lvl: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dump_stack();
}
extern "C" {
    pub fn printk_trigger_flush();
}
extern "C" {
    pub fn console_try_replay_all();
}
extern "C" {
    pub fn this_cpu_in_panic() -> bool_;
}
extern "C" {
    pub fn __printk_cpu_sync_try_get() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __printk_cpu_sync_wait();
}
extern "C" {
    pub fn __printk_cpu_sync_put();
}
extern "C" {
    pub static mut kptr_restrict: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut static_key_initialized: bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_key {
    pub enabled: atomic_t,
    pub __bindgen_anon_1: static_key__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union static_key__bindgen_ty_1 {
    pub type_: ::std::os::raw::c_ulong,
    pub entries: *mut jump_entry,
    pub next: *mut static_key_mod,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_key__bindgen_ty_1"]
        [::std::mem::size_of::<static_key__bindgen_ty_1>() - 8usize];
    ["Alignment of static_key__bindgen_ty_1"]
        [::std::mem::align_of::<static_key__bindgen_ty_1>() - 8usize];
    ["Offset of field: static_key__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(static_key__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: static_key__bindgen_ty_1::entries"]
        [::std::mem::offset_of!(static_key__bindgen_ty_1, entries) - 0usize];
    ["Offset of field: static_key__bindgen_ty_1::next"]
        [::std::mem::offset_of!(static_key__bindgen_ty_1, next) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_key"][::std::mem::size_of::<static_key>() - 16usize];
    ["Alignment of static_key"][::std::mem::align_of::<static_key>() - 8usize];
    ["Offset of field: static_key::enabled"][::std::mem::offset_of!(static_key, enabled) - 0usize];
};
extern "C" {
    pub fn arch_jump_entry_size(entry: *mut jump_entry) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jump_entry {
    pub code: s32,
    pub target: s32,
    pub key: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jump_entry"][::std::mem::size_of::<jump_entry>() - 16usize];
    ["Alignment of jump_entry"][::std::mem::align_of::<jump_entry>() - 8usize];
    ["Offset of field: jump_entry::code"][::std::mem::offset_of!(jump_entry, code) - 0usize];
    ["Offset of field: jump_entry::target"][::std::mem::offset_of!(jump_entry, target) - 4usize];
    ["Offset of field: jump_entry::key"][::std::mem::offset_of!(jump_entry, key) - 8usize];
};
pub const jump_label_type_JUMP_LABEL_NOP: jump_label_type = 0;
pub const jump_label_type_JUMP_LABEL_JMP: jump_label_type = 1;
pub type jump_label_type = ::std::os::raw::c_uint;
extern "C" {
    pub static mut __start___jump_table: [jump_entry; 0usize];
}
extern "C" {
    pub static mut __stop___jump_table: [jump_entry; 0usize];
}
extern "C" {
    pub fn jump_label_init();
}
extern "C" {
    pub fn jump_label_init_ro();
}
extern "C" {
    pub fn jump_label_lock();
}
extern "C" {
    pub fn jump_label_unlock();
}
extern "C" {
    pub fn arch_jump_label_transform(entry: *mut jump_entry, type_: jump_label_type);
}
extern "C" {
    pub fn arch_jump_label_transform_queue(entry: *mut jump_entry, type_: jump_label_type)
        -> bool_;
}
extern "C" {
    pub fn arch_jump_label_transform_apply();
}
extern "C" {
    pub fn jump_label_text_reserved(
        start: *mut ::std::os::raw::c_void,
        end: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn static_key_slow_inc(key: *mut static_key) -> bool_;
}
extern "C" {
    pub fn static_key_fast_inc_not_disabled(key: *mut static_key) -> bool_;
}
extern "C" {
    pub fn static_key_slow_dec(key: *mut static_key);
}
extern "C" {
    pub fn static_key_slow_inc_cpuslocked(key: *mut static_key) -> bool_;
}
extern "C" {
    pub fn static_key_slow_dec_cpuslocked(key: *mut static_key);
}
extern "C" {
    pub fn static_key_count(key: *mut static_key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn static_key_enable(key: *mut static_key);
}
extern "C" {
    pub fn static_key_disable(key: *mut static_key);
}
extern "C" {
    pub fn static_key_enable_cpuslocked(key: *mut static_key);
}
extern "C" {
    pub fn static_key_disable_cpuslocked(key: *mut static_key);
}
extern "C" {
    pub fn jump_label_init_type(entry: *mut jump_entry) -> jump_label_type;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_key_true {
    pub key: static_key,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_key_true"][::std::mem::size_of::<static_key_true>() - 16usize];
    ["Alignment of static_key_true"][::std::mem::align_of::<static_key_true>() - 8usize];
    ["Offset of field: static_key_true::key"]
        [::std::mem::offset_of!(static_key_true, key) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_key_false {
    pub key: static_key,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_key_false"][::std::mem::size_of::<static_key_false>() - 16usize];
    ["Alignment of static_key_false"][::std::mem::align_of::<static_key_false>() - 8usize];
    ["Offset of field: static_key_false::key"]
        [::std::mem::offset_of!(static_key_false, key) - 0usize];
};
extern "C" {
    pub fn ____wrong_branch_error() -> bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ddebug {
    pub modname: *const ::std::os::raw::c_char,
    pub function: *const ::std::os::raw::c_char,
    pub filename: *const ::std::os::raw::c_char,
    pub format: *const ::std::os::raw::c_char,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub key: _ddebug__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ddebug__bindgen_ty_1 {
    pub dd_key_true: static_key_true,
    pub dd_key_false: static_key_false,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ddebug__bindgen_ty_1"][::std::mem::size_of::<_ddebug__bindgen_ty_1>() - 16usize];
    ["Alignment of _ddebug__bindgen_ty_1"]
        [::std::mem::align_of::<_ddebug__bindgen_ty_1>() - 8usize];
    ["Offset of field: _ddebug__bindgen_ty_1::dd_key_true"]
        [::std::mem::offset_of!(_ddebug__bindgen_ty_1, dd_key_true) - 0usize];
    ["Offset of field: _ddebug__bindgen_ty_1::dd_key_false"]
        [::std::mem::offset_of!(_ddebug__bindgen_ty_1, dd_key_false) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ddebug"][::std::mem::size_of::<_ddebug>() - 56usize];
    ["Alignment of _ddebug"][::std::mem::align_of::<_ddebug>() - 8usize];
    ["Offset of field: _ddebug::modname"][::std::mem::offset_of!(_ddebug, modname) - 0usize];
    ["Offset of field: _ddebug::function"][::std::mem::offset_of!(_ddebug, function) - 8usize];
    ["Offset of field: _ddebug::filename"][::std::mem::offset_of!(_ddebug, filename) - 16usize];
    ["Offset of field: _ddebug::format"][::std::mem::offset_of!(_ddebug, format) - 24usize];
    ["Offset of field: _ddebug::key"][::std::mem::offset_of!(_ddebug, key) - 40usize];
};
impl _ddebug {
    #[inline]
    pub fn lineno(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_lineno(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn class_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_class_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lineno: ::std::os::raw::c_uint,
        class_id: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let lineno: u32 = unsafe { ::std::mem::transmute(lineno) };
            lineno as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let class_id: u32 = unsafe { ::std::mem::transmute(class_id) };
            class_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const class_map_type_DD_CLASS_TYPE_DISJOINT_BITS: class_map_type = 0;
#[doc = " DD_CLASS_TYPE_DISJOINT_BITS: classes are independent, one per bit.\n expecting hex input. Built for drm.debug, basis for other types."]
pub const class_map_type_DD_CLASS_TYPE_LEVEL_NUM: class_map_type = 1;
#[doc = " DD_CLASS_TYPE_LEVEL_NUM: input is numeric level, 0-N.\n N turns on just bits N-1 .. 0, so N=0 turns all bits off."]
pub const class_map_type_DD_CLASS_TYPE_DISJOINT_NAMES: class_map_type = 2;
#[doc = " DD_CLASS_TYPE_DISJOINT_NAMES: input is a CSV of [+-]CLASS_NAMES,\n classes are independent, like _DISJOINT_BITS."]
pub const class_map_type_DD_CLASS_TYPE_LEVEL_NAMES: class_map_type = 3;
pub type class_map_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddebug_class_map {
    pub link: list_head,
    pub mod_: *mut module,
    pub mod_name: *const ::std::os::raw::c_char,
    pub class_names: *mut *const ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
    pub base: ::std::os::raw::c_int,
    pub map_type: class_map_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ddebug_class_map"][::std::mem::size_of::<ddebug_class_map>() - 56usize];
    ["Alignment of ddebug_class_map"][::std::mem::align_of::<ddebug_class_map>() - 8usize];
    ["Offset of field: ddebug_class_map::link"]
        [::std::mem::offset_of!(ddebug_class_map, link) - 0usize];
    ["Offset of field: ddebug_class_map::mod_"]
        [::std::mem::offset_of!(ddebug_class_map, mod_) - 16usize];
    ["Offset of field: ddebug_class_map::mod_name"]
        [::std::mem::offset_of!(ddebug_class_map, mod_name) - 24usize];
    ["Offset of field: ddebug_class_map::class_names"]
        [::std::mem::offset_of!(ddebug_class_map, class_names) - 32usize];
    ["Offset of field: ddebug_class_map::length"]
        [::std::mem::offset_of!(ddebug_class_map, length) - 40usize];
    ["Offset of field: ddebug_class_map::base"]
        [::std::mem::offset_of!(ddebug_class_map, base) - 44usize];
    ["Offset of field: ddebug_class_map::map_type"]
        [::std::mem::offset_of!(ddebug_class_map, map_type) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ddebug_info {
    pub descs: *mut _ddebug,
    pub classes: *mut ddebug_class_map,
    pub num_descs: ::std::os::raw::c_uint,
    pub num_classes: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ddebug_info"][::std::mem::size_of::<_ddebug_info>() - 24usize];
    ["Alignment of _ddebug_info"][::std::mem::align_of::<_ddebug_info>() - 8usize];
    ["Offset of field: _ddebug_info::descs"][::std::mem::offset_of!(_ddebug_info, descs) - 0usize];
    ["Offset of field: _ddebug_info::classes"]
        [::std::mem::offset_of!(_ddebug_info, classes) - 8usize];
    ["Offset of field: _ddebug_info::num_descs"]
        [::std::mem::offset_of!(_ddebug_info, num_descs) - 16usize];
    ["Offset of field: _ddebug_info::num_classes"]
        [::std::mem::offset_of!(_ddebug_info, num_classes) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ddebug_class_param {
    pub __bindgen_anon_1: ddebug_class_param__bindgen_ty_1,
    pub flags: [::std::os::raw::c_char; 8usize],
    pub map: *const ddebug_class_map,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ddebug_class_param__bindgen_ty_1 {
    pub bits: *mut ::std::os::raw::c_ulong,
    pub lvl: *mut ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ddebug_class_param__bindgen_ty_1"]
        [::std::mem::size_of::<ddebug_class_param__bindgen_ty_1>() - 8usize];
    ["Alignment of ddebug_class_param__bindgen_ty_1"]
        [::std::mem::align_of::<ddebug_class_param__bindgen_ty_1>() - 8usize];
    ["Offset of field: ddebug_class_param__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(ddebug_class_param__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: ddebug_class_param__bindgen_ty_1::lvl"]
        [::std::mem::offset_of!(ddebug_class_param__bindgen_ty_1, lvl) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ddebug_class_param"][::std::mem::size_of::<ddebug_class_param>() - 24usize];
    ["Alignment of ddebug_class_param"][::std::mem::align_of::<ddebug_class_param>() - 8usize];
    ["Offset of field: ddebug_class_param::flags"]
        [::std::mem::offset_of!(ddebug_class_param, flags) - 8usize];
    ["Offset of field: ddebug_class_param::map"]
        [::std::mem::offset_of!(ddebug_class_param, map) - 16usize];
};
extern "C" {
    pub fn __dynamic_pr_debug(descriptor: *mut _ddebug, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn __dynamic_dev_dbg(
        descriptor: *mut _ddebug,
        dev: *const device,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __dynamic_netdev_dbg(
        descriptor: *mut _ddebug,
        dev: *const net_device,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ib_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __dynamic_ibdev_dbg(
        descriptor: *mut _ddebug,
        ibdev: *const ib_device,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ddebug_dyndbg_module_param_cb(
        param: *mut ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_char,
        modname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_set_dyndbg_classes(
        instr: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_dyndbg_classes(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_param_ops {
    pub flags: ::std::os::raw::c_uint,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            val: *const ::std::os::raw::c_char,
            kp: *const kernel_param,
        ) -> ::std::os::raw::c_int,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_char,
            kp: *const kernel_param,
        ) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_param_ops"][::std::mem::size_of::<kernel_param_ops>() - 32usize];
    ["Alignment of kernel_param_ops"][::std::mem::align_of::<kernel_param_ops>() - 8usize];
    ["Offset of field: kernel_param_ops::flags"]
        [::std::mem::offset_of!(kernel_param_ops, flags) - 0usize];
    ["Offset of field: kernel_param_ops::set"]
        [::std::mem::offset_of!(kernel_param_ops, set) - 8usize];
    ["Offset of field: kernel_param_ops::get"]
        [::std::mem::offset_of!(kernel_param_ops, get) - 16usize];
    ["Offset of field: kernel_param_ops::free"]
        [::std::mem::offset_of!(kernel_param_ops, free) - 24usize];
};
extern "C" {
    pub static param_ops_dyndbg_classes: kernel_param_ops;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_operations {
    pub owner: *mut module,
    pub fop_flags: fop_flags_t,
    pub llseek: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: loff_t, arg3: ::std::os::raw::c_int) -> loff_t,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub read_iter:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize>,
    pub write_iter:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize>,
    pub iopoll: ::std::option::Option<
        unsafe extern "C" fn(
            kiocb: *mut kiocb,
            arg1: *mut io_comp_batch,
            flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub iterate_shared: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> ::std::os::raw::c_int,
    >,
    pub poll: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut poll_table_struct) -> __poll_t,
    >,
    pub unlocked_ioctl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long,
    >,
    pub compat_ioctl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_long,
    >,
    pub mmap: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut vm_area_struct) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut file, id: fl_owner_t) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int,
    >,
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            datasync: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fasync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut file,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub lock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: ::std::os::raw::c_int,
            arg3: *mut file_lock,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_unmapped_area: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: ::std::os::raw::c_ulong,
            arg3: ::std::os::raw::c_ulong,
            arg4: ::std::os::raw::c_ulong,
            arg5: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub check_flags: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub flock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: ::std::os::raw::c_int,
            arg3: *mut file_lock,
        ) -> ::std::os::raw::c_int,
    >,
    pub splice_write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pipe_inode_info,
            arg2: *mut file,
            arg3: *mut loff_t,
            arg4: usize,
            arg5: ::std::os::raw::c_uint,
        ) -> isize,
    >,
    pub splice_read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut loff_t,
            arg3: *mut pipe_inode_info,
            arg4: usize,
            arg5: ::std::os::raw::c_uint,
        ) -> isize,
    >,
    pub splice_eof: ::std::option::Option<unsafe extern "C" fn(file: *mut file)>,
    pub setlease: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: ::std::os::raw::c_int,
            arg3: *mut *mut file_lease,
            arg4: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub fallocate: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut file,
            mode: ::std::os::raw::c_int,
            offset: loff_t,
            len: loff_t,
        ) -> ::std::os::raw::c_long,
    >,
    pub show_fdinfo: ::std::option::Option<unsafe extern "C" fn(m: *mut seq_file, f: *mut file)>,
    pub copy_file_range: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: *mut file,
            arg4: loff_t,
            arg5: usize,
            arg6: ::std::os::raw::c_uint,
        ) -> isize,
    >,
    pub remap_file_range: ::std::option::Option<
        unsafe extern "C" fn(
            file_in: *mut file,
            pos_in: loff_t,
            file_out: *mut file,
            pos_out: loff_t,
            len: loff_t,
            remap_flags: ::std::os::raw::c_uint,
        ) -> loff_t,
    >,
    pub fadvise: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub uring_cmd: ::std::option::Option<
        unsafe extern "C" fn(
            ioucmd: *mut io_uring_cmd,
            issue_flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub uring_cmd_iopoll: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut io_uring_cmd,
            arg2: *mut io_comp_batch,
            poll_flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_operations"][::std::mem::size_of::<file_operations>() - 264usize];
    ["Alignment of file_operations"][::std::mem::align_of::<file_operations>() - 8usize];
    ["Offset of field: file_operations::owner"]
        [::std::mem::offset_of!(file_operations, owner) - 0usize];
    ["Offset of field: file_operations::fop_flags"]
        [::std::mem::offset_of!(file_operations, fop_flags) - 8usize];
    ["Offset of field: file_operations::llseek"]
        [::std::mem::offset_of!(file_operations, llseek) - 16usize];
    ["Offset of field: file_operations::read"]
        [::std::mem::offset_of!(file_operations, read) - 24usize];
    ["Offset of field: file_operations::write"]
        [::std::mem::offset_of!(file_operations, write) - 32usize];
    ["Offset of field: file_operations::read_iter"]
        [::std::mem::offset_of!(file_operations, read_iter) - 40usize];
    ["Offset of field: file_operations::write_iter"]
        [::std::mem::offset_of!(file_operations, write_iter) - 48usize];
    ["Offset of field: file_operations::iopoll"]
        [::std::mem::offset_of!(file_operations, iopoll) - 56usize];
    ["Offset of field: file_operations::iterate_shared"]
        [::std::mem::offset_of!(file_operations, iterate_shared) - 64usize];
    ["Offset of field: file_operations::poll"]
        [::std::mem::offset_of!(file_operations, poll) - 72usize];
    ["Offset of field: file_operations::unlocked_ioctl"]
        [::std::mem::offset_of!(file_operations, unlocked_ioctl) - 80usize];
    ["Offset of field: file_operations::compat_ioctl"]
        [::std::mem::offset_of!(file_operations, compat_ioctl) - 88usize];
    ["Offset of field: file_operations::mmap"]
        [::std::mem::offset_of!(file_operations, mmap) - 96usize];
    ["Offset of field: file_operations::open"]
        [::std::mem::offset_of!(file_operations, open) - 104usize];
    ["Offset of field: file_operations::flush"]
        [::std::mem::offset_of!(file_operations, flush) - 112usize];
    ["Offset of field: file_operations::release"]
        [::std::mem::offset_of!(file_operations, release) - 120usize];
    ["Offset of field: file_operations::fsync"]
        [::std::mem::offset_of!(file_operations, fsync) - 128usize];
    ["Offset of field: file_operations::fasync"]
        [::std::mem::offset_of!(file_operations, fasync) - 136usize];
    ["Offset of field: file_operations::lock"]
        [::std::mem::offset_of!(file_operations, lock) - 144usize];
    ["Offset of field: file_operations::get_unmapped_area"]
        [::std::mem::offset_of!(file_operations, get_unmapped_area) - 152usize];
    ["Offset of field: file_operations::check_flags"]
        [::std::mem::offset_of!(file_operations, check_flags) - 160usize];
    ["Offset of field: file_operations::flock"]
        [::std::mem::offset_of!(file_operations, flock) - 168usize];
    ["Offset of field: file_operations::splice_write"]
        [::std::mem::offset_of!(file_operations, splice_write) - 176usize];
    ["Offset of field: file_operations::splice_read"]
        [::std::mem::offset_of!(file_operations, splice_read) - 184usize];
    ["Offset of field: file_operations::splice_eof"]
        [::std::mem::offset_of!(file_operations, splice_eof) - 192usize];
    ["Offset of field: file_operations::setlease"]
        [::std::mem::offset_of!(file_operations, setlease) - 200usize];
    ["Offset of field: file_operations::fallocate"]
        [::std::mem::offset_of!(file_operations, fallocate) - 208usize];
    ["Offset of field: file_operations::show_fdinfo"]
        [::std::mem::offset_of!(file_operations, show_fdinfo) - 216usize];
    ["Offset of field: file_operations::copy_file_range"]
        [::std::mem::offset_of!(file_operations, copy_file_range) - 224usize];
    ["Offset of field: file_operations::remap_file_range"]
        [::std::mem::offset_of!(file_operations, remap_file_range) - 232usize];
    ["Offset of field: file_operations::fadvise"]
        [::std::mem::offset_of!(file_operations, fadvise) - 240usize];
    ["Offset of field: file_operations::uring_cmd"]
        [::std::mem::offset_of!(file_operations, uring_cmd) - 248usize];
    ["Offset of field: file_operations::uring_cmd_iopoll"]
        [::std::mem::offset_of!(file_operations, uring_cmd_iopoll) - 256usize];
};
extern "C" {
    pub static kmsg_fops: file_operations;
}
pub const DUMP_PREFIX_NONE: _bindgen_ty_2 = 0;
pub const DUMP_PREFIX_ADDRESS: _bindgen_ty_2 = 1;
pub const DUMP_PREFIX_OFFSET: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub fn hex_dump_to_buffer(
        buf: *const ::std::os::raw::c_void,
        len: usize,
        rowsize: ::std::os::raw::c_int,
        groupsize: ::std::os::raw::c_int,
        linebuf: *mut ::std::os::raw::c_char,
        linebuflen: usize,
        ascii: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_hex_dump(
        level: *const ::std::os::raw::c_char,
        prefix_str: *const ::std::os::raw::c_char,
        prefix_type: ::std::os::raw::c_int,
        rowsize: ::std::os::raw::c_int,
        groupsize: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        ascii: bool_,
    );
}
extern "C" {
    pub fn num_to_str(
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_ulonglong,
        width: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        buf: *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        buf: *mut ::std::os::raw::c_char,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scnprintf(
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscnprintf(
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kasprintf(
        gfp: gfp_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kvasprintf(
        gfp: gfp_t,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kvasprintf_const(
        gfp: gfp_t,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_hash_pointers: bool_;
}
extern "C" {
    pub fn no_hash_pointers_enable(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct static_call_site {
    pub addr: s32,
    pub key: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_call_site"][::std::mem::size_of::<static_call_site>() - 8usize];
    ["Alignment of static_call_site"][::std::mem::align_of::<static_call_site>() - 4usize];
    ["Offset of field: static_call_site::addr"]
        [::std::mem::offset_of!(static_call_site, addr) - 0usize];
    ["Offset of field: static_call_site::key"]
        [::std::mem::offset_of!(static_call_site, key) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_call_key {
    pub func: *mut ::std::os::raw::c_void,
    pub __bindgen_anon_1: static_call_key__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union static_call_key__bindgen_ty_1 {
    pub type_: ::std::os::raw::c_ulong,
    pub mods: *mut static_call_mod,
    pub sites: *mut static_call_site,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_call_key__bindgen_ty_1"]
        [::std::mem::size_of::<static_call_key__bindgen_ty_1>() - 8usize];
    ["Alignment of static_call_key__bindgen_ty_1"]
        [::std::mem::align_of::<static_call_key__bindgen_ty_1>() - 8usize];
    ["Offset of field: static_call_key__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(static_call_key__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: static_call_key__bindgen_ty_1::mods"]
        [::std::mem::offset_of!(static_call_key__bindgen_ty_1, mods) - 0usize];
    ["Offset of field: static_call_key__bindgen_ty_1::sites"]
        [::std::mem::offset_of!(static_call_key__bindgen_ty_1, sites) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_call_key"][::std::mem::size_of::<static_call_key>() - 16usize];
    ["Alignment of static_call_key"][::std::mem::align_of::<static_call_key>() - 8usize];
    ["Offset of field: static_call_key::func"]
        [::std::mem::offset_of!(static_call_key, func) - 0usize];
};
extern "C" {
    pub fn __cond_resched() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __SCK__might_resched: static_call_key;
}
extern "C" {
    pub fn __SCT__might_resched() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_exit(error_code: ::std::os::raw::c_long) -> !;
}
extern "C" {
    pub fn core_kernel_text(addr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __kernel_text_address(addr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernel_text_address(addr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn func_ptr_is_kernel_text(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bust_spinlocks(yes: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut root_mountflags: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut early_boot_irqs_disabled: bool_;
}
pub const system_states_SYSTEM_BOOTING: system_states = 0;
pub const system_states_SYSTEM_SCHEDULING: system_states = 1;
pub const system_states_SYSTEM_FREEING_INITMEM: system_states = 2;
pub const system_states_SYSTEM_RUNNING: system_states = 3;
pub const system_states_SYSTEM_HALT: system_states = 4;
pub const system_states_SYSTEM_POWER_OFF: system_states = 5;
pub const system_states_SYSTEM_RESTART: system_states = 6;
pub const system_states_SYSTEM_SUSPEND: system_states = 7;
pub type system_states = ::std::os::raw::c_uint;
extern "C" {
    pub static mut system_state: system_states;
}
pub const ftrace_dump_mode_DUMP_NONE: ftrace_dump_mode = 0;
pub const ftrace_dump_mode_DUMP_ALL: ftrace_dump_mode = 1;
pub const ftrace_dump_mode_DUMP_ORIG: ftrace_dump_mode = 2;
pub const ftrace_dump_mode_DUMP_PARAM: ftrace_dump_mode = 3;
pub type ftrace_dump_mode = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracing_on();
}
extern "C" {
    pub fn tracing_off();
}
extern "C" {
    pub fn tracing_is_on() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracing_snapshot();
}
extern "C" {
    pub fn tracing_snapshot_alloc();
}
extern "C" {
    pub fn tracing_start();
}
extern "C" {
    pub fn tracing_stop();
}
extern "C" {
    pub fn __trace_bprintk(
        ip: ::std::os::raw::c_ulong,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __trace_printk(
        ip: ::std::os::raw::c_ulong,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __trace_bputs(
        ip: ::std::os::raw::c_ulong,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __trace_puts(
        ip: ::std::os::raw::c_ulong,
        str_: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trace_dump_stack(skip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __ftrace_vbprintk(
        ip: ::std::os::raw::c_ulong,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ftrace_vprintk(
        ip: ::std::os::raw::c_ulong,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftrace_dump(oops_dump_mode: ftrace_dump_mode);
}
extern "C" {
    pub fn _find_next_bit(
        addr1: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_next_and_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_next_andnot_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_next_or_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_next_zero_bit(
        addr: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_first_bit(
        addr: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __find_nth_bit(
        addr: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __find_nth_and_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __find_nth_andnot_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __find_nth_and_andnot_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        addr3: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_first_and_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_first_and_and_bit(
        addr1: *const ::std::os::raw::c_ulong,
        addr2: *const ::std::os::raw::c_ulong,
        addr3: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_first_zero_bit(
        addr: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _find_last_bit(
        addr: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[doc = " find_next_clump8 - find next 8-bit clump with set bits in a memory region\n @clump: location to store copy of found clump\n @addr: address to base the search on\n @size: bitmap size in number of bits\n @offset: bit offset at which to start searching\n\n Returns the bit offset for the next set clump; the found clump value is\n copied to the location pointed by @clump. If no bits are set, returns @size."]
    pub fn find_next_clump8(
        clump: *mut ::std::os::raw::c_ulong,
        addr: *const ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        offset: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strndup_user(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memdup_user(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vmemdup_user(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memdup_user_nul(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcpy(
        to: *mut ::std::os::raw::c_void,
        from: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __memcpy(
        to: *mut ::std::os::raw::c_void,
        from: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        s: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __memset(
        s: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        dest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __memmove(
        dest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        count: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        cs: *const ::std::os::raw::c_void,
        ct: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        cs: *const ::std::os::raw::c_char,
        ct: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcpy_flushcache(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        cnt: usize,
    );
}
extern "C" {
    pub fn strncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sized_strscpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn strncat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __kernel_size_t,
    ) -> usize;
}
extern "C" {
    pub fn strncmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnchrnul(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn skip_spaces(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strim(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: __kernel_size_t) -> __kernel_size_t;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __memcat_p(
        a: *mut *mut ::std::os::raw::c_void,
        b: *mut *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memscan(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: __kernel_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memchr_inv(
        s: *const ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strreplace(
        str_: *mut ::std::os::raw::c_char,
        old: ::std::os::raw::c_char,
        new: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kfree_const(x: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn kstrdup(s: *const ::std::os::raw::c_char, gfp: gfp_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kstrdup_const(
        s: *const ::std::os::raw::c_char,
        gfp: gfp_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn kstrndup(
        s: *const ::std::os::raw::c_char,
        len: usize,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kmemdup_noprof(
        src: *const ::std::os::raw::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kvmemdup(
        src: *const ::std::os::raw::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kmemdup_nul(
        s: *const ::std::os::raw::c_char,
        len: usize,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kmemdup_array(
        src: *const ::std::os::raw::c_void,
        count: usize,
        element_size: usize,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn argv_split(
        gfp: gfp_t,
        str_: *const ::std::os::raw::c_char,
        argcp: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn argv_free(argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_option(
        str_: *mut *mut ::std::os::raw::c_char,
        pint: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_options(
        str_: *const ::std::os::raw::c_char,
        nints: ::std::os::raw::c_int,
        ints: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memparse(
        ptr: *const ::std::os::raw::c_char,
        retptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn parse_option_str(
        str_: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn next_arg(
        args: *mut ::std::os::raw::c_char,
        param: *mut *mut ::std::os::raw::c_char,
        val: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sysfs_streq(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn match_string(
        array: *const *const ::std::os::raw::c_char,
        n: usize,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sysfs_match_string(
        array: *const *const ::std::os::raw::c_char,
        n: usize,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vbin_printf(
        bin_buf: *mut u32_,
        size: usize,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bstr_printf(
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        fmt: *const ::std::os::raw::c_char,
        bin_buf: *const u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bprintf(
        bin_buf: *mut u32_,
        size: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memory_read_from_buffer(
        to: *mut ::std::os::raw::c_void,
        count: usize,
        ppos: *mut loff_t,
        from: *const ::std::os::raw::c_void,
        available: usize,
    ) -> isize;
}
extern "C" {
    pub fn ptr_to_hashval(
        ptr: *const ::std::os::raw::c_void,
        hashval_out: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memweight(ptr: *const ::std::os::raw::c_void, bytes: usize) -> usize;
}
extern "C" {
    pub fn memcpy_and_pad(
        dest: *mut ::std::os::raw::c_void,
        dest_len: usize,
        src: *const ::std::os::raw::c_void,
        count: usize,
        pad: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn bitmap_parse_user(
        ubuf: *const ::std::os::raw::c_char,
        ulen: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitmap_print_to_pagebuf(
        list: bool_,
        buf: *mut ::std::os::raw::c_char,
        maskp: *const ::std::os::raw::c_ulong,
        nmaskbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitmap_print_bitmask_to_buf(
        buf: *mut ::std::os::raw::c_char,
        maskp: *const ::std::os::raw::c_ulong,
        nmaskbits: ::std::os::raw::c_int,
        off: loff_t,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitmap_print_list_to_buf(
        buf: *mut ::std::os::raw::c_char,
        maskp: *const ::std::os::raw::c_ulong,
        nmaskbits: ::std::os::raw::c_int,
        off: loff_t,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitmap_parse(
        buf: *const ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitmap_parselist(
        buf: *const ::std::os::raw::c_char,
        maskp: *mut ::std::os::raw::c_ulong,
        nmaskbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitmap_parselist_user(
        ubuf: *const ::std::os::raw::c_char,
        ulen: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " DOC: declare bitmap\n The DECLARE_BITMAP(name,bits) macro, in linux/types.h, can be used\n to declare an array named 'name' of just enough unsigned longs to\n contain all bit positions from 0 to 'bits' - 1."]
    pub fn bitmap_alloc(
        nbits: ::std::os::raw::c_uint,
        flags: gfp_t,
    ) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn bitmap_zalloc(
        nbits: ::std::os::raw::c_uint,
        flags: gfp_t,
    ) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn bitmap_alloc_node(
        nbits: ::std::os::raw::c_uint,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn bitmap_zalloc_node(
        nbits: ::std::os::raw::c_uint,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn bitmap_free(bitmap: *const ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn devm_bitmap_alloc(
        dev: *mut device,
        nbits: ::std::os::raw::c_uint,
        flags: gfp_t,
    ) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn devm_bitmap_zalloc(
        dev: *mut device,
        nbits: ::std::os::raw::c_uint,
        flags: gfp_t,
    ) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __bitmap_equal(
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_or_equal(
        src1: *const ::std::os::raw::c_ulong,
        src2: *const ::std::os::raw::c_ulong,
        src3: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_complement(
        dst: *mut ::std::os::raw::c_ulong,
        src: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_shift_right(
        dst: *mut ::std::os::raw::c_ulong,
        src: *const ::std::os::raw::c_ulong,
        shift: ::std::os::raw::c_uint,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_shift_left(
        dst: *mut ::std::os::raw::c_ulong,
        src: *const ::std::os::raw::c_ulong,
        shift: ::std::os::raw::c_uint,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn bitmap_cut(
        dst: *mut ::std::os::raw::c_ulong,
        src: *const ::std::os::raw::c_ulong,
        first: ::std::os::raw::c_uint,
        cut: ::std::os::raw::c_uint,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_and(
        dst: *mut ::std::os::raw::c_ulong,
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_or(
        dst: *mut ::std::os::raw::c_ulong,
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_xor(
        dst: *mut ::std::os::raw::c_ulong,
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_andnot(
        dst: *mut ::std::os::raw::c_ulong,
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_replace(
        dst: *mut ::std::os::raw::c_ulong,
        old: *const ::std::os::raw::c_ulong,
        new: *const ::std::os::raw::c_ulong,
        mask: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_intersects(
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_subset(
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_weight(
        bitmap: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __bitmap_weight_and(
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __bitmap_weight_andnot(
        bitmap1: *const ::std::os::raw::c_ulong,
        bitmap2: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __bitmap_set(
        map: *mut ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn __bitmap_clear(
        map: *mut ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn bitmap_find_next_zero_area_off(
        map: *mut ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        start: ::std::os::raw::c_ulong,
        nr: ::std::os::raw::c_uint,
        align_mask: ::std::os::raw::c_ulong,
        align_offset: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn bitmap_remap(
        dst: *mut ::std::os::raw::c_ulong,
        src: *const ::std::os::raw::c_ulong,
        old: *const ::std::os::raw::c_ulong,
        new: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn bitmap_bitremap(
        oldbit: ::std::os::raw::c_int,
        old: *const ::std::os::raw::c_ulong,
        new: *const ::std::os::raw::c_ulong,
        bits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bitmap_onto(
        dst: *mut ::std::os::raw::c_ulong,
        orig: *const ::std::os::raw::c_ulong,
        relmap: *const ::std::os::raw::c_ulong,
        bits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn bitmap_fold(
        dst: *mut ::std::os::raw::c_ulong,
        orig: *const ::std::os::raw::c_ulong,
        sz: ::std::os::raw::c_uint,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn bitmap_from_arr32(
        bitmap: *mut ::std::os::raw::c_ulong,
        buf: *const u32_,
        nbits: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn bitmap_to_arr32(
        buf: *mut u32_,
        bitmap: *const ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpumask {
    pub bits: [::std::os::raw::c_ulong; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpumask"][::std::mem::size_of::<cpumask>() - 1024usize];
    ["Alignment of cpumask"][::std::mem::align_of::<cpumask>() - 8usize];
    ["Offset of field: cpumask::bits"][::std::mem::offset_of!(cpumask, bits) - 0usize];
};
pub type cpumask_t = cpumask;
pub type cpumask_var_t = *mut cpumask;
extern "C" {
    pub fn __xchg_wrong_size();
}
extern "C" {
    pub fn __cmpxchg_wrong_size();
}
extern "C" {
    pub fn __xadd_wrong_size();
}
extern "C" {
    pub fn __add_wrong_size();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __u128_halves {
    pub full: u128_,
    pub __bindgen_anon_1: __u128_halves__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __u128_halves__bindgen_ty_1 {
    pub low: u64_,
    pub high: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __u128_halves__bindgen_ty_1"]
        [::std::mem::size_of::<__u128_halves__bindgen_ty_1>() - 16usize];
    ["Alignment of __u128_halves__bindgen_ty_1"]
        [::std::mem::align_of::<__u128_halves__bindgen_ty_1>() - 8usize];
    ["Offset of field: __u128_halves__bindgen_ty_1::low"]
        [::std::mem::offset_of!(__u128_halves__bindgen_ty_1, low) - 0usize];
    ["Offset of field: __u128_halves__bindgen_ty_1::high"]
        [::std::mem::offset_of!(__u128_halves__bindgen_ty_1, high) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __u128_halves"][::std::mem::size_of::<__u128_halves>() - 16usize];
    ["Alignment of __u128_halves"][::std::mem::align_of::<__u128_halves>() - 16usize];
    ["Offset of field: __u128_halves::full"][::std::mem::offset_of!(__u128_halves, full) - 0usize];
};
pub type atomic_long_t = atomic64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_hint {
    pub ip: u32_,
    pub sp_offset: s16,
    pub sp_reg: u8_,
    pub type_: u8_,
    pub signal: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of unwind_hint"][::std::mem::size_of::<unwind_hint>() - 12usize];
    ["Alignment of unwind_hint"][::std::mem::align_of::<unwind_hint>() - 4usize];
    ["Offset of field: unwind_hint::ip"][::std::mem::offset_of!(unwind_hint, ip) - 0usize];
    ["Offset of field: unwind_hint::sp_offset"]
        [::std::mem::offset_of!(unwind_hint, sp_offset) - 4usize];
    ["Offset of field: unwind_hint::sp_reg"][::std::mem::offset_of!(unwind_hint, sp_reg) - 6usize];
    ["Offset of field: unwind_hint::type_"][::std::mem::offset_of!(unwind_hint, type_) - 7usize];
    ["Offset of field: unwind_hint::signal"][::std::mem::offset_of!(unwind_hint, signal) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct warn_args {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __warn(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        caller: *mut ::std::os::raw::c_void,
        taint: ::std::os::raw::c_uint,
        regs: *mut pt_regs,
        args: *mut warn_args,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bug_entry {
    pub bug_addr_disp: ::std::os::raw::c_int,
    pub file_disp: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_ushort,
    pub flags: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bug_entry"][::std::mem::size_of::<bug_entry>() - 12usize];
    ["Alignment of bug_entry"][::std::mem::align_of::<bug_entry>() - 4usize];
    ["Offset of field: bug_entry::bug_addr_disp"]
        [::std::mem::offset_of!(bug_entry, bug_addr_disp) - 0usize];
    ["Offset of field: bug_entry::file_disp"]
        [::std::mem::offset_of!(bug_entry, file_disp) - 4usize];
    ["Offset of field: bug_entry::line"][::std::mem::offset_of!(bug_entry, line) - 8usize];
    ["Offset of field: bug_entry::flags"][::std::mem::offset_of!(bug_entry, flags) - 10usize];
};
extern "C" {
    pub fn warn_slowpath_fmt(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        taint: ::std::os::raw::c_uint,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn __warn_printk(fmt: *const ::std::os::raw::c_char, ...);
}
pub const bug_trap_type_BUG_TRAP_TYPE_NONE: bug_trap_type = 0;
pub const bug_trap_type_BUG_TRAP_TYPE_WARN: bug_trap_type = 1;
pub const bug_trap_type_BUG_TRAP_TYPE_BUG: bug_trap_type = 2;
pub type bug_trap_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn bug_get_file_line(
        bug: *mut bug_entry,
        file: *mut *const ::std::os::raw::c_char,
        line: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn find_bug(bugaddr: ::std::os::raw::c_ulong) -> *mut bug_entry;
}
extern "C" {
    pub fn report_bug(bug_addr: ::std::os::raw::c_ulong, regs: *mut pt_regs) -> bug_trap_type;
}
extern "C" {
    pub fn is_valid_bugaddr(addr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_bug_clear_once();
}
pub const ___GFP_DMA_BIT: _bindgen_ty_3 = 0;
pub const ___GFP_HIGHMEM_BIT: _bindgen_ty_3 = 1;
pub const ___GFP_DMA32_BIT: _bindgen_ty_3 = 2;
pub const ___GFP_MOVABLE_BIT: _bindgen_ty_3 = 3;
pub const ___GFP_RECLAIMABLE_BIT: _bindgen_ty_3 = 4;
pub const ___GFP_HIGH_BIT: _bindgen_ty_3 = 5;
pub const ___GFP_IO_BIT: _bindgen_ty_3 = 6;
pub const ___GFP_FS_BIT: _bindgen_ty_3 = 7;
pub const ___GFP_ZERO_BIT: _bindgen_ty_3 = 8;
pub const ___GFP_UNUSED_BIT: _bindgen_ty_3 = 9;
pub const ___GFP_DIRECT_RECLAIM_BIT: _bindgen_ty_3 = 10;
pub const ___GFP_KSWAPD_RECLAIM_BIT: _bindgen_ty_3 = 11;
pub const ___GFP_WRITE_BIT: _bindgen_ty_3 = 12;
pub const ___GFP_NOWARN_BIT: _bindgen_ty_3 = 13;
pub const ___GFP_RETRY_MAYFAIL_BIT: _bindgen_ty_3 = 14;
pub const ___GFP_NOFAIL_BIT: _bindgen_ty_3 = 15;
pub const ___GFP_NORETRY_BIT: _bindgen_ty_3 = 16;
pub const ___GFP_MEMALLOC_BIT: _bindgen_ty_3 = 17;
pub const ___GFP_COMP_BIT: _bindgen_ty_3 = 18;
pub const ___GFP_NOMEMALLOC_BIT: _bindgen_ty_3 = 19;
pub const ___GFP_HARDWALL_BIT: _bindgen_ty_3 = 20;
pub const ___GFP_THISNODE_BIT: _bindgen_ty_3 = 21;
pub const ___GFP_ACCOUNT_BIT: _bindgen_ty_3 = 22;
pub const ___GFP_ZEROTAGS_BIT: _bindgen_ty_3 = 23;
pub const ___GFP_NO_OBJ_EXT_BIT: _bindgen_ty_3 = 24;
pub const ___GFP_LAST_BIT: _bindgen_ty_3 = 25;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn phys_to_target_node(start: phys_addr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memory_add_physaddr_to_nid(start: u64_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn numa_nearest_node(
        node: ::std::os::raw::c_int,
        state: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn numa_fill_memblks(start: u64_, end: u64_) -> ::std::os::raw::c_int;
}
#[doc = " struct attribute_group - data structure used to declare an attribute group.\n @name:\tOptional: Attribute group name\n\t\tIf specified, the attribute group will be created in a\n\t\tnew subdirectory with this name. Additionally when a\n\t\tgroup is named, @is_visible and @is_bin_visible may\n\t\treturn SYSFS_GROUP_INVISIBLE to control visibility of\n\t\tthe directory itself.\n @is_visible:\tOptional: Function to return permissions associated with an\n\t\tattribute of the group. Will be called repeatedly for\n\t\teach non-binary attribute in the group. Only read/write\n\t\tpermissions as well as SYSFS_PREALLOC are accepted. Must\n\t\treturn 0 if an attribute is not visible. The returned\n\t\tvalue will replace static permissions defined in struct\n\t\tattribute. Use SYSFS_GROUP_VISIBLE() when assigning this\n\t\tcallback to specify separate _group_visible() and\n\t\t_attr_visible() handlers.\n @is_bin_visible:\n\t\tOptional: Function to return permissions associated with a\n\t\tbinary attribute of the group. Will be called repeatedly\n\t\tfor each binary attribute in the group. Only read/write\n\t\tpermissions as well as SYSFS_PREALLOC (and the\n\t\tvisibility flags for named groups) are accepted. Must\n\t\treturn 0 if a binary attribute is not visible. The\n\t\treturned value will replace static permissions defined\n\t\tin struct bin_attribute. If @is_visible is not set, Use\n\t\tSYSFS_GROUP_VISIBLE() when assigning this callback to\n\t\tspecify separate _group_visible() and _attr_visible()\n\t\thandlers.\n @attrs:\tPointer to NULL terminated list of attributes.\n @bin_attrs:\tPointer to NULL terminated list of binary attributes.\n\t\tEither attrs or bin_attrs or both must be provided."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_group {
    pub name: *const ::std::os::raw::c_char,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: ::std::os::raw::c_int,
        ) -> umode_t,
    >,
    pub is_bin_visible: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut bin_attribute,
            arg3: ::std::os::raw::c_int,
        ) -> umode_t,
    >,
    pub attrs: *mut *mut attribute,
    pub bin_attrs: *mut *mut bin_attribute,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of attribute_group"][::std::mem::size_of::<attribute_group>() - 40usize];
    ["Alignment of attribute_group"][::std::mem::align_of::<attribute_group>() - 8usize];
    ["Offset of field: attribute_group::name"]
        [::std::mem::offset_of!(attribute_group, name) - 0usize];
    ["Offset of field: attribute_group::is_visible"]
        [::std::mem::offset_of!(attribute_group, is_visible) - 8usize];
    ["Offset of field: attribute_group::is_bin_visible"]
        [::std::mem::offset_of!(attribute_group, is_bin_visible) - 16usize];
    ["Offset of field: attribute_group::attrs"]
        [::std::mem::offset_of!(attribute_group, attrs) - 24usize];
    ["Offset of field: attribute_group::bin_attrs"]
        [::std::mem::offset_of!(attribute_group, bin_attrs) - 32usize];
};
extern "C" {
    pub static arch_node_dev_group: attribute_group;
}
extern "C" {
    pub static mut nr_cpu_ids: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __cpu_possible_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_online_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_enabled_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_present_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_active_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_dying_mask: cpumask;
}
extern "C" {
    pub static mut __num_online_cpus: atomic_t;
}
extern "C" {
    pub static mut cpus_booted_once_mask: cpumask_t;
}
extern "C" {
    pub fn cpumask_local_spread(
        i: ::std::os::raw::c_uint,
        node: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpumask_any_and_distribute(
        src1p: *const cpumask,
        src2p: *const cpumask,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpumask_any_distribute(srcp: *const cpumask) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpumask_next_wrap(
        n: ::std::os::raw::c_int,
        mask: *const cpumask,
        start: ::std::os::raw::c_int,
        wrap: bool_,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn alloc_cpumask_var_node(
        mask: *mut cpumask_var_t,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn alloc_bootmem_cpumask_var(mask: *mut cpumask_var_t);
}
extern "C" {
    pub fn free_cpumask_var(mask: cpumask_var_t);
}
extern "C" {
    pub fn free_bootmem_cpumask_var(mask: cpumask_var_t);
}
extern "C" {
    pub static cpu_all_bits: [::std::os::raw::c_ulong; 128usize];
}
extern "C" {
    pub fn init_cpu_present(src: *const cpumask);
}
extern "C" {
    pub fn init_cpu_possible(src: *const cpumask);
}
extern "C" {
    pub fn init_cpu_online(src: *const cpumask);
}
extern "C" {
    pub fn set_cpu_online(cpu: ::std::os::raw::c_uint, online: bool_);
}
extern "C" {
    pub static mut cpu_bit_bitmap: [[::std::os::raw::c_ulong; 128usize]; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llist_head {
    pub first: *mut llist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llist_head"][::std::mem::size_of::<llist_head>() - 8usize];
    ["Alignment of llist_head"][::std::mem::align_of::<llist_head>() - 8usize];
    ["Offset of field: llist_head::first"][::std::mem::offset_of!(llist_head, first) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llist_node {
    pub next: *mut llist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llist_node"][::std::mem::size_of::<llist_node>() - 8usize];
    ["Alignment of llist_node"][::std::mem::align_of::<llist_node>() - 8usize];
    ["Offset of field: llist_node::next"][::std::mem::offset_of!(llist_node, next) - 0usize];
};
extern "C" {
    pub fn llist_add_batch(
        new_first: *mut llist_node,
        new_last: *mut llist_node,
        head: *mut llist_head,
    ) -> bool_;
}
extern "C" {
    pub fn llist_del_first(head: *mut llist_head) -> *mut llist_node;
}
extern "C" {
    pub fn llist_del_first_this(head: *mut llist_head, this: *mut llist_node) -> bool_;
}
extern "C" {
    pub fn llist_reverse_order(head: *mut llist_node) -> *mut llist_node;
}
pub const CSD_FLAG_LOCK: _bindgen_ty_4 = 1;
pub const IRQ_WORK_PENDING: _bindgen_ty_4 = 1;
pub const IRQ_WORK_BUSY: _bindgen_ty_4 = 2;
pub const IRQ_WORK_LAZY: _bindgen_ty_4 = 4;
pub const IRQ_WORK_HARD_IRQ: _bindgen_ty_4 = 8;
pub const IRQ_WORK_CLAIMED: _bindgen_ty_4 = 3;
pub const CSD_TYPE_ASYNC: _bindgen_ty_4 = 0;
pub const CSD_TYPE_SYNC: _bindgen_ty_4 = 16;
pub const CSD_TYPE_IRQ_WORK: _bindgen_ty_4 = 32;
pub const CSD_TYPE_TTWU: _bindgen_ty_4 = 48;
pub const CSD_FLAG_TYPE_MASK: _bindgen_ty_4 = 240;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __call_single_node {
    pub llist: llist_node,
    pub __bindgen_anon_1: __call_single_node__bindgen_ty_1,
    pub src: u16_,
    pub dst: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __call_single_node__bindgen_ty_1 {
    pub u_flags: ::std::os::raw::c_uint,
    pub a_flags: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __call_single_node__bindgen_ty_1"]
        [::std::mem::size_of::<__call_single_node__bindgen_ty_1>() - 4usize];
    ["Alignment of __call_single_node__bindgen_ty_1"]
        [::std::mem::align_of::<__call_single_node__bindgen_ty_1>() - 4usize];
    ["Offset of field: __call_single_node__bindgen_ty_1::u_flags"]
        [::std::mem::offset_of!(__call_single_node__bindgen_ty_1, u_flags) - 0usize];
    ["Offset of field: __call_single_node__bindgen_ty_1::a_flags"]
        [::std::mem::offset_of!(__call_single_node__bindgen_ty_1, a_flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __call_single_node"][::std::mem::size_of::<__call_single_node>() - 16usize];
    ["Alignment of __call_single_node"][::std::mem::align_of::<__call_single_node>() - 8usize];
    ["Offset of field: __call_single_node::llist"]
        [::std::mem::offset_of!(__call_single_node, llist) - 0usize];
    ["Offset of field: __call_single_node::src"]
        [::std::mem::offset_of!(__call_single_node, src) - 12usize];
    ["Offset of field: __call_single_node::dst"]
        [::std::mem::offset_of!(__call_single_node, dst) - 14usize];
};
pub type smp_call_func_t =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
pub type smp_cond_func_t = ::std::option::Option<
    unsafe extern "C" fn(cpu: ::std::os::raw::c_int, info: *mut ::std::os::raw::c_void) -> bool_,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __call_single_data {
    pub node: __call_single_node,
    pub func: smp_call_func_t,
    pub info: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __call_single_data"][::std::mem::size_of::<__call_single_data>() - 32usize];
    ["Alignment of __call_single_data"][::std::mem::align_of::<__call_single_data>() - 8usize];
    ["Offset of field: __call_single_data::node"]
        [::std::mem::offset_of!(__call_single_data, node) - 0usize];
    ["Offset of field: __call_single_data::func"]
        [::std::mem::offset_of!(__call_single_data, func) - 16usize];
    ["Offset of field: __call_single_data::info"]
        [::std::mem::offset_of!(__call_single_data, info) - 24usize];
};
pub type call_single_data_t = __call_single_data;
extern "C" {
    pub fn __smp_call_single_queue(cpu: ::std::os::raw::c_int, node: *mut llist_node);
}
extern "C" {
    pub static mut total_cpus: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn smp_call_function_single(
        cpuid: ::std::os::raw::c_int,
        func: smp_call_func_t,
        info: *mut ::std::os::raw::c_void,
        wait: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_each_cpu_cond_mask(
        cond_func: smp_cond_func_t,
        func: smp_call_func_t,
        info: *mut ::std::os::raw::c_void,
        wait: bool_,
        mask: *const cpumask,
    );
}
extern "C" {
    pub fn smp_call_function_single_async(
        cpu: ::std::os::raw::c_int,
        csd: *mut call_single_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn panic_smp_self_stop() -> !;
}
extern "C" {
    pub fn nmi_panic_self_stop(regs: *mut pt_regs) -> !;
}
extern "C" {
    pub fn crash_smp_send_stop();
}
extern "C" {
    pub fn smp_prepare_boot_cpu();
}
extern "C" {
    pub fn preempt_schedule();
}
extern "C" {
    pub fn preempt_schedule_thunk();
}
extern "C" {
    pub fn preempt_schedule_notrace();
}
extern "C" {
    pub fn preempt_schedule_notrace_thunk();
}
extern "C" {
    pub static mut __SCK__preempt_schedule: static_call_key;
}
extern "C" {
    pub fn __SCT__preempt_schedule();
}
extern "C" {
    pub static mut __SCK__preempt_schedule_notrace: static_call_key;
}
extern "C" {
    pub fn __SCT__preempt_schedule_notrace();
}
#[doc = " preempt_ops - notifiers called when a task is preempted and rescheduled\n @sched_in: we're about to be rescheduled:\n    notifier: struct preempt_notifier for the task being scheduled\n    cpu:  cpu we're scheduled on\n @sched_out: we've just been preempted\n    notifier: struct preempt_notifier for the task being preempted\n    next: the task that's kicking us out\n\n Please note that sched_in and out are called under different\n contexts.  sched_out is called with rq lock held and irq disabled\n while sched_in is called without rq lock and irq enabled.  This\n difference is intentional and depended upon by its users."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct preempt_ops {
    pub sched_in: ::std::option::Option<
        unsafe extern "C" fn(notifier: *mut preempt_notifier, cpu: ::std::os::raw::c_int),
    >,
    pub sched_out: ::std::option::Option<
        unsafe extern "C" fn(notifier: *mut preempt_notifier, next: *mut task_struct),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of preempt_ops"][::std::mem::size_of::<preempt_ops>() - 16usize];
    ["Alignment of preempt_ops"][::std::mem::align_of::<preempt_ops>() - 8usize];
    ["Offset of field: preempt_ops::sched_in"]
        [::std::mem::offset_of!(preempt_ops, sched_in) - 0usize];
    ["Offset of field: preempt_ops::sched_out"]
        [::std::mem::offset_of!(preempt_ops, sched_out) - 8usize];
};
#[doc = " preempt_notifier - key for installing preemption notifiers\n @link: internal use\n @ops: defines the notifier functions to be called\n\n Usually used in conjunction with container_of()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct preempt_notifier {
    pub link: hlist_node,
    pub ops: *mut preempt_ops,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of preempt_notifier"][::std::mem::size_of::<preempt_notifier>() - 24usize];
    ["Alignment of preempt_notifier"][::std::mem::align_of::<preempt_notifier>() - 8usize];
    ["Offset of field: preempt_notifier::link"]
        [::std::mem::offset_of!(preempt_notifier, link) - 0usize];
    ["Offset of field: preempt_notifier::ops"]
        [::std::mem::offset_of!(preempt_notifier, ops) - 16usize];
};
extern "C" {
    pub fn preempt_notifier_inc();
}
extern "C" {
    pub fn preempt_notifier_dec();
}
extern "C" {
    pub fn preempt_notifier_register(notifier: *mut preempt_notifier);
}
extern "C" {
    pub fn preempt_notifier_unregister(notifier: *mut preempt_notifier);
}
extern "C" {
    pub fn migrate_disable();
}
extern "C" {
    pub fn migrate_enable();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_preempt_t {
    pub lock: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_preempt_t"][::std::mem::size_of::<class_preempt_t>() - 8usize];
    ["Alignment of class_preempt_t"][::std::mem::align_of::<class_preempt_t>() - 8usize];
    ["Offset of field: class_preempt_t::lock"]
        [::std::mem::offset_of!(class_preempt_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_preempt_notrace_t {
    pub lock: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_preempt_notrace_t"][::std::mem::size_of::<class_preempt_notrace_t>() - 8usize];
    ["Alignment of class_preempt_notrace_t"]
        [::std::mem::align_of::<class_preempt_notrace_t>() - 8usize];
    ["Offset of field: class_preempt_notrace_t::lock"]
        [::std::mem::offset_of!(class_preempt_notrace_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_migrate_t {
    pub lock: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_migrate_t"][::std::mem::size_of::<class_migrate_t>() - 8usize];
    ["Alignment of class_migrate_t"][::std::mem::align_of::<class_migrate_t>() - 8usize];
    ["Offset of field: class_migrate_t::lock"]
        [::std::mem::offset_of!(class_migrate_t, lock) - 0usize];
};
extern "C" {
    pub fn preempt_model_none() -> bool_;
}
extern "C" {
    pub fn preempt_model_voluntary() -> bool_;
}
extern "C" {
    pub fn preempt_model_full() -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    _unused: [u8; 0],
}
pub const timespec_type_TT_NONE: timespec_type = 0;
pub const timespec_type_TT_NATIVE: timespec_type = 1;
pub const timespec_type_TT_COMPAT: timespec_type = 2;
pub type timespec_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block {
    pub arch_data: ::std::os::raw::c_ulong,
    pub fn_: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut restart_block) -> ::std::os::raw::c_long,
    >,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1 {
    pub futex: restart_block__bindgen_ty_1__bindgen_ty_1,
    pub nanosleep: restart_block__bindgen_ty_1__bindgen_ty_2,
    pub poll: restart_block__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_1 {
    pub uaddr: *mut u32_,
    pub val: u32_,
    pub flags: u32_,
    pub bitset: u32_,
    pub time: u64_,
    pub uaddr2: *mut u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<restart_block__bindgen_ty_1__bindgen_ty_1>() - 40usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<restart_block__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::uaddr"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, uaddr) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::val"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, val) - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, flags) - 12usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::bitset"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, bitset) - 16usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::time"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, time) - 24usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::uaddr2"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, uaddr2) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_2 {
    pub clockid: clockid_t,
    pub type_: timespec_type,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub expires: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub rmtp: *mut __kernel_timespec,
    pub compat_rmtp: *mut old_timespec32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"][::std::mem::align_of::<
        restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::rmtp"][::std::mem::offset_of!(
        restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        rmtp
    ) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::compat_rmtp"][::std::mem::offset_of!(
        restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        compat_rmtp
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<restart_block__bindgen_ty_1__bindgen_ty_2>() - 24usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<restart_block__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2::clockid"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_2, clockid) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2::type_"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_2, type_) - 4usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2::expires"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_2, expires) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_3 {
    pub ufds: *mut pollfd,
    pub nfds: ::std::os::raw::c_int,
    pub has_timeout: ::std::os::raw::c_int,
    pub tv_sec: ::std::os::raw::c_ulong,
    pub tv_nsec: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<restart_block__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<restart_block__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::ufds"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, ufds) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::nfds"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, nfds) - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::has_timeout"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, has_timeout) - 12usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::tv_sec"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, tv_sec) - 16usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::tv_nsec"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, tv_nsec) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1"]
        [::std::mem::size_of::<restart_block__bindgen_ty_1>() - 40usize];
    ["Alignment of restart_block__bindgen_ty_1"]
        [::std::mem::align_of::<restart_block__bindgen_ty_1>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1::futex"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1, futex) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1::nanosleep"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1, nanosleep) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1::poll"]
        [::std::mem::offset_of!(restart_block__bindgen_ty_1, poll) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block"][::std::mem::size_of::<restart_block>() - 56usize];
    ["Alignment of restart_block"][::std::mem::align_of::<restart_block>() - 8usize];
    ["Offset of field: restart_block::arch_data"]
        [::std::mem::offset_of!(restart_block, arch_data) - 0usize];
    ["Offset of field: restart_block::fn_"][::std::mem::offset_of!(restart_block, fn_) - 8usize];
};
extern "C" {
    pub fn do_no_restart_syscall(parm: *mut restart_block) -> ::std::os::raw::c_long;
}
pub const BAD_STACK: _bindgen_ty_5 = -1;
pub const NOT_STACK: _bindgen_ty_5 = 0;
pub const GOOD_FRAME: _bindgen_ty_5 = 1;
pub const GOOD_STACK: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SECCOMP: syscall_work_bit = 0;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT: syscall_work_bit = 1;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_TRACE: syscall_work_bit = 2;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_EMU: syscall_work_bit = 3;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_AUDIT: syscall_work_bit = 4;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_USER_DISPATCH: syscall_work_bit = 5;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_EXIT_TRAP: syscall_work_bit = 6;
pub type syscall_work_bit = ::std::os::raw::c_uint;
#[doc = " @CC_ATTR_MEM_ENCRYPT: Memory encryption is active\n\n The platform/OS is running with active memory encryption. This\n includes running either as a bare-metal system or a hypervisor\n and actively using memory encryption or as a guest/virtual machine\n and actively using memory encryption.\n\n Examples include SME, SEV and SEV-ES."]
pub const cc_attr_CC_ATTR_MEM_ENCRYPT: cc_attr = 0;
#[doc = " @CC_ATTR_HOST_MEM_ENCRYPT: Host memory encryption is active\n\n The platform/OS is running as a bare-metal system or a hypervisor\n and actively using memory encryption.\n\n Examples include SME."]
pub const cc_attr_CC_ATTR_HOST_MEM_ENCRYPT: cc_attr = 1;
#[doc = " @CC_ATTR_GUEST_MEM_ENCRYPT: Guest memory encryption is active\n\n The platform/OS is running as a guest/virtual machine and actively\n using memory encryption.\n\n Examples include SEV and SEV-ES."]
pub const cc_attr_CC_ATTR_GUEST_MEM_ENCRYPT: cc_attr = 2;
#[doc = " @CC_ATTR_GUEST_STATE_ENCRYPT: Guest state encryption is active\n\n The platform/OS is running as a guest/virtual machine and actively\n using memory encryption and register state encryption.\n\n Examples include SEV-ES."]
pub const cc_attr_CC_ATTR_GUEST_STATE_ENCRYPT: cc_attr = 3;
#[doc = " @CC_ATTR_GUEST_UNROLL_STRING_IO: String I/O is implemented with\n                                  IN/OUT instructions\n\n The platform/OS is running as a guest/virtual machine and uses\n IN/OUT instructions in place of string I/O.\n\n Examples include TDX guest & SEV."]
pub const cc_attr_CC_ATTR_GUEST_UNROLL_STRING_IO: cc_attr = 4;
#[doc = " @CC_ATTR_SEV_SNP: Guest SNP is active.\n\n The platform/OS is running as a guest/virtual machine and actively\n using AMD SEV-SNP features."]
pub const cc_attr_CC_ATTR_GUEST_SEV_SNP: cc_attr = 5;
#[doc = " @CC_ATTR_HOST_SEV_SNP: AMD SNP enabled on the host.\n\n The host kernel is running with the necessary features\n enabled to run SEV-SNP guests."]
pub const cc_attr_CC_ATTR_HOST_SEV_SNP: cc_attr = 6;
#[doc = " enum cc_attr - Confidential computing attributes\n\n These attributes represent confidential computing features that are\n currently active."]
pub type cc_attr = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " cc_platform_has() - Checks if the specified cc_attr attribute is active\n @attr: Confidential computing attribute to check\n\n The cc_platform_has() function will return an indicator as to whether the\n specified Confidential Computing attribute is currently active.\n\n Context: Any context\n Return:\n * TRUE  - Specified Confidential Computing attribute is active\n * FALSE - Specified Confidential Computing attribute is not active"]
    pub fn cc_platform_has(attr: cc_attr) -> bool_;
}
extern "C" {
    pub fn cc_platform_set(attr: cc_attr);
}
extern "C" {
    pub fn cc_platform_clear(attr: cc_attr);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct boot_params {
    _unused: [u8; 0],
}
extern "C" {
    pub fn mem_encrypt_init();
}
extern "C" {
    pub fn mem_encrypt_setup_arch();
}
extern "C" {
    pub static mut sme_me_mask: u64_;
}
extern "C" {
    pub static mut sev_status: u64_;
}
extern "C" {
    pub fn sme_encrypt_execute(
        encrypted_kernel_vaddr: ::std::os::raw::c_ulong,
        decrypted_kernel_vaddr: ::std::os::raw::c_ulong,
        kernel_len: ::std::os::raw::c_ulong,
        encryption_wa: ::std::os::raw::c_ulong,
        encryption_pgd: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn sme_early_encrypt(paddr: resource_size_t, size: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn sme_early_decrypt(paddr: resource_size_t, size: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn sme_map_bootdata(real_mode_data: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn sme_unmap_bootdata(real_mode_data: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn sme_early_init();
}
extern "C" {
    pub fn sme_encrypt_kernel(bp: *mut boot_params);
}
extern "C" {
    pub fn sme_enable(bp: *mut boot_params);
}
extern "C" {
    pub fn early_set_memory_decrypted(
        vaddr: ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn early_set_memory_encrypted(
        vaddr: ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn early_set_mem_enc_dec_hypercall(
        vaddr: ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        enc: bool_,
    );
}
extern "C" {
    pub fn mem_encrypt_free_decrypted_mem();
}
extern "C" {
    pub fn sev_es_init_vc_handling();
}
extern "C" {
    pub fn add_encrypt_protection_map();
}
extern "C" {
    pub static mut __start_bss_decrypted: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_bss_decrypted: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __start_bss_decrypted_unused: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn kaslr_get_random_long(purpose: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn kernel_randomize_memory();
}
extern "C" {
    pub fn init_trampoline_kaslr();
}
extern "C" {
    pub static mut physical_mask: phys_addr_t;
}
extern "C" {
    pub fn devmem_is_allowed(pagenr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut max_low_pfn_mapped: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut max_pfn_mapped: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pfn_range_is_mapped(
        start_pfn: ::std::os::raw::c_ulong,
        end_pfn: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn initmem_init();
}
extern "C" {
    pub static mut max_pfn: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut phys_base: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut page_offset_base: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut vmalloc_base: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut vmemmap_base: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut physmem_end: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn clear_page_orig(page: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn clear_page_rep(page: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn clear_page_erms(page: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn copy_page(to: *mut ::std::os::raw::c_void, from: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct range {
    pub start: u64_,
    pub end: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of range"][::std::mem::size_of::<range>() - 16usize];
    ["Alignment of range"][::std::mem::align_of::<range>() - 8usize];
    ["Offset of field: range::start"][::std::mem::offset_of!(range, start) - 0usize];
    ["Offset of field: range::end"][::std::mem::offset_of!(range, end) - 8usize];
};
extern "C" {
    pub fn add_range(
        range: *mut range,
        az: ::std::os::raw::c_int,
        nr_range: ::std::os::raw::c_int,
        start: u64_,
        end: u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_range_with_merge(
        range: *mut range,
        az: ::std::os::raw::c_int,
        nr_range: ::std::os::raw::c_int,
        start: u64_,
        end: u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subtract_range(range: *mut range, az: ::std::os::raw::c_int, start: u64_, end: u64_);
}
extern "C" {
    pub fn clean_sort_range(range: *mut range, az: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sort_range(range: *mut range, nr_range: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut pfn_mapped: [range; 0usize];
}
extern "C" {
    pub static mut nr_pfn_mapped: ::std::os::raw::c_int;
}
extern "C" {
    pub fn __virt_addr_valid(kaddr: ::std::os::raw::c_ulong) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pfn_t {
    pub val: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pfn_t"][::std::mem::size_of::<pfn_t>() - 8usize];
    ["Alignment of pfn_t"][::std::mem::align_of::<pfn_t>() - 8usize];
    ["Offset of field: pfn_t::val"][::std::mem::offset_of!(pfn_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_bitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm86 {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut early_idt_handler_array: [[::std::os::raw::c_char; 9usize]; 32usize];
}
extern "C" {
    pub fn early_ignore_irq();
}
extern "C" {
    pub static mut xen_early_idt_handler_array: [[::std::os::raw::c_char; 8usize]; 32usize];
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fred_cs {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fred_cs"][::std::mem::size_of::<fred_cs>() - 8usize];
    ["Alignment of fred_cs"][::std::mem::align_of::<fred_cs>() - 8usize];
};
impl fred_cs {
    #[inline]
    pub fn cs(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_cs(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn sl(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_sl(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn wfe(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_wfe(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cs: u64_, sl: u64_, wfe: u64_) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let cs: u64 = unsafe { ::std::mem::transmute(cs) };
            cs as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let sl: u64 = unsafe { ::std::mem::transmute(sl) };
            sl as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let wfe: u64 = unsafe { ::std::mem::transmute(wfe) };
            wfe as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fred_ss {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fred_ss"][::std::mem::size_of::<fred_ss>() - 8usize];
    ["Alignment of fred_ss"][::std::mem::align_of::<fred_ss>() - 8usize];
};
impl fred_ss {
    #[inline]
    pub fn ss(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ss(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn sti(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sti(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swevent(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_swevent(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nmi(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_nmi(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vector(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_vector(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn enclave(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_enclave(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lm(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(57usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_lm(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(57usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nested(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_nested(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn insnlen(&self) -> u64_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(60usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_insnlen(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(60usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ss: u64_,
        sti: u64_,
        swevent: u64_,
        nmi: u64_,
        vector: u64_,
        type_: u64_,
        enclave: u64_,
        lm: u64_,
        nested: u64_,
        insnlen: u64_,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ss: u64 = unsafe { ::std::mem::transmute(ss) };
            ss as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let sti: u64 = unsafe { ::std::mem::transmute(sti) };
            sti as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let swevent: u64 = unsafe { ::std::mem::transmute(swevent) };
            swevent as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let nmi: u64 = unsafe { ::std::mem::transmute(nmi) };
            nmi as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let vector: u64 = unsafe { ::std::mem::transmute(vector) };
            vector as u64
        });
        __bindgen_bitfield_unit.set(48usize, 4u8, {
            let type_: u64 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(56usize, 1u8, {
            let enclave: u64 = unsafe { ::std::mem::transmute(enclave) };
            enclave as u64
        });
        __bindgen_bitfield_unit.set(57usize, 1u8, {
            let lm: u64 = unsafe { ::std::mem::transmute(lm) };
            lm as u64
        });
        __bindgen_bitfield_unit.set(58usize, 1u8, {
            let nested: u64 = unsafe { ::std::mem::transmute(nested) };
            nested as u64
        });
        __bindgen_bitfield_unit.set(60usize, 4u8, {
            let insnlen: u64 = unsafe { ::std::mem::transmute(insnlen) };
            insnlen as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pt_regs {
    pub r15: ::std::os::raw::c_ulong,
    pub r14: ::std::os::raw::c_ulong,
    pub r13: ::std::os::raw::c_ulong,
    pub r12: ::std::os::raw::c_ulong,
    pub bp: ::std::os::raw::c_ulong,
    pub bx: ::std::os::raw::c_ulong,
    pub r11: ::std::os::raw::c_ulong,
    pub r10: ::std::os::raw::c_ulong,
    pub r9: ::std::os::raw::c_ulong,
    pub r8: ::std::os::raw::c_ulong,
    pub ax: ::std::os::raw::c_ulong,
    pub cx: ::std::os::raw::c_ulong,
    pub dx: ::std::os::raw::c_ulong,
    pub si: ::std::os::raw::c_ulong,
    pub di: ::std::os::raw::c_ulong,
    pub orig_ax: ::std::os::raw::c_ulong,
    pub ip: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: pt_regs__bindgen_ty_1,
    pub flags: ::std::os::raw::c_ulong,
    pub sp: ::std::os::raw::c_ulong,
    pub __bindgen_anon_2: pt_regs__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pt_regs__bindgen_ty_1 {
    pub cs: u16_,
    pub csx: u64_,
    pub fred_cs: fred_cs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pt_regs__bindgen_ty_1"][::std::mem::size_of::<pt_regs__bindgen_ty_1>() - 8usize];
    ["Alignment of pt_regs__bindgen_ty_1"]
        [::std::mem::align_of::<pt_regs__bindgen_ty_1>() - 8usize];
    ["Offset of field: pt_regs__bindgen_ty_1::cs"]
        [::std::mem::offset_of!(pt_regs__bindgen_ty_1, cs) - 0usize];
    ["Offset of field: pt_regs__bindgen_ty_1::csx"]
        [::std::mem::offset_of!(pt_regs__bindgen_ty_1, csx) - 0usize];
    ["Offset of field: pt_regs__bindgen_ty_1::fred_cs"]
        [::std::mem::offset_of!(pt_regs__bindgen_ty_1, fred_cs) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pt_regs__bindgen_ty_2 {
    pub ss: u16_,
    pub ssx: u64_,
    pub fred_ss: fred_ss,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pt_regs__bindgen_ty_2"][::std::mem::size_of::<pt_regs__bindgen_ty_2>() - 8usize];
    ["Alignment of pt_regs__bindgen_ty_2"]
        [::std::mem::align_of::<pt_regs__bindgen_ty_2>() - 8usize];
    ["Offset of field: pt_regs__bindgen_ty_2::ss"]
        [::std::mem::offset_of!(pt_regs__bindgen_ty_2, ss) - 0usize];
    ["Offset of field: pt_regs__bindgen_ty_2::ssx"]
        [::std::mem::offset_of!(pt_regs__bindgen_ty_2, ssx) - 0usize];
    ["Offset of field: pt_regs__bindgen_ty_2::fred_ss"]
        [::std::mem::offset_of!(pt_regs__bindgen_ty_2, fred_ss) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pt_regs"][::std::mem::size_of::<pt_regs>() - 168usize];
    ["Alignment of pt_regs"][::std::mem::align_of::<pt_regs>() - 8usize];
    ["Offset of field: pt_regs::r15"][::std::mem::offset_of!(pt_regs, r15) - 0usize];
    ["Offset of field: pt_regs::r14"][::std::mem::offset_of!(pt_regs, r14) - 8usize];
    ["Offset of field: pt_regs::r13"][::std::mem::offset_of!(pt_regs, r13) - 16usize];
    ["Offset of field: pt_regs::r12"][::std::mem::offset_of!(pt_regs, r12) - 24usize];
    ["Offset of field: pt_regs::bp"][::std::mem::offset_of!(pt_regs, bp) - 32usize];
    ["Offset of field: pt_regs::bx"][::std::mem::offset_of!(pt_regs, bx) - 40usize];
    ["Offset of field: pt_regs::r11"][::std::mem::offset_of!(pt_regs, r11) - 48usize];
    ["Offset of field: pt_regs::r10"][::std::mem::offset_of!(pt_regs, r10) - 56usize];
    ["Offset of field: pt_regs::r9"][::std::mem::offset_of!(pt_regs, r9) - 64usize];
    ["Offset of field: pt_regs::r8"][::std::mem::offset_of!(pt_regs, r8) - 72usize];
    ["Offset of field: pt_regs::ax"][::std::mem::offset_of!(pt_regs, ax) - 80usize];
    ["Offset of field: pt_regs::cx"][::std::mem::offset_of!(pt_regs, cx) - 88usize];
    ["Offset of field: pt_regs::dx"][::std::mem::offset_of!(pt_regs, dx) - 96usize];
    ["Offset of field: pt_regs::si"][::std::mem::offset_of!(pt_regs, si) - 104usize];
    ["Offset of field: pt_regs::di"][::std::mem::offset_of!(pt_regs, di) - 112usize];
    ["Offset of field: pt_regs::orig_ax"][::std::mem::offset_of!(pt_regs, orig_ax) - 120usize];
    ["Offset of field: pt_regs::ip"][::std::mem::offset_of!(pt_regs, ip) - 128usize];
    ["Offset of field: pt_regs::flags"][::std::mem::offset_of!(pt_regs, flags) - 144usize];
    ["Offset of field: pt_regs::sp"][::std::mem::offset_of!(pt_regs, sp) - 152usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct desc_struct {
    pub limit0: u16_,
    pub base0: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of desc_struct"][::std::mem::size_of::<desc_struct>() - 8usize];
    ["Alignment of desc_struct"][::std::mem::align_of::<desc_struct>() - 1usize];
    ["Offset of field: desc_struct::limit0"][::std::mem::offset_of!(desc_struct, limit0) - 0usize];
    ["Offset of field: desc_struct::base0"][::std::mem::offset_of!(desc_struct, base0) - 2usize];
};
impl desc_struct {
    #[inline]
    pub fn base1(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn s(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_s(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit1(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_limit1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn avl(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_avl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn l(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_l(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn d(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_d(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn g(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_g(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn base2(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base2(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        base1: u16_,
        type_: u16_,
        s: u16_,
        dpl: u16_,
        p: u16_,
        limit1: u16_,
        avl: u16_,
        l: u16_,
        d: u16_,
        g: u16_,
        base2: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let base1: u16 = unsafe { ::std::mem::transmute(base1) };
            base1 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let type_: u16 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let s: u16 = unsafe { ::std::mem::transmute(s) };
            s as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let dpl: u16 = unsafe { ::std::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let p: u16 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let limit1: u16 = unsafe { ::std::mem::transmute(limit1) };
            limit1 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let avl: u16 = unsafe { ::std::mem::transmute(avl) };
            avl as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let l: u16 = unsafe { ::std::mem::transmute(l) };
            l as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let d: u16 = unsafe { ::std::mem::transmute(d) };
            d as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let g: u16 = unsafe { ::std::mem::transmute(g) };
            g as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let base2: u16 = unsafe { ::std::mem::transmute(base2) };
            base2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const GATE_INTERRUPT: _bindgen_ty_6 = 14;
pub const GATE_TRAP: _bindgen_ty_6 = 15;
pub const GATE_CALL: _bindgen_ty_6 = 12;
pub const GATE_TASK: _bindgen_ty_6 = 5;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const DESC_TSS: _bindgen_ty_7 = 9;
pub const DESC_LDT: _bindgen_ty_7 = 2;
pub const DESCTYPE_S: _bindgen_ty_7 = 16;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ldttss_desc {
    pub limit0: u16_,
    pub base0: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub base3: u32_,
    pub zero1: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldttss_desc"][::std::mem::size_of::<ldttss_desc>() - 16usize];
    ["Alignment of ldttss_desc"][::std::mem::align_of::<ldttss_desc>() - 1usize];
    ["Offset of field: ldttss_desc::limit0"][::std::mem::offset_of!(ldttss_desc, limit0) - 0usize];
    ["Offset of field: ldttss_desc::base0"][::std::mem::offset_of!(ldttss_desc, base0) - 2usize];
    ["Offset of field: ldttss_desc::base3"][::std::mem::offset_of!(ldttss_desc, base3) - 8usize];
    ["Offset of field: ldttss_desc::zero1"][::std::mem::offset_of!(ldttss_desc, zero1) - 12usize];
};
impl ldttss_desc {
    #[inline]
    pub fn base1(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit1(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_limit1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn zero0(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_zero0(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn g(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_g(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn base2(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base2(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        base1: u16_,
        type_: u16_,
        dpl: u16_,
        p: u16_,
        limit1: u16_,
        zero0: u16_,
        g: u16_,
        base2: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let base1: u16 = unsafe { ::std::mem::transmute(base1) };
            base1 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let type_: u16 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let dpl: u16 = unsafe { ::std::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let p: u16 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let limit1: u16 = unsafe { ::std::mem::transmute(limit1) };
            limit1 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let zero0: u16 = unsafe { ::std::mem::transmute(zero0) };
            zero0 as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let g: u16 = unsafe { ::std::mem::transmute(g) };
            g as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let base2: u16 = unsafe { ::std::mem::transmute(base2) };
            base2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ldt_desc = ldttss_desc;
pub type tss_desc = ldttss_desc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct idt_bits {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idt_bits"][::std::mem::size_of::<idt_bits>() - 2usize];
    ["Alignment of idt_bits"][::std::mem::align_of::<idt_bits>() - 1usize];
};
impl idt_bits {
    #[inline]
    pub fn ist(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_ist(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> u16_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ist: u16_,
        zero: u16_,
        type_: u16_,
        dpl: u16_,
        p: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let ist: u16 = unsafe { ::std::mem::transmute(ist) };
            ist as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let zero: u16 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let type_: u16 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let dpl: u16 = unsafe { ::std::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let p: u16 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idt_data {
    pub vector: ::std::os::raw::c_uint,
    pub segment: ::std::os::raw::c_uint,
    pub bits: idt_bits,
    pub addr: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idt_data"][::std::mem::size_of::<idt_data>() - 24usize];
    ["Alignment of idt_data"][::std::mem::align_of::<idt_data>() - 8usize];
    ["Offset of field: idt_data::vector"][::std::mem::offset_of!(idt_data, vector) - 0usize];
    ["Offset of field: idt_data::segment"][::std::mem::offset_of!(idt_data, segment) - 4usize];
    ["Offset of field: idt_data::bits"][::std::mem::offset_of!(idt_data, bits) - 8usize];
    ["Offset of field: idt_data::addr"][::std::mem::offset_of!(idt_data, addr) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct gate_struct {
    pub offset_low: u16_,
    pub segment: u16_,
    pub bits: idt_bits,
    pub offset_middle: u16_,
    pub offset_high: u32_,
    pub reserved: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gate_struct"][::std::mem::size_of::<gate_struct>() - 16usize];
    ["Alignment of gate_struct"][::std::mem::align_of::<gate_struct>() - 1usize];
    ["Offset of field: gate_struct::offset_low"]
        [::std::mem::offset_of!(gate_struct, offset_low) - 0usize];
    ["Offset of field: gate_struct::segment"]
        [::std::mem::offset_of!(gate_struct, segment) - 2usize];
    ["Offset of field: gate_struct::bits"][::std::mem::offset_of!(gate_struct, bits) - 4usize];
    ["Offset of field: gate_struct::offset_middle"]
        [::std::mem::offset_of!(gate_struct, offset_middle) - 6usize];
    ["Offset of field: gate_struct::offset_high"]
        [::std::mem::offset_of!(gate_struct, offset_high) - 8usize];
    ["Offset of field: gate_struct::reserved"]
        [::std::mem::offset_of!(gate_struct, reserved) - 12usize];
};
pub type gate_desc = gate_struct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct desc_ptr {
    pub size: ::std::os::raw::c_ushort,
    pub address: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of desc_ptr"][::std::mem::size_of::<desc_ptr>() - 10usize];
    ["Alignment of desc_ptr"][::std::mem::align_of::<desc_ptr>() - 1usize];
    ["Offset of field: desc_ptr::size"][::std::mem::offset_of!(desc_ptr, size) - 0usize];
    ["Offset of field: desc_ptr::address"][::std::mem::offset_of!(desc_ptr, address) - 2usize];
};
pub const page_cache_mode__PAGE_CACHE_MODE_WB: page_cache_mode = 0;
pub const page_cache_mode__PAGE_CACHE_MODE_WC: page_cache_mode = 1;
pub const page_cache_mode__PAGE_CACHE_MODE_UC_MINUS: page_cache_mode = 2;
pub const page_cache_mode__PAGE_CACHE_MODE_UC: page_cache_mode = 3;
pub const page_cache_mode__PAGE_CACHE_MODE_WT: page_cache_mode = 4;
pub const page_cache_mode__PAGE_CACHE_MODE_WP: page_cache_mode = 5;
pub const page_cache_mode__PAGE_CACHE_MODE_NUM: page_cache_mode = 8;
pub type page_cache_mode = ::std::os::raw::c_uint;
pub type pteval_t = ::std::os::raw::c_ulong;
pub type pmdval_t = ::std::os::raw::c_ulong;
pub type pudval_t = ::std::os::raw::c_ulong;
pub type p4dval_t = ::std::os::raw::c_ulong;
pub type pgdval_t = ::std::os::raw::c_ulong;
pub type pgprotval_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pte_t {
    pub pte: pteval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pte_t"][::std::mem::size_of::<pte_t>() - 8usize];
    ["Alignment of pte_t"][::std::mem::align_of::<pte_t>() - 8usize];
    ["Offset of field: pte_t::pte"][::std::mem::offset_of!(pte_t, pte) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmd_t {
    pub pmd: pmdval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pmd_t"][::std::mem::size_of::<pmd_t>() - 8usize];
    ["Alignment of pmd_t"][::std::mem::align_of::<pmd_t>() - 8usize];
    ["Offset of field: pmd_t::pmd"][::std::mem::offset_of!(pmd_t, pmd) - 0usize];
};
extern "C" {
    pub static mut __pgtable_l5_enabled: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut pgdir_shift: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut ptrs_per_p4d: ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgprot {
    pub pgprot: pgprotval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pgprot"][::std::mem::size_of::<pgprot>() - 8usize];
    ["Alignment of pgprot"][::std::mem::align_of::<pgprot>() - 8usize];
    ["Offset of field: pgprot::pgprot"][::std::mem::offset_of!(pgprot, pgprot) - 0usize];
};
pub type pgprot_t = pgprot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgd_t {
    pub pgd: pgdval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pgd_t"][::std::mem::size_of::<pgd_t>() - 8usize];
    ["Alignment of pgd_t"][::std::mem::align_of::<pgd_t>() - 8usize];
    ["Offset of field: pgd_t::pgd"][::std::mem::offset_of!(pgd_t, pgd) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct p4d_t {
    pub p4d: p4dval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of p4d_t"][::std::mem::size_of::<p4d_t>() - 8usize];
    ["Alignment of p4d_t"][::std::mem::align_of::<p4d_t>() - 8usize];
    ["Offset of field: p4d_t::p4d"][::std::mem::offset_of!(p4d_t, p4d) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pud_t {
    pub pud: pudval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pud_t"][::std::mem::size_of::<pud_t>() - 8usize];
    ["Alignment of pud_t"][::std::mem::align_of::<pud_t>() - 8usize];
    ["Offset of field: pud_t::pud"][::std::mem::offset_of!(pud_t, pud) - 0usize];
};
extern "C" {
    pub fn cachemode2protval(pcm: page_cache_mode) -> ::std::os::raw::c_ulong;
}
pub type pgtable_t = *mut page;
extern "C" {
    pub static mut __supported_pte_mask: pteval_t;
}
extern "C" {
    pub static mut __default_kernel_pte_mask: pteval_t;
}
extern "C" {
    pub fn set_nx();
}
extern "C" {
    pub static mut nx_enabled: ::std::os::raw::c_int;
}
extern "C" {
    pub fn pgprot_writecombine(prot: pgprot_t) -> pgprot_t;
}
extern "C" {
    pub fn pgprot_writethrough(prot: pgprot_t) -> pgprot_t;
}
extern "C" {
    pub fn phys_mem_access_prot(
        file: *mut file,
        pfn: ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
        vma_prot: pgprot_t,
    ) -> pgprot_t;
}
extern "C" {
    pub fn set_pte_vaddr(vaddr: ::std::os::raw::c_ulong, pte: pte_t);
}
pub const pg_level_PG_LEVEL_NONE: pg_level = 0;
pub const pg_level_PG_LEVEL_4K: pg_level = 1;
pub const pg_level_PG_LEVEL_2M: pg_level = 2;
pub const pg_level_PG_LEVEL_1G: pg_level = 3;
pub const pg_level_PG_LEVEL_512G: pg_level = 4;
pub const pg_level_PG_LEVEL_256T: pg_level = 5;
pub const pg_level_PG_LEVEL_NUM: pg_level = 6;
pub type pg_level = ::std::os::raw::c_uint;
extern "C" {
    pub fn update_page_count(level: ::std::os::raw::c_int, pages: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn lookup_address(
        address: ::std::os::raw::c_ulong,
        level: *mut ::std::os::raw::c_uint,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn lookup_address_in_pgd(
        pgd: *mut pgd_t,
        address: ::std::os::raw::c_ulong,
        level: *mut ::std::os::raw::c_uint,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn lookup_address_in_pgd_attr(
        pgd: *mut pgd_t,
        address: ::std::os::raw::c_ulong,
        level: *mut ::std::os::raw::c_uint,
        nx: *mut bool_,
        rw: *mut bool_,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn lookup_pmd_address(address: ::std::os::raw::c_ulong) -> *mut pmd_t;
}
extern "C" {
    pub fn slow_virt_to_phys(__address: *mut ::std::os::raw::c_void) -> phys_addr_t;
}
extern "C" {
    pub fn kernel_map_pages_in_pgd(
        pgd: *mut pgd_t,
        pfn: u64_,
        address: ::std::os::raw::c_ulong,
        numpages: ::std::os::raw::c_uint,
        page_flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernel_unmap_pages_in_pgd(
        pgd: *mut pgd_t,
        address: ::std::os::raw::c_ulong,
        numpages: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct orc_entry {
    pub sp_offset: s16,
    pub bp_offset: s16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of orc_entry"][::std::mem::size_of::<orc_entry>() - 6usize];
    ["Alignment of orc_entry"][::std::mem::align_of::<orc_entry>() - 1usize];
    ["Offset of field: orc_entry::sp_offset"]
        [::std::mem::offset_of!(orc_entry, sp_offset) - 0usize];
    ["Offset of field: orc_entry::bp_offset"]
        [::std::mem::offset_of!(orc_entry, bp_offset) - 2usize];
};
impl orc_entry {
    #[inline]
    pub fn sp_reg(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_sp_reg(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_reg(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_bp_reg(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn signal(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_signal(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sp_reg: ::std::os::raw::c_uint,
        bp_reg: ::std::os::raw::c_uint,
        type_: ::std::os::raw::c_uint,
        signal: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let sp_reg: u32 = unsafe { ::std::mem::transmute(sp_reg) };
            sp_reg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let bp_reg: u32 = unsafe { ::std::mem::transmute(bp_reg) };
            bp_reg as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let signal: u32 = unsafe { ::std::mem::transmute(signal) };
            signal as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type retpoline_thunk_t = [u8_; 32usize];
extern "C" {
    pub static mut __x86_indirect_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub fn __x86_return_thunk();
}
extern "C" {
    pub fn retbleed_return_thunk();
}
extern "C" {
    pub fn srso_alias_untrain_ret();
}
extern "C" {
    pub fn srso_return_thunk();
}
extern "C" {
    pub fn srso_alias_return_thunk();
}
extern "C" {
    pub fn entry_untrain_ret();
}
extern "C" {
    pub fn entry_ibpb();
}
extern "C" {
    pub fn clear_bhb_loop();
}
extern "C" {
    pub static mut x86_return_thunk: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn __warn_thunk();
}
extern "C" {
    pub fn call_depth_return_thunk();
}
extern "C" {
    pub static mut __x86_indirect_thunk_rax: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rcx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rdx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rbx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rsp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rbp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rsi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_rdi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r8: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r9: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r10: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r11: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r12: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r13: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r14: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_thunk_r15: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rax: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rcx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rdx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rbx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rsp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rbp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rsi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_rdi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r8: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r9: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r10: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r11: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r12: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r13: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r14: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_r15: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rax: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rcx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rdx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rbx: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rsp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rbp: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rsi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_rdi: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r8: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r9: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r10: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r11: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r12: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r13: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r14: retpoline_thunk_t;
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_r15: retpoline_thunk_t;
}
pub const spectre_v2_mitigation_SPECTRE_V2_NONE: spectre_v2_mitigation = 0;
pub const spectre_v2_mitigation_SPECTRE_V2_RETPOLINE: spectre_v2_mitigation = 1;
pub const spectre_v2_mitigation_SPECTRE_V2_LFENCE: spectre_v2_mitigation = 2;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS: spectre_v2_mitigation = 3;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS_RETPOLINE: spectre_v2_mitigation = 4;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS_LFENCE: spectre_v2_mitigation = 5;
pub const spectre_v2_mitigation_SPECTRE_V2_IBRS: spectre_v2_mitigation = 6;
pub type spectre_v2_mitigation = ::std::os::raw::c_uint;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_NONE: spectre_v2_user_mitigation = 0;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_STRICT: spectre_v2_user_mitigation = 1;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_STRICT_PREFERRED: spectre_v2_user_mitigation =
    2;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_PRCTL: spectre_v2_user_mitigation = 3;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_SECCOMP: spectre_v2_user_mitigation = 4;
pub type spectre_v2_user_mitigation = ::std::os::raw::c_uint;
pub const ssb_mitigation_SPEC_STORE_BYPASS_NONE: ssb_mitigation = 0;
pub const ssb_mitigation_SPEC_STORE_BYPASS_DISABLE: ssb_mitigation = 1;
pub const ssb_mitigation_SPEC_STORE_BYPASS_PRCTL: ssb_mitigation = 2;
pub const ssb_mitigation_SPEC_STORE_BYPASS_SECCOMP: ssb_mitigation = 3;
pub type ssb_mitigation = ::std::os::raw::c_uint;
extern "C" {
    pub static mut x86_pred_cmd: u64_;
}
extern "C" {
    pub static mut x86_spec_ctrl_base: u64_;
}
extern "C" {
    pub static mut x86_spec_ctrl_current: ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn update_spec_ctrl_cond(val: u64_);
}
extern "C" {
    pub fn spec_ctrl_current() -> u64_;
}
extern "C" {
    pub static mut switch_to_cond_stibp: static_key_false;
}
extern "C" {
    pub static mut switch_mm_cond_ibpb: static_key_false;
}
extern "C" {
    pub static mut switch_mm_always_ibpb: static_key_false;
}
extern "C" {
    pub static mut mds_idle_clear: static_key_false;
}
extern "C" {
    pub static mut switch_mm_cond_l1d_flush: static_key_false;
}
extern "C" {
    pub static mut mmio_stale_data_clear: static_key_false;
}
extern "C" {
    pub static mut mds_verw_sel: u16_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_gather {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct paravirt_callee_save {
    pub func: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of paravirt_callee_save"][::std::mem::size_of::<paravirt_callee_save>() - 8usize];
    ["Alignment of paravirt_callee_save"][::std::mem::align_of::<paravirt_callee_save>() - 8usize];
    ["Offset of field: paravirt_callee_save::func"]
        [::std::mem::offset_of!(paravirt_callee_save, func) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pv_info {
    pub extra_user_64bit_cs: u16_,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pv_info"][::std::mem::size_of::<pv_info>() - 16usize];
    ["Alignment of pv_info"][::std::mem::align_of::<pv_info>() - 8usize];
    ["Offset of field: pv_info::extra_user_64bit_cs"]
        [::std::mem::offset_of!(pv_info, extra_user_64bit_cs) - 0usize];
    ["Offset of field: pv_info::name"][::std::mem::offset_of!(pv_info, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pv_lazy_ops {
    pub enter: ::std::option::Option<unsafe extern "C" fn()>,
    pub leave: ::std::option::Option<unsafe extern "C" fn()>,
    pub flush: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pv_lazy_ops"][::std::mem::size_of::<pv_lazy_ops>() - 24usize];
    ["Alignment of pv_lazy_ops"][::std::mem::align_of::<pv_lazy_ops>() - 8usize];
    ["Offset of field: pv_lazy_ops::enter"][::std::mem::offset_of!(pv_lazy_ops, enter) - 0usize];
    ["Offset of field: pv_lazy_ops::leave"][::std::mem::offset_of!(pv_lazy_ops, leave) - 8usize];
    ["Offset of field: pv_lazy_ops::flush"][::std::mem::offset_of!(pv_lazy_ops, flush) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pv_cpu_ops {
    pub io_delay: ::std::option::Option<unsafe extern "C" fn()>,
    pub get_debugreg: ::std::option::Option<
        unsafe extern "C" fn(regno: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong,
    >,
    pub set_debugreg: ::std::option::Option<
        unsafe extern "C" fn(regno: ::std::os::raw::c_int, value: ::std::os::raw::c_ulong),
    >,
    pub read_cr0: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    pub write_cr0: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong)>,
    pub write_cr4: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong)>,
    pub load_tr_desc: ::std::option::Option<unsafe extern "C" fn()>,
    pub load_gdt: ::std::option::Option<unsafe extern "C" fn(arg1: *const desc_ptr)>,
    pub load_idt: ::std::option::Option<unsafe extern "C" fn(arg1: *const desc_ptr)>,
    pub set_ldt: ::std::option::Option<
        unsafe extern "C" fn(desc: *const ::std::os::raw::c_void, entries: ::std::os::raw::c_uint),
    >,
    pub store_tr: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    pub load_tls: ::std::option::Option<
        unsafe extern "C" fn(t: *mut thread_struct, cpu: ::std::os::raw::c_uint),
    >,
    pub load_gs_index: ::std::option::Option<unsafe extern "C" fn(idx: ::std::os::raw::c_uint)>,
    pub write_ldt_entry: ::std::option::Option<
        unsafe extern "C" fn(
            ldt: *mut desc_struct,
            entrynum: ::std::os::raw::c_int,
            desc: *const ::std::os::raw::c_void,
        ),
    >,
    pub write_gdt_entry: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut desc_struct,
            entrynum: ::std::os::raw::c_int,
            desc: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub write_idt_entry: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut gate_desc,
            entrynum: ::std::os::raw::c_int,
            gate: *const gate_desc,
        ),
    >,
    pub alloc_ldt: ::std::option::Option<
        unsafe extern "C" fn(ldt: *mut desc_struct, entries: ::std::os::raw::c_uint),
    >,
    pub free_ldt: ::std::option::Option<
        unsafe extern "C" fn(ldt: *mut desc_struct, entries: ::std::os::raw::c_uint),
    >,
    pub load_sp0: ::std::option::Option<unsafe extern "C" fn(sp0: ::std::os::raw::c_ulong)>,
    pub invalidate_io_bitmap: ::std::option::Option<unsafe extern "C" fn()>,
    pub update_io_bitmap: ::std::option::Option<unsafe extern "C" fn()>,
    pub wbinvd: ::std::option::Option<unsafe extern "C" fn()>,
    pub cpuid: ::std::option::Option<
        unsafe extern "C" fn(
            eax: *mut ::std::os::raw::c_uint,
            ebx: *mut ::std::os::raw::c_uint,
            ecx: *mut ::std::os::raw::c_uint,
            edx: *mut ::std::os::raw::c_uint,
        ),
    >,
    pub read_msr: ::std::option::Option<unsafe extern "C" fn(msr: ::std::os::raw::c_uint) -> u64_>,
    pub write_msr: ::std::option::Option<
        unsafe extern "C" fn(
            msr: ::std::os::raw::c_uint,
            low: ::std::os::raw::c_uint,
            high: ::std::os::raw::c_uint,
        ),
    >,
    pub read_msr_safe: ::std::option::Option<
        unsafe extern "C" fn(msr: ::std::os::raw::c_uint, err: *mut ::std::os::raw::c_int) -> u64_,
    >,
    pub write_msr_safe: ::std::option::Option<
        unsafe extern "C" fn(
            msr: ::std::os::raw::c_uint,
            low: ::std::os::raw::c_uint,
            high: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_pmc:
        ::std::option::Option<unsafe extern "C" fn(counter: ::std::os::raw::c_int) -> u64_>,
    pub start_context_switch: ::std::option::Option<unsafe extern "C" fn(prev: *mut task_struct)>,
    pub end_context_switch: ::std::option::Option<unsafe extern "C" fn(next: *mut task_struct)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pv_cpu_ops"][::std::mem::size_of::<pv_cpu_ops>() - 240usize];
    ["Alignment of pv_cpu_ops"][::std::mem::align_of::<pv_cpu_ops>() - 8usize];
    ["Offset of field: pv_cpu_ops::io_delay"]
        [::std::mem::offset_of!(pv_cpu_ops, io_delay) - 0usize];
    ["Offset of field: pv_cpu_ops::get_debugreg"]
        [::std::mem::offset_of!(pv_cpu_ops, get_debugreg) - 8usize];
    ["Offset of field: pv_cpu_ops::set_debugreg"]
        [::std::mem::offset_of!(pv_cpu_ops, set_debugreg) - 16usize];
    ["Offset of field: pv_cpu_ops::read_cr0"]
        [::std::mem::offset_of!(pv_cpu_ops, read_cr0) - 24usize];
    ["Offset of field: pv_cpu_ops::write_cr0"]
        [::std::mem::offset_of!(pv_cpu_ops, write_cr0) - 32usize];
    ["Offset of field: pv_cpu_ops::write_cr4"]
        [::std::mem::offset_of!(pv_cpu_ops, write_cr4) - 40usize];
    ["Offset of field: pv_cpu_ops::load_tr_desc"]
        [::std::mem::offset_of!(pv_cpu_ops, load_tr_desc) - 48usize];
    ["Offset of field: pv_cpu_ops::load_gdt"]
        [::std::mem::offset_of!(pv_cpu_ops, load_gdt) - 56usize];
    ["Offset of field: pv_cpu_ops::load_idt"]
        [::std::mem::offset_of!(pv_cpu_ops, load_idt) - 64usize];
    ["Offset of field: pv_cpu_ops::set_ldt"][::std::mem::offset_of!(pv_cpu_ops, set_ldt) - 72usize];
    ["Offset of field: pv_cpu_ops::store_tr"]
        [::std::mem::offset_of!(pv_cpu_ops, store_tr) - 80usize];
    ["Offset of field: pv_cpu_ops::load_tls"]
        [::std::mem::offset_of!(pv_cpu_ops, load_tls) - 88usize];
    ["Offset of field: pv_cpu_ops::load_gs_index"]
        [::std::mem::offset_of!(pv_cpu_ops, load_gs_index) - 96usize];
    ["Offset of field: pv_cpu_ops::write_ldt_entry"]
        [::std::mem::offset_of!(pv_cpu_ops, write_ldt_entry) - 104usize];
    ["Offset of field: pv_cpu_ops::write_gdt_entry"]
        [::std::mem::offset_of!(pv_cpu_ops, write_gdt_entry) - 112usize];
    ["Offset of field: pv_cpu_ops::write_idt_entry"]
        [::std::mem::offset_of!(pv_cpu_ops, write_idt_entry) - 120usize];
    ["Offset of field: pv_cpu_ops::alloc_ldt"]
        [::std::mem::offset_of!(pv_cpu_ops, alloc_ldt) - 128usize];
    ["Offset of field: pv_cpu_ops::free_ldt"]
        [::std::mem::offset_of!(pv_cpu_ops, free_ldt) - 136usize];
    ["Offset of field: pv_cpu_ops::load_sp0"]
        [::std::mem::offset_of!(pv_cpu_ops, load_sp0) - 144usize];
    ["Offset of field: pv_cpu_ops::invalidate_io_bitmap"]
        [::std::mem::offset_of!(pv_cpu_ops, invalidate_io_bitmap) - 152usize];
    ["Offset of field: pv_cpu_ops::update_io_bitmap"]
        [::std::mem::offset_of!(pv_cpu_ops, update_io_bitmap) - 160usize];
    ["Offset of field: pv_cpu_ops::wbinvd"][::std::mem::offset_of!(pv_cpu_ops, wbinvd) - 168usize];
    ["Offset of field: pv_cpu_ops::cpuid"][::std::mem::offset_of!(pv_cpu_ops, cpuid) - 176usize];
    ["Offset of field: pv_cpu_ops::read_msr"]
        [::std::mem::offset_of!(pv_cpu_ops, read_msr) - 184usize];
    ["Offset of field: pv_cpu_ops::write_msr"]
        [::std::mem::offset_of!(pv_cpu_ops, write_msr) - 192usize];
    ["Offset of field: pv_cpu_ops::read_msr_safe"]
        [::std::mem::offset_of!(pv_cpu_ops, read_msr_safe) - 200usize];
    ["Offset of field: pv_cpu_ops::write_msr_safe"]
        [::std::mem::offset_of!(pv_cpu_ops, write_msr_safe) - 208usize];
    ["Offset of field: pv_cpu_ops::read_pmc"]
        [::std::mem::offset_of!(pv_cpu_ops, read_pmc) - 216usize];
    ["Offset of field: pv_cpu_ops::start_context_switch"]
        [::std::mem::offset_of!(pv_cpu_ops, start_context_switch) - 224usize];
    ["Offset of field: pv_cpu_ops::end_context_switch"]
        [::std::mem::offset_of!(pv_cpu_ops, end_context_switch) - 232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pv_irq_ops {
    pub save_fl: paravirt_callee_save,
    pub irq_disable: paravirt_callee_save,
    pub irq_enable: paravirt_callee_save,
    pub safe_halt: ::std::option::Option<unsafe extern "C" fn()>,
    pub halt: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pv_irq_ops"][::std::mem::size_of::<pv_irq_ops>() - 40usize];
    ["Alignment of pv_irq_ops"][::std::mem::align_of::<pv_irq_ops>() - 8usize];
    ["Offset of field: pv_irq_ops::save_fl"][::std::mem::offset_of!(pv_irq_ops, save_fl) - 0usize];
    ["Offset of field: pv_irq_ops::irq_disable"]
        [::std::mem::offset_of!(pv_irq_ops, irq_disable) - 8usize];
    ["Offset of field: pv_irq_ops::irq_enable"]
        [::std::mem::offset_of!(pv_irq_ops, irq_enable) - 16usize];
    ["Offset of field: pv_irq_ops::safe_halt"]
        [::std::mem::offset_of!(pv_irq_ops, safe_halt) - 24usize];
    ["Offset of field: pv_irq_ops::halt"][::std::mem::offset_of!(pv_irq_ops, halt) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pv_mmu_ops {
    pub flush_tlb_user: ::std::option::Option<unsafe extern "C" fn()>,
    pub flush_tlb_kernel: ::std::option::Option<unsafe extern "C" fn()>,
    pub flush_tlb_one_user:
        ::std::option::Option<unsafe extern "C" fn(addr: ::std::os::raw::c_ulong)>,
    pub flush_tlb_multi: ::std::option::Option<
        unsafe extern "C" fn(cpus: *const cpumask, info: *const flush_tlb_info),
    >,
    pub tlb_remove_table: ::std::option::Option<
        unsafe extern "C" fn(tlb: *mut mmu_gather, table: *mut ::std::os::raw::c_void),
    >,
    pub exit_mmap: ::std::option::Option<unsafe extern "C" fn(mm: *mut mm_struct)>,
    pub notify_page_enc_status_changed: ::std::option::Option<
        unsafe extern "C" fn(
            pfn: ::std::os::raw::c_ulong,
            npages: ::std::os::raw::c_int,
            enc: bool_,
        ),
    >,
    pub read_cr2: paravirt_callee_save,
    pub write_cr2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong)>,
    pub read_cr3: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    pub write_cr3: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong)>,
    pub enter_mmap: ::std::option::Option<unsafe extern "C" fn(mm: *mut mm_struct)>,
    pub pgd_alloc:
        ::std::option::Option<unsafe extern "C" fn(mm: *mut mm_struct) -> ::std::os::raw::c_int>,
    pub pgd_free: ::std::option::Option<unsafe extern "C" fn(mm: *mut mm_struct, pgd: *mut pgd_t)>,
    pub alloc_pte: ::std::option::Option<
        unsafe extern "C" fn(mm: *mut mm_struct, pfn: ::std::os::raw::c_ulong),
    >,
    pub alloc_pmd: ::std::option::Option<
        unsafe extern "C" fn(mm: *mut mm_struct, pfn: ::std::os::raw::c_ulong),
    >,
    pub alloc_pud: ::std::option::Option<
        unsafe extern "C" fn(mm: *mut mm_struct, pfn: ::std::os::raw::c_ulong),
    >,
    pub alloc_p4d: ::std::option::Option<
        unsafe extern "C" fn(mm: *mut mm_struct, pfn: ::std::os::raw::c_ulong),
    >,
    pub release_pte: ::std::option::Option<unsafe extern "C" fn(pfn: ::std::os::raw::c_ulong)>,
    pub release_pmd: ::std::option::Option<unsafe extern "C" fn(pfn: ::std::os::raw::c_ulong)>,
    pub release_pud: ::std::option::Option<unsafe extern "C" fn(pfn: ::std::os::raw::c_ulong)>,
    pub release_p4d: ::std::option::Option<unsafe extern "C" fn(pfn: ::std::os::raw::c_ulong)>,
    pub set_pte: ::std::option::Option<unsafe extern "C" fn(ptep: *mut pte_t, pteval: pte_t)>,
    pub set_pmd: ::std::option::Option<unsafe extern "C" fn(pmdp: *mut pmd_t, pmdval: pmd_t)>,
    pub ptep_modify_prot_start: ::std::option::Option<
        unsafe extern "C" fn(
            vma: *mut vm_area_struct,
            addr: ::std::os::raw::c_ulong,
            ptep: *mut pte_t,
        ) -> pte_t,
    >,
    pub ptep_modify_prot_commit: ::std::option::Option<
        unsafe extern "C" fn(
            vma: *mut vm_area_struct,
            addr: ::std::os::raw::c_ulong,
            ptep: *mut pte_t,
            pte: pte_t,
        ),
    >,
    pub pte_val: paravirt_callee_save,
    pub make_pte: paravirt_callee_save,
    pub pgd_val: paravirt_callee_save,
    pub make_pgd: paravirt_callee_save,
    pub set_pud: ::std::option::Option<unsafe extern "C" fn(pudp: *mut pud_t, pudval: pud_t)>,
    pub pmd_val: paravirt_callee_save,
    pub make_pmd: paravirt_callee_save,
    pub pud_val: paravirt_callee_save,
    pub make_pud: paravirt_callee_save,
    pub set_p4d: ::std::option::Option<unsafe extern "C" fn(p4dp: *mut p4d_t, p4dval: p4d_t)>,
    pub p4d_val: paravirt_callee_save,
    pub make_p4d: paravirt_callee_save,
    pub set_pgd: ::std::option::Option<unsafe extern "C" fn(pgdp: *mut pgd_t, pgdval: pgd_t)>,
    pub lazy_mode: pv_lazy_ops,
    pub set_fixmap: ::std::option::Option<
        unsafe extern "C" fn(idx: ::std::os::raw::c_uint, phys: phys_addr_t, flags: pgprot_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pv_mmu_ops"][::std::mem::size_of::<pv_mmu_ops>() - 344usize];
    ["Alignment of pv_mmu_ops"][::std::mem::align_of::<pv_mmu_ops>() - 8usize];
    ["Offset of field: pv_mmu_ops::flush_tlb_user"]
        [::std::mem::offset_of!(pv_mmu_ops, flush_tlb_user) - 0usize];
    ["Offset of field: pv_mmu_ops::flush_tlb_kernel"]
        [::std::mem::offset_of!(pv_mmu_ops, flush_tlb_kernel) - 8usize];
    ["Offset of field: pv_mmu_ops::flush_tlb_one_user"]
        [::std::mem::offset_of!(pv_mmu_ops, flush_tlb_one_user) - 16usize];
    ["Offset of field: pv_mmu_ops::flush_tlb_multi"]
        [::std::mem::offset_of!(pv_mmu_ops, flush_tlb_multi) - 24usize];
    ["Offset of field: pv_mmu_ops::tlb_remove_table"]
        [::std::mem::offset_of!(pv_mmu_ops, tlb_remove_table) - 32usize];
    ["Offset of field: pv_mmu_ops::exit_mmap"]
        [::std::mem::offset_of!(pv_mmu_ops, exit_mmap) - 40usize];
    ["Offset of field: pv_mmu_ops::notify_page_enc_status_changed"]
        [::std::mem::offset_of!(pv_mmu_ops, notify_page_enc_status_changed) - 48usize];
    ["Offset of field: pv_mmu_ops::read_cr2"]
        [::std::mem::offset_of!(pv_mmu_ops, read_cr2) - 56usize];
    ["Offset of field: pv_mmu_ops::write_cr2"]
        [::std::mem::offset_of!(pv_mmu_ops, write_cr2) - 64usize];
    ["Offset of field: pv_mmu_ops::read_cr3"]
        [::std::mem::offset_of!(pv_mmu_ops, read_cr3) - 72usize];
    ["Offset of field: pv_mmu_ops::write_cr3"]
        [::std::mem::offset_of!(pv_mmu_ops, write_cr3) - 80usize];
    ["Offset of field: pv_mmu_ops::enter_mmap"]
        [::std::mem::offset_of!(pv_mmu_ops, enter_mmap) - 88usize];
    ["Offset of field: pv_mmu_ops::pgd_alloc"]
        [::std::mem::offset_of!(pv_mmu_ops, pgd_alloc) - 96usize];
    ["Offset of field: pv_mmu_ops::pgd_free"]
        [::std::mem::offset_of!(pv_mmu_ops, pgd_free) - 104usize];
    ["Offset of field: pv_mmu_ops::alloc_pte"]
        [::std::mem::offset_of!(pv_mmu_ops, alloc_pte) - 112usize];
    ["Offset of field: pv_mmu_ops::alloc_pmd"]
        [::std::mem::offset_of!(pv_mmu_ops, alloc_pmd) - 120usize];
    ["Offset of field: pv_mmu_ops::alloc_pud"]
        [::std::mem::offset_of!(pv_mmu_ops, alloc_pud) - 128usize];
    ["Offset of field: pv_mmu_ops::alloc_p4d"]
        [::std::mem::offset_of!(pv_mmu_ops, alloc_p4d) - 136usize];
    ["Offset of field: pv_mmu_ops::release_pte"]
        [::std::mem::offset_of!(pv_mmu_ops, release_pte) - 144usize];
    ["Offset of field: pv_mmu_ops::release_pmd"]
        [::std::mem::offset_of!(pv_mmu_ops, release_pmd) - 152usize];
    ["Offset of field: pv_mmu_ops::release_pud"]
        [::std::mem::offset_of!(pv_mmu_ops, release_pud) - 160usize];
    ["Offset of field: pv_mmu_ops::release_p4d"]
        [::std::mem::offset_of!(pv_mmu_ops, release_p4d) - 168usize];
    ["Offset of field: pv_mmu_ops::set_pte"]
        [::std::mem::offset_of!(pv_mmu_ops, set_pte) - 176usize];
    ["Offset of field: pv_mmu_ops::set_pmd"]
        [::std::mem::offset_of!(pv_mmu_ops, set_pmd) - 184usize];
    ["Offset of field: pv_mmu_ops::ptep_modify_prot_start"]
        [::std::mem::offset_of!(pv_mmu_ops, ptep_modify_prot_start) - 192usize];
    ["Offset of field: pv_mmu_ops::ptep_modify_prot_commit"]
        [::std::mem::offset_of!(pv_mmu_ops, ptep_modify_prot_commit) - 200usize];
    ["Offset of field: pv_mmu_ops::pte_val"]
        [::std::mem::offset_of!(pv_mmu_ops, pte_val) - 208usize];
    ["Offset of field: pv_mmu_ops::make_pte"]
        [::std::mem::offset_of!(pv_mmu_ops, make_pte) - 216usize];
    ["Offset of field: pv_mmu_ops::pgd_val"]
        [::std::mem::offset_of!(pv_mmu_ops, pgd_val) - 224usize];
    ["Offset of field: pv_mmu_ops::make_pgd"]
        [::std::mem::offset_of!(pv_mmu_ops, make_pgd) - 232usize];
    ["Offset of field: pv_mmu_ops::set_pud"]
        [::std::mem::offset_of!(pv_mmu_ops, set_pud) - 240usize];
    ["Offset of field: pv_mmu_ops::pmd_val"]
        [::std::mem::offset_of!(pv_mmu_ops, pmd_val) - 248usize];
    ["Offset of field: pv_mmu_ops::make_pmd"]
        [::std::mem::offset_of!(pv_mmu_ops, make_pmd) - 256usize];
    ["Offset of field: pv_mmu_ops::pud_val"]
        [::std::mem::offset_of!(pv_mmu_ops, pud_val) - 264usize];
    ["Offset of field: pv_mmu_ops::make_pud"]
        [::std::mem::offset_of!(pv_mmu_ops, make_pud) - 272usize];
    ["Offset of field: pv_mmu_ops::set_p4d"]
        [::std::mem::offset_of!(pv_mmu_ops, set_p4d) - 280usize];
    ["Offset of field: pv_mmu_ops::p4d_val"]
        [::std::mem::offset_of!(pv_mmu_ops, p4d_val) - 288usize];
    ["Offset of field: pv_mmu_ops::make_p4d"]
        [::std::mem::offset_of!(pv_mmu_ops, make_p4d) - 296usize];
    ["Offset of field: pv_mmu_ops::set_pgd"]
        [::std::mem::offset_of!(pv_mmu_ops, set_pgd) - 304usize];
    ["Offset of field: pv_mmu_ops::lazy_mode"]
        [::std::mem::offset_of!(pv_mmu_ops, lazy_mode) - 312usize];
    ["Offset of field: pv_mmu_ops::set_fixmap"]
        [::std::mem::offset_of!(pv_mmu_ops, set_fixmap) - 336usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_spinlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pv_lock_ops {
    pub queued_spin_lock_slowpath:
        ::std::option::Option<unsafe extern "C" fn(lock: *mut qspinlock, val: u32_)>,
    pub queued_spin_unlock: paravirt_callee_save,
    pub wait: ::std::option::Option<unsafe extern "C" fn(ptr: *mut u8_, val: u8_)>,
    pub kick: ::std::option::Option<unsafe extern "C" fn(cpu: ::std::os::raw::c_int)>,
    pub vcpu_is_preempted: paravirt_callee_save,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pv_lock_ops"][::std::mem::size_of::<pv_lock_ops>() - 40usize];
    ["Alignment of pv_lock_ops"][::std::mem::align_of::<pv_lock_ops>() - 8usize];
    ["Offset of field: pv_lock_ops::queued_spin_lock_slowpath"]
        [::std::mem::offset_of!(pv_lock_ops, queued_spin_lock_slowpath) - 0usize];
    ["Offset of field: pv_lock_ops::queued_spin_unlock"]
        [::std::mem::offset_of!(pv_lock_ops, queued_spin_unlock) - 8usize];
    ["Offset of field: pv_lock_ops::wait"][::std::mem::offset_of!(pv_lock_ops, wait) - 16usize];
    ["Offset of field: pv_lock_ops::kick"][::std::mem::offset_of!(pv_lock_ops, kick) - 24usize];
    ["Offset of field: pv_lock_ops::vcpu_is_preempted"]
        [::std::mem::offset_of!(pv_lock_ops, vcpu_is_preempted) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct paravirt_patch_template {
    pub cpu: pv_cpu_ops,
    pub irq: pv_irq_ops,
    pub mmu: pv_mmu_ops,
    pub lock: pv_lock_ops,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of paravirt_patch_template"]
        [::std::mem::size_of::<paravirt_patch_template>() - 664usize];
    ["Alignment of paravirt_patch_template"]
        [::std::mem::align_of::<paravirt_patch_template>() - 8usize];
    ["Offset of field: paravirt_patch_template::cpu"]
        [::std::mem::offset_of!(paravirt_patch_template, cpu) - 0usize];
    ["Offset of field: paravirt_patch_template::irq"]
        [::std::mem::offset_of!(paravirt_patch_template, irq) - 240usize];
    ["Offset of field: paravirt_patch_template::mmu"]
        [::std::mem::offset_of!(paravirt_patch_template, mmu) - 280usize];
    ["Offset of field: paravirt_patch_template::lock"]
        [::std::mem::offset_of!(paravirt_patch_template, lock) - 624usize];
};
extern "C" {
    pub static mut pv_info: pv_info;
}
extern "C" {
    pub static mut pv_ops: paravirt_patch_template;
}
extern "C" {
    pub fn paravirt_disable_iospace() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn paravirt_ret0() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _paravirt_ident_64(arg1: u64_) -> u64_;
}
extern "C" {
    pub fn pv_native_save_fl() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pv_native_irq_disable();
}
extern "C" {
    pub fn pv_native_irq_enable();
}
extern "C" {
    pub fn pv_native_read_cr2() -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_desc {
    pub entry_number: ::std::os::raw::c_uint,
    pub base_addr: ::std::os::raw::c_uint,
    pub limit: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_desc"][::std::mem::size_of::<user_desc>() - 16usize];
    ["Alignment of user_desc"][::std::mem::align_of::<user_desc>() - 4usize];
    ["Offset of field: user_desc::entry_number"]
        [::std::mem::offset_of!(user_desc, entry_number) - 0usize];
    ["Offset of field: user_desc::base_addr"]
        [::std::mem::offset_of!(user_desc, base_addr) - 4usize];
    ["Offset of field: user_desc::limit"][::std::mem::offset_of!(user_desc, limit) - 8usize];
};
impl user_desc {
    #[inline]
    pub fn seg_32bit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_32bit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn contents(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_contents(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn read_exec_only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_exec_only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_in_pages(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_limit_in_pages(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_not_present(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_not_present(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn useable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_useable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lm(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lm(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        seg_32bit: ::std::os::raw::c_uint,
        contents: ::std::os::raw::c_uint,
        read_exec_only: ::std::os::raw::c_uint,
        limit_in_pages: ::std::os::raw::c_uint,
        seg_not_present: ::std::os::raw::c_uint,
        useable: ::std::os::raw::c_uint,
        lm: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let seg_32bit: u32 = unsafe { ::std::mem::transmute(seg_32bit) };
            seg_32bit as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let contents: u32 = unsafe { ::std::mem::transmute(contents) };
            contents as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let read_exec_only: u32 = unsafe { ::std::mem::transmute(read_exec_only) };
            read_exec_only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let limit_in_pages: u32 = unsafe { ::std::mem::transmute(limit_in_pages) };
            limit_in_pages as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let seg_not_present: u32 = unsafe { ::std::mem::transmute(seg_not_present) };
            seg_not_present as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let useable: u32 = unsafe { ::std::mem::transmute(useable) };
            useable as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let lm: u32 = unsafe { ::std::mem::transmute(lm) };
            lm as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn syscall_init();
}
extern "C" {
    pub fn entry_SYSCALL_64();
}
extern "C" {
    pub fn entry_SYSCALL_64_safe_stack();
}
extern "C" {
    pub fn entry_SYSRETQ_unsafe_stack();
}
extern "C" {
    pub fn entry_SYSRETQ_end();
}
extern "C" {
    pub fn do_arch_prctl_64(
        task: *mut task_struct,
        option: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn entry_SYSENTER_compat();
}
extern "C" {
    pub fn __end_entry_SYSENTER_compat();
}
extern "C" {
    pub fn entry_SYSCALL_compat();
}
extern "C" {
    pub fn entry_SYSCALL_compat_safe_stack();
}
extern "C" {
    pub fn entry_SYSRETL_compat_unsafe_stack();
}
extern "C" {
    pub fn entry_SYSRETL_compat_end();
}
extern "C" {
    pub fn x86_configure_nx();
}
extern "C" {
    pub static mut reboot_force: ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_arch_prctl_common(
        option: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn profile_pc(regs: *mut pt_regs) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn convert_ip_to_linear(
        child: *mut task_struct,
        regs: *mut pt_regs,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn send_sigtrap(
        regs: *mut pt_regs,
        error_code: ::std::os::raw::c_int,
        si_code: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn regs_query_register_offset(name: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regs_query_register_name(
        offset: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn copy_from_kernel_nofault(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn do_get_thread_area(
        p: *mut task_struct,
        idx: ::std::os::raw::c_int,
        info: *mut user_desc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_set_thread_area(
        p: *mut task_struct,
        idx: ::std::os::raw::c_int,
        info: *mut user_desc,
        can_allocate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct math_emu_info {
    pub ___orig_eip: ::std::os::raw::c_long,
    pub regs: *mut pt_regs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of math_emu_info"][::std::mem::size_of::<math_emu_info>() - 16usize];
    ["Alignment of math_emu_info"][::std::mem::align_of::<math_emu_info>() - 8usize];
    ["Offset of field: math_emu_info::___orig_eip"]
        [::std::mem::offset_of!(math_emu_info, ___orig_eip) - 0usize];
    ["Offset of field: math_emu_info::regs"][::std::mem::offset_of!(math_emu_info, regs) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __u32,
    pub extended_size: __u32,
    pub xfeatures: __u64,
    pub xstate_size: __u32,
    pub padding: [__u32; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpx_sw_bytes"][::std::mem::size_of::<_fpx_sw_bytes>() - 48usize];
    ["Alignment of _fpx_sw_bytes"][::std::mem::align_of::<_fpx_sw_bytes>() - 8usize];
    ["Offset of field: _fpx_sw_bytes::magic1"]
        [::std::mem::offset_of!(_fpx_sw_bytes, magic1) - 0usize];
    ["Offset of field: _fpx_sw_bytes::extended_size"]
        [::std::mem::offset_of!(_fpx_sw_bytes, extended_size) - 4usize];
    ["Offset of field: _fpx_sw_bytes::xfeatures"]
        [::std::mem::offset_of!(_fpx_sw_bytes, xfeatures) - 8usize];
    ["Offset of field: _fpx_sw_bytes::xstate_size"]
        [::std::mem::offset_of!(_fpx_sw_bytes, xstate_size) - 16usize];
    ["Offset of field: _fpx_sw_bytes::padding"]
        [::std::mem::offset_of!(_fpx_sw_bytes, padding) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [__u16; 4usize],
    pub exponent: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpreg"][::std::mem::size_of::<_fpreg>() - 10usize];
    ["Alignment of _fpreg"][::std::mem::align_of::<_fpreg>() - 2usize];
    ["Offset of field: _fpreg::significand"][::std::mem::offset_of!(_fpreg, significand) - 0usize];
    ["Offset of field: _fpreg::exponent"][::std::mem::offset_of!(_fpreg, exponent) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [__u16; 4usize],
    pub exponent: __u16,
    pub padding: [__u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpxreg"][::std::mem::size_of::<_fpxreg>() - 16usize];
    ["Alignment of _fpxreg"][::std::mem::align_of::<_fpxreg>() - 2usize];
    ["Offset of field: _fpxreg::significand"]
        [::std::mem::offset_of!(_fpxreg, significand) - 0usize];
    ["Offset of field: _fpxreg::exponent"][::std::mem::offset_of!(_fpxreg, exponent) - 8usize];
    ["Offset of field: _fpxreg::padding"][::std::mem::offset_of!(_fpxreg, padding) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmmreg"][::std::mem::size_of::<_xmmreg>() - 16usize];
    ["Alignment of _xmmreg"][::std::mem::align_of::<_xmmreg>() - 4usize];
    ["Offset of field: _xmmreg::element"][::std::mem::offset_of!(_xmmreg, element) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpstate_32 {
    pub cw: __u32,
    pub sw: __u32,
    pub tag: __u32,
    pub ipoff: __u32,
    pub cssel: __u32,
    pub dataoff: __u32,
    pub datasel: __u32,
    pub _st: [_fpreg; 8usize],
    pub status: __u16,
    pub magic: __u16,
    pub _fxsr_env: [__u32; 6usize],
    pub mxcsr: __u32,
    pub reserved: __u32,
    pub _fxsr_st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 8usize],
    pub __bindgen_anon_1: _fpstate_32__bindgen_ty_1,
    pub __bindgen_anon_2: _fpstate_32__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_32__bindgen_ty_1 {
    pub padding1: [__u32; 44usize],
    pub padding: [__u32; 44usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpstate_32__bindgen_ty_1"]
        [::std::mem::size_of::<_fpstate_32__bindgen_ty_1>() - 176usize];
    ["Alignment of _fpstate_32__bindgen_ty_1"]
        [::std::mem::align_of::<_fpstate_32__bindgen_ty_1>() - 4usize];
    ["Offset of field: _fpstate_32__bindgen_ty_1::padding1"]
        [::std::mem::offset_of!(_fpstate_32__bindgen_ty_1, padding1) - 0usize];
    ["Offset of field: _fpstate_32__bindgen_ty_1::padding"]
        [::std::mem::offset_of!(_fpstate_32__bindgen_ty_1, padding) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_32__bindgen_ty_2 {
    pub padding2: [__u32; 12usize],
    pub sw_reserved: _fpx_sw_bytes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpstate_32__bindgen_ty_2"]
        [::std::mem::size_of::<_fpstate_32__bindgen_ty_2>() - 48usize];
    ["Alignment of _fpstate_32__bindgen_ty_2"]
        [::std::mem::align_of::<_fpstate_32__bindgen_ty_2>() - 8usize];
    ["Offset of field: _fpstate_32__bindgen_ty_2::padding2"]
        [::std::mem::offset_of!(_fpstate_32__bindgen_ty_2, padding2) - 0usize];
    ["Offset of field: _fpstate_32__bindgen_ty_2::sw_reserved"]
        [::std::mem::offset_of!(_fpstate_32__bindgen_ty_2, sw_reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpstate_32"][::std::mem::size_of::<_fpstate_32>() - 624usize];
    ["Alignment of _fpstate_32"][::std::mem::align_of::<_fpstate_32>() - 8usize];
    ["Offset of field: _fpstate_32::cw"][::std::mem::offset_of!(_fpstate_32, cw) - 0usize];
    ["Offset of field: _fpstate_32::sw"][::std::mem::offset_of!(_fpstate_32, sw) - 4usize];
    ["Offset of field: _fpstate_32::tag"][::std::mem::offset_of!(_fpstate_32, tag) - 8usize];
    ["Offset of field: _fpstate_32::ipoff"][::std::mem::offset_of!(_fpstate_32, ipoff) - 12usize];
    ["Offset of field: _fpstate_32::cssel"][::std::mem::offset_of!(_fpstate_32, cssel) - 16usize];
    ["Offset of field: _fpstate_32::dataoff"]
        [::std::mem::offset_of!(_fpstate_32, dataoff) - 20usize];
    ["Offset of field: _fpstate_32::datasel"]
        [::std::mem::offset_of!(_fpstate_32, datasel) - 24usize];
    ["Offset of field: _fpstate_32::_st"][::std::mem::offset_of!(_fpstate_32, _st) - 28usize];
    ["Offset of field: _fpstate_32::status"]
        [::std::mem::offset_of!(_fpstate_32, status) - 108usize];
    ["Offset of field: _fpstate_32::magic"][::std::mem::offset_of!(_fpstate_32, magic) - 110usize];
    ["Offset of field: _fpstate_32::_fxsr_env"]
        [::std::mem::offset_of!(_fpstate_32, _fxsr_env) - 112usize];
    ["Offset of field: _fpstate_32::mxcsr"][::std::mem::offset_of!(_fpstate_32, mxcsr) - 136usize];
    ["Offset of field: _fpstate_32::reserved"]
        [::std::mem::offset_of!(_fpstate_32, reserved) - 140usize];
    ["Offset of field: _fpstate_32::_fxsr_st"]
        [::std::mem::offset_of!(_fpstate_32, _fxsr_st) - 144usize];
    ["Offset of field: _fpstate_32::_xmm"][::std::mem::offset_of!(_fpstate_32, _xmm) - 272usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpstate_64 {
    pub cwd: __u16,
    pub swd: __u16,
    pub twd: __u16,
    pub fop: __u16,
    pub rip: __u64,
    pub rdp: __u64,
    pub mxcsr: __u32,
    pub mxcsr_mask: __u32,
    pub st_space: [__u32; 32usize],
    pub xmm_space: [__u32; 64usize],
    pub reserved2: [__u32; 12usize],
    pub __bindgen_anon_1: _fpstate_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_64__bindgen_ty_1 {
    pub reserved3: [__u32; 12usize],
    pub sw_reserved: _fpx_sw_bytes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpstate_64__bindgen_ty_1"]
        [::std::mem::size_of::<_fpstate_64__bindgen_ty_1>() - 48usize];
    ["Alignment of _fpstate_64__bindgen_ty_1"]
        [::std::mem::align_of::<_fpstate_64__bindgen_ty_1>() - 8usize];
    ["Offset of field: _fpstate_64__bindgen_ty_1::reserved3"]
        [::std::mem::offset_of!(_fpstate_64__bindgen_ty_1, reserved3) - 0usize];
    ["Offset of field: _fpstate_64__bindgen_ty_1::sw_reserved"]
        [::std::mem::offset_of!(_fpstate_64__bindgen_ty_1, sw_reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _fpstate_64"][::std::mem::size_of::<_fpstate_64>() - 512usize];
    ["Alignment of _fpstate_64"][::std::mem::align_of::<_fpstate_64>() - 8usize];
    ["Offset of field: _fpstate_64::cwd"][::std::mem::offset_of!(_fpstate_64, cwd) - 0usize];
    ["Offset of field: _fpstate_64::swd"][::std::mem::offset_of!(_fpstate_64, swd) - 2usize];
    ["Offset of field: _fpstate_64::twd"][::std::mem::offset_of!(_fpstate_64, twd) - 4usize];
    ["Offset of field: _fpstate_64::fop"][::std::mem::offset_of!(_fpstate_64, fop) - 6usize];
    ["Offset of field: _fpstate_64::rip"][::std::mem::offset_of!(_fpstate_64, rip) - 8usize];
    ["Offset of field: _fpstate_64::rdp"][::std::mem::offset_of!(_fpstate_64, rdp) - 16usize];
    ["Offset of field: _fpstate_64::mxcsr"][::std::mem::offset_of!(_fpstate_64, mxcsr) - 24usize];
    ["Offset of field: _fpstate_64::mxcsr_mask"]
        [::std::mem::offset_of!(_fpstate_64, mxcsr_mask) - 28usize];
    ["Offset of field: _fpstate_64::st_space"]
        [::std::mem::offset_of!(_fpstate_64, st_space) - 32usize];
    ["Offset of field: _fpstate_64::xmm_space"]
        [::std::mem::offset_of!(_fpstate_64, xmm_space) - 160usize];
    ["Offset of field: _fpstate_64::reserved2"]
        [::std::mem::offset_of!(_fpstate_64, reserved2) - 416usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _header {
    pub xfeatures: __u64,
    pub reserved1: [__u64; 2usize],
    pub reserved2: [__u64; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _header"][::std::mem::size_of::<_header>() - 64usize];
    ["Alignment of _header"][::std::mem::align_of::<_header>() - 8usize];
    ["Offset of field: _header::xfeatures"][::std::mem::offset_of!(_header, xfeatures) - 0usize];
    ["Offset of field: _header::reserved1"][::std::mem::offset_of!(_header, reserved1) - 8usize];
    ["Offset of field: _header::reserved2"][::std::mem::offset_of!(_header, reserved2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__u32; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ymmh_state"][::std::mem::size_of::<_ymmh_state>() - 256usize];
    ["Alignment of _ymmh_state"][::std::mem::align_of::<_ymmh_state>() - 4usize];
    ["Offset of field: _ymmh_state::ymmh_space"]
        [::std::mem::offset_of!(_ymmh_state, ymmh_space) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate_64,
    pub xstate_hdr: _header,
    pub ymmh: _ymmh_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xstate"][::std::mem::size_of::<_xstate>() - 832usize];
    ["Alignment of _xstate"][::std::mem::align_of::<_xstate>() - 8usize];
    ["Offset of field: _xstate::fpstate"][::std::mem::offset_of!(_xstate, fpstate) - 0usize];
    ["Offset of field: _xstate::xstate_hdr"]
        [::std::mem::offset_of!(_xstate, xstate_hdr) - 512usize];
    ["Offset of field: _xstate::ymmh"][::std::mem::offset_of!(_xstate, ymmh) - 576usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext_32 {
    pub gs: __u16,
    pub __gsh: __u16,
    pub fs: __u16,
    pub __fsh: __u16,
    pub es: __u16,
    pub __esh: __u16,
    pub ds: __u16,
    pub __dsh: __u16,
    pub di: __u32,
    pub si: __u32,
    pub bp: __u32,
    pub sp: __u32,
    pub bx: __u32,
    pub dx: __u32,
    pub cx: __u32,
    pub ax: __u32,
    pub trapno: __u32,
    pub err: __u32,
    pub ip: __u32,
    pub cs: __u16,
    pub __csh: __u16,
    pub flags: __u32,
    pub sp_at_signal: __u32,
    pub ss: __u16,
    pub __ssh: __u16,
    pub fpstate: __u32,
    pub oldmask: __u32,
    pub cr2: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigcontext_32"][::std::mem::size_of::<sigcontext_32>() - 88usize];
    ["Alignment of sigcontext_32"][::std::mem::align_of::<sigcontext_32>() - 4usize];
    ["Offset of field: sigcontext_32::gs"][::std::mem::offset_of!(sigcontext_32, gs) - 0usize];
    ["Offset of field: sigcontext_32::__gsh"]
        [::std::mem::offset_of!(sigcontext_32, __gsh) - 2usize];
    ["Offset of field: sigcontext_32::fs"][::std::mem::offset_of!(sigcontext_32, fs) - 4usize];
    ["Offset of field: sigcontext_32::__fsh"]
        [::std::mem::offset_of!(sigcontext_32, __fsh) - 6usize];
    ["Offset of field: sigcontext_32::es"][::std::mem::offset_of!(sigcontext_32, es) - 8usize];
    ["Offset of field: sigcontext_32::__esh"]
        [::std::mem::offset_of!(sigcontext_32, __esh) - 10usize];
    ["Offset of field: sigcontext_32::ds"][::std::mem::offset_of!(sigcontext_32, ds) - 12usize];
    ["Offset of field: sigcontext_32::__dsh"]
        [::std::mem::offset_of!(sigcontext_32, __dsh) - 14usize];
    ["Offset of field: sigcontext_32::di"][::std::mem::offset_of!(sigcontext_32, di) - 16usize];
    ["Offset of field: sigcontext_32::si"][::std::mem::offset_of!(sigcontext_32, si) - 20usize];
    ["Offset of field: sigcontext_32::bp"][::std::mem::offset_of!(sigcontext_32, bp) - 24usize];
    ["Offset of field: sigcontext_32::sp"][::std::mem::offset_of!(sigcontext_32, sp) - 28usize];
    ["Offset of field: sigcontext_32::bx"][::std::mem::offset_of!(sigcontext_32, bx) - 32usize];
    ["Offset of field: sigcontext_32::dx"][::std::mem::offset_of!(sigcontext_32, dx) - 36usize];
    ["Offset of field: sigcontext_32::cx"][::std::mem::offset_of!(sigcontext_32, cx) - 40usize];
    ["Offset of field: sigcontext_32::ax"][::std::mem::offset_of!(sigcontext_32, ax) - 44usize];
    ["Offset of field: sigcontext_32::trapno"]
        [::std::mem::offset_of!(sigcontext_32, trapno) - 48usize];
    ["Offset of field: sigcontext_32::err"][::std::mem::offset_of!(sigcontext_32, err) - 52usize];
    ["Offset of field: sigcontext_32::ip"][::std::mem::offset_of!(sigcontext_32, ip) - 56usize];
    ["Offset of field: sigcontext_32::cs"][::std::mem::offset_of!(sigcontext_32, cs) - 60usize];
    ["Offset of field: sigcontext_32::__csh"]
        [::std::mem::offset_of!(sigcontext_32, __csh) - 62usize];
    ["Offset of field: sigcontext_32::flags"]
        [::std::mem::offset_of!(sigcontext_32, flags) - 64usize];
    ["Offset of field: sigcontext_32::sp_at_signal"]
        [::std::mem::offset_of!(sigcontext_32, sp_at_signal) - 68usize];
    ["Offset of field: sigcontext_32::ss"][::std::mem::offset_of!(sigcontext_32, ss) - 72usize];
    ["Offset of field: sigcontext_32::__ssh"]
        [::std::mem::offset_of!(sigcontext_32, __ssh) - 74usize];
    ["Offset of field: sigcontext_32::fpstate"]
        [::std::mem::offset_of!(sigcontext_32, fpstate) - 76usize];
    ["Offset of field: sigcontext_32::oldmask"]
        [::std::mem::offset_of!(sigcontext_32, oldmask) - 80usize];
    ["Offset of field: sigcontext_32::cr2"][::std::mem::offset_of!(sigcontext_32, cr2) - 84usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext_64 {
    pub r8: __u64,
    pub r9: __u64,
    pub r10: __u64,
    pub r11: __u64,
    pub r12: __u64,
    pub r13: __u64,
    pub r14: __u64,
    pub r15: __u64,
    pub di: __u64,
    pub si: __u64,
    pub bp: __u64,
    pub bx: __u64,
    pub dx: __u64,
    pub ax: __u64,
    pub cx: __u64,
    pub sp: __u64,
    pub ip: __u64,
    pub flags: __u64,
    pub cs: __u16,
    pub gs: __u16,
    pub fs: __u16,
    pub ss: __u16,
    pub err: __u64,
    pub trapno: __u64,
    pub oldmask: __u64,
    pub cr2: __u64,
    pub fpstate: __u64,
    pub reserved1: [__u64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigcontext_64"][::std::mem::size_of::<sigcontext_64>() - 256usize];
    ["Alignment of sigcontext_64"][::std::mem::align_of::<sigcontext_64>() - 8usize];
    ["Offset of field: sigcontext_64::r8"][::std::mem::offset_of!(sigcontext_64, r8) - 0usize];
    ["Offset of field: sigcontext_64::r9"][::std::mem::offset_of!(sigcontext_64, r9) - 8usize];
    ["Offset of field: sigcontext_64::r10"][::std::mem::offset_of!(sigcontext_64, r10) - 16usize];
    ["Offset of field: sigcontext_64::r11"][::std::mem::offset_of!(sigcontext_64, r11) - 24usize];
    ["Offset of field: sigcontext_64::r12"][::std::mem::offset_of!(sigcontext_64, r12) - 32usize];
    ["Offset of field: sigcontext_64::r13"][::std::mem::offset_of!(sigcontext_64, r13) - 40usize];
    ["Offset of field: sigcontext_64::r14"][::std::mem::offset_of!(sigcontext_64, r14) - 48usize];
    ["Offset of field: sigcontext_64::r15"][::std::mem::offset_of!(sigcontext_64, r15) - 56usize];
    ["Offset of field: sigcontext_64::di"][::std::mem::offset_of!(sigcontext_64, di) - 64usize];
    ["Offset of field: sigcontext_64::si"][::std::mem::offset_of!(sigcontext_64, si) - 72usize];
    ["Offset of field: sigcontext_64::bp"][::std::mem::offset_of!(sigcontext_64, bp) - 80usize];
    ["Offset of field: sigcontext_64::bx"][::std::mem::offset_of!(sigcontext_64, bx) - 88usize];
    ["Offset of field: sigcontext_64::dx"][::std::mem::offset_of!(sigcontext_64, dx) - 96usize];
    ["Offset of field: sigcontext_64::ax"][::std::mem::offset_of!(sigcontext_64, ax) - 104usize];
    ["Offset of field: sigcontext_64::cx"][::std::mem::offset_of!(sigcontext_64, cx) - 112usize];
    ["Offset of field: sigcontext_64::sp"][::std::mem::offset_of!(sigcontext_64, sp) - 120usize];
    ["Offset of field: sigcontext_64::ip"][::std::mem::offset_of!(sigcontext_64, ip) - 128usize];
    ["Offset of field: sigcontext_64::flags"]
        [::std::mem::offset_of!(sigcontext_64, flags) - 136usize];
    ["Offset of field: sigcontext_64::cs"][::std::mem::offset_of!(sigcontext_64, cs) - 144usize];
    ["Offset of field: sigcontext_64::gs"][::std::mem::offset_of!(sigcontext_64, gs) - 146usize];
    ["Offset of field: sigcontext_64::fs"][::std::mem::offset_of!(sigcontext_64, fs) - 148usize];
    ["Offset of field: sigcontext_64::ss"][::std::mem::offset_of!(sigcontext_64, ss) - 150usize];
    ["Offset of field: sigcontext_64::err"][::std::mem::offset_of!(sigcontext_64, err) - 152usize];
    ["Offset of field: sigcontext_64::trapno"]
        [::std::mem::offset_of!(sigcontext_64, trapno) - 160usize];
    ["Offset of field: sigcontext_64::oldmask"]
        [::std::mem::offset_of!(sigcontext_64, oldmask) - 168usize];
    ["Offset of field: sigcontext_64::cr2"][::std::mem::offset_of!(sigcontext_64, cr2) - 176usize];
    ["Offset of field: sigcontext_64::fpstate"]
        [::std::mem::offset_of!(sigcontext_64, fpstate) - 184usize];
    ["Offset of field: sigcontext_64::reserved1"]
        [::std::mem::offset_of!(sigcontext_64, reserved1) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuid_regs {
    pub eax: u32_,
    pub ebx: u32_,
    pub ecx: u32_,
    pub edx: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpuid_regs"][::std::mem::size_of::<cpuid_regs>() - 16usize];
    ["Alignment of cpuid_regs"][::std::mem::align_of::<cpuid_regs>() - 4usize];
    ["Offset of field: cpuid_regs::eax"][::std::mem::offset_of!(cpuid_regs, eax) - 0usize];
    ["Offset of field: cpuid_regs::ebx"][::std::mem::offset_of!(cpuid_regs, ebx) - 4usize];
    ["Offset of field: cpuid_regs::ecx"][::std::mem::offset_of!(cpuid_regs, ecx) - 8usize];
    ["Offset of field: cpuid_regs::edx"][::std::mem::offset_of!(cpuid_regs, edx) - 12usize];
};
pub const cpuid_regs_idx_CPUID_EAX: cpuid_regs_idx = 0;
pub const cpuid_regs_idx_CPUID_EBX: cpuid_regs_idx = 1;
pub const cpuid_regs_idx_CPUID_ECX: cpuid_regs_idx = 2;
pub const cpuid_regs_idx_CPUID_EDX: cpuid_regs_idx = 3;
pub type cpuid_regs_idx = ::std::os::raw::c_uint;
extern "C" {
    pub fn dummy_steal_clock(cpu: ::std::os::raw::c_int) -> u64_;
}
extern "C" {
    pub fn dummy_sched_clock() -> u64_;
}
extern "C" {
    pub static mut __SCK__pv_steal_clock: static_call_key;
}
extern "C" {
    pub fn __SCT__pv_steal_clock(arg1: ::std::os::raw::c_int) -> u64_;
}
extern "C" {
    pub static mut __SCK__pv_sched_clock: static_call_key;
}
extern "C" {
    pub fn __SCT__pv_sched_clock() -> u64_;
}
extern "C" {
    pub fn paravirt_set_sched_clock(func: ::std::option::Option<unsafe extern "C" fn() -> u64_>);
}
extern "C" {
    pub static mut paravirt_steal_enabled: static_key;
}
extern "C" {
    pub static mut paravirt_steal_rq_enabled: static_key;
}
extern "C" {
    pub fn __native_queued_spin_unlock(lock: *mut qspinlock);
}
extern "C" {
    pub fn pv_is_native_spin_unlock() -> bool_;
}
extern "C" {
    pub fn __native_vcpu_is_preempted(cpu: ::std::os::raw::c_long) -> bool_;
}
extern "C" {
    pub fn pv_is_native_vcpu_is_preempted() -> bool_;
}
extern "C" {
    pub fn paravirt_set_cap();
}
extern "C" {
    pub fn native_flush_tlb_local();
}
extern "C" {
    pub fn native_flush_tlb_global();
}
extern "C" {
    pub fn native_flush_tlb_one_user(addr: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn native_flush_tlb_multi(cpumask: *const cpumask, info: *const flush_tlb_info);
}
extern "C" {
    pub fn pv_native_wbinvd();
}
extern "C" {
    pub fn __raw_callee_save___native_queued_spin_unlock(lock: *mut qspinlock);
}
extern "C" {
    pub fn __raw_callee_save___native_vcpu_is_preempted(cpu: ::std::os::raw::c_long) -> bool_;
}
extern "C" {
    pub fn default_banner();
}
extern "C" {
    pub fn native_pv_lock_init();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_irq_t {
    pub lock: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_irq_t"][::std::mem::size_of::<class_irq_t>() - 8usize];
    ["Alignment of class_irq_t"][::std::mem::align_of::<class_irq_t>() - 8usize];
    ["Offset of field: class_irq_t::lock"][::std::mem::offset_of!(class_irq_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_irqsave_t {
    pub lock: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_irqsave_t"][::std::mem::size_of::<class_irqsave_t>() - 16usize];
    ["Alignment of class_irqsave_t"][::std::mem::align_of::<class_irqsave_t>() - 8usize];
    ["Offset of field: class_irqsave_t::lock"]
        [::std::mem::offset_of!(class_irqsave_t, lock) - 0usize];
    ["Offset of field: class_irqsave_t::flags"]
        [::std::mem::offset_of!(class_irqsave_t, flags) - 8usize];
};
extern "C" {
    pub fn native_write_cr0(val: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn native_write_cr4(val: ::std::os::raw::c_ulong);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub status: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fregs_state"][::std::mem::size_of::<fregs_state>() - 112usize];
    ["Alignment of fregs_state"][::std::mem::align_of::<fregs_state>() - 4usize];
    ["Offset of field: fregs_state::cwd"][::std::mem::offset_of!(fregs_state, cwd) - 0usize];
    ["Offset of field: fregs_state::swd"][::std::mem::offset_of!(fregs_state, swd) - 4usize];
    ["Offset of field: fregs_state::twd"][::std::mem::offset_of!(fregs_state, twd) - 8usize];
    ["Offset of field: fregs_state::fip"][::std::mem::offset_of!(fregs_state, fip) - 12usize];
    ["Offset of field: fregs_state::fcs"][::std::mem::offset_of!(fregs_state, fcs) - 16usize];
    ["Offset of field: fregs_state::foo"][::std::mem::offset_of!(fregs_state, foo) - 20usize];
    ["Offset of field: fregs_state::fos"][::std::mem::offset_of!(fregs_state, fos) - 24usize];
    ["Offset of field: fregs_state::st_space"]
        [::std::mem::offset_of!(fregs_state, st_space) - 28usize];
    ["Offset of field: fregs_state::status"]
        [::std::mem::offset_of!(fregs_state, status) - 108usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct fxregs_state {
    pub cwd: u16_,
    pub swd: u16_,
    pub twd: u16_,
    pub fop: u16_,
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1,
    pub mxcsr: u32_,
    pub mxcsr_mask: u32_,
    pub st_space: [u32_; 32usize],
    pub xmm_space: [u32_; 64usize],
    pub padding: [u32_; 12usize],
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_1 {
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_1 {
    pub rip: u64_,
    pub rdp: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<fxregs_state__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of fxregs_state__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<fxregs_state__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_1::rip"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_1, rip) - 0usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_1::rdp"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_1, rdp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_2 {
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<fxregs_state__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of fxregs_state__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<fxregs_state__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::fip"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, fip) - 0usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::fcs"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, fcs) - 4usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::foo"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, foo) - 8usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::fos"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, fos) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_1"]
        [::std::mem::size_of::<fxregs_state__bindgen_ty_1>() - 16usize];
    ["Alignment of fxregs_state__bindgen_ty_1"]
        [::std::mem::align_of::<fxregs_state__bindgen_ty_1>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_2 {
    pub padding1: [u32_; 12usize],
    pub sw_reserved: [u32_; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_2"]
        [::std::mem::size_of::<fxregs_state__bindgen_ty_2>() - 48usize];
    ["Alignment of fxregs_state__bindgen_ty_2"]
        [::std::mem::align_of::<fxregs_state__bindgen_ty_2>() - 4usize];
    ["Offset of field: fxregs_state__bindgen_ty_2::padding1"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_2, padding1) - 0usize];
    ["Offset of field: fxregs_state__bindgen_ty_2::sw_reserved"]
        [::std::mem::offset_of!(fxregs_state__bindgen_ty_2, sw_reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state"][::std::mem::size_of::<fxregs_state>() - 512usize];
    ["Alignment of fxregs_state"][::std::mem::align_of::<fxregs_state>() - 16usize];
    ["Offset of field: fxregs_state::cwd"][::std::mem::offset_of!(fxregs_state, cwd) - 0usize];
    ["Offset of field: fxregs_state::swd"][::std::mem::offset_of!(fxregs_state, swd) - 2usize];
    ["Offset of field: fxregs_state::twd"][::std::mem::offset_of!(fxregs_state, twd) - 4usize];
    ["Offset of field: fxregs_state::fop"][::std::mem::offset_of!(fxregs_state, fop) - 6usize];
    ["Offset of field: fxregs_state::mxcsr"][::std::mem::offset_of!(fxregs_state, mxcsr) - 24usize];
    ["Offset of field: fxregs_state::mxcsr_mask"]
        [::std::mem::offset_of!(fxregs_state, mxcsr_mask) - 28usize];
    ["Offset of field: fxregs_state::st_space"]
        [::std::mem::offset_of!(fxregs_state, st_space) - 32usize];
    ["Offset of field: fxregs_state::xmm_space"]
        [::std::mem::offset_of!(fxregs_state, xmm_space) - 160usize];
    ["Offset of field: fxregs_state::padding"]
        [::std::mem::offset_of!(fxregs_state, padding) - 416usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub ftop: u8_,
    pub changed: u8_,
    pub lookahead: u8_,
    pub no_update: u8_,
    pub rm: u8_,
    pub alimit: u8_,
    pub info: *mut math_emu_info,
    pub entry_eip: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of swregs_state"][::std::mem::size_of::<swregs_state>() - 136usize];
    ["Alignment of swregs_state"][::std::mem::align_of::<swregs_state>() - 8usize];
    ["Offset of field: swregs_state::cwd"][::std::mem::offset_of!(swregs_state, cwd) - 0usize];
    ["Offset of field: swregs_state::swd"][::std::mem::offset_of!(swregs_state, swd) - 4usize];
    ["Offset of field: swregs_state::twd"][::std::mem::offset_of!(swregs_state, twd) - 8usize];
    ["Offset of field: swregs_state::fip"][::std::mem::offset_of!(swregs_state, fip) - 12usize];
    ["Offset of field: swregs_state::fcs"][::std::mem::offset_of!(swregs_state, fcs) - 16usize];
    ["Offset of field: swregs_state::foo"][::std::mem::offset_of!(swregs_state, foo) - 20usize];
    ["Offset of field: swregs_state::fos"][::std::mem::offset_of!(swregs_state, fos) - 24usize];
    ["Offset of field: swregs_state::st_space"]
        [::std::mem::offset_of!(swregs_state, st_space) - 28usize];
    ["Offset of field: swregs_state::ftop"][::std::mem::offset_of!(swregs_state, ftop) - 108usize];
    ["Offset of field: swregs_state::changed"]
        [::std::mem::offset_of!(swregs_state, changed) - 109usize];
    ["Offset of field: swregs_state::lookahead"]
        [::std::mem::offset_of!(swregs_state, lookahead) - 110usize];
    ["Offset of field: swregs_state::no_update"]
        [::std::mem::offset_of!(swregs_state, no_update) - 111usize];
    ["Offset of field: swregs_state::rm"][::std::mem::offset_of!(swregs_state, rm) - 112usize];
    ["Offset of field: swregs_state::alimit"]
        [::std::mem::offset_of!(swregs_state, alimit) - 113usize];
    ["Offset of field: swregs_state::info"][::std::mem::offset_of!(swregs_state, info) - 120usize];
    ["Offset of field: swregs_state::entry_eip"]
        [::std::mem::offset_of!(swregs_state, entry_eip) - 128usize];
};
pub const xfeature_XFEATURE_FP: xfeature = 0;
pub const xfeature_XFEATURE_SSE: xfeature = 1;
pub const xfeature_XFEATURE_YMM: xfeature = 2;
pub const xfeature_XFEATURE_BNDREGS: xfeature = 3;
pub const xfeature_XFEATURE_BNDCSR: xfeature = 4;
pub const xfeature_XFEATURE_OPMASK: xfeature = 5;
pub const xfeature_XFEATURE_ZMM_Hi256: xfeature = 6;
pub const xfeature_XFEATURE_Hi16_ZMM: xfeature = 7;
pub const xfeature_XFEATURE_PT_UNIMPLEMENTED_SO_FAR: xfeature = 8;
pub const xfeature_XFEATURE_PKRU: xfeature = 9;
pub const xfeature_XFEATURE_PASID: xfeature = 10;
pub const xfeature_XFEATURE_CET_USER: xfeature = 11;
pub const xfeature_XFEATURE_CET_KERNEL_UNUSED: xfeature = 12;
pub const xfeature_XFEATURE_RSRVD_COMP_13: xfeature = 13;
pub const xfeature_XFEATURE_RSRVD_COMP_14: xfeature = 14;
pub const xfeature_XFEATURE_LBR: xfeature = 15;
pub const xfeature_XFEATURE_RSRVD_COMP_16: xfeature = 16;
pub const xfeature_XFEATURE_XTILE_CFG: xfeature = 17;
pub const xfeature_XFEATURE_XTILE_DATA: xfeature = 18;
pub const xfeature_XFEATURE_MAX: xfeature = 19;
pub type xfeature = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_128_bit {
    pub regbytes: [u8_; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reg_128_bit"][::std::mem::size_of::<reg_128_bit>() - 16usize];
    ["Alignment of reg_128_bit"][::std::mem::align_of::<reg_128_bit>() - 1usize];
    ["Offset of field: reg_128_bit::regbytes"]
        [::std::mem::offset_of!(reg_128_bit, regbytes) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_256_bit {
    pub regbytes: [u8_; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reg_256_bit"][::std::mem::size_of::<reg_256_bit>() - 32usize];
    ["Alignment of reg_256_bit"][::std::mem::align_of::<reg_256_bit>() - 1usize];
    ["Offset of field: reg_256_bit::regbytes"]
        [::std::mem::offset_of!(reg_256_bit, regbytes) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_512_bit {
    pub regbytes: [u8_; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reg_512_bit"][::std::mem::size_of::<reg_512_bit>() - 64usize];
    ["Alignment of reg_512_bit"][::std::mem::align_of::<reg_512_bit>() - 1usize];
    ["Offset of field: reg_512_bit::regbytes"]
        [::std::mem::offset_of!(reg_512_bit, regbytes) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_1024_byte {
    pub regbytes: [u8_; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of reg_1024_byte"][::std::mem::size_of::<reg_1024_byte>() - 1024usize];
    ["Alignment of reg_1024_byte"][::std::mem::align_of::<reg_1024_byte>() - 1usize];
    ["Offset of field: reg_1024_byte::regbytes"]
        [::std::mem::offset_of!(reg_1024_byte, regbytes) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ymmh_struct {
    pub hi_ymm: [reg_128_bit; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ymmh_struct"][::std::mem::size_of::<ymmh_struct>() - 256usize];
    ["Alignment of ymmh_struct"][::std::mem::align_of::<ymmh_struct>() - 1usize];
    ["Offset of field: ymmh_struct::hi_ymm"][::std::mem::offset_of!(ymmh_struct, hi_ymm) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mpx_bndreg {
    pub lower_bound: u64_,
    pub upper_bound: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpx_bndreg"][::std::mem::size_of::<mpx_bndreg>() - 16usize];
    ["Alignment of mpx_bndreg"][::std::mem::align_of::<mpx_bndreg>() - 1usize];
    ["Offset of field: mpx_bndreg::lower_bound"]
        [::std::mem::offset_of!(mpx_bndreg, lower_bound) - 0usize];
    ["Offset of field: mpx_bndreg::upper_bound"]
        [::std::mem::offset_of!(mpx_bndreg, upper_bound) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mpx_bndreg_state {
    pub bndreg: [mpx_bndreg; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpx_bndreg_state"][::std::mem::size_of::<mpx_bndreg_state>() - 64usize];
    ["Alignment of mpx_bndreg_state"][::std::mem::align_of::<mpx_bndreg_state>() - 1usize];
    ["Offset of field: mpx_bndreg_state::bndreg"]
        [::std::mem::offset_of!(mpx_bndreg_state, bndreg) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mpx_bndcsr {
    pub bndcfgu: u64_,
    pub bndstatus: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpx_bndcsr"][::std::mem::size_of::<mpx_bndcsr>() - 16usize];
    ["Alignment of mpx_bndcsr"][::std::mem::align_of::<mpx_bndcsr>() - 1usize];
    ["Offset of field: mpx_bndcsr::bndcfgu"][::std::mem::offset_of!(mpx_bndcsr, bndcfgu) - 0usize];
    ["Offset of field: mpx_bndcsr::bndstatus"]
        [::std::mem::offset_of!(mpx_bndcsr, bndstatus) - 8usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mpx_bndcsr_state {
    pub __bindgen_anon_1: mpx_bndcsr_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mpx_bndcsr_state__bindgen_ty_1 {
    pub bndcsr: mpx_bndcsr,
    pub pad_to_64_bytes: [u8_; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpx_bndcsr_state__bindgen_ty_1"]
        [::std::mem::size_of::<mpx_bndcsr_state__bindgen_ty_1>() - 64usize];
    ["Alignment of mpx_bndcsr_state__bindgen_ty_1"]
        [::std::mem::align_of::<mpx_bndcsr_state__bindgen_ty_1>() - 1usize];
    ["Offset of field: mpx_bndcsr_state__bindgen_ty_1::bndcsr"]
        [::std::mem::offset_of!(mpx_bndcsr_state__bindgen_ty_1, bndcsr) - 0usize];
    ["Offset of field: mpx_bndcsr_state__bindgen_ty_1::pad_to_64_bytes"]
        [::std::mem::offset_of!(mpx_bndcsr_state__bindgen_ty_1, pad_to_64_bytes) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpx_bndcsr_state"][::std::mem::size_of::<mpx_bndcsr_state>() - 64usize];
    ["Alignment of mpx_bndcsr_state"][::std::mem::align_of::<mpx_bndcsr_state>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct avx_512_opmask_state {
    pub opmask_reg: [u64_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of avx_512_opmask_state"][::std::mem::size_of::<avx_512_opmask_state>() - 64usize];
    ["Alignment of avx_512_opmask_state"][::std::mem::align_of::<avx_512_opmask_state>() - 1usize];
    ["Offset of field: avx_512_opmask_state::opmask_reg"]
        [::std::mem::offset_of!(avx_512_opmask_state, opmask_reg) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct avx_512_zmm_uppers_state {
    pub zmm_upper: [reg_256_bit; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of avx_512_zmm_uppers_state"]
        [::std::mem::size_of::<avx_512_zmm_uppers_state>() - 512usize];
    ["Alignment of avx_512_zmm_uppers_state"]
        [::std::mem::align_of::<avx_512_zmm_uppers_state>() - 1usize];
    ["Offset of field: avx_512_zmm_uppers_state::zmm_upper"]
        [::std::mem::offset_of!(avx_512_zmm_uppers_state, zmm_upper) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct avx_512_hi16_state {
    pub hi16_zmm: [reg_512_bit; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of avx_512_hi16_state"][::std::mem::size_of::<avx_512_hi16_state>() - 1024usize];
    ["Alignment of avx_512_hi16_state"][::std::mem::align_of::<avx_512_hi16_state>() - 1usize];
    ["Offset of field: avx_512_hi16_state::hi16_zmm"]
        [::std::mem::offset_of!(avx_512_hi16_state, hi16_zmm) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct pkru_state {
    pub pkru: u32_,
    pub pad: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pkru_state"][::std::mem::size_of::<pkru_state>() - 8usize];
    ["Alignment of pkru_state"][::std::mem::align_of::<pkru_state>() - 1usize];
    ["Offset of field: pkru_state::pkru"][::std::mem::offset_of!(pkru_state, pkru) - 0usize];
    ["Offset of field: pkru_state::pad"][::std::mem::offset_of!(pkru_state, pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cet_user_state {
    pub user_cet: u64_,
    pub user_ssp: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cet_user_state"][::std::mem::size_of::<cet_user_state>() - 16usize];
    ["Alignment of cet_user_state"][::std::mem::align_of::<cet_user_state>() - 8usize];
    ["Offset of field: cet_user_state::user_cet"]
        [::std::mem::offset_of!(cet_user_state, user_cet) - 0usize];
    ["Offset of field: cet_user_state::user_ssp"]
        [::std::mem::offset_of!(cet_user_state, user_ssp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lbr_entry {
    pub from: u64_,
    pub to: u64_,
    pub info: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lbr_entry"][::std::mem::size_of::<lbr_entry>() - 24usize];
    ["Alignment of lbr_entry"][::std::mem::align_of::<lbr_entry>() - 8usize];
    ["Offset of field: lbr_entry::from"][::std::mem::offset_of!(lbr_entry, from) - 0usize];
    ["Offset of field: lbr_entry::to"][::std::mem::offset_of!(lbr_entry, to) - 8usize];
    ["Offset of field: lbr_entry::info"][::std::mem::offset_of!(lbr_entry, info) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct arch_lbr_state {
    pub lbr_ctl: u64_,
    pub lbr_depth: u64_,
    pub ler_from: u64_,
    pub ler_to: u64_,
    pub ler_info: u64_,
    pub entries: __IncompleteArrayField<lbr_entry>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_lbr_state"][::std::mem::size_of::<arch_lbr_state>() - 40usize];
    ["Alignment of arch_lbr_state"][::std::mem::align_of::<arch_lbr_state>() - 8usize];
    ["Offset of field: arch_lbr_state::lbr_ctl"]
        [::std::mem::offset_of!(arch_lbr_state, lbr_ctl) - 0usize];
    ["Offset of field: arch_lbr_state::lbr_depth"]
        [::std::mem::offset_of!(arch_lbr_state, lbr_depth) - 8usize];
    ["Offset of field: arch_lbr_state::ler_from"]
        [::std::mem::offset_of!(arch_lbr_state, ler_from) - 16usize];
    ["Offset of field: arch_lbr_state::ler_to"]
        [::std::mem::offset_of!(arch_lbr_state, ler_to) - 24usize];
    ["Offset of field: arch_lbr_state::ler_info"]
        [::std::mem::offset_of!(arch_lbr_state, ler_info) - 32usize];
    ["Offset of field: arch_lbr_state::entries"]
        [::std::mem::offset_of!(arch_lbr_state, entries) - 40usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct xtile_cfg {
    pub tcfg: [u64_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xtile_cfg"][::std::mem::size_of::<xtile_cfg>() - 64usize];
    ["Alignment of xtile_cfg"][::std::mem::align_of::<xtile_cfg>() - 1usize];
    ["Offset of field: xtile_cfg::tcfg"][::std::mem::offset_of!(xtile_cfg, tcfg) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct xtile_data {
    pub tmm: reg_1024_byte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xtile_data"][::std::mem::size_of::<xtile_data>() - 1024usize];
    ["Alignment of xtile_data"][::std::mem::align_of::<xtile_data>() - 1usize];
    ["Offset of field: xtile_data::tmm"][::std::mem::offset_of!(xtile_data, tmm) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ia32_pasid_state {
    pub pasid: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ia32_pasid_state"][::std::mem::size_of::<ia32_pasid_state>() - 8usize];
    ["Alignment of ia32_pasid_state"][::std::mem::align_of::<ia32_pasid_state>() - 1usize];
    ["Offset of field: ia32_pasid_state::pasid"]
        [::std::mem::offset_of!(ia32_pasid_state, pasid) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct xstate_header {
    pub xfeatures: u64_,
    pub xcomp_bv: u64_,
    pub reserved: [u64_; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xstate_header"][::std::mem::size_of::<xstate_header>() - 64usize];
    ["Alignment of xstate_header"][::std::mem::align_of::<xstate_header>() - 1usize];
    ["Offset of field: xstate_header::xfeatures"]
        [::std::mem::offset_of!(xstate_header, xfeatures) - 0usize];
    ["Offset of field: xstate_header::xcomp_bv"]
        [::std::mem::offset_of!(xstate_header, xcomp_bv) - 8usize];
    ["Offset of field: xstate_header::reserved"]
        [::std::mem::offset_of!(xstate_header, reserved) - 16usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct xregs_state {
    pub i387: fxregs_state,
    pub header: xstate_header,
    pub extended_state_area: __IncompleteArrayField<u8_>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xregs_state"][::std::mem::size_of::<xregs_state>() - 576usize];
    ["Alignment of xregs_state"][::std::mem::align_of::<xregs_state>() - 64usize];
    ["Offset of field: xregs_state::i387"][::std::mem::offset_of!(xregs_state, i387) - 0usize];
    ["Offset of field: xregs_state::header"]
        [::std::mem::offset_of!(xregs_state, header) - 512usize];
    ["Offset of field: xregs_state::extended_state_area"]
        [::std::mem::offset_of!(xregs_state, extended_state_area) - 576usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct fpregs_state {
    pub fsave: __BindgenUnionField<fregs_state>,
    pub fxsave: __BindgenUnionField<fxregs_state>,
    pub soft: __BindgenUnionField<swregs_state>,
    pub xsave: __BindgenUnionField<xregs_state>,
    pub __padding: __BindgenUnionField<[u8_; 4096usize]>,
    pub bindgen_union_field: [u8; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpregs_state"][::std::mem::size_of::<fpregs_state>() - 4096usize];
    ["Alignment of fpregs_state"][::std::mem::align_of::<fpregs_state>() - 64usize];
    ["Offset of field: fpregs_state::fsave"][::std::mem::offset_of!(fpregs_state, fsave) - 0usize];
    ["Offset of field: fpregs_state::fxsave"]
        [::std::mem::offset_of!(fpregs_state, fxsave) - 0usize];
    ["Offset of field: fpregs_state::soft"][::std::mem::offset_of!(fpregs_state, soft) - 0usize];
    ["Offset of field: fpregs_state::xsave"][::std::mem::offset_of!(fpregs_state, xsave) - 0usize];
    ["Offset of field: fpregs_state::__padding"]
        [::std::mem::offset_of!(fpregs_state, __padding) - 0usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct fpstate {
    pub size: ::std::os::raw::c_uint,
    pub user_size: ::std::os::raw::c_uint,
    pub xfeatures: u64_,
    pub user_xfeatures: u64_,
    pub xfd: u64_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u64; 3usize],
    pub regs: fpregs_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpstate"][::std::mem::size_of::<fpstate>() - 4160usize];
    ["Alignment of fpstate"][::std::mem::align_of::<fpstate>() - 64usize];
    ["Offset of field: fpstate::size"][::std::mem::offset_of!(fpstate, size) - 0usize];
    ["Offset of field: fpstate::user_size"][::std::mem::offset_of!(fpstate, user_size) - 4usize];
    ["Offset of field: fpstate::xfeatures"][::std::mem::offset_of!(fpstate, xfeatures) - 8usize];
    ["Offset of field: fpstate::user_xfeatures"]
        [::std::mem::offset_of!(fpstate, user_xfeatures) - 16usize];
    ["Offset of field: fpstate::xfd"][::std::mem::offset_of!(fpstate, xfd) - 24usize];
    ["Offset of field: fpstate::regs"][::std::mem::offset_of!(fpstate, regs) - 64usize];
};
impl fpstate {
    #[inline]
    pub fn is_valloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_valloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_guest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_guest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_confidential(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_confidential(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_use(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_use(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_valloc: ::std::os::raw::c_uint,
        is_guest: ::std::os::raw::c_uint,
        is_confidential: ::std::os::raw::c_uint,
        in_use: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_valloc: u32 = unsafe { ::std::mem::transmute(is_valloc) };
            is_valloc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_guest: u32 = unsafe { ::std::mem::transmute(is_guest) };
            is_guest as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_confidential: u32 = unsafe { ::std::mem::transmute(is_confidential) };
            is_confidential as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let in_use: u32 = unsafe { ::std::mem::transmute(in_use) };
            in_use as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpu_state_perm {
    pub __state_perm: u64_,
    pub __state_size: ::std::os::raw::c_uint,
    pub __user_state_size: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpu_state_perm"][::std::mem::size_of::<fpu_state_perm>() - 16usize];
    ["Alignment of fpu_state_perm"][::std::mem::align_of::<fpu_state_perm>() - 8usize];
    ["Offset of field: fpu_state_perm::__state_perm"]
        [::std::mem::offset_of!(fpu_state_perm, __state_perm) - 0usize];
    ["Offset of field: fpu_state_perm::__state_size"]
        [::std::mem::offset_of!(fpu_state_perm, __state_size) - 8usize];
    ["Offset of field: fpu_state_perm::__user_state_size"]
        [::std::mem::offset_of!(fpu_state_perm, __user_state_size) - 12usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct fpu {
    pub last_cpu: ::std::os::raw::c_uint,
    pub avx512_timestamp: ::std::os::raw::c_ulong,
    pub fpstate: *mut fpstate,
    pub __task_fpstate: *mut fpstate,
    pub perm: fpu_state_perm,
    pub guest_perm: fpu_state_perm,
    pub __fpstate: fpstate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpu"][::std::mem::size_of::<fpu>() - 4224usize];
    ["Alignment of fpu"][::std::mem::align_of::<fpu>() - 64usize];
    ["Offset of field: fpu::last_cpu"][::std::mem::offset_of!(fpu, last_cpu) - 0usize];
    ["Offset of field: fpu::avx512_timestamp"]
        [::std::mem::offset_of!(fpu, avx512_timestamp) - 8usize];
    ["Offset of field: fpu::fpstate"][::std::mem::offset_of!(fpu, fpstate) - 16usize];
    ["Offset of field: fpu::__task_fpstate"][::std::mem::offset_of!(fpu, __task_fpstate) - 24usize];
    ["Offset of field: fpu::perm"][::std::mem::offset_of!(fpu, perm) - 32usize];
    ["Offset of field: fpu::guest_perm"][::std::mem::offset_of!(fpu, guest_perm) - 48usize];
    ["Offset of field: fpu::__fpstate"][::std::mem::offset_of!(fpu, __fpstate) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpu_guest {
    pub xfeatures: u64_,
    pub perm: u64_,
    pub xfd_err: u64_,
    pub uabi_size: ::std::os::raw::c_uint,
    pub fpstate: *mut fpstate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpu_guest"][::std::mem::size_of::<fpu_guest>() - 40usize];
    ["Alignment of fpu_guest"][::std::mem::align_of::<fpu_guest>() - 8usize];
    ["Offset of field: fpu_guest::xfeatures"]
        [::std::mem::offset_of!(fpu_guest, xfeatures) - 0usize];
    ["Offset of field: fpu_guest::perm"][::std::mem::offset_of!(fpu_guest, perm) - 8usize];
    ["Offset of field: fpu_guest::xfd_err"][::std::mem::offset_of!(fpu_guest, xfd_err) - 16usize];
    ["Offset of field: fpu_guest::uabi_size"]
        [::std::mem::offset_of!(fpu_guest, uabi_size) - 24usize];
    ["Offset of field: fpu_guest::fpstate"][::std::mem::offset_of!(fpu_guest, fpstate) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpu_state_config {
    pub max_size: ::std::os::raw::c_uint,
    pub default_size: ::std::os::raw::c_uint,
    pub max_features: u64_,
    pub default_features: u64_,
    pub legacy_features: u64_,
    pub independent_features: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpu_state_config"][::std::mem::size_of::<fpu_state_config>() - 40usize];
    ["Alignment of fpu_state_config"][::std::mem::align_of::<fpu_state_config>() - 8usize];
    ["Offset of field: fpu_state_config::max_size"]
        [::std::mem::offset_of!(fpu_state_config, max_size) - 0usize];
    ["Offset of field: fpu_state_config::default_size"]
        [::std::mem::offset_of!(fpu_state_config, default_size) - 4usize];
    ["Offset of field: fpu_state_config::max_features"]
        [::std::mem::offset_of!(fpu_state_config, max_features) - 8usize];
    ["Offset of field: fpu_state_config::default_features"]
        [::std::mem::offset_of!(fpu_state_config, default_features) - 16usize];
    ["Offset of field: fpu_state_config::legacy_features"]
        [::std::mem::offset_of!(fpu_state_config, legacy_features) - 24usize];
    ["Offset of field: fpu_state_config::independent_features"]
        [::std::mem::offset_of!(fpu_state_config, independent_features) - 32usize];
};
extern "C" {
    pub static mut fpu_kernel_cfg: fpu_state_config;
}
extern "C" {
    pub static mut fpu_user_cfg: fpu_state_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct getcpu_cache {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __vdso_getcpu(
        cpu: *mut ::std::os::raw::c_uint,
        node: *mut ::std::os::raw::c_uint,
        unused: *mut getcpu_cache,
    ) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_shstk {
    pub base: u64_,
    pub size: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_shstk"][::std::mem::size_of::<thread_shstk>() - 16usize];
    ["Alignment of thread_shstk"][::std::mem::align_of::<thread_shstk>() - 8usize];
    ["Offset of field: thread_shstk::base"][::std::mem::offset_of!(thread_shstk, base) - 0usize];
    ["Offset of field: thread_shstk::size"][::std::mem::offset_of!(thread_shstk, size) - 8usize];
};
extern "C" {
    pub fn shstk_prctl(
        task: *mut task_struct,
        option: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn reset_thread_features();
}
extern "C" {
    pub fn shstk_alloc_thread_stack(
        p: *mut task_struct,
        clone_flags: ::std::os::raw::c_ulong,
        stack_size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn shstk_free(p: *mut task_struct);
}
extern "C" {
    pub fn setup_signal_shadow_stack(ksig: *mut ksignal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restore_signal_shadow_stack() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shstk_update_last_frame(val: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shstk_is_enabled() -> bool_;
}
pub const UNAME26: _bindgen_ty_8 = 131072;
pub const ADDR_NO_RANDOMIZE: _bindgen_ty_8 = 262144;
pub const FDPIC_FUNCPTRS: _bindgen_ty_8 = 524288;
pub const MMAP_PAGE_ZERO: _bindgen_ty_8 = 1048576;
pub const ADDR_COMPAT_LAYOUT: _bindgen_ty_8 = 2097152;
pub const READ_IMPLIES_EXEC: _bindgen_ty_8 = 4194304;
pub const ADDR_LIMIT_32BIT: _bindgen_ty_8 = 8388608;
pub const SHORT_INODE: _bindgen_ty_8 = 16777216;
pub const WHOLE_SECONDS: _bindgen_ty_8 = 33554432;
pub const STICKY_TIMEOUTS: _bindgen_ty_8 = 67108864;
pub const ADDR_LIMIT_3GB: _bindgen_ty_8 = 134217728;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const PER_LINUX: _bindgen_ty_9 = 0;
pub const PER_LINUX_32BIT: _bindgen_ty_9 = 8388608;
pub const PER_LINUX_FDPIC: _bindgen_ty_9 = 524288;
pub const PER_SVR4: _bindgen_ty_9 = 68157441;
pub const PER_SVR3: _bindgen_ty_9 = 83886082;
pub const PER_SCOSVR3: _bindgen_ty_9 = 117440515;
pub const PER_OSR5: _bindgen_ty_9 = 100663299;
pub const PER_WYSEV386: _bindgen_ty_9 = 83886084;
pub const PER_ISCR4: _bindgen_ty_9 = 67108869;
pub const PER_BSD: _bindgen_ty_9 = 6;
pub const PER_SUNOS: _bindgen_ty_9 = 67108870;
pub const PER_XENIX: _bindgen_ty_9 = 83886087;
pub const PER_LINUX32: _bindgen_ty_9 = 8;
pub const PER_LINUX32_3GB: _bindgen_ty_9 = 134217736;
pub const PER_IRIX32: _bindgen_ty_9 = 67108873;
pub const PER_IRIXN32: _bindgen_ty_9 = 67108874;
pub const PER_IRIX64: _bindgen_ty_9 = 67108875;
pub const PER_RISCOS: _bindgen_ty_9 = 12;
pub const PER_SOLARIS: _bindgen_ty_9 = 67108877;
pub const PER_UW7: _bindgen_ty_9 = 68157454;
pub const PER_OSF4: _bindgen_ty_9 = 15;
pub const PER_HPUX: _bindgen_ty_9 = 16;
pub const PER_MASK: _bindgen_ty_9 = 255;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn iter_div_u64_rem(dividend: u64_, divisor: u32_, remainder: *mut u64_) -> u32_;
}
pub const tlb_infos_ENTRIES: tlb_infos = 0;
pub const tlb_infos_NR_INFO: tlb_infos = 1;
pub type tlb_infos = ::std::os::raw::c_uint;
extern "C" {
    pub static mut tlb_lli_4k: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lli_2m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lli_4m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_4k: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_2m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_4m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_1g: [u16_; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_topology {
    pub apicid: u32_,
    pub initial_apicid: u32_,
    pub pkg_id: u32_,
    pub die_id: u32_,
    pub cu_id: u32_,
    pub core_id: u32_,
    pub logical_pkg_id: u32_,
    pub logical_die_id: u32_,
    pub amd_node_id: u32_,
    pub llc_id: u32_,
    pub l2c_id: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpuinfo_topology"][::std::mem::size_of::<cpuinfo_topology>() - 44usize];
    ["Alignment of cpuinfo_topology"][::std::mem::align_of::<cpuinfo_topology>() - 4usize];
    ["Offset of field: cpuinfo_topology::apicid"]
        [::std::mem::offset_of!(cpuinfo_topology, apicid) - 0usize];
    ["Offset of field: cpuinfo_topology::initial_apicid"]
        [::std::mem::offset_of!(cpuinfo_topology, initial_apicid) - 4usize];
    ["Offset of field: cpuinfo_topology::pkg_id"]
        [::std::mem::offset_of!(cpuinfo_topology, pkg_id) - 8usize];
    ["Offset of field: cpuinfo_topology::die_id"]
        [::std::mem::offset_of!(cpuinfo_topology, die_id) - 12usize];
    ["Offset of field: cpuinfo_topology::cu_id"]
        [::std::mem::offset_of!(cpuinfo_topology, cu_id) - 16usize];
    ["Offset of field: cpuinfo_topology::core_id"]
        [::std::mem::offset_of!(cpuinfo_topology, core_id) - 20usize];
    ["Offset of field: cpuinfo_topology::logical_pkg_id"]
        [::std::mem::offset_of!(cpuinfo_topology, logical_pkg_id) - 24usize];
    ["Offset of field: cpuinfo_topology::logical_die_id"]
        [::std::mem::offset_of!(cpuinfo_topology, logical_die_id) - 28usize];
    ["Offset of field: cpuinfo_topology::amd_node_id"]
        [::std::mem::offset_of!(cpuinfo_topology, amd_node_id) - 32usize];
    ["Offset of field: cpuinfo_topology::llc_id"]
        [::std::mem::offset_of!(cpuinfo_topology, llc_id) - 36usize];
    ["Offset of field: cpuinfo_topology::l2c_id"]
        [::std::mem::offset_of!(cpuinfo_topology, l2c_id) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpuinfo_x86 {
    pub __bindgen_anon_1: cpuinfo_x86__bindgen_ty_1,
    pub x86_stepping: __u8,
    pub x86_tlbsize: ::std::os::raw::c_int,
    pub vmx_capability: [__u32; 5usize],
    pub x86_virt_bits: __u8,
    pub x86_phys_bits: __u8,
    pub extended_cpuid_level: __u32,
    pub cpuid_level: ::std::os::raw::c_int,
    pub __bindgen_anon_2: cpuinfo_x86__bindgen_ty_2,
    pub x86_vendor_id: [::std::os::raw::c_char; 16usize],
    pub x86_model_id: [::std::os::raw::c_char; 64usize],
    pub topo: cpuinfo_topology,
    pub x86_cache_size: ::std::os::raw::c_uint,
    pub x86_cache_alignment: ::std::os::raw::c_int,
    pub x86_cache_max_rmid: ::std::os::raw::c_int,
    pub x86_cache_occ_scale: ::std::os::raw::c_int,
    pub x86_cache_mbm_width_offset: ::std::os::raw::c_int,
    pub x86_power: ::std::os::raw::c_int,
    pub loops_per_jiffy: ::std::os::raw::c_ulong,
    pub ppin: u64_,
    pub x86_clflush_size: u16_,
    pub booted_cores: u16_,
    pub cpu_index: u16_,
    pub smt_active: bool_,
    pub microcode: u32_,
    pub x86_cache_bits: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpuinfo_x86__bindgen_ty_1 {
    pub __bindgen_anon_1: cpuinfo_x86__bindgen_ty_1__bindgen_ty_1,
    pub x86_vfm: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpuinfo_x86__bindgen_ty_1__bindgen_ty_1 {
    pub x86_model: __u8,
    pub x86: __u8,
    pub x86_vendor: __u8,
    pub x86_reserved: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpuinfo_x86__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<cpuinfo_x86__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of cpuinfo_x86__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<cpuinfo_x86__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: cpuinfo_x86__bindgen_ty_1__bindgen_ty_1::x86_model"]
        [::std::mem::offset_of!(cpuinfo_x86__bindgen_ty_1__bindgen_ty_1, x86_model) - 0usize];
    ["Offset of field: cpuinfo_x86__bindgen_ty_1__bindgen_ty_1::x86"]
        [::std::mem::offset_of!(cpuinfo_x86__bindgen_ty_1__bindgen_ty_1, x86) - 1usize];
    ["Offset of field: cpuinfo_x86__bindgen_ty_1__bindgen_ty_1::x86_vendor"]
        [::std::mem::offset_of!(cpuinfo_x86__bindgen_ty_1__bindgen_ty_1, x86_vendor) - 2usize];
    ["Offset of field: cpuinfo_x86__bindgen_ty_1__bindgen_ty_1::x86_reserved"]
        [::std::mem::offset_of!(cpuinfo_x86__bindgen_ty_1__bindgen_ty_1, x86_reserved) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpuinfo_x86__bindgen_ty_1"]
        [::std::mem::size_of::<cpuinfo_x86__bindgen_ty_1>() - 4usize];
    ["Alignment of cpuinfo_x86__bindgen_ty_1"]
        [::std::mem::align_of::<cpuinfo_x86__bindgen_ty_1>() - 4usize];
    ["Offset of field: cpuinfo_x86__bindgen_ty_1::x86_vfm"]
        [::std::mem::offset_of!(cpuinfo_x86__bindgen_ty_1, x86_vfm) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpuinfo_x86__bindgen_ty_2 {
    pub x86_capability: [__u32; 24usize],
    pub x86_capability_alignment: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpuinfo_x86__bindgen_ty_2"]
        [::std::mem::size_of::<cpuinfo_x86__bindgen_ty_2>() - 96usize];
    ["Alignment of cpuinfo_x86__bindgen_ty_2"]
        [::std::mem::align_of::<cpuinfo_x86__bindgen_ty_2>() - 8usize];
    ["Offset of field: cpuinfo_x86__bindgen_ty_2::x86_capability"]
        [::std::mem::offset_of!(cpuinfo_x86__bindgen_ty_2, x86_capability) - 0usize];
    ["Offset of field: cpuinfo_x86__bindgen_ty_2::x86_capability_alignment"]
        [::std::mem::offset_of!(cpuinfo_x86__bindgen_ty_2, x86_capability_alignment) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpuinfo_x86"][::std::mem::size_of::<cpuinfo_x86>() - 328usize];
    ["Alignment of cpuinfo_x86"][::std::mem::align_of::<cpuinfo_x86>() - 8usize];
    ["Offset of field: cpuinfo_x86::x86_stepping"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_stepping) - 4usize];
    ["Offset of field: cpuinfo_x86::x86_tlbsize"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_tlbsize) - 8usize];
    ["Offset of field: cpuinfo_x86::vmx_capability"]
        [::std::mem::offset_of!(cpuinfo_x86, vmx_capability) - 12usize];
    ["Offset of field: cpuinfo_x86::x86_virt_bits"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_virt_bits) - 32usize];
    ["Offset of field: cpuinfo_x86::x86_phys_bits"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_phys_bits) - 33usize];
    ["Offset of field: cpuinfo_x86::extended_cpuid_level"]
        [::std::mem::offset_of!(cpuinfo_x86, extended_cpuid_level) - 36usize];
    ["Offset of field: cpuinfo_x86::cpuid_level"]
        [::std::mem::offset_of!(cpuinfo_x86, cpuid_level) - 40usize];
    ["Offset of field: cpuinfo_x86::x86_vendor_id"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_vendor_id) - 144usize];
    ["Offset of field: cpuinfo_x86::x86_model_id"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_model_id) - 160usize];
    ["Offset of field: cpuinfo_x86::topo"][::std::mem::offset_of!(cpuinfo_x86, topo) - 224usize];
    ["Offset of field: cpuinfo_x86::x86_cache_size"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_cache_size) - 268usize];
    ["Offset of field: cpuinfo_x86::x86_cache_alignment"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_cache_alignment) - 272usize];
    ["Offset of field: cpuinfo_x86::x86_cache_max_rmid"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_cache_max_rmid) - 276usize];
    ["Offset of field: cpuinfo_x86::x86_cache_occ_scale"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_cache_occ_scale) - 280usize];
    ["Offset of field: cpuinfo_x86::x86_cache_mbm_width_offset"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_cache_mbm_width_offset) - 284usize];
    ["Offset of field: cpuinfo_x86::x86_power"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_power) - 288usize];
    ["Offset of field: cpuinfo_x86::loops_per_jiffy"]
        [::std::mem::offset_of!(cpuinfo_x86, loops_per_jiffy) - 296usize];
    ["Offset of field: cpuinfo_x86::ppin"][::std::mem::offset_of!(cpuinfo_x86, ppin) - 304usize];
    ["Offset of field: cpuinfo_x86::x86_clflush_size"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_clflush_size) - 312usize];
    ["Offset of field: cpuinfo_x86::booted_cores"]
        [::std::mem::offset_of!(cpuinfo_x86, booted_cores) - 314usize];
    ["Offset of field: cpuinfo_x86::cpu_index"]
        [::std::mem::offset_of!(cpuinfo_x86, cpu_index) - 316usize];
    ["Offset of field: cpuinfo_x86::smt_active"]
        [::std::mem::offset_of!(cpuinfo_x86, smt_active) - 318usize];
    ["Offset of field: cpuinfo_x86::microcode"]
        [::std::mem::offset_of!(cpuinfo_x86, microcode) - 320usize];
    ["Offset of field: cpuinfo_x86::x86_cache_bits"]
        [::std::mem::offset_of!(cpuinfo_x86, x86_cache_bits) - 324usize];
};
impl cpuinfo_x86 {
    #[inline]
    pub fn initialized(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_initialized(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        initialized: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let initialized: u32 = unsafe { ::std::mem::transmute(initialized) };
            initialized as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut boot_cpu_data: cpuinfo_x86;
}
extern "C" {
    pub static mut new_cpu_data: cpuinfo_x86;
}
extern "C" {
    pub static mut cpu_caps_cleared: [__u32; 24usize];
}
extern "C" {
    pub static mut cpu_caps_set: [__u32; 24usize];
}
extern "C" {
    pub static mut cpu_info: cpuinfo_x86;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seq_operations {
    pub start: ::std::option::Option<
        unsafe extern "C" fn(m: *mut seq_file, pos: *mut loff_t) -> *mut ::std::os::raw::c_void,
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(m: *mut seq_file, v: *mut ::std::os::raw::c_void),
    >,
    pub next: ::std::option::Option<
        unsafe extern "C" fn(
            m: *mut seq_file,
            v: *mut ::std::os::raw::c_void,
            pos: *mut loff_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(
            m: *mut seq_file,
            v: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seq_operations"][::std::mem::size_of::<seq_operations>() - 32usize];
    ["Alignment of seq_operations"][::std::mem::align_of::<seq_operations>() - 8usize];
    ["Offset of field: seq_operations::start"]
        [::std::mem::offset_of!(seq_operations, start) - 0usize];
    ["Offset of field: seq_operations::stop"]
        [::std::mem::offset_of!(seq_operations, stop) - 8usize];
    ["Offset of field: seq_operations::next"]
        [::std::mem::offset_of!(seq_operations, next) - 16usize];
    ["Offset of field: seq_operations::show"]
        [::std::mem::offset_of!(seq_operations, show) - 24usize];
};
extern "C" {
    pub static cpuinfo_op: seq_operations;
}
extern "C" {
    pub fn cpu_detect(c: *mut cpuinfo_x86);
}
extern "C" {
    pub fn early_cpu_init();
}
extern "C" {
    pub fn identify_secondary_cpu(arg1: *mut cpuinfo_x86);
}
extern "C" {
    pub fn print_cpu_info(arg1: *mut cpuinfo_x86);
}
extern "C" {
    pub fn print_cpu_msr(arg1: *mut cpuinfo_x86);
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct x86_hw_tss {
    pub reserved1: u32_,
    pub sp0: u64_,
    pub sp1: u64_,
    pub sp2: u64_,
    pub reserved2: u64_,
    pub ist: [u64_; 7usize],
    pub reserved3: u32_,
    pub reserved4: u32_,
    pub reserved5: u16_,
    pub io_bitmap_base: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_hw_tss"][::std::mem::size_of::<x86_hw_tss>() - 104usize];
    ["Alignment of x86_hw_tss"][::std::mem::align_of::<x86_hw_tss>() - 1usize];
    ["Offset of field: x86_hw_tss::reserved1"]
        [::std::mem::offset_of!(x86_hw_tss, reserved1) - 0usize];
    ["Offset of field: x86_hw_tss::sp0"][::std::mem::offset_of!(x86_hw_tss, sp0) - 4usize];
    ["Offset of field: x86_hw_tss::sp1"][::std::mem::offset_of!(x86_hw_tss, sp1) - 12usize];
    ["Offset of field: x86_hw_tss::sp2"][::std::mem::offset_of!(x86_hw_tss, sp2) - 20usize];
    ["Offset of field: x86_hw_tss::reserved2"]
        [::std::mem::offset_of!(x86_hw_tss, reserved2) - 28usize];
    ["Offset of field: x86_hw_tss::ist"][::std::mem::offset_of!(x86_hw_tss, ist) - 36usize];
    ["Offset of field: x86_hw_tss::reserved3"]
        [::std::mem::offset_of!(x86_hw_tss, reserved3) - 92usize];
    ["Offset of field: x86_hw_tss::reserved4"]
        [::std::mem::offset_of!(x86_hw_tss, reserved4) - 96usize];
    ["Offset of field: x86_hw_tss::reserved5"]
        [::std::mem::offset_of!(x86_hw_tss, reserved5) - 100usize];
    ["Offset of field: x86_hw_tss::io_bitmap_base"]
        [::std::mem::offset_of!(x86_hw_tss, io_bitmap_base) - 102usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry_stack {
    pub stack: [::std::os::raw::c_char; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of entry_stack"][::std::mem::size_of::<entry_stack>() - 4096usize];
    ["Alignment of entry_stack"][::std::mem::align_of::<entry_stack>() - 1usize];
    ["Offset of field: entry_stack::stack"][::std::mem::offset_of!(entry_stack, stack) - 0usize];
};
#[repr(C)]
#[repr(align(4096))]
#[derive(Debug, Copy, Clone)]
pub struct entry_stack_page {
    pub stack: entry_stack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of entry_stack_page"][::std::mem::size_of::<entry_stack_page>() - 4096usize];
    ["Alignment of entry_stack_page"][::std::mem::align_of::<entry_stack_page>() - 4096usize];
    ["Offset of field: entry_stack_page::stack"]
        [::std::mem::offset_of!(entry_stack_page, stack) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_io_bitmap {
    pub prev_sequence: u64_,
    pub prev_max: ::std::os::raw::c_uint,
    pub bitmap: [::std::os::raw::c_ulong; 1025usize],
    pub mapall: [::std::os::raw::c_ulong; 1025usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_io_bitmap"][::std::mem::size_of::<x86_io_bitmap>() - 16416usize];
    ["Alignment of x86_io_bitmap"][::std::mem::align_of::<x86_io_bitmap>() - 8usize];
    ["Offset of field: x86_io_bitmap::prev_sequence"]
        [::std::mem::offset_of!(x86_io_bitmap, prev_sequence) - 0usize];
    ["Offset of field: x86_io_bitmap::prev_max"]
        [::std::mem::offset_of!(x86_io_bitmap, prev_max) - 8usize];
    ["Offset of field: x86_io_bitmap::bitmap"]
        [::std::mem::offset_of!(x86_io_bitmap, bitmap) - 16usize];
    ["Offset of field: x86_io_bitmap::mapall"]
        [::std::mem::offset_of!(x86_io_bitmap, mapall) - 8216usize];
};
#[repr(C)]
#[repr(align(4096))]
#[derive(Debug, Copy, Clone)]
pub struct tss_struct {
    pub x86_tss: x86_hw_tss,
    pub io_bitmap: x86_io_bitmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tss_struct"][::std::mem::size_of::<tss_struct>() - 20480usize];
    ["Alignment of tss_struct"][::std::mem::align_of::<tss_struct>() - 4096usize];
    ["Offset of field: tss_struct::x86_tss"][::std::mem::offset_of!(tss_struct, x86_tss) - 0usize];
    ["Offset of field: tss_struct::io_bitmap"]
        [::std::mem::offset_of!(tss_struct, io_bitmap) - 104usize];
};
extern "C" {
    pub static mut cpu_tss_rw: tss_struct;
}
#[repr(C)]
#[repr(align(16384))]
#[derive(Debug, Copy, Clone)]
pub struct irq_stack {
    pub stack: [::std::os::raw::c_char; 16384usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of irq_stack"][::std::mem::size_of::<irq_stack>() - 16384usize];
    ["Alignment of irq_stack"][::std::mem::align_of::<irq_stack>() - 16384usize];
    ["Offset of field: irq_stack::stack"][::std::mem::offset_of!(irq_stack, stack) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fixed_percpu_data {
    pub gs_base: [::std::os::raw::c_char; 40usize],
    pub stack_canary: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fixed_percpu_data"][::std::mem::size_of::<fixed_percpu_data>() - 48usize];
    ["Alignment of fixed_percpu_data"][::std::mem::align_of::<fixed_percpu_data>() - 8usize];
    ["Offset of field: fixed_percpu_data::gs_base"]
        [::std::mem::offset_of!(fixed_percpu_data, gs_base) - 0usize];
    ["Offset of field: fixed_percpu_data::stack_canary"]
        [::std::mem::offset_of!(fixed_percpu_data, stack_canary) - 40usize];
};
extern "C" {
    pub static mut fixed_percpu_data: fixed_percpu_data;
}
extern "C" {
    pub static mut init_per_cpu__fixed_percpu_data: fixed_percpu_data;
}
extern "C" {
    pub fn entry_SYSCALL32_ignore();
}
extern "C" {
    pub fn current_save_fsgs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct perf_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
pub struct thread_struct {
    pub tls_array: [desc_struct; 3usize],
    pub sp: ::std::os::raw::c_ulong,
    pub es: ::std::os::raw::c_ushort,
    pub ds: ::std::os::raw::c_ushort,
    pub fsindex: ::std::os::raw::c_ushort,
    pub gsindex: ::std::os::raw::c_ushort,
    pub fsbase: ::std::os::raw::c_ulong,
    pub gsbase: ::std::os::raw::c_ulong,
    pub ptrace_bps: [*mut perf_event; 4usize],
    pub virtual_dr6: ::std::os::raw::c_ulong,
    pub ptrace_dr7: ::std::os::raw::c_ulong,
    pub cr2: ::std::os::raw::c_ulong,
    pub trap_nr: ::std::os::raw::c_ulong,
    pub error_code: ::std::os::raw::c_ulong,
    pub io_bitmap: *mut io_bitmap,
    pub iopl_emul: ::std::os::raw::c_ulong,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub pkru: u32_,
    pub features: ::std::os::raw::c_ulong,
    pub features_locked: ::std::os::raw::c_ulong,
    pub shstk: thread_shstk,
    pub __bindgen_padding_0: u64,
    pub fpu: fpu,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_struct"][::std::mem::size_of::<thread_struct>() - 4416usize];
    ["Alignment of thread_struct"][::std::mem::align_of::<thread_struct>() - 64usize];
    ["Offset of field: thread_struct::tls_array"]
        [::std::mem::offset_of!(thread_struct, tls_array) - 0usize];
    ["Offset of field: thread_struct::sp"][::std::mem::offset_of!(thread_struct, sp) - 24usize];
    ["Offset of field: thread_struct::es"][::std::mem::offset_of!(thread_struct, es) - 32usize];
    ["Offset of field: thread_struct::ds"][::std::mem::offset_of!(thread_struct, ds) - 34usize];
    ["Offset of field: thread_struct::fsindex"]
        [::std::mem::offset_of!(thread_struct, fsindex) - 36usize];
    ["Offset of field: thread_struct::gsindex"]
        [::std::mem::offset_of!(thread_struct, gsindex) - 38usize];
    ["Offset of field: thread_struct::fsbase"]
        [::std::mem::offset_of!(thread_struct, fsbase) - 40usize];
    ["Offset of field: thread_struct::gsbase"]
        [::std::mem::offset_of!(thread_struct, gsbase) - 48usize];
    ["Offset of field: thread_struct::ptrace_bps"]
        [::std::mem::offset_of!(thread_struct, ptrace_bps) - 56usize];
    ["Offset of field: thread_struct::virtual_dr6"]
        [::std::mem::offset_of!(thread_struct, virtual_dr6) - 88usize];
    ["Offset of field: thread_struct::ptrace_dr7"]
        [::std::mem::offset_of!(thread_struct, ptrace_dr7) - 96usize];
    ["Offset of field: thread_struct::cr2"][::std::mem::offset_of!(thread_struct, cr2) - 104usize];
    ["Offset of field: thread_struct::trap_nr"]
        [::std::mem::offset_of!(thread_struct, trap_nr) - 112usize];
    ["Offset of field: thread_struct::error_code"]
        [::std::mem::offset_of!(thread_struct, error_code) - 120usize];
    ["Offset of field: thread_struct::io_bitmap"]
        [::std::mem::offset_of!(thread_struct, io_bitmap) - 128usize];
    ["Offset of field: thread_struct::iopl_emul"]
        [::std::mem::offset_of!(thread_struct, iopl_emul) - 136usize];
    ["Offset of field: thread_struct::pkru"]
        [::std::mem::offset_of!(thread_struct, pkru) - 148usize];
    ["Offset of field: thread_struct::features"]
        [::std::mem::offset_of!(thread_struct, features) - 152usize];
    ["Offset of field: thread_struct::features_locked"]
        [::std::mem::offset_of!(thread_struct, features_locked) - 160usize];
    ["Offset of field: thread_struct::shstk"]
        [::std::mem::offset_of!(thread_struct, shstk) - 168usize];
    ["Offset of field: thread_struct::fpu"][::std::mem::offset_of!(thread_struct, fpu) - 192usize];
};
impl thread_struct {
    #[inline]
    pub fn iopl_warn(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_iopl_warn(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iopl_warn: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iopl_warn: u32 = unsafe { ::std::mem::transmute(iopl_warn) };
            iopl_warn as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn fpu_thread_struct_whitelist(
        offset: *mut ::std::os::raw::c_ulong,
        size: *mut ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __get_wchan(p: *mut task_struct) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn select_idle_routine();
}
extern "C" {
    pub fn amd_e400_c1e_apic_setup();
}
extern "C" {
    pub static mut boot_option_idle_override: ::std::os::raw::c_ulong;
}
pub const idle_boot_override_IDLE_NO_OVERRIDE: idle_boot_override = 0;
pub const idle_boot_override_IDLE_HALT: idle_boot_override = 1;
pub const idle_boot_override_IDLE_NOMWAIT: idle_boot_override = 2;
pub const idle_boot_override_IDLE_POLL: idle_boot_override = 3;
pub type idle_boot_override = ::std::os::raw::c_uint;
extern "C" {
    pub fn enable_sep_cpu();
}
extern "C" {
    pub static mut early_gdt_descr: desc_ptr;
}
extern "C" {
    pub fn switch_gdt_and_percpu_base(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn load_direct_gdt(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn load_fixmap_gdt(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cpu_init();
}
extern "C" {
    pub fn cpu_init_exception_handling();
}
extern "C" {
    pub fn cr4_init();
}
extern "C" {
    pub fn set_task_blockstep(task: *mut task_struct, on: bool_);
}
extern "C" {
    pub static mut bootloader_type: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut bootloader_version: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ignore_fpu_irq: ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __top_init_kernel_stack: [::std::os::raw::c_ulong; 0usize];
}
extern "C" {
    pub fn KSTK_ESP(task: *mut task_struct) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn start_thread(
        regs: *mut pt_regs,
        new_ip: ::std::os::raw::c_ulong,
        new_sp: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn get_tsc_mode(adr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tsc_mode(val: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msr_misc_features_shadow: ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn amd_get_highest_perf() -> u32_;
}
extern "C" {
    pub fn amd_check_microcode();
}
extern "C" {
    pub fn arch_align_stack(sp: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn free_init_pages(
        what: *const ::std::os::raw::c_char,
        begin: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn free_kernel_image_pages(
        what: *const ::std::os::raw::c_char,
        begin: *mut ::std::os::raw::c_void,
        end: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn default_idle();
}
extern "C" {
    pub fn xen_set_default_idle() -> bool_;
}
extern "C" {
    pub fn stop_this_cpu(dummy: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn microcode_check(prev_info: *mut cpuinfo_x86);
}
extern "C" {
    pub fn store_cpu_caps(info: *mut cpuinfo_x86);
}
pub const l1tf_mitigations_L1TF_MITIGATION_OFF: l1tf_mitigations = 0;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH_NOWARN: l1tf_mitigations = 1;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH: l1tf_mitigations = 2;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH_NOSMT: l1tf_mitigations = 3;
pub const l1tf_mitigations_L1TF_MITIGATION_FULL: l1tf_mitigations = 4;
pub const l1tf_mitigations_L1TF_MITIGATION_FULL_FORCE: l1tf_mitigations = 5;
pub type l1tf_mitigations = ::std::os::raw::c_uint;
extern "C" {
    pub static mut l1tf_mitigation: l1tf_mitigations;
}
pub const mds_mitigations_MDS_MITIGATION_OFF: mds_mitigations = 0;
pub const mds_mitigations_MDS_MITIGATION_FULL: mds_mitigations = 1;
pub const mds_mitigations_MDS_MITIGATION_VMWERV: mds_mitigations = 2;
pub type mds_mitigations = ::std::os::raw::c_uint;
extern "C" {
    pub fn gds_ucode_mitigated() -> bool_;
}
pub const cpuid_leafs_CPUID_1_EDX: cpuid_leafs = 0;
pub const cpuid_leafs_CPUID_8000_0001_EDX: cpuid_leafs = 1;
pub const cpuid_leafs_CPUID_8086_0001_EDX: cpuid_leafs = 2;
pub const cpuid_leafs_CPUID_LNX_1: cpuid_leafs = 3;
pub const cpuid_leafs_CPUID_1_ECX: cpuid_leafs = 4;
pub const cpuid_leafs_CPUID_C000_0001_EDX: cpuid_leafs = 5;
pub const cpuid_leafs_CPUID_8000_0001_ECX: cpuid_leafs = 6;
pub const cpuid_leafs_CPUID_LNX_2: cpuid_leafs = 7;
pub const cpuid_leafs_CPUID_LNX_3: cpuid_leafs = 8;
pub const cpuid_leafs_CPUID_7_0_EBX: cpuid_leafs = 9;
pub const cpuid_leafs_CPUID_D_1_EAX: cpuid_leafs = 10;
pub const cpuid_leafs_CPUID_LNX_4: cpuid_leafs = 11;
pub const cpuid_leafs_CPUID_7_1_EAX: cpuid_leafs = 12;
pub const cpuid_leafs_CPUID_8000_0008_EBX: cpuid_leafs = 13;
pub const cpuid_leafs_CPUID_6_EAX: cpuid_leafs = 14;
pub const cpuid_leafs_CPUID_8000_000A_EDX: cpuid_leafs = 15;
pub const cpuid_leafs_CPUID_7_ECX: cpuid_leafs = 16;
pub const cpuid_leafs_CPUID_8000_0007_EBX: cpuid_leafs = 17;
pub const cpuid_leafs_CPUID_7_EDX: cpuid_leafs = 18;
pub const cpuid_leafs_CPUID_8000_001F_EAX: cpuid_leafs = 19;
pub const cpuid_leafs_CPUID_8000_0021_EAX: cpuid_leafs = 20;
pub const cpuid_leafs_CPUID_LNX_5: cpuid_leafs = 21;
pub const cpuid_leafs_NR_CPUID_WORDS: cpuid_leafs = 22;
pub type cpuid_leafs = ::std::os::raw::c_uint;
extern "C" {
    pub static x86_cap_flags: [*const ::std::os::raw::c_char; 704usize];
}
extern "C" {
    pub static x86_power_flags: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static x86_bug_flags: [*const ::std::os::raw::c_char; 64usize];
}
extern "C" {
    pub fn setup_clear_cpu_cap(bit: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn clear_cpu_cap(c: *mut cpuinfo_x86, bit: ::std::os::raw::c_uint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_info {
    pub flags: ::std::os::raw::c_ulong,
    pub syscall_work: ::std::os::raw::c_ulong,
    pub status: u32_,
    pub cpu: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_info"][::std::mem::size_of::<thread_info>() - 24usize];
    ["Alignment of thread_info"][::std::mem::align_of::<thread_info>() - 8usize];
    ["Offset of field: thread_info::flags"][::std::mem::offset_of!(thread_info, flags) - 0usize];
    ["Offset of field: thread_info::syscall_work"]
        [::std::mem::offset_of!(thread_info, syscall_work) - 8usize];
    ["Offset of field: thread_info::status"][::std::mem::offset_of!(thread_info, status) - 16usize];
    ["Offset of field: thread_info::cpu"][::std::mem::offset_of!(thread_info, cpu) - 20usize];
};
extern "C" {
    pub fn arch_setup_new_exec();
}
extern "C" {
    pub fn __check_object_size(
        ptr: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_ulong,
        to_user: bool_,
    );
}
extern "C" {
    pub fn __bad_copy_from();
}
extern "C" {
    pub fn __bad_copy_to();
}
extern "C" {
    pub fn __copy_overflow(size: ::std::os::raw::c_int, count: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn arch_task_cache_init();
}
extern "C" {
    pub fn arch_release_task_struct(tsk: *mut task_struct);
}
extern "C" {
    pub fn arch_dup_task_struct(
        dst: *mut task_struct,
        src: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setup_cpu_local_masks();
}
extern "C" {
    pub static mut cpu_sibling_map: *mut cpumask;
}
extern "C" {
    pub static mut cpu_core_map: *mut cpumask;
}
extern "C" {
    pub static mut cpu_die_map: *mut cpumask;
}
extern "C" {
    pub static mut cpu_llc_shared_map: *mut cpumask;
}
extern "C" {
    pub static mut cpu_l2c_shared_map: *mut cpumask;
}
extern "C" {
    pub static mut x86_cpu_to_apicid: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_apicid_early_ptr: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_apicid_early_map: [::std::os::raw::c_uint; 0usize];
}
extern "C" {
    pub static mut x86_cpu_to_acpiid: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_acpiid_early_ptr: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_acpiid_early_map: [::std::os::raw::c_uint; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smp_ops {
    pub smp_prepare_boot_cpu: ::std::option::Option<unsafe extern "C" fn()>,
    pub smp_prepare_cpus:
        ::std::option::Option<unsafe extern "C" fn(max_cpus: ::std::os::raw::c_uint)>,
    pub smp_cpus_done:
        ::std::option::Option<unsafe extern "C" fn(max_cpus: ::std::os::raw::c_uint)>,
    pub stop_other_cpus: ::std::option::Option<unsafe extern "C" fn(wait: ::std::os::raw::c_int)>,
    pub crash_stop_other_cpus: ::std::option::Option<unsafe extern "C" fn()>,
    pub smp_send_reschedule:
        ::std::option::Option<unsafe extern "C" fn(cpu: ::std::os::raw::c_int)>,
    pub cleanup_dead_cpu: ::std::option::Option<unsafe extern "C" fn(cpu: ::std::os::raw::c_uint)>,
    pub poll_sync_state: ::std::option::Option<unsafe extern "C" fn()>,
    pub kick_ap_alive: ::std::option::Option<
        unsafe extern "C" fn(
            cpu: ::std::os::raw::c_uint,
            tidle: *mut task_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub cpu_disable: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub cpu_die: ::std::option::Option<unsafe extern "C" fn(cpu: ::std::os::raw::c_uint)>,
    pub play_dead: ::std::option::Option<unsafe extern "C" fn()>,
    pub stop_this_cpu: ::std::option::Option<unsafe extern "C" fn()>,
    pub send_call_func_ipi: ::std::option::Option<unsafe extern "C" fn(mask: *const cpumask)>,
    pub send_call_func_single_ipi:
        ::std::option::Option<unsafe extern "C" fn(cpu: ::std::os::raw::c_int)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of smp_ops"][::std::mem::size_of::<smp_ops>() - 120usize];
    ["Alignment of smp_ops"][::std::mem::align_of::<smp_ops>() - 8usize];
    ["Offset of field: smp_ops::smp_prepare_boot_cpu"]
        [::std::mem::offset_of!(smp_ops, smp_prepare_boot_cpu) - 0usize];
    ["Offset of field: smp_ops::smp_prepare_cpus"]
        [::std::mem::offset_of!(smp_ops, smp_prepare_cpus) - 8usize];
    ["Offset of field: smp_ops::smp_cpus_done"]
        [::std::mem::offset_of!(smp_ops, smp_cpus_done) - 16usize];
    ["Offset of field: smp_ops::stop_other_cpus"]
        [::std::mem::offset_of!(smp_ops, stop_other_cpus) - 24usize];
    ["Offset of field: smp_ops::crash_stop_other_cpus"]
        [::std::mem::offset_of!(smp_ops, crash_stop_other_cpus) - 32usize];
    ["Offset of field: smp_ops::smp_send_reschedule"]
        [::std::mem::offset_of!(smp_ops, smp_send_reschedule) - 40usize];
    ["Offset of field: smp_ops::cleanup_dead_cpu"]
        [::std::mem::offset_of!(smp_ops, cleanup_dead_cpu) - 48usize];
    ["Offset of field: smp_ops::poll_sync_state"]
        [::std::mem::offset_of!(smp_ops, poll_sync_state) - 56usize];
    ["Offset of field: smp_ops::kick_ap_alive"]
        [::std::mem::offset_of!(smp_ops, kick_ap_alive) - 64usize];
    ["Offset of field: smp_ops::cpu_disable"]
        [::std::mem::offset_of!(smp_ops, cpu_disable) - 72usize];
    ["Offset of field: smp_ops::cpu_die"][::std::mem::offset_of!(smp_ops, cpu_die) - 80usize];
    ["Offset of field: smp_ops::play_dead"][::std::mem::offset_of!(smp_ops, play_dead) - 88usize];
    ["Offset of field: smp_ops::stop_this_cpu"]
        [::std::mem::offset_of!(smp_ops, stop_this_cpu) - 96usize];
    ["Offset of field: smp_ops::send_call_func_ipi"]
        [::std::mem::offset_of!(smp_ops, send_call_func_ipi) - 104usize];
    ["Offset of field: smp_ops::send_call_func_single_ipi"]
        [::std::mem::offset_of!(smp_ops, send_call_func_single_ipi) - 112usize];
};
extern "C" {
    pub fn set_cpu_sibling_map(cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut smp_ops: smp_ops;
}
extern "C" {
    pub fn cpu_disable_common();
}
extern "C" {
    pub fn native_smp_prepare_boot_cpu();
}
extern "C" {
    pub fn smp_prepare_cpus_common();
}
extern "C" {
    pub fn native_smp_prepare_cpus(max_cpus: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn native_smp_cpus_done(max_cpus: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn common_cpu_up(
        cpunum: ::std::os::raw::c_uint,
        tidle: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn native_kick_ap(
        cpu: ::std::os::raw::c_uint,
        tidle: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn native_cpu_disable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hlt_play_dead() -> !;
}
extern "C" {
    pub fn native_play_dead();
}
extern "C" {
    pub fn play_dead_common();
}
extern "C" {
    pub fn wbinvd_on_cpu(cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wbinvd_on_all_cpus() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smp_kick_mwait_play_dead();
}
extern "C" {
    pub fn native_smp_send_reschedule(cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn native_send_call_func_ipi(mask: *const cpumask);
}
extern "C" {
    pub fn native_send_call_func_single_ipi(cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smp_store_cpu_info(id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smp_reboot_interrupt();
}
extern "C" {
    pub fn smp_reschedule_interrupt(regs: *mut pt_regs);
}
extern "C" {
    pub fn smp_call_function_interrupt(regs: *mut pt_regs);
}
extern "C" {
    pub fn smp_call_function_single_interrupt(r: *mut pt_regs);
}
extern "C" {
    pub static mut smpboot_control: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut apic_mmio_base: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __cpu_up(
        cpunum: ::std::os::raw::c_uint,
        tidle: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smp_call_function(
        func: smp_call_func_t,
        info: *mut ::std::os::raw::c_void,
        wait: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn smp_call_function_many(
        mask: *const cpumask,
        func: smp_call_func_t,
        info: *mut ::std::os::raw::c_void,
        wait: bool_,
    );
}
extern "C" {
    pub fn smp_call_function_any(
        mask: *const cpumask,
        func: smp_call_func_t,
        info: *mut ::std::os::raw::c_void,
        wait: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kick_all_cpus_sync();
}
extern "C" {
    pub fn wake_up_all_idle_cpus();
}
extern "C" {
    pub fn call_function_init();
}
extern "C" {
    pub fn generic_smp_call_function_single_interrupt();
}
extern "C" {
    pub static mut setup_max_cpus: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn setup_nr_cpu_ids();
}
extern "C" {
    pub fn smp_init();
}
extern "C" {
    pub static mut __boot_cpu_id: ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_disable_smp_support();
}
extern "C" {
    pub fn arch_thaw_secondary_cpus_begin();
}
extern "C" {
    pub fn arch_thaw_secondary_cpus_end();
}
extern "C" {
    pub fn smp_setup_processor_id();
}
extern "C" {
    pub fn smp_call_on_cpu(
        cpu: ::std::os::raw::c_uint,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        par: *mut ::std::os::raw::c_void,
        phys: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smpcfd_prepare_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smpcfd_dead_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smpcfd_dying_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lock_is_held(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockdep_is_held(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
pub const xhlock_context_t_XHLOCK_HARD: xhlock_context_t = 0;
pub const xhlock_context_t_XHLOCK_SOFT: xhlock_context_t = 1;
pub const xhlock_context_t_XHLOCK_CTX_NR: xhlock_context_t = 2;
pub type xhlock_context_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct optimistic_spin_queue {
    pub tail: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of optimistic_spin_queue"][::std::mem::size_of::<optimistic_spin_queue>() - 4usize];
    ["Alignment of optimistic_spin_queue"]
        [::std::mem::align_of::<optimistic_spin_queue>() - 4usize];
    ["Offset of field: optimistic_spin_queue::tail"]
        [::std::mem::offset_of!(optimistic_spin_queue, tail) - 0usize];
};
extern "C" {
    pub fn osq_lock(lock: *mut optimistic_spin_queue) -> bool_;
}
extern "C" {
    pub fn osq_unlock(lock: *mut optimistic_spin_queue);
}
extern "C" {
    pub static mut debug_locks: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_locks_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub fn debug_locks_off() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mutex {
    pub owner: atomic_long_t,
    pub wait_lock: raw_spinlock_t,
    pub osq: optimistic_spin_queue,
    pub wait_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mutex"][::std::mem::size_of::<mutex>() - 32usize];
    ["Alignment of mutex"][::std::mem::align_of::<mutex>() - 8usize];
    ["Offset of field: mutex::owner"][::std::mem::offset_of!(mutex, owner) - 0usize];
    ["Offset of field: mutex::wait_lock"][::std::mem::offset_of!(mutex, wait_lock) - 8usize];
    ["Offset of field: mutex::osq"][::std::mem::offset_of!(mutex, osq) - 12usize];
    ["Offset of field: mutex::wait_list"][::std::mem::offset_of!(mutex, wait_list) - 16usize];
};
extern "C" {
    pub fn __mutex_init(
        lock: *mut mutex,
        name: *const ::std::os::raw::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    #[doc = " mutex_is_locked - is the mutex locked\n @lock: the mutex to be queried\n\n Returns true if the mutex is locked, false if unlocked."]
    pub fn mutex_is_locked(lock: *mut mutex) -> bool_;
}
extern "C" {
    pub fn mutex_lock(lock: *mut mutex);
}
extern "C" {
    pub fn mutex_lock_interruptible(lock: *mut mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mutex_lock_killable(lock: *mut mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mutex_lock_io(lock: *mut mutex);
}
extern "C" {
    pub fn mutex_trylock(lock: *mut mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mutex_unlock(lock: *mut mutex);
}
extern "C" {
    pub fn atomic_dec_and_mutex_lock(cnt: *mut atomic_t, lock: *mut mutex)
        -> ::std::os::raw::c_int;
}
pub type class_mutex_t = *mut mutex;
pub type class_mutex_try_t = class_mutex_t;
pub type class_mutex_intr_t = class_mutex_t;
extern "C" {
    pub fn _local_bh_enable();
}
extern "C" {
    pub fn __local_bh_enable_ip(ip: ::std::os::raw::c_ulong, cnt: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn native_queued_spin_lock_slowpath(lock: *mut qspinlock, val: u32_);
}
extern "C" {
    pub fn __pv_init_lock_hash();
}
extern "C" {
    pub fn __pv_queued_spin_lock_slowpath(lock: *mut qspinlock, val: u32_);
}
extern "C" {
    pub fn __raw_callee_save___pv_queued_spin_unlock(lock: *mut qspinlock);
}
extern "C" {
    pub static mut nopvspin: bool_;
}
extern "C" {
    pub static mut virt_spin_lock_key: static_key_false;
}
extern "C" {
    pub fn queued_read_lock_slowpath(lock: *mut qrwlock);
}
extern "C" {
    pub fn queued_write_lock_slowpath(lock: *mut qrwlock);
}
extern "C" {
    pub fn in_lock_functions(addr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _raw_spin_lock(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_nested(lock: *mut raw_spinlock_t, subclass: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _raw_spin_lock_nest_lock(lock: *mut raw_spinlock_t, map: *mut lockdep_map);
}
extern "C" {
    pub fn _raw_spin_lock_bh(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_irq(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_irqsave(lock: *mut raw_spinlock_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _raw_spin_lock_irqsave_nested(
        lock: *mut raw_spinlock_t,
        subclass: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _raw_spin_trylock(lock: *mut raw_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _raw_spin_trylock_bh(lock: *mut raw_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _raw_spin_unlock(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_bh(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_irq(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_irqrestore(lock: *mut raw_spinlock_t, flags: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn _raw_read_lock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_nested(lock: *mut rwlock_t, subclass: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _raw_read_lock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_lock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_lock_irqsave(lock: *mut rwlock_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _raw_write_lock_irqsave(lock: *mut rwlock_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _raw_read_trylock(lock: *mut rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _raw_write_trylock(lock: *mut rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _raw_read_unlock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_irqrestore(lock: *mut rwlock_t, flags: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn _raw_write_unlock_irqrestore(lock: *mut rwlock_t, flags: ::std::os::raw::c_ulong);
}
extern "C" {
    #[doc = " atomic_dec_and_lock - lock on reaching reference count zero\n @atomic: the atomic counter\n @lock: the spinlock in question\n\n Decrements @atomic by 1.  If the result is 0, returns true and locks\n @lock.  Returns false for all other cases."]
    pub fn _atomic_dec_and_lock(
        atomic: *mut atomic_t,
        lock: *mut spinlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_lock_irqsave(
        atomic: *mut atomic_t,
        lock: *mut spinlock_t,
        flags: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_raw_lock(
        atomic: *mut atomic_t,
        lock: *mut raw_spinlock_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_raw_lock_irqsave(
        atomic: *mut atomic_t,
        lock: *mut raw_spinlock_t,
        flags: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __alloc_bucket_spinlocks(
        locks: *mut *mut spinlock_t,
        lock_mask: *mut ::std::os::raw::c_uint,
        max_size: usize,
        cpu_mult: ::std::os::raw::c_uint,
        gfp: gfp_t,
        name: *const ::std::os::raw::c_char,
        key: *mut lock_class_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_bucket_spinlocks(locks: *mut spinlock_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_raw_spinlock_t {
    pub lock: *mut raw_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_raw_spinlock_t"][::std::mem::size_of::<class_raw_spinlock_t>() - 8usize];
    ["Alignment of class_raw_spinlock_t"][::std::mem::align_of::<class_raw_spinlock_t>() - 8usize];
    ["Offset of field: class_raw_spinlock_t::lock"]
        [::std::mem::offset_of!(class_raw_spinlock_t, lock) - 0usize];
};
pub type class_raw_spinlock_try_t = class_raw_spinlock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_raw_spinlock_nested_t {
    pub lock: *mut raw_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_raw_spinlock_nested_t"]
        [::std::mem::size_of::<class_raw_spinlock_nested_t>() - 8usize];
    ["Alignment of class_raw_spinlock_nested_t"]
        [::std::mem::align_of::<class_raw_spinlock_nested_t>() - 8usize];
    ["Offset of field: class_raw_spinlock_nested_t::lock"]
        [::std::mem::offset_of!(class_raw_spinlock_nested_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_raw_spinlock_irq_t {
    pub lock: *mut raw_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_raw_spinlock_irq_t"]
        [::std::mem::size_of::<class_raw_spinlock_irq_t>() - 8usize];
    ["Alignment of class_raw_spinlock_irq_t"]
        [::std::mem::align_of::<class_raw_spinlock_irq_t>() - 8usize];
    ["Offset of field: class_raw_spinlock_irq_t::lock"]
        [::std::mem::offset_of!(class_raw_spinlock_irq_t, lock) - 0usize];
};
pub type class_raw_spinlock_irq_try_t = class_raw_spinlock_irq_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_raw_spinlock_irqsave_t {
    pub lock: *mut raw_spinlock_t,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_raw_spinlock_irqsave_t"]
        [::std::mem::size_of::<class_raw_spinlock_irqsave_t>() - 16usize];
    ["Alignment of class_raw_spinlock_irqsave_t"]
        [::std::mem::align_of::<class_raw_spinlock_irqsave_t>() - 8usize];
    ["Offset of field: class_raw_spinlock_irqsave_t::lock"]
        [::std::mem::offset_of!(class_raw_spinlock_irqsave_t, lock) - 0usize];
    ["Offset of field: class_raw_spinlock_irqsave_t::flags"]
        [::std::mem::offset_of!(class_raw_spinlock_irqsave_t, flags) - 8usize];
};
pub type class_raw_spinlock_irqsave_try_t = class_raw_spinlock_irqsave_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_spinlock_t {
    pub lock: *mut spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_spinlock_t"][::std::mem::size_of::<class_spinlock_t>() - 8usize];
    ["Alignment of class_spinlock_t"][::std::mem::align_of::<class_spinlock_t>() - 8usize];
    ["Offset of field: class_spinlock_t::lock"]
        [::std::mem::offset_of!(class_spinlock_t, lock) - 0usize];
};
pub type class_spinlock_try_t = class_spinlock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_spinlock_irq_t {
    pub lock: *mut spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_spinlock_irq_t"][::std::mem::size_of::<class_spinlock_irq_t>() - 8usize];
    ["Alignment of class_spinlock_irq_t"][::std::mem::align_of::<class_spinlock_irq_t>() - 8usize];
    ["Offset of field: class_spinlock_irq_t::lock"]
        [::std::mem::offset_of!(class_spinlock_irq_t, lock) - 0usize];
};
pub type class_spinlock_irq_try_t = class_spinlock_irq_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_spinlock_irqsave_t {
    pub lock: *mut spinlock_t,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_spinlock_irqsave_t"]
        [::std::mem::size_of::<class_spinlock_irqsave_t>() - 16usize];
    ["Alignment of class_spinlock_irqsave_t"]
        [::std::mem::align_of::<class_spinlock_irqsave_t>() - 8usize];
    ["Offset of field: class_spinlock_irqsave_t::lock"]
        [::std::mem::offset_of!(class_spinlock_irqsave_t, lock) - 0usize];
    ["Offset of field: class_spinlock_irqsave_t::flags"]
        [::std::mem::offset_of!(class_spinlock_irqsave_t, flags) - 8usize];
};
pub type class_spinlock_irqsave_try_t = class_spinlock_irqsave_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_read_lock_t {
    pub lock: *mut rwlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_read_lock_t"][::std::mem::size_of::<class_read_lock_t>() - 8usize];
    ["Alignment of class_read_lock_t"][::std::mem::align_of::<class_read_lock_t>() - 8usize];
    ["Offset of field: class_read_lock_t::lock"]
        [::std::mem::offset_of!(class_read_lock_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_read_lock_irq_t {
    pub lock: *mut rwlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_read_lock_irq_t"][::std::mem::size_of::<class_read_lock_irq_t>() - 8usize];
    ["Alignment of class_read_lock_irq_t"]
        [::std::mem::align_of::<class_read_lock_irq_t>() - 8usize];
    ["Offset of field: class_read_lock_irq_t::lock"]
        [::std::mem::offset_of!(class_read_lock_irq_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_read_lock_irqsave_t {
    pub lock: *mut rwlock_t,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_read_lock_irqsave_t"]
        [::std::mem::size_of::<class_read_lock_irqsave_t>() - 16usize];
    ["Alignment of class_read_lock_irqsave_t"]
        [::std::mem::align_of::<class_read_lock_irqsave_t>() - 8usize];
    ["Offset of field: class_read_lock_irqsave_t::lock"]
        [::std::mem::offset_of!(class_read_lock_irqsave_t, lock) - 0usize];
    ["Offset of field: class_read_lock_irqsave_t::flags"]
        [::std::mem::offset_of!(class_read_lock_irqsave_t, flags) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_write_lock_t {
    pub lock: *mut rwlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_write_lock_t"][::std::mem::size_of::<class_write_lock_t>() - 8usize];
    ["Alignment of class_write_lock_t"][::std::mem::align_of::<class_write_lock_t>() - 8usize];
    ["Offset of field: class_write_lock_t::lock"]
        [::std::mem::offset_of!(class_write_lock_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_write_lock_irq_t {
    pub lock: *mut rwlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_write_lock_irq_t"][::std::mem::size_of::<class_write_lock_irq_t>() - 8usize];
    ["Alignment of class_write_lock_irq_t"]
        [::std::mem::align_of::<class_write_lock_irq_t>() - 8usize];
    ["Offset of field: class_write_lock_irq_t::lock"]
        [::std::mem::offset_of!(class_write_lock_irq_t, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_write_lock_irqsave_t {
    pub lock: *mut rwlock_t,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_write_lock_irqsave_t"]
        [::std::mem::size_of::<class_write_lock_irqsave_t>() - 16usize];
    ["Alignment of class_write_lock_irqsave_t"]
        [::std::mem::align_of::<class_write_lock_irqsave_t>() - 8usize];
    ["Offset of field: class_write_lock_irqsave_t::lock"]
        [::std::mem::offset_of!(class_write_lock_irqsave_t, lock) - 0usize];
    ["Offset of field: class_write_lock_irqsave_t::flags"]
        [::std::mem::offset_of!(class_write_lock_irqsave_t, flags) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rw_semaphore {
    pub count: atomic_long_t,
    pub owner: atomic_long_t,
    pub osq: optimistic_spin_queue,
    pub wait_lock: raw_spinlock_t,
    pub wait_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rw_semaphore"][::std::mem::size_of::<rw_semaphore>() - 40usize];
    ["Alignment of rw_semaphore"][::std::mem::align_of::<rw_semaphore>() - 8usize];
    ["Offset of field: rw_semaphore::count"][::std::mem::offset_of!(rw_semaphore, count) - 0usize];
    ["Offset of field: rw_semaphore::owner"][::std::mem::offset_of!(rw_semaphore, owner) - 8usize];
    ["Offset of field: rw_semaphore::osq"][::std::mem::offset_of!(rw_semaphore, osq) - 16usize];
    ["Offset of field: rw_semaphore::wait_lock"]
        [::std::mem::offset_of!(rw_semaphore, wait_lock) - 20usize];
    ["Offset of field: rw_semaphore::wait_list"]
        [::std::mem::offset_of!(rw_semaphore, wait_list) - 24usize];
};
extern "C" {
    pub fn __init_rwsem(
        sem: *mut rw_semaphore,
        name: *const ::std::os::raw::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn down_read(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn down_read_interruptible(sem: *mut rw_semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn down_read_killable(sem: *mut rw_semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn down_read_trylock(sem: *mut rw_semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn down_write(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn down_write_killable(sem: *mut rw_semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn down_write_trylock(sem: *mut rw_semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn up_read(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn up_write(sem: *mut rw_semaphore);
}
pub type class_rwsem_read_t = *mut rw_semaphore;
pub type class_rwsem_read_try_t = class_rwsem_read_t;
pub type class_rwsem_read_intr_t = class_rwsem_read_t;
pub type class_rwsem_write_t = *mut rw_semaphore;
pub type class_rwsem_write_try_t = class_rwsem_write_t;
extern "C" {
    pub fn downgrade_write(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn ct_irq_enter();
}
extern "C" {
    pub fn ct_irq_exit();
}
extern "C" {
    pub fn ct_irq_enter_irqson();
}
extern "C" {
    pub fn ct_irq_exit_irqson();
}
extern "C" {
    pub fn ct_nmi_enter();
}
extern "C" {
    pub fn ct_nmi_exit();
}
extern "C" {
    pub fn call_rcu(head: *mut callback_head, func: rcu_callback_t);
}
extern "C" {
    pub fn rcu_barrier_tasks();
}
extern "C" {
    pub fn rcu_barrier_tasks_rude();
}
extern "C" {
    pub fn synchronize_rcu();
}
extern "C" {
    pub fn get_completed_synchronize_rcu() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_completed_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn __rcu_read_lock();
}
extern "C" {
    pub fn __rcu_read_unlock();
}
extern "C" {
    pub fn call_rcu_hurry(head: *mut callback_head, func: rcu_callback_t);
}
extern "C" {
    pub fn rcu_init();
}
extern "C" {
    pub static mut rcu_scheduler_active: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcu_sched_clock_irq(user: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rcu_init_tasks_generic();
}
extern "C" {
    pub fn rcu_sysrq_start();
}
extern "C" {
    pub fn rcu_sysrq_end();
}
extern "C" {
    pub fn rcu_init_nohz();
}
extern "C" {
    pub fn rcu_nocb_cpu_offload(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcu_nocb_cpu_deoffload(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcu_nocb_flush_deferred_wakeup();
}
extern "C" {
    pub fn call_rcu_tasks(head: *mut callback_head, func: rcu_callback_t);
}
extern "C" {
    pub fn synchronize_rcu_tasks();
}
extern "C" {
    pub fn rcu_trc_cmpxchg_need_qs(t: *mut task_struct, old: u8_, new: u8_) -> u8_;
}
extern "C" {
    pub fn rcu_tasks_trace_qs_blkd(t: *mut task_struct);
}
extern "C" {
    pub fn call_rcu_tasks_rude(head: *mut callback_head, func: rcu_callback_t);
}
extern "C" {
    pub fn synchronize_rcu_tasks_rude();
}
extern "C" {
    pub fn exit_tasks_rcu_start();
}
extern "C" {
    pub fn exit_tasks_rcu_finish();
}
extern "C" {
    pub fn rcu_softirq_qs();
}
extern "C" {
    pub fn rcu_note_context_switch(preempt: bool_);
}
extern "C" {
    pub fn rcu_needs_cpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcu_cpu_stall_reset();
}
extern "C" {
    pub fn rcu_request_urgent_qs_task(t: *mut task_struct);
}
extern "C" {
    pub fn synchronize_rcu_expedited();
}
extern "C" {
    pub fn kvfree_call_rcu(head: *mut callback_head, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rcu_barrier();
}
extern "C" {
    pub fn rcu_momentary_dyntick_idle();
}
extern "C" {
    pub fn kfree_rcu_scheduler_running();
}
extern "C" {
    pub fn rcu_gp_might_be_stalled() -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_gp_oldstate {
    pub rgos_norm: ::std::os::raw::c_ulong,
    pub rgos_exp: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_gp_oldstate"][::std::mem::size_of::<rcu_gp_oldstate>() - 16usize];
    ["Alignment of rcu_gp_oldstate"][::std::mem::align_of::<rcu_gp_oldstate>() - 8usize];
    ["Offset of field: rcu_gp_oldstate::rgos_norm"]
        [::std::mem::offset_of!(rcu_gp_oldstate, rgos_norm) - 0usize];
    ["Offset of field: rcu_gp_oldstate::rgos_exp"]
        [::std::mem::offset_of!(rcu_gp_oldstate, rgos_exp) - 8usize];
};
extern "C" {
    pub fn start_poll_synchronize_rcu_expedited() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_rcu_expedited_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn cond_synchronize_rcu_expedited(oldstate: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn cond_synchronize_rcu_expedited_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn get_state_synchronize_rcu() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_state_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn start_poll_synchronize_rcu() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn poll_state_synchronize_rcu(oldstate: ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn poll_state_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate) -> bool_;
}
extern "C" {
    pub fn cond_synchronize_rcu(oldstate: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn cond_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn rcu_preempt_deferred_qs(t: *mut task_struct);
}
extern "C" {
    pub fn exit_rcu();
}
extern "C" {
    pub fn rcu_scheduler_starting();
}
extern "C" {
    pub fn rcu_end_inkernel_boot();
}
extern "C" {
    pub fn rcu_inkernel_boot_has_ended() -> bool_;
}
extern "C" {
    pub fn rcu_is_watching() -> bool_;
}
extern "C" {
    pub fn rcutree_prepare_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutree_online_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutree_report_cpu_starting(cpu: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rcutree_dead_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutree_dying_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutree_offline_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutree_migrate_callbacks(cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rcutree_report_cpu_dead();
}
extern "C" {
    pub static mut rcu_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_bh_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_sched_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_callback_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_expedited: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut rcu_normal: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_rcu_t {
    pub lock: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_rcu_t"][::std::mem::size_of::<class_rcu_t>() - 8usize];
    ["Alignment of class_rcu_t"][::std::mem::align_of::<class_rcu_t>() - 8usize];
    ["Offset of field: class_rcu_t::lock"][::std::mem::offset_of!(class_rcu_t, lock) - 0usize];
};
pub type time64_t = __s64;
pub type timeu64_t = __u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_timespec"][::std::mem::size_of::<__kernel_timespec>() - 16usize];
    ["Alignment of __kernel_timespec"][::std::mem::align_of::<__kernel_timespec>() - 8usize];
    ["Offset of field: __kernel_timespec::tv_sec"]
        [::std::mem::offset_of!(__kernel_timespec, tv_sec) - 0usize];
    ["Offset of field: __kernel_timespec::tv_nsec"]
        [::std::mem::offset_of!(__kernel_timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_itimerspec {
    pub it_interval: __kernel_timespec,
    pub it_value: __kernel_timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_itimerspec"][::std::mem::size_of::<__kernel_itimerspec>() - 32usize];
    ["Alignment of __kernel_itimerspec"][::std::mem::align_of::<__kernel_itimerspec>() - 8usize];
    ["Offset of field: __kernel_itimerspec::it_interval"]
        [::std::mem::offset_of!(__kernel_itimerspec, it_interval) - 0usize];
    ["Offset of field: __kernel_itimerspec::it_value"]
        [::std::mem::offset_of!(__kernel_itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_old_timeval {
    pub tv_sec: __kernel_long_t,
    pub tv_usec: __kernel_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_old_timeval"][::std::mem::size_of::<__kernel_old_timeval>() - 16usize];
    ["Alignment of __kernel_old_timeval"][::std::mem::align_of::<__kernel_old_timeval>() - 8usize];
    ["Offset of field: __kernel_old_timeval::tv_sec"]
        [::std::mem::offset_of!(__kernel_old_timeval, tv_sec) - 0usize];
    ["Offset of field: __kernel_old_timeval::tv_usec"]
        [::std::mem::offset_of!(__kernel_old_timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_old_timespec {
    pub tv_sec: __kernel_old_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_old_timespec"][::std::mem::size_of::<__kernel_old_timespec>() - 16usize];
    ["Alignment of __kernel_old_timespec"]
        [::std::mem::align_of::<__kernel_old_timespec>() - 8usize];
    ["Offset of field: __kernel_old_timespec::tv_sec"]
        [::std::mem::offset_of!(__kernel_old_timespec, tv_sec) - 0usize];
    ["Offset of field: __kernel_old_timespec::tv_nsec"]
        [::std::mem::offset_of!(__kernel_old_timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_old_itimerval {
    pub it_interval: __kernel_old_timeval,
    pub it_value: __kernel_old_timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_old_itimerval"][::std::mem::size_of::<__kernel_old_itimerval>() - 32usize];
    ["Alignment of __kernel_old_itimerval"]
        [::std::mem::align_of::<__kernel_old_itimerval>() - 8usize];
    ["Offset of field: __kernel_old_itimerval::it_interval"]
        [::std::mem::offset_of!(__kernel_old_itimerval, it_interval) - 0usize];
    ["Offset of field: __kernel_old_itimerval::it_value"]
        [::std::mem::offset_of!(__kernel_old_itimerval, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sock_timeval {
    pub tv_sec: __s64,
    pub tv_usec: __s64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sock_timeval"][::std::mem::size_of::<__kernel_sock_timeval>() - 16usize];
    ["Alignment of __kernel_sock_timeval"]
        [::std::mem::align_of::<__kernel_sock_timeval>() - 8usize];
    ["Offset of field: __kernel_sock_timeval::tv_sec"]
        [::std::mem::offset_of!(__kernel_sock_timeval, tv_sec) - 0usize];
    ["Offset of field: __kernel_sock_timeval::tv_usec"]
        [::std::mem::offset_of!(__kernel_sock_timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timezone"][::std::mem::size_of::<timezone>() - 8usize];
    ["Alignment of timezone"][::std::mem::align_of::<timezone>() - 4usize];
    ["Offset of field: timezone::tz_minuteswest"]
        [::std::mem::offset_of!(timezone, tz_minuteswest) - 0usize];
    ["Offset of field: timezone::tz_dsttime"]
        [::std::mem::offset_of!(timezone, tz_dsttime) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec64 {
    pub tv_sec: time64_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec64"][::std::mem::size_of::<timespec64>() - 16usize];
    ["Alignment of timespec64"][::std::mem::align_of::<timespec64>() - 8usize];
    ["Offset of field: timespec64::tv_sec"][::std::mem::offset_of!(timespec64, tv_sec) - 0usize];
    ["Offset of field: timespec64::tv_nsec"][::std::mem::offset_of!(timespec64, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec64 {
    pub it_interval: timespec64,
    pub it_value: timespec64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec64"][::std::mem::size_of::<itimerspec64>() - 32usize];
    ["Alignment of itimerspec64"][::std::mem::align_of::<itimerspec64>() - 8usize];
    ["Offset of field: itimerspec64::it_interval"]
        [::std::mem::offset_of!(itimerspec64, it_interval) - 0usize];
    ["Offset of field: itimerspec64::it_value"]
        [::std::mem::offset_of!(itimerspec64, it_value) - 16usize];
};
extern "C" {
    pub fn set_normalized_timespec64(ts: *mut timespec64, sec: time64_t, nsec: s64);
}
extern "C" {
    #[doc = " ns_to_timespec64 - Convert nanoseconds to timespec64\n @nsec:\tthe nanoseconds value to be converted\n\n Returns the timespec64 representation of the nsec parameter."]
    pub fn ns_to_timespec64(nsec: s64) -> timespec64;
}
extern "C" {
    pub fn timespec64_add_safe(lhs: timespec64, rhs: timespec64) -> timespec64;
}
extern "C" {
    pub static mut sys_tz: timezone;
}
extern "C" {
    pub fn get_timespec64(
        ts: *mut timespec64,
        uts: *const __kernel_timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_timespec64(
        ts: *const timespec64,
        uts: *mut __kernel_timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_itimerspec64(
        it: *mut itimerspec64,
        uit: *const __kernel_itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_itimerspec64(
        it: *const itimerspec64,
        uit: *mut __kernel_itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktime64(
        year: ::std::os::raw::c_uint,
        mon: ::std::os::raw::c_uint,
        day: ::std::os::raw::c_uint,
        hour: ::std::os::raw::c_uint,
        min: ::std::os::raw::c_uint,
        sec: ::std::os::raw::c_uint,
    ) -> time64_t;
}
extern "C" {
    pub fn clear_itimer();
}
extern "C" {
    pub fn do_utimes(
        dfd: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        times: *mut timespec64,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_long,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 40usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 24usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 32usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 36usize];
};
extern "C" {
    pub fn time64_to_tm(totalsecs: time64_t, offset: ::std::os::raw::c_int, result: *mut tm);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_timex_timeval {
    pub tv_sec: __kernel_time64_t,
    pub tv_usec: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_timex_timeval"][::std::mem::size_of::<__kernel_timex_timeval>() - 16usize];
    ["Alignment of __kernel_timex_timeval"]
        [::std::mem::align_of::<__kernel_timex_timeval>() - 8usize];
    ["Offset of field: __kernel_timex_timeval::tv_sec"]
        [::std::mem::offset_of!(__kernel_timex_timeval, tv_sec) - 0usize];
    ["Offset of field: __kernel_timex_timeval::tv_usec"]
        [::std::mem::offset_of!(__kernel_timex_timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_timex {
    pub modes: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub offset: ::std::os::raw::c_longlong,
    pub freq: ::std::os::raw::c_longlong,
    pub maxerror: ::std::os::raw::c_longlong,
    pub esterror: ::std::os::raw::c_longlong,
    pub status: ::std::os::raw::c_int,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub constant: ::std::os::raw::c_longlong,
    pub precision: ::std::os::raw::c_longlong,
    pub tolerance: ::std::os::raw::c_longlong,
    pub time: __kernel_timex_timeval,
    pub tick: ::std::os::raw::c_longlong,
    pub ppsfreq: ::std::os::raw::c_longlong,
    pub jitter: ::std::os::raw::c_longlong,
    pub shift: ::std::os::raw::c_int,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub stabil: ::std::os::raw::c_longlong,
    pub jitcnt: ::std::os::raw::c_longlong,
    pub calcnt: ::std::os::raw::c_longlong,
    pub errcnt: ::std::os::raw::c_longlong,
    pub stbcnt: ::std::os::raw::c_longlong,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_timex"][::std::mem::size_of::<__kernel_timex>() - 208usize];
    ["Alignment of __kernel_timex"][::std::mem::align_of::<__kernel_timex>() - 8usize];
    ["Offset of field: __kernel_timex::modes"]
        [::std::mem::offset_of!(__kernel_timex, modes) - 0usize];
    ["Offset of field: __kernel_timex::offset"]
        [::std::mem::offset_of!(__kernel_timex, offset) - 8usize];
    ["Offset of field: __kernel_timex::freq"]
        [::std::mem::offset_of!(__kernel_timex, freq) - 16usize];
    ["Offset of field: __kernel_timex::maxerror"]
        [::std::mem::offset_of!(__kernel_timex, maxerror) - 24usize];
    ["Offset of field: __kernel_timex::esterror"]
        [::std::mem::offset_of!(__kernel_timex, esterror) - 32usize];
    ["Offset of field: __kernel_timex::status"]
        [::std::mem::offset_of!(__kernel_timex, status) - 40usize];
    ["Offset of field: __kernel_timex::constant"]
        [::std::mem::offset_of!(__kernel_timex, constant) - 48usize];
    ["Offset of field: __kernel_timex::precision"]
        [::std::mem::offset_of!(__kernel_timex, precision) - 56usize];
    ["Offset of field: __kernel_timex::tolerance"]
        [::std::mem::offset_of!(__kernel_timex, tolerance) - 64usize];
    ["Offset of field: __kernel_timex::time"]
        [::std::mem::offset_of!(__kernel_timex, time) - 72usize];
    ["Offset of field: __kernel_timex::tick"]
        [::std::mem::offset_of!(__kernel_timex, tick) - 88usize];
    ["Offset of field: __kernel_timex::ppsfreq"]
        [::std::mem::offset_of!(__kernel_timex, ppsfreq) - 96usize];
    ["Offset of field: __kernel_timex::jitter"]
        [::std::mem::offset_of!(__kernel_timex, jitter) - 104usize];
    ["Offset of field: __kernel_timex::shift"]
        [::std::mem::offset_of!(__kernel_timex, shift) - 112usize];
    ["Offset of field: __kernel_timex::stabil"]
        [::std::mem::offset_of!(__kernel_timex, stabil) - 120usize];
    ["Offset of field: __kernel_timex::jitcnt"]
        [::std::mem::offset_of!(__kernel_timex, jitcnt) - 128usize];
    ["Offset of field: __kernel_timex::calcnt"]
        [::std::mem::offset_of!(__kernel_timex, calcnt) - 136usize];
    ["Offset of field: __kernel_timex::errcnt"]
        [::std::mem::offset_of!(__kernel_timex, errcnt) - 144usize];
    ["Offset of field: __kernel_timex::stbcnt"]
        [::std::mem::offset_of!(__kernel_timex, stbcnt) - 152usize];
    ["Offset of field: __kernel_timex::tai"]
        [::std::mem::offset_of!(__kernel_timex, tai) - 160usize];
};
impl __kernel_timex {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn new_bitfield_2() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn new_bitfield_3() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn random_get_entropy_fallback() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut __invalid_size_argument_for_IOC: ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr {
    pub __bindgen_anon_1: msr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union msr__bindgen_ty_1 {
    pub __bindgen_anon_1: msr__bindgen_ty_1__bindgen_ty_1,
    pub q: u64_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msr__bindgen_ty_1__bindgen_ty_1 {
    pub l: u32_,
    pub h: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<msr__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of msr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<msr__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: msr__bindgen_ty_1__bindgen_ty_1::l"]
        [::std::mem::offset_of!(msr__bindgen_ty_1__bindgen_ty_1, l) - 0usize];
    ["Offset of field: msr__bindgen_ty_1__bindgen_ty_1::h"]
        [::std::mem::offset_of!(msr__bindgen_ty_1__bindgen_ty_1, h) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msr__bindgen_ty_1"][::std::mem::size_of::<msr__bindgen_ty_1>() - 8usize];
    ["Alignment of msr__bindgen_ty_1"][::std::mem::align_of::<msr__bindgen_ty_1>() - 8usize];
    ["Offset of field: msr__bindgen_ty_1::q"]
        [::std::mem::offset_of!(msr__bindgen_ty_1, q) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msr"][::std::mem::size_of::<msr>() - 8usize];
    ["Alignment of msr"][::std::mem::align_of::<msr>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct codetag_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct codetag_module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seq_buf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct codetag {
    pub flags: ::std::os::raw::c_uint,
    pub lineno: ::std::os::raw::c_uint,
    pub modname: *const ::std::os::raw::c_char,
    pub function: *const ::std::os::raw::c_char,
    pub filename: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of codetag"][::std::mem::size_of::<codetag>() - 32usize];
    ["Alignment of codetag"][::std::mem::align_of::<codetag>() - 8usize];
    ["Offset of field: codetag::flags"][::std::mem::offset_of!(codetag, flags) - 0usize];
    ["Offset of field: codetag::lineno"][::std::mem::offset_of!(codetag, lineno) - 4usize];
    ["Offset of field: codetag::modname"][::std::mem::offset_of!(codetag, modname) - 8usize];
    ["Offset of field: codetag::function"][::std::mem::offset_of!(codetag, function) - 16usize];
    ["Offset of field: codetag::filename"][::std::mem::offset_of!(codetag, filename) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union codetag_ref {
    pub ct: *mut codetag,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of codetag_ref"][::std::mem::size_of::<codetag_ref>() - 8usize];
    ["Alignment of codetag_ref"][::std::mem::align_of::<codetag_ref>() - 8usize];
    ["Offset of field: codetag_ref::ct"][::std::mem::offset_of!(codetag_ref, ct) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct codetag_type_desc {
    pub section: *const ::std::os::raw::c_char,
    pub tag_size: usize,
    pub module_load: ::std::option::Option<
        unsafe extern "C" fn(cttype: *mut codetag_type, cmod: *mut codetag_module),
    >,
    pub module_unload: ::std::option::Option<
        unsafe extern "C" fn(cttype: *mut codetag_type, cmod: *mut codetag_module) -> bool_,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of codetag_type_desc"][::std::mem::size_of::<codetag_type_desc>() - 32usize];
    ["Alignment of codetag_type_desc"][::std::mem::align_of::<codetag_type_desc>() - 8usize];
    ["Offset of field: codetag_type_desc::section"]
        [::std::mem::offset_of!(codetag_type_desc, section) - 0usize];
    ["Offset of field: codetag_type_desc::tag_size"]
        [::std::mem::offset_of!(codetag_type_desc, tag_size) - 8usize];
    ["Offset of field: codetag_type_desc::module_load"]
        [::std::mem::offset_of!(codetag_type_desc, module_load) - 16usize];
    ["Offset of field: codetag_type_desc::module_unload"]
        [::std::mem::offset_of!(codetag_type_desc, module_unload) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct codetag_iterator {
    pub cttype: *mut codetag_type,
    pub cmod: *mut codetag_module,
    pub mod_id: ::std::os::raw::c_ulong,
    pub ct: *mut codetag,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of codetag_iterator"][::std::mem::size_of::<codetag_iterator>() - 32usize];
    ["Alignment of codetag_iterator"][::std::mem::align_of::<codetag_iterator>() - 8usize];
    ["Offset of field: codetag_iterator::cttype"]
        [::std::mem::offset_of!(codetag_iterator, cttype) - 0usize];
    ["Offset of field: codetag_iterator::cmod"]
        [::std::mem::offset_of!(codetag_iterator, cmod) - 8usize];
    ["Offset of field: codetag_iterator::mod_id"]
        [::std::mem::offset_of!(codetag_iterator, mod_id) - 16usize];
    ["Offset of field: codetag_iterator::ct"]
        [::std::mem::offset_of!(codetag_iterator, ct) - 24usize];
};
extern "C" {
    pub fn codetag_lock_module_list(cttype: *mut codetag_type, lock: bool_);
}
extern "C" {
    pub fn codetag_trylock_module_list(cttype: *mut codetag_type) -> bool_;
}
extern "C" {
    pub fn codetag_get_ct_iter(cttype: *mut codetag_type) -> codetag_iterator;
}
extern "C" {
    pub fn codetag_next_ct(iter: *mut codetag_iterator) -> *mut codetag;
}
extern "C" {
    pub fn codetag_to_text(out: *mut seq_buf, ct: *mut codetag);
}
extern "C" {
    pub fn codetag_register_type(desc: *const codetag_type_desc) -> *mut codetag_type;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alloc_tag_counters {
    pub bytes: u64_,
    pub calls: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alloc_tag_counters"][::std::mem::size_of::<alloc_tag_counters>() - 16usize];
    ["Alignment of alloc_tag_counters"][::std::mem::align_of::<alloc_tag_counters>() - 8usize];
    ["Offset of field: alloc_tag_counters::bytes"]
        [::std::mem::offset_of!(alloc_tag_counters, bytes) - 0usize];
    ["Offset of field: alloc_tag_counters::calls"]
        [::std::mem::offset_of!(alloc_tag_counters, calls) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alloc_tag {
    pub ct: codetag,
    pub counters: *mut alloc_tag_counters,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alloc_tag"][::std::mem::size_of::<alloc_tag>() - 40usize];
    ["Alignment of alloc_tag"][::std::mem::align_of::<alloc_tag>() - 8usize];
    ["Offset of field: alloc_tag::ct"][::std::mem::offset_of!(alloc_tag, ct) - 0usize];
    ["Offset of field: alloc_tag::counters"][::std::mem::offset_of!(alloc_tag, counters) - 32usize];
};
extern "C" {
    pub fn dump_page(page: *const page, reason: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dump_vma(vma: *const vm_area_struct);
}
extern "C" {
    pub fn dump_mm(mm: *const mm_struct);
}
extern "C" {
    pub fn vma_iter_dump_tree(vmi: *const vma_iterator);
}
#[doc = " struct clone_args - arguments for the clone3 syscall\n @flags:        Flags for the new process as listed above.\n                All flags are valid except for CSIGNAL and\n                CLONE_DETACHED.\n @pidfd:        If CLONE_PIDFD is set, a pidfd will be\n                returned in this argument.\n @child_tid:    If CLONE_CHILD_SETTID is set, the TID of the\n                child process will be returned in the child's\n                memory.\n @parent_tid:   If CLONE_PARENT_SETTID is set, the TID of\n                the child process will be returned in the\n                parent's memory.\n @exit_signal:  The exit_signal the parent process will be\n                sent when the child exits.\n @stack:        Specify the location of the stack for the\n                child process.\n                Note, @stack is expected to point to the\n                lowest address. The stack direction will be\n                determined by the kernel and set up\n                appropriately based on @stack_size.\n @stack_size:   The size of the stack for the child process.\n @tls:          If CLONE_SETTLS is set, the tls descriptor\n                is set to tls.\n @set_tid:      Pointer to an array of type *pid_t. The size\n                of the array is defined using @set_tid_size.\n                This array is used to select PIDs/TIDs for\n                newly created processes. The first element in\n                this defines the PID in the most nested PID\n                namespace. Each additional element in the array\n                defines the PID in the parent PID namespace of\n                the original PID namespace. If the array has\n                less entries than the number of currently\n                nested PID namespaces only the PIDs in the\n                corresponding namespaces are set.\n @set_tid_size: This defines the size of the array referenced\n                in @set_tid. This cannot be larger than the\n                kernel's limit of nested PID namespaces.\n @cgroup:       If CLONE_INTO_CGROUP is specified set this to\n                a file descriptor for the cgroup.\n\n The structure is versioned by size and thus extensible.\n New struct members must go at the end of the struct and\n must be properly 64bit aligned."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clone_args {
    pub flags: __u64,
    pub pidfd: __u64,
    pub child_tid: __u64,
    pub parent_tid: __u64,
    pub exit_signal: __u64,
    pub stack: __u64,
    pub stack_size: __u64,
    pub tls: __u64,
    pub set_tid: __u64,
    pub set_tid_size: __u64,
    pub cgroup: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clone_args"][::std::mem::size_of::<clone_args>() - 88usize];
    ["Alignment of clone_args"][::std::mem::align_of::<clone_args>() - 8usize];
    ["Offset of field: clone_args::flags"][::std::mem::offset_of!(clone_args, flags) - 0usize];
    ["Offset of field: clone_args::pidfd"][::std::mem::offset_of!(clone_args, pidfd) - 8usize];
    ["Offset of field: clone_args::child_tid"]
        [::std::mem::offset_of!(clone_args, child_tid) - 16usize];
    ["Offset of field: clone_args::parent_tid"]
        [::std::mem::offset_of!(clone_args, parent_tid) - 24usize];
    ["Offset of field: clone_args::exit_signal"]
        [::std::mem::offset_of!(clone_args, exit_signal) - 32usize];
    ["Offset of field: clone_args::stack"][::std::mem::offset_of!(clone_args, stack) - 40usize];
    ["Offset of field: clone_args::stack_size"]
        [::std::mem::offset_of!(clone_args, stack_size) - 48usize];
    ["Offset of field: clone_args::tls"][::std::mem::offset_of!(clone_args, tls) - 56usize];
    ["Offset of field: clone_args::set_tid"][::std::mem::offset_of!(clone_args, set_tid) - 64usize];
    ["Offset of field: clone_args::set_tid_size"]
        [::std::mem::offset_of!(clone_args, set_tid_size) - 72usize];
    ["Offset of field: clone_args::cgroup"][::std::mem::offset_of!(clone_args, cgroup) - 80usize];
};
pub const pid_type_PIDTYPE_PID: pid_type = 0;
pub const pid_type_PIDTYPE_TGID: pid_type = 1;
pub const pid_type_PIDTYPE_PGID: pid_type = 2;
pub const pid_type_PIDTYPE_SID: pid_type = 3;
pub const pid_type_PIDTYPE_MAX: pid_type = 4;
pub type pid_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pid_namespace {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut init_pid_ns: pid_namespace;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem_undo_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysv_sem {
    pub undo_list: *mut sem_undo_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysv_sem"][::std::mem::size_of::<sysv_sem>() - 8usize];
    ["Alignment of sysv_sem"][::std::mem::align_of::<sysv_sem>() - 8usize];
    ["Offset of field: sysv_sem::undo_list"][::std::mem::offset_of!(sysv_sem, undo_list) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysv_shm {
    pub shm_clist: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysv_shm"][::std::mem::size_of::<sysv_shm>() - 16usize];
    ["Alignment of sysv_shm"][::std::mem::align_of::<sysv_shm>() - 8usize];
    ["Offset of field: sysv_shm::shm_clist"][::std::mem::offset_of!(sysv_shm, shm_clist) - 0usize];
};
extern "C" {
    pub fn do_shmat(
        shmid: ::std::os::raw::c_int,
        shmaddr: *mut ::std::os::raw::c_char,
        shmflg: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_ulong,
        shmlba: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn exit_shm(task: *mut task_struct);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmsan_context_state {
    pub param_tls: [::std::os::raw::c_char; 800usize],
    pub retval_tls: [::std::os::raw::c_char; 800usize],
    pub va_arg_tls: [::std::os::raw::c_char; 800usize],
    pub va_arg_origin_tls: [::std::os::raw::c_char; 800usize],
    pub va_arg_overflow_size_tls: u64_,
    pub param_origin_tls: [::std::os::raw::c_char; 800usize],
    pub retval_origin_tls: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmsan_context_state"][::std::mem::size_of::<kmsan_context_state>() - 4016usize];
    ["Alignment of kmsan_context_state"][::std::mem::align_of::<kmsan_context_state>() - 8usize];
    ["Offset of field: kmsan_context_state::param_tls"]
        [::std::mem::offset_of!(kmsan_context_state, param_tls) - 0usize];
    ["Offset of field: kmsan_context_state::retval_tls"]
        [::std::mem::offset_of!(kmsan_context_state, retval_tls) - 800usize];
    ["Offset of field: kmsan_context_state::va_arg_tls"]
        [::std::mem::offset_of!(kmsan_context_state, va_arg_tls) - 1600usize];
    ["Offset of field: kmsan_context_state::va_arg_origin_tls"]
        [::std::mem::offset_of!(kmsan_context_state, va_arg_origin_tls) - 2400usize];
    ["Offset of field: kmsan_context_state::va_arg_overflow_size_tls"]
        [::std::mem::offset_of!(kmsan_context_state, va_arg_overflow_size_tls) - 3200usize];
    ["Offset of field: kmsan_context_state::param_origin_tls"]
        [::std::mem::offset_of!(kmsan_context_state, param_origin_tls) - 3208usize];
    ["Offset of field: kmsan_context_state::retval_origin_tls"]
        [::std::mem::offset_of!(kmsan_context_state, retval_origin_tls) - 4008usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmsan_ctx {
    pub cstate: kmsan_context_state,
    pub kmsan_in_runtime: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmsan_ctx"][::std::mem::size_of::<kmsan_ctx>() - 4024usize];
    ["Alignment of kmsan_ctx"][::std::mem::align_of::<kmsan_ctx>() - 8usize];
    ["Offset of field: kmsan_ctx::cstate"][::std::mem::offset_of!(kmsan_ctx, cstate) - 0usize];
    ["Offset of field: kmsan_ctx::kmsan_in_runtime"]
        [::std::mem::offset_of!(kmsan_ctx, kmsan_in_runtime) - 4016usize];
    ["Offset of field: kmsan_ctx::depth"][::std::mem::offset_of!(kmsan_ctx, depth) - 4020usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plist_head {
    pub node_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plist_head"][::std::mem::size_of::<plist_head>() - 16usize];
    ["Alignment of plist_head"][::std::mem::align_of::<plist_head>() - 8usize];
    ["Offset of field: plist_head::node_list"]
        [::std::mem::offset_of!(plist_head, node_list) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plist_node {
    pub prio: ::std::os::raw::c_int,
    pub prio_list: list_head,
    pub node_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plist_node"][::std::mem::size_of::<plist_node>() - 40usize];
    ["Alignment of plist_node"][::std::mem::align_of::<plist_node>() - 8usize];
    ["Offset of field: plist_node::prio"][::std::mem::offset_of!(plist_node, prio) - 0usize];
    ["Offset of field: plist_node::prio_list"]
        [::std::mem::offset_of!(plist_node, prio_list) - 8usize];
    ["Offset of field: plist_node::node_list"]
        [::std::mem::offset_of!(plist_node, node_list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub __rb_parent_color: ::std::os::raw::c_ulong,
    pub rb_right: *mut rb_node,
    pub rb_left: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_node"][::std::mem::size_of::<rb_node>() - 24usize];
    ["Alignment of rb_node"][::std::mem::align_of::<rb_node>() - 8usize];
    ["Offset of field: rb_node::__rb_parent_color"]
        [::std::mem::offset_of!(rb_node, __rb_parent_color) - 0usize];
    ["Offset of field: rb_node::rb_right"][::std::mem::offset_of!(rb_node, rb_right) - 8usize];
    ["Offset of field: rb_node::rb_left"][::std::mem::offset_of!(rb_node, rb_left) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_root"][::std::mem::size_of::<rb_root>() - 8usize];
    ["Alignment of rb_root"][::std::mem::align_of::<rb_root>() - 8usize];
    ["Offset of field: rb_root::rb_node"][::std::mem::offset_of!(rb_root, rb_node) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root_cached {
    pub rb_root: rb_root,
    pub rb_leftmost: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_root_cached"][::std::mem::size_of::<rb_root_cached>() - 16usize];
    ["Alignment of rb_root_cached"][::std::mem::align_of::<rb_root_cached>() - 8usize];
    ["Offset of field: rb_root_cached::rb_root"]
        [::std::mem::offset_of!(rb_root_cached, rb_root) - 0usize];
    ["Offset of field: rb_root_cached::rb_leftmost"]
        [::std::mem::offset_of!(rb_root_cached, rb_leftmost) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timerqueue_node {
    pub node: rb_node,
    pub expires: ktime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timerqueue_node"][::std::mem::size_of::<timerqueue_node>() - 32usize];
    ["Alignment of timerqueue_node"][::std::mem::align_of::<timerqueue_node>() - 8usize];
    ["Offset of field: timerqueue_node::node"]
        [::std::mem::offset_of!(timerqueue_node, node) - 0usize];
    ["Offset of field: timerqueue_node::expires"]
        [::std::mem::offset_of!(timerqueue_node, expires) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timerqueue_head {
    pub rb_root: rb_root_cached,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timerqueue_head"][::std::mem::size_of::<timerqueue_head>() - 16usize];
    ["Alignment of timerqueue_head"][::std::mem::align_of::<timerqueue_head>() - 8usize];
    ["Offset of field: timerqueue_head::rb_root"]
        [::std::mem::offset_of!(timerqueue_head, rb_root) - 0usize];
};
pub const hrtimer_restart_HRTIMER_NORESTART: hrtimer_restart = 0;
pub const hrtimer_restart_HRTIMER_RESTART: hrtimer_restart = 1;
pub type hrtimer_restart = ::std::os::raw::c_uint;
#[doc = " struct hrtimer - the basic hrtimer structure\n @node:\ttimerqueue node, which also manages node.expires,\n\t\tthe absolute expiry time in the hrtimers internal\n\t\trepresentation. The time is related to the clock on\n\t\twhich the timer is based. Is setup by adding\n\t\tslack to the _softexpires value. For non range timers\n\t\tidentical to _softexpires.\n @_softexpires: the absolute earliest expiry time of the hrtimer.\n\t\tThe time which was given as expiry time when the timer\n\t\twas armed.\n @function:\ttimer expiry callback function\n @base:\tpointer to the timer base (per cpu and per clock)\n @state:\tstate information (See bit values above)\n @is_rel:\tSet if the timer was armed relative\n @is_soft:\tSet if hrtimer will be expired in soft interrupt context.\n @is_hard:\tSet if hrtimer will be expired in hard interrupt context\n\t\teven on RT.\n\n The hrtimer structure must be initialized by hrtimer_init()"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hrtimer {
    pub node: timerqueue_node,
    pub _softexpires: ktime_t,
    pub function:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut hrtimer) -> hrtimer_restart>,
    pub base: *mut hrtimer_clock_base,
    pub state: u8_,
    pub is_rel: u8_,
    pub is_soft: u8_,
    pub is_hard: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer"][::std::mem::size_of::<hrtimer>() - 64usize];
    ["Alignment of hrtimer"][::std::mem::align_of::<hrtimer>() - 8usize];
    ["Offset of field: hrtimer::node"][::std::mem::offset_of!(hrtimer, node) - 0usize];
    ["Offset of field: hrtimer::_softexpires"]
        [::std::mem::offset_of!(hrtimer, _softexpires) - 32usize];
    ["Offset of field: hrtimer::function"][::std::mem::offset_of!(hrtimer, function) - 40usize];
    ["Offset of field: hrtimer::base"][::std::mem::offset_of!(hrtimer, base) - 48usize];
    ["Offset of field: hrtimer::state"][::std::mem::offset_of!(hrtimer, state) - 56usize];
    ["Offset of field: hrtimer::is_rel"][::std::mem::offset_of!(hrtimer, is_rel) - 57usize];
    ["Offset of field: hrtimer::is_soft"][::std::mem::offset_of!(hrtimer, is_soft) - 58usize];
    ["Offset of field: hrtimer::is_hard"][::std::mem::offset_of!(hrtimer, is_hard) - 59usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_list {
    pub entry: hlist_node,
    pub expires: ::std::os::raw::c_ulong,
    pub function: ::std::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
    pub flags: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timer_list"][::std::mem::size_of::<timer_list>() - 40usize];
    ["Alignment of timer_list"][::std::mem::align_of::<timer_list>() - 8usize];
    ["Offset of field: timer_list::entry"][::std::mem::offset_of!(timer_list, entry) - 0usize];
    ["Offset of field: timer_list::expires"][::std::mem::offset_of!(timer_list, expires) - 16usize];
    ["Offset of field: timer_list::function"]
        [::std::mem::offset_of!(timer_list, function) - 24usize];
    ["Offset of field: timer_list::flags"][::std::mem::offset_of!(timer_list, flags) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seccomp_filter {
    _unused: [u8; 0],
}
#[doc = " struct seccomp - the state of a seccomp'ed process\n\n @mode:  indicates one of the valid values above for controlled\n         system calls available to a process.\n @filter_count: number of seccomp filters\n @filter: must always point to a valid seccomp-filter or NULL as it is\n          accessed without locking during system call entry.\n\n          @filter must only be accessed from the context of current as there\n          is no read locking."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seccomp {
    pub mode: ::std::os::raw::c_int,
    pub filter_count: atomic_t,
    pub filter: *mut seccomp_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seccomp"][::std::mem::size_of::<seccomp>() - 16usize];
    ["Alignment of seccomp"][::std::mem::align_of::<seccomp>() - 8usize];
    ["Offset of field: seccomp::mode"][::std::mem::offset_of!(seccomp, mode) - 0usize];
    ["Offset of field: seccomp::filter_count"]
        [::std::mem::offset_of!(seccomp, filter_count) - 4usize];
    ["Offset of field: seccomp::filter"][::std::mem::offset_of!(seccomp, filter) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nodemask_t {
    pub bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nodemask_t"][::std::mem::size_of::<nodemask_t>() - 128usize];
    ["Alignment of nodemask_t"][::std::mem::align_of::<nodemask_t>() - 8usize];
    ["Offset of field: nodemask_t::bits"][::std::mem::offset_of!(nodemask_t, bits) - 0usize];
};
#[doc = " typedef refcount_t - variant of atomic_t specialized for reference counts\n @refs: atomic_t counter field\n\n The counter saturates at REFCOUNT_SATURATED and will not move once\n there. This avoids wrapping the counter and causing 'spurious'\n use-after-free bugs."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct refcount_struct {
    pub refs: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of refcount_struct"][::std::mem::size_of::<refcount_struct>() - 4usize];
    ["Alignment of refcount_struct"][::std::mem::align_of::<refcount_struct>() - 4usize];
    ["Offset of field: refcount_struct::refs"]
        [::std::mem::offset_of!(refcount_struct, refs) - 0usize];
};
#[doc = " typedef refcount_t - variant of atomic_t specialized for reference counts\n @refs: atomic_t counter field\n\n The counter saturates at REFCOUNT_SATURATED and will not move once\n there. This avoids wrapping the counter and causing 'spurious'\n use-after-free bugs."]
pub type refcount_t = refcount_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: __kernel_old_timeval,
    pub ru_stime: __kernel_old_timeval,
    pub ru_maxrss: __kernel_long_t,
    pub ru_ixrss: __kernel_long_t,
    pub ru_idrss: __kernel_long_t,
    pub ru_isrss: __kernel_long_t,
    pub ru_minflt: __kernel_long_t,
    pub ru_majflt: __kernel_long_t,
    pub ru_nswap: __kernel_long_t,
    pub ru_inblock: __kernel_long_t,
    pub ru_oublock: __kernel_long_t,
    pub ru_msgsnd: __kernel_long_t,
    pub ru_msgrcv: __kernel_long_t,
    pub ru_nsignals: __kernel_long_t,
    pub ru_nvcsw: __kernel_long_t,
    pub ru_nivcsw: __kernel_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: __kernel_ulong_t,
    pub rlim_max: __kernel_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit64 {
    pub rlim_cur: __u64,
    pub rlim_max: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit64"][::std::mem::size_of::<rlimit64>() - 16usize];
    ["Alignment of rlimit64"][::std::mem::align_of::<rlimit64>() - 8usize];
    ["Offset of field: rlimit64::rlim_cur"][::std::mem::offset_of!(rlimit64, rlim_cur) - 0usize];
    ["Offset of field: rlimit64::rlim_max"][::std::mem::offset_of!(rlimit64, rlim_max) - 8usize];
};
extern "C" {
    pub fn getrusage(p: *mut task_struct, who: ::std::os::raw::c_int, ru: *mut rusage);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latency_record {
    pub backtrace: [::std::os::raw::c_ulong; 12usize],
    pub count: ::std::os::raw::c_uint,
    pub time: ::std::os::raw::c_ulong,
    pub max: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of latency_record"][::std::mem::size_of::<latency_record>() - 120usize];
    ["Alignment of latency_record"][::std::mem::align_of::<latency_record>() - 8usize];
    ["Offset of field: latency_record::backtrace"]
        [::std::mem::offset_of!(latency_record, backtrace) - 0usize];
    ["Offset of field: latency_record::count"]
        [::std::mem::offset_of!(latency_record, count) - 96usize];
    ["Offset of field: latency_record::time"]
        [::std::mem::offset_of!(latency_record, time) - 104usize];
    ["Offset of field: latency_record::max"]
        [::std::mem::offset_of!(latency_record, max) - 112usize];
};
extern "C" {
    pub static mut latencytop_enabled: ::std::os::raw::c_int;
}
extern "C" {
    pub fn __account_scheduler_latency(
        task: *mut task_struct,
        usecs: ::std::os::raw::c_int,
        inter: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clear_tsk_latency_tracing(p: *mut task_struct);
}
#[doc = " struct task_cputime - collected CPU time counts\n @stime:\t\ttime spent in kernel mode, in nanoseconds\n @utime:\t\ttime spent in user mode, in nanoseconds\n @sum_exec_runtime:\ttotal time spent on the CPU, in nanoseconds\n\n This structure groups together three kinds of CPU time that are tracked for\n threads and thread groups.  Most things considering CPU time want to group\n these counts together and treat all three of them in parallel."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_cputime {
    pub stime: u64_,
    pub utime: u64_,
    pub sum_exec_runtime: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_cputime"][::std::mem::size_of::<task_cputime>() - 24usize];
    ["Alignment of task_cputime"][::std::mem::align_of::<task_cputime>() - 8usize];
    ["Offset of field: task_cputime::stime"][::std::mem::offset_of!(task_cputime, stime) - 0usize];
    ["Offset of field: task_cputime::utime"][::std::mem::offset_of!(task_cputime, utime) - 8usize];
    ["Offset of field: task_cputime::sum_exec_runtime"]
        [::std::mem::offset_of!(task_cputime, sum_exec_runtime) - 16usize];
};
pub type old_sigset_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigset_t {
    pub sig: [::std::os::raw::c_ulong; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigset_t"][::std::mem::size_of::<sigset_t>() - 8usize];
    ["Alignment of sigset_t"][::std::mem::align_of::<sigset_t>() - 8usize];
    ["Offset of field: sigset_t::sig"][::std::mem::offset_of!(sigset_t, sig) - 0usize];
};
pub type __signalfn_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __sighandler_t = __signalfn_t;
pub type __restorefn_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type __sigrestore_t = __restorefn_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: __kernel_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaltstack"][::std::mem::size_of::<sigaltstack>() - 24usize];
    ["Alignment of sigaltstack"][::std::mem::align_of::<sigaltstack>() - 8usize];
    ["Offset of field: sigaltstack::ss_sp"][::std::mem::offset_of!(sigaltstack, ss_sp) - 0usize];
    ["Offset of field: sigaltstack::ss_flags"]
        [::std::mem::offset_of!(sigaltstack, ss_flags) - 8usize];
    ["Offset of field: sigaltstack::ss_size"]
        [::std::mem::offset_of!(sigaltstack, ss_size) - 16usize];
};
pub type stack_t = sigaltstack;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
pub type sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields {
    pub _kill: __sifields__bindgen_ty_1,
    pub _timer: __sifields__bindgen_ty_2,
    pub _rt: __sifields__bindgen_ty_3,
    pub _sigchld: __sifields__bindgen_ty_4,
    pub _sigfault: __sifields__bindgen_ty_5,
    pub _sigpoll: __sifields__bindgen_ty_6,
    pub _sigsys: __sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_1 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_1"]
        [::std::mem::size_of::<__sifields__bindgen_ty_1>() - 8usize];
    ["Alignment of __sifields__bindgen_ty_1"]
        [::std::mem::align_of::<__sifields__bindgen_ty_1>() - 4usize];
    ["Offset of field: __sifields__bindgen_ty_1::_pid"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_1, _pid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_1::_uid"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_1, _uid) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_2 {
    pub _tid: __kernel_timer_t,
    pub _overrun: ::std::os::raw::c_int,
    pub _sigval: sigval_t,
    pub _sys_private: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_2"]
        [::std::mem::size_of::<__sifields__bindgen_ty_2>() - 24usize];
    ["Alignment of __sifields__bindgen_ty_2"]
        [::std::mem::align_of::<__sifields__bindgen_ty_2>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_2::_tid"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_2, _tid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_2::_overrun"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_2, _overrun) - 4usize];
    ["Offset of field: __sifields__bindgen_ty_2::_sigval"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_2, _sigval) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_2::_sys_private"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_2, _sys_private) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_3 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _sigval: sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_3"]
        [::std::mem::size_of::<__sifields__bindgen_ty_3>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_3"]
        [::std::mem::align_of::<__sifields__bindgen_ty_3>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_3::_pid"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_3, _pid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_3::_uid"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_3, _uid) - 4usize];
    ["Offset of field: __sifields__bindgen_ty_3::_sigval"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_3, _sigval) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_4 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _status: ::std::os::raw::c_int,
    pub _utime: __kernel_clock_t,
    pub _stime: __kernel_clock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_4"]
        [::std::mem::size_of::<__sifields__bindgen_ty_4>() - 32usize];
    ["Alignment of __sifields__bindgen_ty_4"]
        [::std::mem::align_of::<__sifields__bindgen_ty_4>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_4::_pid"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_4, _pid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_4::_uid"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_4, _uid) - 4usize];
    ["Offset of field: __sifields__bindgen_ty_4::_status"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_4, _status) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_4::_utime"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_4, _utime) - 16usize];
    ["Offset of field: __sifields__bindgen_ty_4::_stime"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_4, _stime) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_5 {
    pub _addr: *mut ::std::os::raw::c_void,
    pub __bindgen_anon_1: __sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields__bindgen_ty_5__bindgen_ty_1 {
    pub _trapno: ::std::os::raw::c_int,
    pub _addr_lsb: ::std::os::raw::c_short,
    pub _addr_bnd: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _addr_pkey: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub _perf: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _dummy_bnd: [::std::os::raw::c_char; 8usize],
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_dummy_bnd"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        _dummy_bnd
    )
        - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_lower"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        _lower
    ) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_upper"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        _upper
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub _dummy_pkey: [::std::os::raw::c_char; 8usize],
    pub _pkey: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>() - 12usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2::_dummy_pkey"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
        _dummy_pkey
    )
        - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2::_pkey"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
        _pkey
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub _data: ::std::os::raw::c_ulong,
    pub _type: __u32,
    pub _flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_data"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        _data
    ) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_type"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        _type
    ) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_flags"][::std::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        _flags
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1>() - 24usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_trapno"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _trapno) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_addr_lsb"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _addr_lsb) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_addr_bnd"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _addr_bnd) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_addr_pkey"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _addr_pkey) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_perf"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _perf) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5"]
        [::std::mem::size_of::<__sifields__bindgen_ty_5>() - 32usize];
    ["Alignment of __sifields__bindgen_ty_5"]
        [::std::mem::align_of::<__sifields__bindgen_ty_5>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5::_addr"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_5, _addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_6 {
    pub _band: ::std::os::raw::c_long,
    pub _fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_6"]
        [::std::mem::size_of::<__sifields__bindgen_ty_6>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_6"]
        [::std::mem::align_of::<__sifields__bindgen_ty_6>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_6::_band"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_6, _band) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_6::_fd"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_6, _fd) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_7"]
        [::std::mem::size_of::<__sifields__bindgen_ty_7>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_7"]
        [::std::mem::align_of::<__sifields__bindgen_ty_7>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_7::_call_addr"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_7, _call_addr) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_7::_syscall"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_7, _syscall) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_7::_arch"]
        [::std::mem::offset_of!(__sifields__bindgen_ty_7, _arch) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields"][::std::mem::size_of::<__sifields>() - 32usize];
    ["Alignment of __sifields"][::std::mem::align_of::<__sifields>() - 8usize];
    ["Offset of field: __sifields::_kill"][::std::mem::offset_of!(__sifields, _kill) - 0usize];
    ["Offset of field: __sifields::_timer"][::std::mem::offset_of!(__sifields, _timer) - 0usize];
    ["Offset of field: __sifields::_rt"][::std::mem::offset_of!(__sifields, _rt) - 0usize];
    ["Offset of field: __sifields::_sigchld"]
        [::std::mem::offset_of!(__sifields, _sigchld) - 0usize];
    ["Offset of field: __sifields::_sigfault"]
        [::std::mem::offset_of!(__sifields, _sigfault) - 0usize];
    ["Offset of field: __sifields::_sigpoll"]
        [::std::mem::offset_of!(__sifields, _sigpoll) - 0usize];
    ["Offset of field: __sifields::_sigsys"][::std::mem::offset_of!(__sifields, _sigsys) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo__bindgen_ty_1 {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _si_pad: [::std::os::raw::c_int; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: __sifields,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo__bindgen_ty_1__bindgen_ty_1>() - 48usize];
    ["Alignment of siginfo__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: siginfo__bindgen_ty_1__bindgen_ty_1::si_signo"]
        [::std::mem::offset_of!(siginfo__bindgen_ty_1__bindgen_ty_1, si_signo) - 0usize];
    ["Offset of field: siginfo__bindgen_ty_1__bindgen_ty_1::si_errno"]
        [::std::mem::offset_of!(siginfo__bindgen_ty_1__bindgen_ty_1, si_errno) - 4usize];
    ["Offset of field: siginfo__bindgen_ty_1__bindgen_ty_1::si_code"]
        [::std::mem::offset_of!(siginfo__bindgen_ty_1__bindgen_ty_1, si_code) - 8usize];
    ["Offset of field: siginfo__bindgen_ty_1__bindgen_ty_1::_sifields"]
        [::std::mem::offset_of!(siginfo__bindgen_ty_1__bindgen_ty_1, _sifields) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo__bindgen_ty_1"][::std::mem::size_of::<siginfo__bindgen_ty_1>() - 128usize];
    ["Alignment of siginfo__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo__bindgen_ty_1>() - 8usize];
    ["Offset of field: siginfo__bindgen_ty_1::_si_pad"]
        [::std::mem::offset_of!(siginfo__bindgen_ty_1, _si_pad) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo"][::std::mem::size_of::<siginfo>() - 128usize];
    ["Alignment of siginfo"][::std::mem::align_of::<siginfo>() - 8usize];
};
pub type siginfo_t = siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: ::std::os::raw::c_int,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_function"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _function) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_attribute"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _attribute) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1"][::std::mem::size_of::<sigevent__bindgen_ty_1>() - 48usize];
    ["Alignment of sigevent__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _pad) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_tid"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _tid) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_sigev_thread"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _sigev_thread) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 64usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 12usize];
    ["Offset of field: sigevent::_sigev_un"][::std::mem::offset_of!(sigevent, _sigev_un) - 16usize];
};
pub type sigevent_t = sigevent;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo {
    pub __bindgen_anon_1: kernel_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo__bindgen_ty_1 {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: __sifields,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_siginfo__bindgen_ty_1"]
        [::std::mem::size_of::<kernel_siginfo__bindgen_ty_1>() - 48usize];
    ["Alignment of kernel_siginfo__bindgen_ty_1"]
        [::std::mem::align_of::<kernel_siginfo__bindgen_ty_1>() - 8usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::si_signo"]
        [::std::mem::offset_of!(kernel_siginfo__bindgen_ty_1, si_signo) - 0usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::si_errno"]
        [::std::mem::offset_of!(kernel_siginfo__bindgen_ty_1, si_errno) - 4usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::si_code"]
        [::std::mem::offset_of!(kernel_siginfo__bindgen_ty_1, si_code) - 8usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::_sifields"]
        [::std::mem::offset_of!(kernel_siginfo__bindgen_ty_1, _sifields) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_siginfo"][::std::mem::size_of::<kernel_siginfo>() - 48usize];
    ["Alignment of kernel_siginfo"][::std::mem::align_of::<kernel_siginfo>() - 8usize];
};
pub type kernel_siginfo_t = kernel_siginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucounts {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigqueue {
    pub list: list_head,
    pub flags: ::std::os::raw::c_int,
    pub info: kernel_siginfo_t,
    pub ucounts: *mut ucounts,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigqueue"][::std::mem::size_of::<sigqueue>() - 80usize];
    ["Alignment of sigqueue"][::std::mem::align_of::<sigqueue>() - 8usize];
    ["Offset of field: sigqueue::list"][::std::mem::offset_of!(sigqueue, list) - 0usize];
    ["Offset of field: sigqueue::flags"][::std::mem::offset_of!(sigqueue, flags) - 16usize];
    ["Offset of field: sigqueue::info"][::std::mem::offset_of!(sigqueue, info) - 24usize];
    ["Offset of field: sigqueue::ucounts"][::std::mem::offset_of!(sigqueue, ucounts) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigpending {
    pub list: list_head,
    pub signal: sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigpending"][::std::mem::size_of::<sigpending>() - 24usize];
    ["Alignment of sigpending"][::std::mem::align_of::<sigpending>() - 8usize];
    ["Offset of field: sigpending::list"][::std::mem::offset_of!(sigpending, list) - 0usize];
    ["Offset of field: sigpending::signal"][::std::mem::offset_of!(sigpending, signal) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigaction {
    pub sa_handler: __sighandler_t,
    pub sa_flags: ::std::os::raw::c_ulong,
    pub sa_restorer: __sigrestore_t,
    pub sa_mask: sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 32usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::sa_handler"]
        [::std::mem::offset_of!(sigaction, sa_handler) - 0usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 8usize];
    ["Offset of field: sigaction::sa_restorer"]
        [::std::mem::offset_of!(sigaction, sa_restorer) - 16usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_sigaction {
    pub sa: sigaction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of k_sigaction"][::std::mem::size_of::<k_sigaction>() - 32usize];
    ["Alignment of k_sigaction"][::std::mem::align_of::<k_sigaction>() - 8usize];
    ["Offset of field: k_sigaction::sa"][::std::mem::offset_of!(k_sigaction, sa) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ksignal {
    pub ka: k_sigaction,
    pub info: kernel_siginfo_t,
    pub sig: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ksignal"][::std::mem::size_of::<ksignal>() - 88usize];
    ["Alignment of ksignal"][::std::mem::align_of::<ksignal>() - 8usize];
    ["Offset of field: ksignal::ka"][::std::mem::offset_of!(ksignal, ka) - 0usize];
    ["Offset of field: ksignal::info"][::std::mem::offset_of!(ksignal, info) - 32usize];
    ["Offset of field: ksignal::sig"][::std::mem::offset_of!(ksignal, sig) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_user_dispatch {
    pub selector: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_ulong,
    pub len: ::std::os::raw::c_ulong,
    pub on_dispatch: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_user_dispatch"][::std::mem::size_of::<syscall_user_dispatch>() - 32usize];
    ["Alignment of syscall_user_dispatch"]
        [::std::mem::align_of::<syscall_user_dispatch>() - 8usize];
    ["Offset of field: syscall_user_dispatch::selector"]
        [::std::mem::offset_of!(syscall_user_dispatch, selector) - 0usize];
    ["Offset of field: syscall_user_dispatch::offset"]
        [::std::mem::offset_of!(syscall_user_dispatch, offset) - 8usize];
    ["Offset of field: syscall_user_dispatch::len"]
        [::std::mem::offset_of!(syscall_user_dispatch, len) - 16usize];
    ["Offset of field: syscall_user_dispatch::on_dispatch"]
        [::std::mem::offset_of!(syscall_user_dispatch, on_dispatch) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_tlbflush_unmap_batch {
    pub cpumask: cpumask,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_tlbflush_unmap_batch"]
        [::std::mem::size_of::<arch_tlbflush_unmap_batch>() - 1024usize];
    ["Alignment of arch_tlbflush_unmap_batch"]
        [::std::mem::align_of::<arch_tlbflush_unmap_batch>() - 8usize];
    ["Offset of field: arch_tlbflush_unmap_batch::cpumask"]
        [::std::mem::offset_of!(arch_tlbflush_unmap_batch, cpumask) - 0usize];
};
pub const MM_FILEPAGES: _bindgen_ty_10 = 0;
pub const MM_ANONPAGES: _bindgen_ty_10 = 1;
pub const MM_SWAPENTS: _bindgen_ty_10 = 2;
pub const MM_SHMEMPAGES: _bindgen_ty_10 = 3;
pub const NR_MM_COUNTERS: _bindgen_ty_10 = 4;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_frag {
    pub page: *mut page,
    pub offset: __u32,
    pub size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page_frag"][::std::mem::size_of::<page_frag>() - 16usize];
    ["Alignment of page_frag"][::std::mem::align_of::<page_frag>() - 8usize];
    ["Offset of field: page_frag::page"][::std::mem::offset_of!(page_frag, page) - 0usize];
    ["Offset of field: page_frag::offset"][::std::mem::offset_of!(page_frag, offset) - 8usize];
    ["Offset of field: page_frag::size"][::std::mem::offset_of!(page_frag, size) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlbflush_unmap_batch {
    pub arch: arch_tlbflush_unmap_batch,
    pub flush_required: bool_,
    pub writable: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tlbflush_unmap_batch"][::std::mem::size_of::<tlbflush_unmap_batch>() - 1032usize];
    ["Alignment of tlbflush_unmap_batch"][::std::mem::align_of::<tlbflush_unmap_batch>() - 8usize];
    ["Offset of field: tlbflush_unmap_batch::arch"]
        [::std::mem::offset_of!(tlbflush_unmap_batch, arch) - 0usize];
    ["Offset of field: tlbflush_unmap_batch::flush_required"]
        [::std::mem::offset_of!(tlbflush_unmap_batch, flush_required) - 1024usize];
    ["Offset of field: tlbflush_unmap_batch::writable"]
        [::std::mem::offset_of!(tlbflush_unmap_batch, writable) - 1025usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netdev_xmit {
    pub recursion: u16_,
    pub more: u8_,
    pub skip_txqueue: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netdev_xmit"][::std::mem::size_of::<netdev_xmit>() - 4usize];
    ["Alignment of netdev_xmit"][::std::mem::align_of::<netdev_xmit>() - 2usize];
    ["Offset of field: netdev_xmit::recursion"]
        [::std::mem::offset_of!(netdev_xmit, recursion) - 0usize];
    ["Offset of field: netdev_xmit::more"][::std::mem::offset_of!(netdev_xmit, more) - 2usize];
    ["Offset of field: netdev_xmit::skip_txqueue"]
        [::std::mem::offset_of!(netdev_xmit, skip_txqueue) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_io_accounting {
    pub rchar: u64_,
    pub wchar: u64_,
    pub syscr: u64_,
    pub syscw: u64_,
    pub read_bytes: u64_,
    pub write_bytes: u64_,
    pub cancelled_write_bytes: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_io_accounting"][::std::mem::size_of::<task_io_accounting>() - 56usize];
    ["Alignment of task_io_accounting"][::std::mem::align_of::<task_io_accounting>() - 8usize];
    ["Offset of field: task_io_accounting::rchar"]
        [::std::mem::offset_of!(task_io_accounting, rchar) - 0usize];
    ["Offset of field: task_io_accounting::wchar"]
        [::std::mem::offset_of!(task_io_accounting, wchar) - 8usize];
    ["Offset of field: task_io_accounting::syscr"]
        [::std::mem::offset_of!(task_io_accounting, syscr) - 16usize];
    ["Offset of field: task_io_accounting::syscw"]
        [::std::mem::offset_of!(task_io_accounting, syscw) - 24usize];
    ["Offset of field: task_io_accounting::read_bytes"]
        [::std::mem::offset_of!(task_io_accounting, read_bytes) - 32usize];
    ["Offset of field: task_io_accounting::write_bytes"]
        [::std::mem::offset_of!(task_io_accounting, write_bytes) - 40usize];
    ["Offset of field: task_io_accounting::cancelled_write_bytes"]
        [::std::mem::offset_of!(task_io_accounting, cancelled_write_bytes) - 48usize];
};
#[doc = " posix_cputimer_base - Container per posix CPU clock\n @nextevt:\t\tEarliest-expiration cache\n @tqhead:\t\ttimerqueue head for cpu_timers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cputimer_base {
    pub nextevt: u64_,
    pub tqhead: timerqueue_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of posix_cputimer_base"][::std::mem::size_of::<posix_cputimer_base>() - 24usize];
    ["Alignment of posix_cputimer_base"][::std::mem::align_of::<posix_cputimer_base>() - 8usize];
    ["Offset of field: posix_cputimer_base::nextevt"]
        [::std::mem::offset_of!(posix_cputimer_base, nextevt) - 0usize];
    ["Offset of field: posix_cputimer_base::tqhead"]
        [::std::mem::offset_of!(posix_cputimer_base, tqhead) - 8usize];
};
#[doc = " posix_cputimers - Container for posix CPU timer related data\n @bases:\t\tBase container for posix CPU clocks\n @timers_active:\tTimers are queued.\n @expiry_active:\tTimer expiry is active. Used for\n\t\t\tprocess wide timers to avoid multiple\n\t\t\ttask trying to handle expiry concurrently\n\n Used in task_struct and signal_struct"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cputimers {
    pub bases: [posix_cputimer_base; 3usize],
    pub timers_active: ::std::os::raw::c_uint,
    pub expiry_active: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of posix_cputimers"][::std::mem::size_of::<posix_cputimers>() - 80usize];
    ["Alignment of posix_cputimers"][::std::mem::align_of::<posix_cputimers>() - 8usize];
    ["Offset of field: posix_cputimers::bases"]
        [::std::mem::offset_of!(posix_cputimers, bases) - 0usize];
    ["Offset of field: posix_cputimers::timers_active"]
        [::std::mem::offset_of!(posix_cputimers, timers_active) - 72usize];
    ["Offset of field: posix_cputimers::expiry_active"]
        [::std::mem::offset_of!(posix_cputimers, expiry_active) - 76usize];
};
#[doc = " posix_cputimers_work - Container for task work based posix CPU timer expiry\n @work:\tThe task work to be scheduled\n @mutex:\tMutex held around expiry in context of this task work\n @scheduled:  @work has been scheduled already, no further processing"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_cputimers_work {
    pub work: callback_head,
    pub mutex: mutex,
    pub scheduled: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of posix_cputimers_work"][::std::mem::size_of::<posix_cputimers_work>() - 56usize];
    ["Alignment of posix_cputimers_work"][::std::mem::align_of::<posix_cputimers_work>() - 8usize];
    ["Offset of field: posix_cputimers_work::work"]
        [::std::mem::offset_of!(posix_cputimers_work, work) - 0usize];
    ["Offset of field: posix_cputimers_work::mutex"]
        [::std::mem::offset_of!(posix_cputimers_work, mutex) - 16usize];
    ["Offset of field: posix_cputimers_work::scheduled"]
        [::std::mem::offset_of!(posix_cputimers_work, scheduled) - 48usize];
};
pub const rseq_cpu_id_state_RSEQ_CPU_ID_UNINITIALIZED: rseq_cpu_id_state = -1;
pub const rseq_cpu_id_state_RSEQ_CPU_ID_REGISTRATION_FAILED: rseq_cpu_id_state = -2;
pub type rseq_cpu_id_state = ::std::os::raw::c_int;
pub const rseq_flags_RSEQ_FLAG_UNREGISTER: rseq_flags = 1;
pub type rseq_flags = ::std::os::raw::c_uint;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT: rseq_cs_flags_bit = 0;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT: rseq_cs_flags_bit = 1;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT: rseq_cs_flags_bit = 2;
pub type rseq_cs_flags_bit = ::std::os::raw::c_uint;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT: rseq_cs_flags = 1;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL: rseq_cs_flags = 2;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE: rseq_cs_flags = 4;
pub type rseq_cs_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct rseq_cs {
    pub version: __u32,
    pub flags: __u32,
    pub start_ip: __u64,
    pub post_commit_offset: __u64,
    pub abort_ip: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rseq_cs"][::std::mem::size_of::<rseq_cs>() - 32usize];
    ["Alignment of rseq_cs"][::std::mem::align_of::<rseq_cs>() - 32usize];
    ["Offset of field: rseq_cs::version"][::std::mem::offset_of!(rseq_cs, version) - 0usize];
    ["Offset of field: rseq_cs::flags"][::std::mem::offset_of!(rseq_cs, flags) - 4usize];
    ["Offset of field: rseq_cs::start_ip"][::std::mem::offset_of!(rseq_cs, start_ip) - 8usize];
    ["Offset of field: rseq_cs::post_commit_offset"]
        [::std::mem::offset_of!(rseq_cs, post_commit_offset) - 16usize];
    ["Offset of field: rseq_cs::abort_ip"][::std::mem::offset_of!(rseq_cs, abort_ip) - 24usize];
};
#[repr(C)]
#[repr(align(32))]
#[derive(Debug)]
pub struct rseq {
    pub cpu_id_start: __u32,
    pub cpu_id: __u32,
    pub rseq_cs: __u64,
    pub flags: __u32,
    pub node_id: __u32,
    pub mm_cid: __u32,
    pub end: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rseq"][::std::mem::size_of::<rseq>() - 32usize];
    ["Alignment of rseq"][::std::mem::align_of::<rseq>() - 32usize];
    ["Offset of field: rseq::cpu_id_start"][::std::mem::offset_of!(rseq, cpu_id_start) - 0usize];
    ["Offset of field: rseq::cpu_id"][::std::mem::offset_of!(rseq, cpu_id) - 4usize];
    ["Offset of field: rseq::rseq_cs"][::std::mem::offset_of!(rseq, rseq_cs) - 8usize];
    ["Offset of field: rseq::flags"][::std::mem::offset_of!(rseq, flags) - 16usize];
    ["Offset of field: rseq::node_id"][::std::mem::offset_of!(rseq, node_id) - 20usize];
    ["Offset of field: rseq::mm_cid"][::std::mem::offset_of!(rseq, mm_cid) - 24usize];
    ["Offset of field: rseq::end"][::std::mem::offset_of!(rseq, end) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seqcount {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount"][::std::mem::size_of::<seqcount>() - 4usize];
    ["Alignment of seqcount"][::std::mem::align_of::<seqcount>() - 4usize];
    ["Offset of field: seqcount::sequence"][::std::mem::offset_of!(seqcount, sequence) - 0usize];
};
pub type seqcount_t = seqcount;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seqcount_raw_spinlock {
    pub seqcount: seqcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount_raw_spinlock"][::std::mem::size_of::<seqcount_raw_spinlock>() - 4usize];
    ["Alignment of seqcount_raw_spinlock"]
        [::std::mem::align_of::<seqcount_raw_spinlock>() - 4usize];
    ["Offset of field: seqcount_raw_spinlock::seqcount"]
        [::std::mem::offset_of!(seqcount_raw_spinlock, seqcount) - 0usize];
};
pub type seqcount_raw_spinlock_t = seqcount_raw_spinlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seqcount_spinlock {
    pub seqcount: seqcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount_spinlock"][::std::mem::size_of::<seqcount_spinlock>() - 4usize];
    ["Alignment of seqcount_spinlock"][::std::mem::align_of::<seqcount_spinlock>() - 4usize];
    ["Offset of field: seqcount_spinlock::seqcount"]
        [::std::mem::offset_of!(seqcount_spinlock, seqcount) - 0usize];
};
pub type seqcount_spinlock_t = seqcount_spinlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seqcount_rwlock {
    pub seqcount: seqcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount_rwlock"][::std::mem::size_of::<seqcount_rwlock>() - 4usize];
    ["Alignment of seqcount_rwlock"][::std::mem::align_of::<seqcount_rwlock>() - 4usize];
    ["Offset of field: seqcount_rwlock::seqcount"]
        [::std::mem::offset_of!(seqcount_rwlock, seqcount) - 0usize];
};
pub type seqcount_rwlock_t = seqcount_rwlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seqcount_mutex {
    pub seqcount: seqcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount_mutex"][::std::mem::size_of::<seqcount_mutex>() - 4usize];
    ["Alignment of seqcount_mutex"][::std::mem::align_of::<seqcount_mutex>() - 4usize];
    ["Offset of field: seqcount_mutex::seqcount"]
        [::std::mem::offset_of!(seqcount_mutex, seqcount) - 0usize];
};
pub type seqcount_mutex_t = seqcount_mutex;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seqlock_t {
    pub seqcount: seqcount_spinlock_t,
    pub lock: spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqlock_t"][::std::mem::size_of::<seqlock_t>() - 8usize];
    ["Alignment of seqlock_t"][::std::mem::align_of::<seqlock_t>() - 4usize];
    ["Offset of field: seqlock_t::seqcount"][::std::mem::offset_of!(seqlock_t, seqcount) - 0usize];
    ["Offset of field: seqlock_t::lock"][::std::mem::offset_of!(seqlock_t, lock) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct da_monitor {
    pub monitoring: bool_,
    pub curr_state: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of da_monitor"][::std::mem::size_of::<da_monitor>() - 8usize];
    ["Alignment of da_monitor"][::std::mem::align_of::<da_monitor>() - 4usize];
    ["Offset of field: da_monitor::monitoring"]
        [::std::mem::offset_of!(da_monitor, monitoring) - 0usize];
    ["Offset of field: da_monitor::curr_state"]
        [::std::mem::offset_of!(da_monitor, curr_state) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union rv_task_monitor {
    pub da_mon: da_monitor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rv_task_monitor"][::std::mem::size_of::<rv_task_monitor>() - 8usize];
    ["Alignment of rv_task_monitor"][::std::mem::align_of::<rv_task_monitor>() - 4usize];
    ["Offset of field: rv_task_monitor::da_mon"]
        [::std::mem::offset_of!(rv_task_monitor, da_mon) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rv_reactor {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub react: ::std::option::Option<unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rv_reactor"][::std::mem::size_of::<rv_reactor>() - 24usize];
    ["Alignment of rv_reactor"][::std::mem::align_of::<rv_reactor>() - 8usize];
    ["Offset of field: rv_reactor::name"][::std::mem::offset_of!(rv_reactor, name) - 0usize];
    ["Offset of field: rv_reactor::description"]
        [::std::mem::offset_of!(rv_reactor, description) - 8usize];
    ["Offset of field: rv_reactor::react"][::std::mem::offset_of!(rv_reactor, react) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rv_monitor {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub enabled: bool_,
    pub enable: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub disable: ::std::option::Option<unsafe extern "C" fn()>,
    pub reset: ::std::option::Option<unsafe extern "C" fn()>,
    pub react: ::std::option::Option<unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rv_monitor"][::std::mem::size_of::<rv_monitor>() - 56usize];
    ["Alignment of rv_monitor"][::std::mem::align_of::<rv_monitor>() - 8usize];
    ["Offset of field: rv_monitor::name"][::std::mem::offset_of!(rv_monitor, name) - 0usize];
    ["Offset of field: rv_monitor::description"]
        [::std::mem::offset_of!(rv_monitor, description) - 8usize];
    ["Offset of field: rv_monitor::enabled"][::std::mem::offset_of!(rv_monitor, enabled) - 16usize];
    ["Offset of field: rv_monitor::enable"][::std::mem::offset_of!(rv_monitor, enable) - 24usize];
    ["Offset of field: rv_monitor::disable"][::std::mem::offset_of!(rv_monitor, disable) - 32usize];
    ["Offset of field: rv_monitor::reset"][::std::mem::offset_of!(rv_monitor, reset) - 40usize];
    ["Offset of field: rv_monitor::react"][::std::mem::offset_of!(rv_monitor, react) - 48usize];
};
extern "C" {
    pub fn rv_monitoring_on() -> bool_;
}
extern "C" {
    pub fn rv_unregister_monitor(monitor: *mut rv_monitor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rv_register_monitor(monitor: *mut rv_monitor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rv_get_task_monitor_slot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rv_put_task_monitor_slot(slot: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rv_reacting_on() -> bool_;
}
extern "C" {
    pub fn rv_unregister_reactor(reactor: *mut rv_reactor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rv_register_reactor(reactor: *mut rv_reactor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __klp_sched_try_switch();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kuid_t {
    pub val: uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kuid_t"][::std::mem::size_of::<kuid_t>() - 4usize];
    ["Alignment of kuid_t"][::std::mem::align_of::<kuid_t>() - 4usize];
    ["Offset of field: kuid_t::val"][::std::mem::offset_of!(kuid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kgid_t {
    pub val: gid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kgid_t"][::std::mem::size_of::<kgid_t>() - 4usize];
    ["Alignment of kgid_t"][::std::mem::align_of::<kgid_t>() - 4usize];
    ["Offset of field: kgid_t::val"][::std::mem::offset_of!(kgid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blk_plug {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_local_storage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_run_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_net_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cfs_rq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct futex_pi_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_task {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mempolicy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nameidata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsproxy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct perf_event_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_inode_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reclaim_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct robust_list_head {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct root_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_delay_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_event_mm {
    _unused: [u8; 0],
}
pub const TASK_COMM_LEN: _bindgen_ty_11 = 16;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
extern "C" {
    pub fn sched_tick();
}
extern "C" {
    pub fn schedule_timeout(timeout: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn schedule_timeout_interruptible(
        timeout: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn schedule_timeout_killable(timeout: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn schedule_timeout_uninterruptible(
        timeout: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn schedule_timeout_idle(timeout: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn schedule();
}
extern "C" {
    pub fn schedule_preempt_disabled();
}
extern "C" {
    pub fn preempt_schedule_irq();
}
extern "C" {
    pub fn io_schedule_prepare() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn io_schedule_finish(token: ::std::os::raw::c_int);
}
extern "C" {
    pub fn io_schedule_timeout(timeout: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn io_schedule();
}
#[doc = " struct prev_cputime - snapshot of system and user cputime\n @utime: time spent in user mode\n @stime: time spent in system mode\n @lock: protects the above two fields\n\n Stores previous user/system time values such that we can guarantee\n monotonicity."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prev_cputime {
    pub utime: u64_,
    pub stime: u64_,
    pub lock: raw_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of prev_cputime"][::std::mem::size_of::<prev_cputime>() - 24usize];
    ["Alignment of prev_cputime"][::std::mem::align_of::<prev_cputime>() - 8usize];
    ["Offset of field: prev_cputime::utime"][::std::mem::offset_of!(prev_cputime, utime) - 0usize];
    ["Offset of field: prev_cputime::stime"][::std::mem::offset_of!(prev_cputime, stime) - 8usize];
    ["Offset of field: prev_cputime::lock"][::std::mem::offset_of!(prev_cputime, lock) - 16usize];
};
pub const vtime_state_VTIME_INACTIVE: vtime_state = 0;
pub const vtime_state_VTIME_IDLE: vtime_state = 1;
pub const vtime_state_VTIME_SYS: vtime_state = 2;
pub const vtime_state_VTIME_USER: vtime_state = 3;
pub const vtime_state_VTIME_GUEST: vtime_state = 4;
pub type vtime_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vtime {
    pub seqcount: seqcount_t,
    pub starttime: ::std::os::raw::c_ulonglong,
    pub state: vtime_state,
    pub cpu: ::std::os::raw::c_uint,
    pub utime: u64_,
    pub stime: u64_,
    pub gtime: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vtime"][::std::mem::size_of::<vtime>() - 48usize];
    ["Alignment of vtime"][::std::mem::align_of::<vtime>() - 8usize];
    ["Offset of field: vtime::seqcount"][::std::mem::offset_of!(vtime, seqcount) - 0usize];
    ["Offset of field: vtime::starttime"][::std::mem::offset_of!(vtime, starttime) - 8usize];
    ["Offset of field: vtime::state"][::std::mem::offset_of!(vtime, state) - 16usize];
    ["Offset of field: vtime::cpu"][::std::mem::offset_of!(vtime, cpu) - 20usize];
    ["Offset of field: vtime::utime"][::std::mem::offset_of!(vtime, utime) - 24usize];
    ["Offset of field: vtime::stime"][::std::mem::offset_of!(vtime, stime) - 32usize];
    ["Offset of field: vtime::gtime"][::std::mem::offset_of!(vtime, gtime) - 40usize];
};
pub const uclamp_id_UCLAMP_MIN: uclamp_id = 0;
pub const uclamp_id_UCLAMP_MAX: uclamp_id = 1;
pub const uclamp_id_UCLAMP_CNT: uclamp_id = 2;
pub type uclamp_id = ::std::os::raw::c_uint;
extern "C" {
    pub static mut def_root_domain: root_domain;
}
extern "C" {
    pub static mut sched_domains_mutex: mutex;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_info {
    pub pcount: ::std::os::raw::c_ulong,
    pub run_delay: ::std::os::raw::c_ulonglong,
    pub last_arrival: ::std::os::raw::c_ulonglong,
    pub last_queued: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_info"][::std::mem::size_of::<sched_info>() - 32usize];
    ["Alignment of sched_info"][::std::mem::align_of::<sched_info>() - 8usize];
    ["Offset of field: sched_info::pcount"][::std::mem::offset_of!(sched_info, pcount) - 0usize];
    ["Offset of field: sched_info::run_delay"]
        [::std::mem::offset_of!(sched_info, run_delay) - 8usize];
    ["Offset of field: sched_info::last_arrival"]
        [::std::mem::offset_of!(sched_info, last_arrival) - 16usize];
    ["Offset of field: sched_info::last_queued"]
        [::std::mem::offset_of!(sched_info, last_queued) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct load_weight {
    pub weight: ::std::os::raw::c_ulong,
    pub inv_weight: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of load_weight"][::std::mem::size_of::<load_weight>() - 16usize];
    ["Alignment of load_weight"][::std::mem::align_of::<load_weight>() - 8usize];
    ["Offset of field: load_weight::weight"][::std::mem::offset_of!(load_weight, weight) - 0usize];
    ["Offset of field: load_weight::inv_weight"]
        [::std::mem::offset_of!(load_weight, inv_weight) - 8usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct sched_avg {
    pub last_update_time: u64_,
    pub load_sum: u64_,
    pub runnable_sum: u64_,
    pub util_sum: u32_,
    pub period_contrib: u32_,
    pub load_avg: ::std::os::raw::c_ulong,
    pub runnable_avg: ::std::os::raw::c_ulong,
    pub util_avg: ::std::os::raw::c_ulong,
    pub util_est: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_avg"][::std::mem::size_of::<sched_avg>() - 64usize];
    ["Alignment of sched_avg"][::std::mem::align_of::<sched_avg>() - 64usize];
    ["Offset of field: sched_avg::last_update_time"]
        [::std::mem::offset_of!(sched_avg, last_update_time) - 0usize];
    ["Offset of field: sched_avg::load_sum"][::std::mem::offset_of!(sched_avg, load_sum) - 8usize];
    ["Offset of field: sched_avg::runnable_sum"]
        [::std::mem::offset_of!(sched_avg, runnable_sum) - 16usize];
    ["Offset of field: sched_avg::util_sum"][::std::mem::offset_of!(sched_avg, util_sum) - 24usize];
    ["Offset of field: sched_avg::period_contrib"]
        [::std::mem::offset_of!(sched_avg, period_contrib) - 28usize];
    ["Offset of field: sched_avg::load_avg"][::std::mem::offset_of!(sched_avg, load_avg) - 32usize];
    ["Offset of field: sched_avg::runnable_avg"]
        [::std::mem::offset_of!(sched_avg, runnable_avg) - 40usize];
    ["Offset of field: sched_avg::util_avg"][::std::mem::offset_of!(sched_avg, util_avg) - 48usize];
    ["Offset of field: sched_avg::util_est"][::std::mem::offset_of!(sched_avg, util_est) - 56usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct sched_statistics {
    pub wait_start: u64_,
    pub wait_max: u64_,
    pub wait_count: u64_,
    pub wait_sum: u64_,
    pub iowait_count: u64_,
    pub iowait_sum: u64_,
    pub sleep_start: u64_,
    pub sleep_max: u64_,
    pub sum_sleep_runtime: s64,
    pub block_start: u64_,
    pub block_max: u64_,
    pub sum_block_runtime: s64,
    pub exec_max: s64,
    pub slice_max: u64_,
    pub nr_migrations_cold: u64_,
    pub nr_failed_migrations_affine: u64_,
    pub nr_failed_migrations_running: u64_,
    pub nr_failed_migrations_hot: u64_,
    pub nr_forced_migrations: u64_,
    pub nr_wakeups: u64_,
    pub nr_wakeups_sync: u64_,
    pub nr_wakeups_migrate: u64_,
    pub nr_wakeups_local: u64_,
    pub nr_wakeups_remote: u64_,
    pub nr_wakeups_affine: u64_,
    pub nr_wakeups_affine_attempts: u64_,
    pub nr_wakeups_passive: u64_,
    pub nr_wakeups_idle: u64_,
    pub core_forceidle_sum: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_statistics"][::std::mem::size_of::<sched_statistics>() - 256usize];
    ["Alignment of sched_statistics"][::std::mem::align_of::<sched_statistics>() - 64usize];
    ["Offset of field: sched_statistics::wait_start"]
        [::std::mem::offset_of!(sched_statistics, wait_start) - 0usize];
    ["Offset of field: sched_statistics::wait_max"]
        [::std::mem::offset_of!(sched_statistics, wait_max) - 8usize];
    ["Offset of field: sched_statistics::wait_count"]
        [::std::mem::offset_of!(sched_statistics, wait_count) - 16usize];
    ["Offset of field: sched_statistics::wait_sum"]
        [::std::mem::offset_of!(sched_statistics, wait_sum) - 24usize];
    ["Offset of field: sched_statistics::iowait_count"]
        [::std::mem::offset_of!(sched_statistics, iowait_count) - 32usize];
    ["Offset of field: sched_statistics::iowait_sum"]
        [::std::mem::offset_of!(sched_statistics, iowait_sum) - 40usize];
    ["Offset of field: sched_statistics::sleep_start"]
        [::std::mem::offset_of!(sched_statistics, sleep_start) - 48usize];
    ["Offset of field: sched_statistics::sleep_max"]
        [::std::mem::offset_of!(sched_statistics, sleep_max) - 56usize];
    ["Offset of field: sched_statistics::sum_sleep_runtime"]
        [::std::mem::offset_of!(sched_statistics, sum_sleep_runtime) - 64usize];
    ["Offset of field: sched_statistics::block_start"]
        [::std::mem::offset_of!(sched_statistics, block_start) - 72usize];
    ["Offset of field: sched_statistics::block_max"]
        [::std::mem::offset_of!(sched_statistics, block_max) - 80usize];
    ["Offset of field: sched_statistics::sum_block_runtime"]
        [::std::mem::offset_of!(sched_statistics, sum_block_runtime) - 88usize];
    ["Offset of field: sched_statistics::exec_max"]
        [::std::mem::offset_of!(sched_statistics, exec_max) - 96usize];
    ["Offset of field: sched_statistics::slice_max"]
        [::std::mem::offset_of!(sched_statistics, slice_max) - 104usize];
    ["Offset of field: sched_statistics::nr_migrations_cold"]
        [::std::mem::offset_of!(sched_statistics, nr_migrations_cold) - 112usize];
    ["Offset of field: sched_statistics::nr_failed_migrations_affine"]
        [::std::mem::offset_of!(sched_statistics, nr_failed_migrations_affine) - 120usize];
    ["Offset of field: sched_statistics::nr_failed_migrations_running"]
        [::std::mem::offset_of!(sched_statistics, nr_failed_migrations_running) - 128usize];
    ["Offset of field: sched_statistics::nr_failed_migrations_hot"]
        [::std::mem::offset_of!(sched_statistics, nr_failed_migrations_hot) - 136usize];
    ["Offset of field: sched_statistics::nr_forced_migrations"]
        [::std::mem::offset_of!(sched_statistics, nr_forced_migrations) - 144usize];
    ["Offset of field: sched_statistics::nr_wakeups"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups) - 152usize];
    ["Offset of field: sched_statistics::nr_wakeups_sync"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_sync) - 160usize];
    ["Offset of field: sched_statistics::nr_wakeups_migrate"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_migrate) - 168usize];
    ["Offset of field: sched_statistics::nr_wakeups_local"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_local) - 176usize];
    ["Offset of field: sched_statistics::nr_wakeups_remote"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_remote) - 184usize];
    ["Offset of field: sched_statistics::nr_wakeups_affine"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_affine) - 192usize];
    ["Offset of field: sched_statistics::nr_wakeups_affine_attempts"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_affine_attempts) - 200usize];
    ["Offset of field: sched_statistics::nr_wakeups_passive"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_passive) - 208usize];
    ["Offset of field: sched_statistics::nr_wakeups_idle"]
        [::std::mem::offset_of!(sched_statistics, nr_wakeups_idle) - 216usize];
    ["Offset of field: sched_statistics::core_forceidle_sum"]
        [::std::mem::offset_of!(sched_statistics, core_forceidle_sum) - 224usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct sched_entity {
    pub load: load_weight,
    pub run_node: rb_node,
    pub deadline: u64_,
    pub min_vruntime: u64_,
    pub group_node: list_head,
    pub on_rq: ::std::os::raw::c_uint,
    pub exec_start: u64_,
    pub sum_exec_runtime: u64_,
    pub prev_sum_exec_runtime: u64_,
    pub vruntime: u64_,
    pub vlag: s64,
    pub slice: u64_,
    pub nr_migrations: u64_,
    pub depth: ::std::os::raw::c_int,
    pub parent: *mut sched_entity,
    pub cfs_rq: *mut cfs_rq,
    pub my_q: *mut cfs_rq,
    pub runnable_weight: ::std::os::raw::c_ulong,
    pub __bindgen_padding_0: [u64; 2usize],
    pub avg: sched_avg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_entity"][::std::mem::size_of::<sched_entity>() - 256usize];
    ["Alignment of sched_entity"][::std::mem::align_of::<sched_entity>() - 64usize];
    ["Offset of field: sched_entity::load"][::std::mem::offset_of!(sched_entity, load) - 0usize];
    ["Offset of field: sched_entity::run_node"]
        [::std::mem::offset_of!(sched_entity, run_node) - 16usize];
    ["Offset of field: sched_entity::deadline"]
        [::std::mem::offset_of!(sched_entity, deadline) - 40usize];
    ["Offset of field: sched_entity::min_vruntime"]
        [::std::mem::offset_of!(sched_entity, min_vruntime) - 48usize];
    ["Offset of field: sched_entity::group_node"]
        [::std::mem::offset_of!(sched_entity, group_node) - 56usize];
    ["Offset of field: sched_entity::on_rq"][::std::mem::offset_of!(sched_entity, on_rq) - 72usize];
    ["Offset of field: sched_entity::exec_start"]
        [::std::mem::offset_of!(sched_entity, exec_start) - 80usize];
    ["Offset of field: sched_entity::sum_exec_runtime"]
        [::std::mem::offset_of!(sched_entity, sum_exec_runtime) - 88usize];
    ["Offset of field: sched_entity::prev_sum_exec_runtime"]
        [::std::mem::offset_of!(sched_entity, prev_sum_exec_runtime) - 96usize];
    ["Offset of field: sched_entity::vruntime"]
        [::std::mem::offset_of!(sched_entity, vruntime) - 104usize];
    ["Offset of field: sched_entity::vlag"][::std::mem::offset_of!(sched_entity, vlag) - 112usize];
    ["Offset of field: sched_entity::slice"]
        [::std::mem::offset_of!(sched_entity, slice) - 120usize];
    ["Offset of field: sched_entity::nr_migrations"]
        [::std::mem::offset_of!(sched_entity, nr_migrations) - 128usize];
    ["Offset of field: sched_entity::depth"]
        [::std::mem::offset_of!(sched_entity, depth) - 136usize];
    ["Offset of field: sched_entity::parent"]
        [::std::mem::offset_of!(sched_entity, parent) - 144usize];
    ["Offset of field: sched_entity::cfs_rq"]
        [::std::mem::offset_of!(sched_entity, cfs_rq) - 152usize];
    ["Offset of field: sched_entity::my_q"][::std::mem::offset_of!(sched_entity, my_q) - 160usize];
    ["Offset of field: sched_entity::runnable_weight"]
        [::std::mem::offset_of!(sched_entity, runnable_weight) - 168usize];
    ["Offset of field: sched_entity::avg"][::std::mem::offset_of!(sched_entity, avg) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_rt_entity {
    pub run_list: list_head,
    pub timeout: ::std::os::raw::c_ulong,
    pub watchdog_stamp: ::std::os::raw::c_ulong,
    pub time_slice: ::std::os::raw::c_uint,
    pub on_rq: ::std::os::raw::c_ushort,
    pub on_list: ::std::os::raw::c_ushort,
    pub back: *mut sched_rt_entity,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_rt_entity"][::std::mem::size_of::<sched_rt_entity>() - 48usize];
    ["Alignment of sched_rt_entity"][::std::mem::align_of::<sched_rt_entity>() - 8usize];
    ["Offset of field: sched_rt_entity::run_list"]
        [::std::mem::offset_of!(sched_rt_entity, run_list) - 0usize];
    ["Offset of field: sched_rt_entity::timeout"]
        [::std::mem::offset_of!(sched_rt_entity, timeout) - 16usize];
    ["Offset of field: sched_rt_entity::watchdog_stamp"]
        [::std::mem::offset_of!(sched_rt_entity, watchdog_stamp) - 24usize];
    ["Offset of field: sched_rt_entity::time_slice"]
        [::std::mem::offset_of!(sched_rt_entity, time_slice) - 32usize];
    ["Offset of field: sched_rt_entity::on_rq"]
        [::std::mem::offset_of!(sched_rt_entity, on_rq) - 36usize];
    ["Offset of field: sched_rt_entity::on_list"]
        [::std::mem::offset_of!(sched_rt_entity, on_list) - 38usize];
    ["Offset of field: sched_rt_entity::back"]
        [::std::mem::offset_of!(sched_rt_entity, back) - 40usize];
};
pub type dl_server_has_tasks_f =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut sched_dl_entity) -> bool_>;
pub type dl_server_pick_f =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut sched_dl_entity) -> *mut task_struct>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_dl_entity {
    pub rb_node: rb_node,
    pub dl_runtime: u64_,
    pub dl_deadline: u64_,
    pub dl_period: u64_,
    pub dl_bw: u64_,
    pub dl_density: u64_,
    pub runtime: s64,
    pub deadline: u64_,
    pub flags: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dl_timer: hrtimer,
    pub inactive_timer: hrtimer,
    pub rq: *mut rq,
    pub server_has_tasks: dl_server_has_tasks_f,
    pub server_pick: dl_server_pick_f,
    pub pi_se: *mut sched_dl_entity,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_dl_entity"][::std::mem::size_of::<sched_dl_entity>() - 248usize];
    ["Alignment of sched_dl_entity"][::std::mem::align_of::<sched_dl_entity>() - 8usize];
    ["Offset of field: sched_dl_entity::rb_node"]
        [::std::mem::offset_of!(sched_dl_entity, rb_node) - 0usize];
    ["Offset of field: sched_dl_entity::dl_runtime"]
        [::std::mem::offset_of!(sched_dl_entity, dl_runtime) - 24usize];
    ["Offset of field: sched_dl_entity::dl_deadline"]
        [::std::mem::offset_of!(sched_dl_entity, dl_deadline) - 32usize];
    ["Offset of field: sched_dl_entity::dl_period"]
        [::std::mem::offset_of!(sched_dl_entity, dl_period) - 40usize];
    ["Offset of field: sched_dl_entity::dl_bw"]
        [::std::mem::offset_of!(sched_dl_entity, dl_bw) - 48usize];
    ["Offset of field: sched_dl_entity::dl_density"]
        [::std::mem::offset_of!(sched_dl_entity, dl_density) - 56usize];
    ["Offset of field: sched_dl_entity::runtime"]
        [::std::mem::offset_of!(sched_dl_entity, runtime) - 64usize];
    ["Offset of field: sched_dl_entity::deadline"]
        [::std::mem::offset_of!(sched_dl_entity, deadline) - 72usize];
    ["Offset of field: sched_dl_entity::flags"]
        [::std::mem::offset_of!(sched_dl_entity, flags) - 80usize];
    ["Offset of field: sched_dl_entity::dl_timer"]
        [::std::mem::offset_of!(sched_dl_entity, dl_timer) - 88usize];
    ["Offset of field: sched_dl_entity::inactive_timer"]
        [::std::mem::offset_of!(sched_dl_entity, inactive_timer) - 152usize];
    ["Offset of field: sched_dl_entity::rq"]
        [::std::mem::offset_of!(sched_dl_entity, rq) - 216usize];
    ["Offset of field: sched_dl_entity::server_has_tasks"]
        [::std::mem::offset_of!(sched_dl_entity, server_has_tasks) - 224usize];
    ["Offset of field: sched_dl_entity::server_pick"]
        [::std::mem::offset_of!(sched_dl_entity, server_pick) - 232usize];
    ["Offset of field: sched_dl_entity::pi_se"]
        [::std::mem::offset_of!(sched_dl_entity, pi_se) - 240usize];
};
impl sched_dl_entity {
    #[inline]
    pub fn dl_throttled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_throttled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_yielded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_yielded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_non_contending(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_non_contending(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_overrun(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_overrun(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_server(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_server(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dl_throttled: ::std::os::raw::c_uint,
        dl_yielded: ::std::os::raw::c_uint,
        dl_non_contending: ::std::os::raw::c_uint,
        dl_overrun: ::std::os::raw::c_uint,
        dl_server: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dl_throttled: u32 = unsafe { ::std::mem::transmute(dl_throttled) };
            dl_throttled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dl_yielded: u32 = unsafe { ::std::mem::transmute(dl_yielded) };
            dl_yielded as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let dl_non_contending: u32 = unsafe { ::std::mem::transmute(dl_non_contending) };
            dl_non_contending as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dl_overrun: u32 = unsafe { ::std::mem::transmute(dl_overrun) };
            dl_overrun as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dl_server: u32 = unsafe { ::std::mem::transmute(dl_server) };
            dl_server as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct uclamp_se {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uclamp_se"][::std::mem::size_of::<uclamp_se>() - 4usize];
    ["Alignment of uclamp_se"][::std::mem::align_of::<uclamp_se>() - 4usize];
};
impl uclamp_se {
    #[inline]
    pub fn value(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_value(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bucket_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_bucket_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn active(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_active(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn user_defined(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_user_defined(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        value: ::std::os::raw::c_uint,
        bucket_id: ::std::os::raw::c_uint,
        active: ::std::os::raw::c_uint,
        user_defined: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 11u8, {
            let value: u32 = unsafe { ::std::mem::transmute(value) };
            value as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let bucket_id: u32 = unsafe { ::std::mem::transmute(bucket_id) };
            bucket_id as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let active: u32 = unsafe { ::std::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let user_defined: u32 = unsafe { ::std::mem::transmute(user_defined) };
            user_defined as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rcu_special {
    pub b: rcu_special__bindgen_ty_1,
    pub s: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_special__bindgen_ty_1 {
    pub blocked: u8_,
    pub need_qs: u8_,
    pub exp_hint: u8_,
    pub need_mb: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_special__bindgen_ty_1"]
        [::std::mem::size_of::<rcu_special__bindgen_ty_1>() - 4usize];
    ["Alignment of rcu_special__bindgen_ty_1"]
        [::std::mem::align_of::<rcu_special__bindgen_ty_1>() - 1usize];
    ["Offset of field: rcu_special__bindgen_ty_1::blocked"]
        [::std::mem::offset_of!(rcu_special__bindgen_ty_1, blocked) - 0usize];
    ["Offset of field: rcu_special__bindgen_ty_1::need_qs"]
        [::std::mem::offset_of!(rcu_special__bindgen_ty_1, need_qs) - 1usize];
    ["Offset of field: rcu_special__bindgen_ty_1::exp_hint"]
        [::std::mem::offset_of!(rcu_special__bindgen_ty_1, exp_hint) - 2usize];
    ["Offset of field: rcu_special__bindgen_ty_1::need_mb"]
        [::std::mem::offset_of!(rcu_special__bindgen_ty_1, need_mb) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_special"][::std::mem::size_of::<rcu_special>() - 4usize];
    ["Alignment of rcu_special"][::std::mem::align_of::<rcu_special>() - 4usize];
    ["Offset of field: rcu_special::b"][::std::mem::offset_of!(rcu_special, b) - 0usize];
    ["Offset of field: rcu_special::s"][::std::mem::offset_of!(rcu_special, s) - 0usize];
};
pub const perf_event_task_context_perf_invalid_context: perf_event_task_context = -1;
pub const perf_event_task_context_perf_hw_context: perf_event_task_context = 0;
pub const perf_event_task_context_perf_sw_context: perf_event_task_context = 1;
pub const perf_event_task_context_perf_nr_task_contexts: perf_event_task_context = 2;
pub type perf_event_task_context = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wake_q_node {
    pub next: *mut wake_q_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wake_q_node"][::std::mem::size_of::<wake_q_node>() - 8usize];
    ["Alignment of wake_q_node"][::std::mem::align_of::<wake_q_node>() - 8usize];
    ["Offset of field: wake_q_node::next"][::std::mem::offset_of!(wake_q_node, next) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmap_ctrl {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmap_ctrl"][::std::mem::size_of::<kmap_ctrl>() - 0usize];
    ["Alignment of kmap_ctrl"][::std::mem::align_of::<kmap_ctrl>() - 1usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct task_struct {
    pub thread_info: thread_info,
    pub __state: ::std::os::raw::c_uint,
    pub saved_state: ::std::os::raw::c_uint,
    pub stack: *mut ::std::os::raw::c_void,
    pub usage: refcount_t,
    pub flags: ::std::os::raw::c_uint,
    pub ptrace: ::std::os::raw::c_uint,
    pub on_cpu: ::std::os::raw::c_int,
    pub wake_entry: __call_single_node,
    pub wakee_flips: ::std::os::raw::c_uint,
    pub wakee_flip_decay_ts: ::std::os::raw::c_ulong,
    pub last_wakee: *mut task_struct,
    pub recent_used_cpu: ::std::os::raw::c_int,
    pub wake_cpu: ::std::os::raw::c_int,
    pub on_rq: ::std::os::raw::c_int,
    pub prio: ::std::os::raw::c_int,
    pub static_prio: ::std::os::raw::c_int,
    pub normal_prio: ::std::os::raw::c_int,
    pub rt_priority: ::std::os::raw::c_uint,
    pub __bindgen_padding_0: [u64; 0usize],
    pub se: sched_entity,
    pub rt: sched_rt_entity,
    pub dl: sched_dl_entity,
    pub dl_server: *mut sched_dl_entity,
    pub sched_class: *mut sched_class,
    pub core_node: rb_node,
    pub core_cookie: ::std::os::raw::c_ulong,
    pub core_occupation: ::std::os::raw::c_uint,
    pub sched_task_group: *mut task_group,
    pub uclamp_req: [uclamp_se; 2usize],
    pub uclamp: [uclamp_se; 2usize],
    pub __bindgen_padding_1: u64,
    pub stats: sched_statistics,
    pub preempt_notifiers: hlist_head,
    pub btrace_seq: ::std::os::raw::c_uint,
    pub policy: ::std::os::raw::c_uint,
    pub max_allowed_capacity: ::std::os::raw::c_ulong,
    pub nr_cpus_allowed: ::std::os::raw::c_int,
    pub cpus_ptr: *const cpumask_t,
    pub user_cpus_ptr: *mut cpumask_t,
    pub cpus_mask: cpumask_t,
    pub migration_pending: *mut ::std::os::raw::c_void,
    pub migration_disabled: ::std::os::raw::c_ushort,
    pub migration_flags: ::std::os::raw::c_ushort,
    pub rcu_read_lock_nesting: ::std::os::raw::c_int,
    pub rcu_read_unlock_special: rcu_special,
    pub rcu_node_entry: list_head,
    pub rcu_blocked_node: *mut rcu_node,
    pub rcu_tasks_nvcsw: ::std::os::raw::c_ulong,
    pub rcu_tasks_holdout: u8_,
    pub rcu_tasks_idx: u8_,
    pub rcu_tasks_idle_cpu: ::std::os::raw::c_int,
    pub rcu_tasks_holdout_list: list_head,
    pub rcu_tasks_exit_cpu: ::std::os::raw::c_int,
    pub rcu_tasks_exit_list: list_head,
    pub trc_reader_nesting: ::std::os::raw::c_int,
    pub trc_ipi_to_cpu: ::std::os::raw::c_int,
    pub trc_reader_special: rcu_special,
    pub trc_holdout_list: list_head,
    pub trc_blkd_node: list_head,
    pub trc_blkd_cpu: ::std::os::raw::c_int,
    pub sched_info: sched_info,
    pub tasks: list_head,
    pub pushable_tasks: plist_node,
    pub pushable_dl_tasks: rb_node,
    pub mm: *mut mm_struct,
    pub active_mm: *mut mm_struct,
    pub faults_disabled_mapping: *mut address_space,
    pub exit_state: ::std::os::raw::c_int,
    pub exit_code: ::std::os::raw::c_int,
    pub exit_signal: ::std::os::raw::c_int,
    pub pdeath_signal: ::std::os::raw::c_int,
    pub jobctl: ::std::os::raw::c_ulong,
    pub personality: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
    pub atomic_flags: ::std::os::raw::c_ulong,
    pub restart_block: restart_block,
    pub pid: pid_t,
    pub tgid: pid_t,
    pub stack_canary: ::std::os::raw::c_ulong,
    pub real_parent: *mut task_struct,
    pub parent: *mut task_struct,
    pub children: list_head,
    pub sibling: list_head,
    pub group_leader: *mut task_struct,
    pub ptraced: list_head,
    pub ptrace_entry: list_head,
    pub thread_pid: *mut pid,
    pub pid_links: [hlist_node; 4usize],
    pub thread_node: list_head,
    pub vfork_done: *mut completion,
    pub set_child_tid: *mut ::std::os::raw::c_int,
    pub clear_child_tid: *mut ::std::os::raw::c_int,
    pub worker_private: *mut ::std::os::raw::c_void,
    pub utime: u64_,
    pub stime: u64_,
    pub gtime: u64_,
    pub prev_cputime: prev_cputime,
    pub vtime: vtime,
    pub tick_dep_mask: atomic_t,
    pub nvcsw: ::std::os::raw::c_ulong,
    pub nivcsw: ::std::os::raw::c_ulong,
    pub start_time: u64_,
    pub start_boottime: u64_,
    pub min_flt: ::std::os::raw::c_ulong,
    pub maj_flt: ::std::os::raw::c_ulong,
    pub posix_cputimers: posix_cputimers,
    pub posix_cputimers_work: posix_cputimers_work,
    pub ptracer_cred: *const cred,
    pub real_cred: *const cred,
    pub cred: *const cred,
    pub cached_requested_key: *mut key,
    pub comm: [::std::os::raw::c_char; 16usize],
    pub nameidata: *mut nameidata,
    pub sysvsem: sysv_sem,
    pub sysvshm: sysv_shm,
    pub last_switch_count: ::std::os::raw::c_ulong,
    pub last_switch_time: ::std::os::raw::c_ulong,
    pub fs: *mut fs_struct,
    pub files: *mut files_struct,
    pub io_uring: *mut io_uring_task,
    pub nsproxy: *mut nsproxy,
    pub signal: *mut signal_struct,
    pub sighand: *mut sighand_struct,
    pub blocked: sigset_t,
    pub real_blocked: sigset_t,
    pub saved_sigmask: sigset_t,
    pub pending: sigpending,
    pub sas_ss_sp: ::std::os::raw::c_ulong,
    pub sas_ss_size: usize,
    pub sas_ss_flags: ::std::os::raw::c_uint,
    pub task_works: *mut callback_head,
    pub audit_context: *mut audit_context,
    pub loginuid: kuid_t,
    pub sessionid: ::std::os::raw::c_uint,
    pub seccomp: seccomp,
    pub syscall_dispatch: syscall_user_dispatch,
    pub parent_exec_id: u64_,
    pub self_exec_id: u64_,
    pub alloc_lock: spinlock_t,
    pub pi_lock: raw_spinlock_t,
    pub wake_q: wake_q_node,
    pub pi_waiters: rb_root_cached,
    pub pi_top_task: *mut task_struct,
    pub pi_blocked_on: *mut rt_mutex_waiter,
    pub in_ubsan: ::std::os::raw::c_uint,
    pub journal_info: *mut ::std::os::raw::c_void,
    pub bio_list: *mut bio_list,
    pub plug: *mut blk_plug,
    pub reclaim_state: *mut reclaim_state,
    pub io_context: *mut io_context,
    pub capture_control: *mut capture_control,
    pub ptrace_message: ::std::os::raw::c_ulong,
    pub last_siginfo: *mut kernel_siginfo_t,
    pub ioac: task_io_accounting,
    pub psi_flags: ::std::os::raw::c_uint,
    pub acct_rss_mem1: u64_,
    pub acct_vm_mem1: u64_,
    pub acct_timexpd: u64_,
    pub mems_allowed: nodemask_t,
    pub mems_allowed_seq: seqcount_spinlock_t,
    pub cpuset_mem_spread_rotor: ::std::os::raw::c_int,
    pub cpuset_slab_spread_rotor: ::std::os::raw::c_int,
    pub cgroups: *mut css_set,
    pub cg_list: list_head,
    pub closid: u32_,
    pub rmid: u32_,
    pub robust_list: *mut robust_list_head,
    pub compat_robust_list: *mut compat_robust_list_head,
    pub pi_state_list: list_head,
    pub pi_state_cache: *mut futex_pi_state,
    pub futex_exit_mutex: mutex,
    pub futex_state: ::std::os::raw::c_uint,
    pub perf_recursion: [u8_; 4usize],
    pub perf_event_ctxp: *mut perf_event_context,
    pub perf_event_mutex: mutex,
    pub perf_event_list: list_head,
    pub mempolicy: *mut mempolicy,
    pub il_prev: ::std::os::raw::c_short,
    pub il_weight: u8_,
    pub pref_node_fork: ::std::os::raw::c_short,
    pub numa_scan_seq: ::std::os::raw::c_int,
    pub numa_scan_period: ::std::os::raw::c_uint,
    pub numa_scan_period_max: ::std::os::raw::c_uint,
    pub numa_preferred_nid: ::std::os::raw::c_int,
    pub numa_migrate_retry: ::std::os::raw::c_ulong,
    pub node_stamp: u64_,
    pub last_task_numa_placement: u64_,
    pub last_sum_exec_runtime: u64_,
    pub numa_work: callback_head,
    pub numa_group: *mut numa_group,
    pub numa_faults: *mut ::std::os::raw::c_ulong,
    pub total_numa_faults: ::std::os::raw::c_ulong,
    pub numa_faults_locality: [::std::os::raw::c_ulong; 3usize],
    pub numa_pages_migrated: ::std::os::raw::c_ulong,
    pub rseq: *mut rseq,
    pub rseq_len: u32_,
    pub rseq_sig: u32_,
    pub rseq_event_mask: ::std::os::raw::c_ulong,
    pub mm_cid: ::std::os::raw::c_int,
    pub last_mm_cid: ::std::os::raw::c_int,
    pub migrate_from_cpu: ::std::os::raw::c_int,
    pub mm_cid_active: ::std::os::raw::c_int,
    pub cid_work: callback_head,
    pub tlb_ubc: tlbflush_unmap_batch,
    pub splice_pipe: *mut pipe_inode_info,
    pub task_frag: page_frag,
    pub delays: *mut task_delay_info,
    pub nr_dirtied: ::std::os::raw::c_int,
    pub nr_dirtied_pause: ::std::os::raw::c_int,
    pub dirty_paused_when: ::std::os::raw::c_ulong,
    pub latency_record_count: ::std::os::raw::c_int,
    pub latency_record: [latency_record; 32usize],
    pub timer_slack_ns: u64_,
    pub default_timer_slack_ns: u64_,
    pub curr_ret_stack: ::std::os::raw::c_int,
    pub curr_ret_depth: ::std::os::raw::c_int,
    pub ret_stack: *mut ::std::os::raw::c_ulong,
    pub ftrace_timestamp: ::std::os::raw::c_ulonglong,
    pub trace_overrun: atomic_t,
    pub tracing_graph_pause: atomic_t,
    pub trace_recursion: ::std::os::raw::c_ulong,
    pub memcg_nr_pages_over_high: ::std::os::raw::c_uint,
    pub active_memcg: *mut mem_cgroup,
    pub objcg: *mut obj_cgroup,
    pub throttle_disk: *mut gendisk,
    pub utask: *mut uprobe_task,
    pub sequential_io: ::std::os::raw::c_uint,
    pub sequential_io_avg: ::std::os::raw::c_uint,
    pub kmap_ctrl: kmap_ctrl,
    pub rcu: callback_head,
    pub rcu_users: refcount_t,
    pub pagefault_disabled: ::std::os::raw::c_int,
    pub oom_reaper_list: *mut task_struct,
    pub oom_reaper_timer: timer_list,
    pub stack_vm_area: *mut vm_struct,
    pub stack_refcount: refcount_t,
    pub patch_state: ::std::os::raw::c_int,
    pub security: *mut ::std::os::raw::c_void,
    pub bpf_storage: *mut bpf_local_storage,
    pub bpf_ctx: *mut bpf_run_ctx,
    pub bpf_net_context: *mut bpf_net_context,
    pub mce_vaddr: *mut ::std::os::raw::c_void,
    pub mce_kflags: __u64,
    pub mce_addr: u64_,
    pub _bitfield_align_2: [u64; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub mce_kill_me: callback_head,
    pub mce_count: ::std::os::raw::c_int,
    pub kretprobe_instances: llist_head,
    pub rethooks: llist_head,
    pub l1d_flush_kill: callback_head,
    pub rv: [rv_task_monitor; 1usize],
    pub user_event_mm: *mut user_event_mm,
    pub thread: thread_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_struct"][::std::mem::size_of::<task_struct>() - 13696usize];
    ["Alignment of task_struct"][::std::mem::align_of::<task_struct>() - 64usize];
    ["Offset of field: task_struct::thread_info"]
        [::std::mem::offset_of!(task_struct, thread_info) - 0usize];
    ["Offset of field: task_struct::__state"]
        [::std::mem::offset_of!(task_struct, __state) - 24usize];
    ["Offset of field: task_struct::saved_state"]
        [::std::mem::offset_of!(task_struct, saved_state) - 28usize];
    ["Offset of field: task_struct::stack"][::std::mem::offset_of!(task_struct, stack) - 32usize];
    ["Offset of field: task_struct::usage"][::std::mem::offset_of!(task_struct, usage) - 40usize];
    ["Offset of field: task_struct::flags"][::std::mem::offset_of!(task_struct, flags) - 44usize];
    ["Offset of field: task_struct::ptrace"][::std::mem::offset_of!(task_struct, ptrace) - 48usize];
    ["Offset of field: task_struct::on_cpu"][::std::mem::offset_of!(task_struct, on_cpu) - 52usize];
    ["Offset of field: task_struct::wake_entry"]
        [::std::mem::offset_of!(task_struct, wake_entry) - 56usize];
    ["Offset of field: task_struct::wakee_flips"]
        [::std::mem::offset_of!(task_struct, wakee_flips) - 72usize];
    ["Offset of field: task_struct::wakee_flip_decay_ts"]
        [::std::mem::offset_of!(task_struct, wakee_flip_decay_ts) - 80usize];
    ["Offset of field: task_struct::last_wakee"]
        [::std::mem::offset_of!(task_struct, last_wakee) - 88usize];
    ["Offset of field: task_struct::recent_used_cpu"]
        [::std::mem::offset_of!(task_struct, recent_used_cpu) - 96usize];
    ["Offset of field: task_struct::wake_cpu"]
        [::std::mem::offset_of!(task_struct, wake_cpu) - 100usize];
    ["Offset of field: task_struct::on_rq"][::std::mem::offset_of!(task_struct, on_rq) - 104usize];
    ["Offset of field: task_struct::prio"][::std::mem::offset_of!(task_struct, prio) - 108usize];
    ["Offset of field: task_struct::static_prio"]
        [::std::mem::offset_of!(task_struct, static_prio) - 112usize];
    ["Offset of field: task_struct::normal_prio"]
        [::std::mem::offset_of!(task_struct, normal_prio) - 116usize];
    ["Offset of field: task_struct::rt_priority"]
        [::std::mem::offset_of!(task_struct, rt_priority) - 120usize];
    ["Offset of field: task_struct::se"][::std::mem::offset_of!(task_struct, se) - 128usize];
    ["Offset of field: task_struct::rt"][::std::mem::offset_of!(task_struct, rt) - 384usize];
    ["Offset of field: task_struct::dl"][::std::mem::offset_of!(task_struct, dl) - 432usize];
    ["Offset of field: task_struct::dl_server"]
        [::std::mem::offset_of!(task_struct, dl_server) - 680usize];
    ["Offset of field: task_struct::sched_class"]
        [::std::mem::offset_of!(task_struct, sched_class) - 688usize];
    ["Offset of field: task_struct::core_node"]
        [::std::mem::offset_of!(task_struct, core_node) - 696usize];
    ["Offset of field: task_struct::core_cookie"]
        [::std::mem::offset_of!(task_struct, core_cookie) - 720usize];
    ["Offset of field: task_struct::core_occupation"]
        [::std::mem::offset_of!(task_struct, core_occupation) - 728usize];
    ["Offset of field: task_struct::sched_task_group"]
        [::std::mem::offset_of!(task_struct, sched_task_group) - 736usize];
    ["Offset of field: task_struct::uclamp_req"]
        [::std::mem::offset_of!(task_struct, uclamp_req) - 744usize];
    ["Offset of field: task_struct::uclamp"]
        [::std::mem::offset_of!(task_struct, uclamp) - 752usize];
    ["Offset of field: task_struct::stats"][::std::mem::offset_of!(task_struct, stats) - 768usize];
    ["Offset of field: task_struct::preempt_notifiers"]
        [::std::mem::offset_of!(task_struct, preempt_notifiers) - 1024usize];
    ["Offset of field: task_struct::btrace_seq"]
        [::std::mem::offset_of!(task_struct, btrace_seq) - 1032usize];
    ["Offset of field: task_struct::policy"]
        [::std::mem::offset_of!(task_struct, policy) - 1036usize];
    ["Offset of field: task_struct::max_allowed_capacity"]
        [::std::mem::offset_of!(task_struct, max_allowed_capacity) - 1040usize];
    ["Offset of field: task_struct::nr_cpus_allowed"]
        [::std::mem::offset_of!(task_struct, nr_cpus_allowed) - 1048usize];
    ["Offset of field: task_struct::cpus_ptr"]
        [::std::mem::offset_of!(task_struct, cpus_ptr) - 1056usize];
    ["Offset of field: task_struct::user_cpus_ptr"]
        [::std::mem::offset_of!(task_struct, user_cpus_ptr) - 1064usize];
    ["Offset of field: task_struct::cpus_mask"]
        [::std::mem::offset_of!(task_struct, cpus_mask) - 1072usize];
    ["Offset of field: task_struct::migration_pending"]
        [::std::mem::offset_of!(task_struct, migration_pending) - 2096usize];
    ["Offset of field: task_struct::migration_disabled"]
        [::std::mem::offset_of!(task_struct, migration_disabled) - 2104usize];
    ["Offset of field: task_struct::migration_flags"]
        [::std::mem::offset_of!(task_struct, migration_flags) - 2106usize];
    ["Offset of field: task_struct::rcu_read_lock_nesting"]
        [::std::mem::offset_of!(task_struct, rcu_read_lock_nesting) - 2108usize];
    ["Offset of field: task_struct::rcu_read_unlock_special"]
        [::std::mem::offset_of!(task_struct, rcu_read_unlock_special) - 2112usize];
    ["Offset of field: task_struct::rcu_node_entry"]
        [::std::mem::offset_of!(task_struct, rcu_node_entry) - 2120usize];
    ["Offset of field: task_struct::rcu_blocked_node"]
        [::std::mem::offset_of!(task_struct, rcu_blocked_node) - 2136usize];
    ["Offset of field: task_struct::rcu_tasks_nvcsw"]
        [::std::mem::offset_of!(task_struct, rcu_tasks_nvcsw) - 2144usize];
    ["Offset of field: task_struct::rcu_tasks_holdout"]
        [::std::mem::offset_of!(task_struct, rcu_tasks_holdout) - 2152usize];
    ["Offset of field: task_struct::rcu_tasks_idx"]
        [::std::mem::offset_of!(task_struct, rcu_tasks_idx) - 2153usize];
    ["Offset of field: task_struct::rcu_tasks_idle_cpu"]
        [::std::mem::offset_of!(task_struct, rcu_tasks_idle_cpu) - 2156usize];
    ["Offset of field: task_struct::rcu_tasks_holdout_list"]
        [::std::mem::offset_of!(task_struct, rcu_tasks_holdout_list) - 2160usize];
    ["Offset of field: task_struct::rcu_tasks_exit_cpu"]
        [::std::mem::offset_of!(task_struct, rcu_tasks_exit_cpu) - 2176usize];
    ["Offset of field: task_struct::rcu_tasks_exit_list"]
        [::std::mem::offset_of!(task_struct, rcu_tasks_exit_list) - 2184usize];
    ["Offset of field: task_struct::trc_reader_nesting"]
        [::std::mem::offset_of!(task_struct, trc_reader_nesting) - 2200usize];
    ["Offset of field: task_struct::trc_ipi_to_cpu"]
        [::std::mem::offset_of!(task_struct, trc_ipi_to_cpu) - 2204usize];
    ["Offset of field: task_struct::trc_reader_special"]
        [::std::mem::offset_of!(task_struct, trc_reader_special) - 2208usize];
    ["Offset of field: task_struct::trc_holdout_list"]
        [::std::mem::offset_of!(task_struct, trc_holdout_list) - 2216usize];
    ["Offset of field: task_struct::trc_blkd_node"]
        [::std::mem::offset_of!(task_struct, trc_blkd_node) - 2232usize];
    ["Offset of field: task_struct::trc_blkd_cpu"]
        [::std::mem::offset_of!(task_struct, trc_blkd_cpu) - 2248usize];
    ["Offset of field: task_struct::sched_info"]
        [::std::mem::offset_of!(task_struct, sched_info) - 2256usize];
    ["Offset of field: task_struct::tasks"][::std::mem::offset_of!(task_struct, tasks) - 2288usize];
    ["Offset of field: task_struct::pushable_tasks"]
        [::std::mem::offset_of!(task_struct, pushable_tasks) - 2304usize];
    ["Offset of field: task_struct::pushable_dl_tasks"]
        [::std::mem::offset_of!(task_struct, pushable_dl_tasks) - 2344usize];
    ["Offset of field: task_struct::mm"][::std::mem::offset_of!(task_struct, mm) - 2368usize];
    ["Offset of field: task_struct::active_mm"]
        [::std::mem::offset_of!(task_struct, active_mm) - 2376usize];
    ["Offset of field: task_struct::faults_disabled_mapping"]
        [::std::mem::offset_of!(task_struct, faults_disabled_mapping) - 2384usize];
    ["Offset of field: task_struct::exit_state"]
        [::std::mem::offset_of!(task_struct, exit_state) - 2392usize];
    ["Offset of field: task_struct::exit_code"]
        [::std::mem::offset_of!(task_struct, exit_code) - 2396usize];
    ["Offset of field: task_struct::exit_signal"]
        [::std::mem::offset_of!(task_struct, exit_signal) - 2400usize];
    ["Offset of field: task_struct::pdeath_signal"]
        [::std::mem::offset_of!(task_struct, pdeath_signal) - 2404usize];
    ["Offset of field: task_struct::jobctl"]
        [::std::mem::offset_of!(task_struct, jobctl) - 2408usize];
    ["Offset of field: task_struct::personality"]
        [::std::mem::offset_of!(task_struct, personality) - 2416usize];
    ["Offset of field: task_struct::atomic_flags"]
        [::std::mem::offset_of!(task_struct, atomic_flags) - 2432usize];
    ["Offset of field: task_struct::restart_block"]
        [::std::mem::offset_of!(task_struct, restart_block) - 2440usize];
    ["Offset of field: task_struct::pid"][::std::mem::offset_of!(task_struct, pid) - 2496usize];
    ["Offset of field: task_struct::tgid"][::std::mem::offset_of!(task_struct, tgid) - 2500usize];
    ["Offset of field: task_struct::stack_canary"]
        [::std::mem::offset_of!(task_struct, stack_canary) - 2504usize];
    ["Offset of field: task_struct::real_parent"]
        [::std::mem::offset_of!(task_struct, real_parent) - 2512usize];
    ["Offset of field: task_struct::parent"]
        [::std::mem::offset_of!(task_struct, parent) - 2520usize];
    ["Offset of field: task_struct::children"]
        [::std::mem::offset_of!(task_struct, children) - 2528usize];
    ["Offset of field: task_struct::sibling"]
        [::std::mem::offset_of!(task_struct, sibling) - 2544usize];
    ["Offset of field: task_struct::group_leader"]
        [::std::mem::offset_of!(task_struct, group_leader) - 2560usize];
    ["Offset of field: task_struct::ptraced"]
        [::std::mem::offset_of!(task_struct, ptraced) - 2568usize];
    ["Offset of field: task_struct::ptrace_entry"]
        [::std::mem::offset_of!(task_struct, ptrace_entry) - 2584usize];
    ["Offset of field: task_struct::thread_pid"]
        [::std::mem::offset_of!(task_struct, thread_pid) - 2600usize];
    ["Offset of field: task_struct::pid_links"]
        [::std::mem::offset_of!(task_struct, pid_links) - 2608usize];
    ["Offset of field: task_struct::thread_node"]
        [::std::mem::offset_of!(task_struct, thread_node) - 2672usize];
    ["Offset of field: task_struct::vfork_done"]
        [::std::mem::offset_of!(task_struct, vfork_done) - 2688usize];
    ["Offset of field: task_struct::set_child_tid"]
        [::std::mem::offset_of!(task_struct, set_child_tid) - 2696usize];
    ["Offset of field: task_struct::clear_child_tid"]
        [::std::mem::offset_of!(task_struct, clear_child_tid) - 2704usize];
    ["Offset of field: task_struct::worker_private"]
        [::std::mem::offset_of!(task_struct, worker_private) - 2712usize];
    ["Offset of field: task_struct::utime"][::std::mem::offset_of!(task_struct, utime) - 2720usize];
    ["Offset of field: task_struct::stime"][::std::mem::offset_of!(task_struct, stime) - 2728usize];
    ["Offset of field: task_struct::gtime"][::std::mem::offset_of!(task_struct, gtime) - 2736usize];
    ["Offset of field: task_struct::prev_cputime"]
        [::std::mem::offset_of!(task_struct, prev_cputime) - 2744usize];
    ["Offset of field: task_struct::vtime"][::std::mem::offset_of!(task_struct, vtime) - 2768usize];
    ["Offset of field: task_struct::tick_dep_mask"]
        [::std::mem::offset_of!(task_struct, tick_dep_mask) - 2816usize];
    ["Offset of field: task_struct::nvcsw"][::std::mem::offset_of!(task_struct, nvcsw) - 2824usize];
    ["Offset of field: task_struct::nivcsw"]
        [::std::mem::offset_of!(task_struct, nivcsw) - 2832usize];
    ["Offset of field: task_struct::start_time"]
        [::std::mem::offset_of!(task_struct, start_time) - 2840usize];
    ["Offset of field: task_struct::start_boottime"]
        [::std::mem::offset_of!(task_struct, start_boottime) - 2848usize];
    ["Offset of field: task_struct::min_flt"]
        [::std::mem::offset_of!(task_struct, min_flt) - 2856usize];
    ["Offset of field: task_struct::maj_flt"]
        [::std::mem::offset_of!(task_struct, maj_flt) - 2864usize];
    ["Offset of field: task_struct::posix_cputimers"]
        [::std::mem::offset_of!(task_struct, posix_cputimers) - 2872usize];
    ["Offset of field: task_struct::posix_cputimers_work"]
        [::std::mem::offset_of!(task_struct, posix_cputimers_work) - 2952usize];
    ["Offset of field: task_struct::ptracer_cred"]
        [::std::mem::offset_of!(task_struct, ptracer_cred) - 3008usize];
    ["Offset of field: task_struct::real_cred"]
        [::std::mem::offset_of!(task_struct, real_cred) - 3016usize];
    ["Offset of field: task_struct::cred"][::std::mem::offset_of!(task_struct, cred) - 3024usize];
    ["Offset of field: task_struct::cached_requested_key"]
        [::std::mem::offset_of!(task_struct, cached_requested_key) - 3032usize];
    ["Offset of field: task_struct::comm"][::std::mem::offset_of!(task_struct, comm) - 3040usize];
    ["Offset of field: task_struct::nameidata"]
        [::std::mem::offset_of!(task_struct, nameidata) - 3056usize];
    ["Offset of field: task_struct::sysvsem"]
        [::std::mem::offset_of!(task_struct, sysvsem) - 3064usize];
    ["Offset of field: task_struct::sysvshm"]
        [::std::mem::offset_of!(task_struct, sysvshm) - 3072usize];
    ["Offset of field: task_struct::last_switch_count"]
        [::std::mem::offset_of!(task_struct, last_switch_count) - 3088usize];
    ["Offset of field: task_struct::last_switch_time"]
        [::std::mem::offset_of!(task_struct, last_switch_time) - 3096usize];
    ["Offset of field: task_struct::fs"][::std::mem::offset_of!(task_struct, fs) - 3104usize];
    ["Offset of field: task_struct::files"][::std::mem::offset_of!(task_struct, files) - 3112usize];
    ["Offset of field: task_struct::io_uring"]
        [::std::mem::offset_of!(task_struct, io_uring) - 3120usize];
    ["Offset of field: task_struct::nsproxy"]
        [::std::mem::offset_of!(task_struct, nsproxy) - 3128usize];
    ["Offset of field: task_struct::signal"]
        [::std::mem::offset_of!(task_struct, signal) - 3136usize];
    ["Offset of field: task_struct::sighand"]
        [::std::mem::offset_of!(task_struct, sighand) - 3144usize];
    ["Offset of field: task_struct::blocked"]
        [::std::mem::offset_of!(task_struct, blocked) - 3152usize];
    ["Offset of field: task_struct::real_blocked"]
        [::std::mem::offset_of!(task_struct, real_blocked) - 3160usize];
    ["Offset of field: task_struct::saved_sigmask"]
        [::std::mem::offset_of!(task_struct, saved_sigmask) - 3168usize];
    ["Offset of field: task_struct::pending"]
        [::std::mem::offset_of!(task_struct, pending) - 3176usize];
    ["Offset of field: task_struct::sas_ss_sp"]
        [::std::mem::offset_of!(task_struct, sas_ss_sp) - 3200usize];
    ["Offset of field: task_struct::sas_ss_size"]
        [::std::mem::offset_of!(task_struct, sas_ss_size) - 3208usize];
    ["Offset of field: task_struct::sas_ss_flags"]
        [::std::mem::offset_of!(task_struct, sas_ss_flags) - 3216usize];
    ["Offset of field: task_struct::task_works"]
        [::std::mem::offset_of!(task_struct, task_works) - 3224usize];
    ["Offset of field: task_struct::audit_context"]
        [::std::mem::offset_of!(task_struct, audit_context) - 3232usize];
    ["Offset of field: task_struct::loginuid"]
        [::std::mem::offset_of!(task_struct, loginuid) - 3240usize];
    ["Offset of field: task_struct::sessionid"]
        [::std::mem::offset_of!(task_struct, sessionid) - 3244usize];
    ["Offset of field: task_struct::seccomp"]
        [::std::mem::offset_of!(task_struct, seccomp) - 3248usize];
    ["Offset of field: task_struct::syscall_dispatch"]
        [::std::mem::offset_of!(task_struct, syscall_dispatch) - 3264usize];
    ["Offset of field: task_struct::parent_exec_id"]
        [::std::mem::offset_of!(task_struct, parent_exec_id) - 3296usize];
    ["Offset of field: task_struct::self_exec_id"]
        [::std::mem::offset_of!(task_struct, self_exec_id) - 3304usize];
    ["Offset of field: task_struct::alloc_lock"]
        [::std::mem::offset_of!(task_struct, alloc_lock) - 3312usize];
    ["Offset of field: task_struct::pi_lock"]
        [::std::mem::offset_of!(task_struct, pi_lock) - 3316usize];
    ["Offset of field: task_struct::wake_q"]
        [::std::mem::offset_of!(task_struct, wake_q) - 3320usize];
    ["Offset of field: task_struct::pi_waiters"]
        [::std::mem::offset_of!(task_struct, pi_waiters) - 3328usize];
    ["Offset of field: task_struct::pi_top_task"]
        [::std::mem::offset_of!(task_struct, pi_top_task) - 3344usize];
    ["Offset of field: task_struct::pi_blocked_on"]
        [::std::mem::offset_of!(task_struct, pi_blocked_on) - 3352usize];
    ["Offset of field: task_struct::in_ubsan"]
        [::std::mem::offset_of!(task_struct, in_ubsan) - 3360usize];
    ["Offset of field: task_struct::journal_info"]
        [::std::mem::offset_of!(task_struct, journal_info) - 3368usize];
    ["Offset of field: task_struct::bio_list"]
        [::std::mem::offset_of!(task_struct, bio_list) - 3376usize];
    ["Offset of field: task_struct::plug"][::std::mem::offset_of!(task_struct, plug) - 3384usize];
    ["Offset of field: task_struct::reclaim_state"]
        [::std::mem::offset_of!(task_struct, reclaim_state) - 3392usize];
    ["Offset of field: task_struct::io_context"]
        [::std::mem::offset_of!(task_struct, io_context) - 3400usize];
    ["Offset of field: task_struct::capture_control"]
        [::std::mem::offset_of!(task_struct, capture_control) - 3408usize];
    ["Offset of field: task_struct::ptrace_message"]
        [::std::mem::offset_of!(task_struct, ptrace_message) - 3416usize];
    ["Offset of field: task_struct::last_siginfo"]
        [::std::mem::offset_of!(task_struct, last_siginfo) - 3424usize];
    ["Offset of field: task_struct::ioac"][::std::mem::offset_of!(task_struct, ioac) - 3432usize];
    ["Offset of field: task_struct::psi_flags"]
        [::std::mem::offset_of!(task_struct, psi_flags) - 3488usize];
    ["Offset of field: task_struct::acct_rss_mem1"]
        [::std::mem::offset_of!(task_struct, acct_rss_mem1) - 3496usize];
    ["Offset of field: task_struct::acct_vm_mem1"]
        [::std::mem::offset_of!(task_struct, acct_vm_mem1) - 3504usize];
    ["Offset of field: task_struct::acct_timexpd"]
        [::std::mem::offset_of!(task_struct, acct_timexpd) - 3512usize];
    ["Offset of field: task_struct::mems_allowed"]
        [::std::mem::offset_of!(task_struct, mems_allowed) - 3520usize];
    ["Offset of field: task_struct::mems_allowed_seq"]
        [::std::mem::offset_of!(task_struct, mems_allowed_seq) - 3648usize];
    ["Offset of field: task_struct::cpuset_mem_spread_rotor"]
        [::std::mem::offset_of!(task_struct, cpuset_mem_spread_rotor) - 3652usize];
    ["Offset of field: task_struct::cpuset_slab_spread_rotor"]
        [::std::mem::offset_of!(task_struct, cpuset_slab_spread_rotor) - 3656usize];
    ["Offset of field: task_struct::cgroups"]
        [::std::mem::offset_of!(task_struct, cgroups) - 3664usize];
    ["Offset of field: task_struct::cg_list"]
        [::std::mem::offset_of!(task_struct, cg_list) - 3672usize];
    ["Offset of field: task_struct::closid"]
        [::std::mem::offset_of!(task_struct, closid) - 3688usize];
    ["Offset of field: task_struct::rmid"][::std::mem::offset_of!(task_struct, rmid) - 3692usize];
    ["Offset of field: task_struct::robust_list"]
        [::std::mem::offset_of!(task_struct, robust_list) - 3696usize];
    ["Offset of field: task_struct::compat_robust_list"]
        [::std::mem::offset_of!(task_struct, compat_robust_list) - 3704usize];
    ["Offset of field: task_struct::pi_state_list"]
        [::std::mem::offset_of!(task_struct, pi_state_list) - 3712usize];
    ["Offset of field: task_struct::pi_state_cache"]
        [::std::mem::offset_of!(task_struct, pi_state_cache) - 3728usize];
    ["Offset of field: task_struct::futex_exit_mutex"]
        [::std::mem::offset_of!(task_struct, futex_exit_mutex) - 3736usize];
    ["Offset of field: task_struct::futex_state"]
        [::std::mem::offset_of!(task_struct, futex_state) - 3768usize];
    ["Offset of field: task_struct::perf_recursion"]
        [::std::mem::offset_of!(task_struct, perf_recursion) - 3772usize];
    ["Offset of field: task_struct::perf_event_ctxp"]
        [::std::mem::offset_of!(task_struct, perf_event_ctxp) - 3776usize];
    ["Offset of field: task_struct::perf_event_mutex"]
        [::std::mem::offset_of!(task_struct, perf_event_mutex) - 3784usize];
    ["Offset of field: task_struct::perf_event_list"]
        [::std::mem::offset_of!(task_struct, perf_event_list) - 3816usize];
    ["Offset of field: task_struct::mempolicy"]
        [::std::mem::offset_of!(task_struct, mempolicy) - 3832usize];
    ["Offset of field: task_struct::il_prev"]
        [::std::mem::offset_of!(task_struct, il_prev) - 3840usize];
    ["Offset of field: task_struct::il_weight"]
        [::std::mem::offset_of!(task_struct, il_weight) - 3842usize];
    ["Offset of field: task_struct::pref_node_fork"]
        [::std::mem::offset_of!(task_struct, pref_node_fork) - 3844usize];
    ["Offset of field: task_struct::numa_scan_seq"]
        [::std::mem::offset_of!(task_struct, numa_scan_seq) - 3848usize];
    ["Offset of field: task_struct::numa_scan_period"]
        [::std::mem::offset_of!(task_struct, numa_scan_period) - 3852usize];
    ["Offset of field: task_struct::numa_scan_period_max"]
        [::std::mem::offset_of!(task_struct, numa_scan_period_max) - 3856usize];
    ["Offset of field: task_struct::numa_preferred_nid"]
        [::std::mem::offset_of!(task_struct, numa_preferred_nid) - 3860usize];
    ["Offset of field: task_struct::numa_migrate_retry"]
        [::std::mem::offset_of!(task_struct, numa_migrate_retry) - 3864usize];
    ["Offset of field: task_struct::node_stamp"]
        [::std::mem::offset_of!(task_struct, node_stamp) - 3872usize];
    ["Offset of field: task_struct::last_task_numa_placement"]
        [::std::mem::offset_of!(task_struct, last_task_numa_placement) - 3880usize];
    ["Offset of field: task_struct::last_sum_exec_runtime"]
        [::std::mem::offset_of!(task_struct, last_sum_exec_runtime) - 3888usize];
    ["Offset of field: task_struct::numa_work"]
        [::std::mem::offset_of!(task_struct, numa_work) - 3896usize];
    ["Offset of field: task_struct::numa_group"]
        [::std::mem::offset_of!(task_struct, numa_group) - 3912usize];
    ["Offset of field: task_struct::numa_faults"]
        [::std::mem::offset_of!(task_struct, numa_faults) - 3920usize];
    ["Offset of field: task_struct::total_numa_faults"]
        [::std::mem::offset_of!(task_struct, total_numa_faults) - 3928usize];
    ["Offset of field: task_struct::numa_faults_locality"]
        [::std::mem::offset_of!(task_struct, numa_faults_locality) - 3936usize];
    ["Offset of field: task_struct::numa_pages_migrated"]
        [::std::mem::offset_of!(task_struct, numa_pages_migrated) - 3960usize];
    ["Offset of field: task_struct::rseq"][::std::mem::offset_of!(task_struct, rseq) - 3968usize];
    ["Offset of field: task_struct::rseq_len"]
        [::std::mem::offset_of!(task_struct, rseq_len) - 3976usize];
    ["Offset of field: task_struct::rseq_sig"]
        [::std::mem::offset_of!(task_struct, rseq_sig) - 3980usize];
    ["Offset of field: task_struct::rseq_event_mask"]
        [::std::mem::offset_of!(task_struct, rseq_event_mask) - 3984usize];
    ["Offset of field: task_struct::mm_cid"]
        [::std::mem::offset_of!(task_struct, mm_cid) - 3992usize];
    ["Offset of field: task_struct::last_mm_cid"]
        [::std::mem::offset_of!(task_struct, last_mm_cid) - 3996usize];
    ["Offset of field: task_struct::migrate_from_cpu"]
        [::std::mem::offset_of!(task_struct, migrate_from_cpu) - 4000usize];
    ["Offset of field: task_struct::mm_cid_active"]
        [::std::mem::offset_of!(task_struct, mm_cid_active) - 4004usize];
    ["Offset of field: task_struct::cid_work"]
        [::std::mem::offset_of!(task_struct, cid_work) - 4008usize];
    ["Offset of field: task_struct::tlb_ubc"]
        [::std::mem::offset_of!(task_struct, tlb_ubc) - 4024usize];
    ["Offset of field: task_struct::splice_pipe"]
        [::std::mem::offset_of!(task_struct, splice_pipe) - 5056usize];
    ["Offset of field: task_struct::task_frag"]
        [::std::mem::offset_of!(task_struct, task_frag) - 5064usize];
    ["Offset of field: task_struct::delays"]
        [::std::mem::offset_of!(task_struct, delays) - 5080usize];
    ["Offset of field: task_struct::nr_dirtied"]
        [::std::mem::offset_of!(task_struct, nr_dirtied) - 5088usize];
    ["Offset of field: task_struct::nr_dirtied_pause"]
        [::std::mem::offset_of!(task_struct, nr_dirtied_pause) - 5092usize];
    ["Offset of field: task_struct::dirty_paused_when"]
        [::std::mem::offset_of!(task_struct, dirty_paused_when) - 5096usize];
    ["Offset of field: task_struct::latency_record_count"]
        [::std::mem::offset_of!(task_struct, latency_record_count) - 5104usize];
    ["Offset of field: task_struct::latency_record"]
        [::std::mem::offset_of!(task_struct, latency_record) - 5112usize];
    ["Offset of field: task_struct::timer_slack_ns"]
        [::std::mem::offset_of!(task_struct, timer_slack_ns) - 8952usize];
    ["Offset of field: task_struct::default_timer_slack_ns"]
        [::std::mem::offset_of!(task_struct, default_timer_slack_ns) - 8960usize];
    ["Offset of field: task_struct::curr_ret_stack"]
        [::std::mem::offset_of!(task_struct, curr_ret_stack) - 8968usize];
    ["Offset of field: task_struct::curr_ret_depth"]
        [::std::mem::offset_of!(task_struct, curr_ret_depth) - 8972usize];
    ["Offset of field: task_struct::ret_stack"]
        [::std::mem::offset_of!(task_struct, ret_stack) - 8976usize];
    ["Offset of field: task_struct::ftrace_timestamp"]
        [::std::mem::offset_of!(task_struct, ftrace_timestamp) - 8984usize];
    ["Offset of field: task_struct::trace_overrun"]
        [::std::mem::offset_of!(task_struct, trace_overrun) - 8992usize];
    ["Offset of field: task_struct::tracing_graph_pause"]
        [::std::mem::offset_of!(task_struct, tracing_graph_pause) - 8996usize];
    ["Offset of field: task_struct::trace_recursion"]
        [::std::mem::offset_of!(task_struct, trace_recursion) - 9000usize];
    ["Offset of field: task_struct::memcg_nr_pages_over_high"]
        [::std::mem::offset_of!(task_struct, memcg_nr_pages_over_high) - 9008usize];
    ["Offset of field: task_struct::active_memcg"]
        [::std::mem::offset_of!(task_struct, active_memcg) - 9016usize];
    ["Offset of field: task_struct::objcg"][::std::mem::offset_of!(task_struct, objcg) - 9024usize];
    ["Offset of field: task_struct::throttle_disk"]
        [::std::mem::offset_of!(task_struct, throttle_disk) - 9032usize];
    ["Offset of field: task_struct::utask"][::std::mem::offset_of!(task_struct, utask) - 9040usize];
    ["Offset of field: task_struct::sequential_io"]
        [::std::mem::offset_of!(task_struct, sequential_io) - 9048usize];
    ["Offset of field: task_struct::sequential_io_avg"]
        [::std::mem::offset_of!(task_struct, sequential_io_avg) - 9052usize];
    ["Offset of field: task_struct::kmap_ctrl"]
        [::std::mem::offset_of!(task_struct, kmap_ctrl) - 9056usize];
    ["Offset of field: task_struct::rcu"][::std::mem::offset_of!(task_struct, rcu) - 9056usize];
    ["Offset of field: task_struct::rcu_users"]
        [::std::mem::offset_of!(task_struct, rcu_users) - 9072usize];
    ["Offset of field: task_struct::pagefault_disabled"]
        [::std::mem::offset_of!(task_struct, pagefault_disabled) - 9076usize];
    ["Offset of field: task_struct::oom_reaper_list"]
        [::std::mem::offset_of!(task_struct, oom_reaper_list) - 9080usize];
    ["Offset of field: task_struct::oom_reaper_timer"]
        [::std::mem::offset_of!(task_struct, oom_reaper_timer) - 9088usize];
    ["Offset of field: task_struct::stack_vm_area"]
        [::std::mem::offset_of!(task_struct, stack_vm_area) - 9128usize];
    ["Offset of field: task_struct::stack_refcount"]
        [::std::mem::offset_of!(task_struct, stack_refcount) - 9136usize];
    ["Offset of field: task_struct::patch_state"]
        [::std::mem::offset_of!(task_struct, patch_state) - 9140usize];
    ["Offset of field: task_struct::security"]
        [::std::mem::offset_of!(task_struct, security) - 9144usize];
    ["Offset of field: task_struct::bpf_storage"]
        [::std::mem::offset_of!(task_struct, bpf_storage) - 9152usize];
    ["Offset of field: task_struct::bpf_ctx"]
        [::std::mem::offset_of!(task_struct, bpf_ctx) - 9160usize];
    ["Offset of field: task_struct::bpf_net_context"]
        [::std::mem::offset_of!(task_struct, bpf_net_context) - 9168usize];
    ["Offset of field: task_struct::mce_vaddr"]
        [::std::mem::offset_of!(task_struct, mce_vaddr) - 9176usize];
    ["Offset of field: task_struct::mce_kflags"]
        [::std::mem::offset_of!(task_struct, mce_kflags) - 9184usize];
    ["Offset of field: task_struct::mce_addr"]
        [::std::mem::offset_of!(task_struct, mce_addr) - 9192usize];
    ["Offset of field: task_struct::mce_kill_me"]
        [::std::mem::offset_of!(task_struct, mce_kill_me) - 9208usize];
    ["Offset of field: task_struct::mce_count"]
        [::std::mem::offset_of!(task_struct, mce_count) - 9224usize];
    ["Offset of field: task_struct::kretprobe_instances"]
        [::std::mem::offset_of!(task_struct, kretprobe_instances) - 9232usize];
    ["Offset of field: task_struct::rethooks"]
        [::std::mem::offset_of!(task_struct, rethooks) - 9240usize];
    ["Offset of field: task_struct::l1d_flush_kill"]
        [::std::mem::offset_of!(task_struct, l1d_flush_kill) - 9248usize];
    ["Offset of field: task_struct::rv"][::std::mem::offset_of!(task_struct, rv) - 9264usize];
    ["Offset of field: task_struct::user_event_mm"]
        [::std::mem::offset_of!(task_struct, user_event_mm) - 9272usize];
    ["Offset of field: task_struct::thread"]
        [::std::mem::offset_of!(task_struct, thread) - 9280usize];
};
impl task_struct {
    #[inline]
    pub fn sched_reset_on_fork(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_reset_on_fork(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_contributes_to_load(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_contributes_to_load(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_migrated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_migrated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_remote_wakeup(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_remote_wakeup(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_rt_mutex(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_rt_mutex(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_execve(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_execve(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_iowait(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_iowait(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restore_sigmask(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restore_sigmask(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_lru_fault(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_lru_fault(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_cgroup_migration(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_cgroup_migration(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frozen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frozen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_memdelay(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_memdelay(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_memstall(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_memstall(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_eventfd(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_eventfd(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pasid_activated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pasid_activated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reported_split_lock(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(44usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reported_split_lock(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_thrashing(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(45usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_thrashing(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(45usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sched_reset_on_fork: ::std::os::raw::c_uint,
        sched_contributes_to_load: ::std::os::raw::c_uint,
        sched_migrated: ::std::os::raw::c_uint,
        sched_remote_wakeup: ::std::os::raw::c_uint,
        sched_rt_mutex: ::std::os::raw::c_uint,
        in_execve: ::std::os::raw::c_uint,
        in_iowait: ::std::os::raw::c_uint,
        restore_sigmask: ::std::os::raw::c_uint,
        in_lru_fault: ::std::os::raw::c_uint,
        no_cgroup_migration: ::std::os::raw::c_uint,
        frozen: ::std::os::raw::c_uint,
        use_memdelay: ::std::os::raw::c_uint,
        in_memstall: ::std::os::raw::c_uint,
        in_eventfd: ::std::os::raw::c_uint,
        pasid_activated: ::std::os::raw::c_uint,
        reported_split_lock: ::std::os::raw::c_uint,
        in_thrashing: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sched_reset_on_fork: u32 = unsafe { ::std::mem::transmute(sched_reset_on_fork) };
            sched_reset_on_fork as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sched_contributes_to_load: u32 =
                unsafe { ::std::mem::transmute(sched_contributes_to_load) };
            sched_contributes_to_load as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sched_migrated: u32 = unsafe { ::std::mem::transmute(sched_migrated) };
            sched_migrated as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let sched_remote_wakeup: u32 = unsafe { ::std::mem::transmute(sched_remote_wakeup) };
            sched_remote_wakeup as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let sched_rt_mutex: u32 = unsafe { ::std::mem::transmute(sched_rt_mutex) };
            sched_rt_mutex as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let in_execve: u32 = unsafe { ::std::mem::transmute(in_execve) };
            in_execve as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let in_iowait: u32 = unsafe { ::std::mem::transmute(in_iowait) };
            in_iowait as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let restore_sigmask: u32 = unsafe { ::std::mem::transmute(restore_sigmask) };
            restore_sigmask as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let in_lru_fault: u32 = unsafe { ::std::mem::transmute(in_lru_fault) };
            in_lru_fault as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let no_cgroup_migration: u32 = unsafe { ::std::mem::transmute(no_cgroup_migration) };
            no_cgroup_migration as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let frozen: u32 = unsafe { ::std::mem::transmute(frozen) };
            frozen as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let use_memdelay: u32 = unsafe { ::std::mem::transmute(use_memdelay) };
            use_memdelay as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let in_memstall: u32 = unsafe { ::std::mem::transmute(in_memstall) };
            in_memstall as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let in_eventfd: u32 = unsafe { ::std::mem::transmute(in_eventfd) };
            in_eventfd as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let pasid_activated: u32 = unsafe { ::std::mem::transmute(pasid_activated) };
            pasid_activated as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let reported_split_lock: u32 = unsafe { ::std::mem::transmute(reported_split_lock) };
            reported_split_lock as u64
        });
        __bindgen_bitfield_unit.set(45usize, 1u8, {
            let in_thrashing: u32 = unsafe { ::std::mem::transmute(in_thrashing) };
            in_thrashing as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn mce_ripv(&self) -> __u64 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_mce_ripv(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mce_whole_page(&self) -> __u64 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_mce_whole_page(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __mce_reserved(&self) -> __u64 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 62u8) as u64) }
    }
    #[inline]
    pub fn set___mce_reserved(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 62u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        mce_ripv: __u64,
        mce_whole_page: __u64,
        __mce_reserved: __u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mce_ripv: u64 = unsafe { ::std::mem::transmute(mce_ripv) };
            mce_ripv as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mce_whole_page: u64 = unsafe { ::std::mem::transmute(mce_whole_page) };
            mce_whole_page as u64
        });
        __bindgen_bitfield_unit.set(2usize, 62u8, {
            let __mce_reserved: u64 = unsafe { ::std::mem::transmute(__mce_reserved) };
            __mce_reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut cad_pid: *mut pid;
}
extern "C" {
    pub fn cpuset_cpumask_can_shrink(
        cur: *const cpumask,
        trial: *const cpumask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn task_can_attach(p: *mut task_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dl_bw_alloc(cpu: ::std::os::raw::c_int, dl_bw: u64_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dl_bw_free(cpu: ::std::os::raw::c_int, dl_bw: u64_);
}
extern "C" {
    pub fn do_set_cpus_allowed(p: *mut task_struct, new_mask: *const cpumask);
}
extern "C" {
    #[doc = " set_cpus_allowed_ptr - set CPU affinity mask of a task\n @p: the task\n @new_mask: CPU affinity mask\n\n Return: zero if successful, or a negative error code"]
    pub fn set_cpus_allowed_ptr(
        p: *mut task_struct,
        new_mask: *const cpumask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup_user_cpus_ptr(
        dst: *mut task_struct,
        src: *mut task_struct,
        node: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn release_user_cpus_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn dl_task_check_affinity(
        p: *mut task_struct,
        mask: *const cpumask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_compatible_cpus_allowed_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn relax_compatible_cpus_allowed_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn yield_to(p: *mut task_struct, preempt: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_user_nice(p: *mut task_struct, nice: ::std::os::raw::c_long);
}
extern "C" {
    pub fn task_prio(p: *const task_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_nice(p: *const task_struct, nice: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn task_curr(p: *const task_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idle_cpu(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn available_idle_cpu(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        arg1: *mut task_struct,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler_nocheck(
        arg1: *mut task_struct,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_set_fifo(p: *mut task_struct);
}
extern "C" {
    pub fn sched_set_fifo_low(p: *mut task_struct);
}
extern "C" {
    pub fn sched_set_normal(p: *mut task_struct, nice: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sched_setattr(arg1: *mut task_struct, arg2: *const sched_attr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setattr_nocheck(
        arg1: *mut task_struct,
        arg2: *const sched_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idle_task(cpu: ::std::os::raw::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn curr_task(cpu: ::std::os::raw::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn ia64_set_curr_task(cpu: ::std::os::raw::c_int, p: *mut task_struct);
}
extern "C" {
    #[link_name = "\u{1}yield"]
    pub fn yield_();
}
#[repr(C)]
#[repr(align(64))]
pub struct thread_union {
    pub task: __BindgenUnionField<task_struct>,
    pub stack: __BindgenUnionField<[::std::os::raw::c_ulong; 2048usize]>,
    pub bindgen_union_field: [u8; 16384usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_union"][::std::mem::size_of::<thread_union>() - 16384usize];
    ["Alignment of thread_union"][::std::mem::align_of::<thread_union>() - 64usize];
    ["Offset of field: thread_union::task"][::std::mem::offset_of!(thread_union, task) - 0usize];
    ["Offset of field: thread_union::stack"][::std::mem::offset_of!(thread_union, stack) - 0usize];
};
extern "C" {
    pub static mut init_stack: [::std::os::raw::c_ulong; 2048usize];
}
extern "C" {
    pub fn find_task_by_vpid(nr: pid_t) -> *mut task_struct;
}
extern "C" {
    pub fn find_task_by_pid_ns(nr: pid_t, ns: *mut pid_namespace) -> *mut task_struct;
}
extern "C" {
    pub fn find_get_task_by_vpid(nr: pid_t) -> *mut task_struct;
}
extern "C" {
    pub fn wake_up_state(
        tsk: *mut task_struct,
        state: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wake_up_process(tsk: *mut task_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wake_up_new_task(tsk: *mut task_struct);
}
extern "C" {
    pub fn kick_process(tsk: *mut task_struct);
}
extern "C" {
    pub fn __set_task_comm(tsk: *mut task_struct, from: *const ::std::os::raw::c_char, exec: bool_);
}
extern "C" {
    pub fn __get_task_comm(
        to: *mut ::std::os::raw::c_char,
        len: usize,
        tsk: *mut task_struct,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wait_task_inactive(
        arg1: *mut task_struct,
        match_state: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn sched_dynamic_klp_enable();
}
extern "C" {
    pub fn sched_dynamic_klp_disable();
}
extern "C" {
    pub static mut __SCK__cond_resched: static_call_key;
}
extern "C" {
    pub fn __SCT__cond_resched() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __cond_resched_lock(lock: *mut spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __cond_resched_rwlock_read(lock: *mut rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __cond_resched_rwlock_write(lock: *mut rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_task_cpu(p: *mut task_struct, cpu: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sched_task_on_rq(p: *mut task_struct) -> bool_;
}
extern "C" {
    pub fn get_wchan(p: *mut task_struct) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn cpu_curr_snapshot(cpu: ::std::os::raw::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn sched_setaffinity(pid: pid_t, new_mask: *const cpumask) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sched_getaffinity(pid: pid_t, mask: *mut cpumask) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sched_cpu_util(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn sched_core_free(tsk: *mut task_struct);
}
extern "C" {
    pub fn sched_core_fork(p: *mut task_struct);
}
extern "C" {
    pub fn sched_core_share_pid(
        cmd: ::std::os::raw::c_uint,
        pid: pid_t,
        type_: pid_type,
        uaddr: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_core_idle_cpu(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_set_stop_task(cpu: ::std::os::raw::c_int, stop: *mut task_struct);
}
extern "C" {
    pub static mut pcpu_base_addr: *mut ::std::os::raw::c_void;
}
extern "C" {
    pub static mut pcpu_unit_offsets: *const ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcpu_group_info {
    pub nr_units: ::std::os::raw::c_int,
    pub base_offset: ::std::os::raw::c_ulong,
    pub cpu_map: *mut ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcpu_group_info"][::std::mem::size_of::<pcpu_group_info>() - 24usize];
    ["Alignment of pcpu_group_info"][::std::mem::align_of::<pcpu_group_info>() - 8usize];
    ["Offset of field: pcpu_group_info::nr_units"]
        [::std::mem::offset_of!(pcpu_group_info, nr_units) - 0usize];
    ["Offset of field: pcpu_group_info::base_offset"]
        [::std::mem::offset_of!(pcpu_group_info, base_offset) - 8usize];
    ["Offset of field: pcpu_group_info::cpu_map"]
        [::std::mem::offset_of!(pcpu_group_info, cpu_map) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct pcpu_alloc_info {
    pub static_size: usize,
    pub reserved_size: usize,
    pub dyn_size: usize,
    pub unit_size: usize,
    pub atom_size: usize,
    pub alloc_size: usize,
    pub __ai_size: usize,
    pub nr_groups: ::std::os::raw::c_int,
    pub groups: __IncompleteArrayField<pcpu_group_info>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcpu_alloc_info"][::std::mem::size_of::<pcpu_alloc_info>() - 64usize];
    ["Alignment of pcpu_alloc_info"][::std::mem::align_of::<pcpu_alloc_info>() - 8usize];
    ["Offset of field: pcpu_alloc_info::static_size"]
        [::std::mem::offset_of!(pcpu_alloc_info, static_size) - 0usize];
    ["Offset of field: pcpu_alloc_info::reserved_size"]
        [::std::mem::offset_of!(pcpu_alloc_info, reserved_size) - 8usize];
    ["Offset of field: pcpu_alloc_info::dyn_size"]
        [::std::mem::offset_of!(pcpu_alloc_info, dyn_size) - 16usize];
    ["Offset of field: pcpu_alloc_info::unit_size"]
        [::std::mem::offset_of!(pcpu_alloc_info, unit_size) - 24usize];
    ["Offset of field: pcpu_alloc_info::atom_size"]
        [::std::mem::offset_of!(pcpu_alloc_info, atom_size) - 32usize];
    ["Offset of field: pcpu_alloc_info::alloc_size"]
        [::std::mem::offset_of!(pcpu_alloc_info, alloc_size) - 40usize];
    ["Offset of field: pcpu_alloc_info::__ai_size"]
        [::std::mem::offset_of!(pcpu_alloc_info, __ai_size) - 48usize];
    ["Offset of field: pcpu_alloc_info::nr_groups"]
        [::std::mem::offset_of!(pcpu_alloc_info, nr_groups) - 56usize];
    ["Offset of field: pcpu_alloc_info::groups"]
        [::std::mem::offset_of!(pcpu_alloc_info, groups) - 64usize];
};
pub const pcpu_fc_PCPU_FC_AUTO: pcpu_fc = 0;
pub const pcpu_fc_PCPU_FC_EMBED: pcpu_fc = 1;
pub const pcpu_fc_PCPU_FC_PAGE: pcpu_fc = 2;
pub const pcpu_fc_PCPU_FC_NR: pcpu_fc = 3;
pub type pcpu_fc = ::std::os::raw::c_uint;
extern "C" {
    pub static pcpu_fc_names: [*const ::std::os::raw::c_char; 3usize];
}
extern "C" {
    pub static mut pcpu_chosen_fc: pcpu_fc;
}
pub type pcpu_fc_cpu_to_node_fn_t = ::std::option::Option<
    unsafe extern "C" fn(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type pcpu_fc_cpu_distance_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        from: ::std::os::raw::c_uint,
        to: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pcpu_alloc_alloc_info(
        nr_groups: ::std::os::raw::c_int,
        nr_units: ::std::os::raw::c_int,
    ) -> *mut pcpu_alloc_info;
}
extern "C" {
    pub fn pcpu_free_alloc_info(ai: *mut pcpu_alloc_info);
}
extern "C" {
    pub fn pcpu_setup_first_chunk(
        ai: *const pcpu_alloc_info,
        base_addr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pcpu_embed_first_chunk(
        reserved_size: usize,
        dyn_size: usize,
        atom_size: usize,
        cpu_distance_fn: pcpu_fc_cpu_distance_fn_t,
        cpu_to_nd_fn: pcpu_fc_cpu_to_node_fn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pcpu_populate_pte(addr: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn pcpu_page_first_chunk(
        reserved_size: usize,
        cpu_to_nd_fn: pcpu_fc_cpu_to_node_fn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __is_kernel_percpu_address(
        addr: ::std::os::raw::c_ulong,
        can_addr: *mut ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn is_kernel_percpu_address(addr: ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn pcpu_alloc_noprof(
        size: usize,
        align: usize,
        reserved: bool_,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pcpu_alloc_size(__pdata: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn free_percpu(__pdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn per_cpu_ptr_to_phys(addr: *mut ::std::os::raw::c_void) -> phys_addr_t;
}
extern "C" {
    pub fn pcpu_nr_pages() -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr_info {
    pub msr_no: u32_,
    pub reg: msr,
    pub msrs: *mut msr,
    pub err: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msr_info"][::std::mem::size_of::<msr_info>() - 32usize];
    ["Alignment of msr_info"][::std::mem::align_of::<msr_info>() - 8usize];
    ["Offset of field: msr_info::msr_no"][::std::mem::offset_of!(msr_info, msr_no) - 0usize];
    ["Offset of field: msr_info::reg"][::std::mem::offset_of!(msr_info, reg) - 8usize];
    ["Offset of field: msr_info::msrs"][::std::mem::offset_of!(msr_info, msrs) - 16usize];
    ["Offset of field: msr_info::err"][::std::mem::offset_of!(msr_info, err) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msr_regs_info {
    pub regs: *mut u32_,
    pub err: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msr_regs_info"][::std::mem::size_of::<msr_regs_info>() - 16usize];
    ["Alignment of msr_regs_info"][::std::mem::align_of::<msr_regs_info>() - 8usize];
    ["Offset of field: msr_regs_info::regs"][::std::mem::offset_of!(msr_regs_info, regs) - 0usize];
    ["Offset of field: msr_regs_info::err"][::std::mem::offset_of!(msr_regs_info, err) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct saved_msr {
    pub valid: bool_,
    pub info: msr_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of saved_msr"][::std::mem::size_of::<saved_msr>() - 40usize];
    ["Alignment of saved_msr"][::std::mem::align_of::<saved_msr>() - 8usize];
    ["Offset of field: saved_msr::valid"][::std::mem::offset_of!(saved_msr, valid) - 0usize];
    ["Offset of field: saved_msr::info"][::std::mem::offset_of!(saved_msr, info) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct saved_msrs {
    pub num: ::std::os::raw::c_uint,
    pub array: *mut saved_msr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of saved_msrs"][::std::mem::size_of::<saved_msrs>() - 16usize];
    ["Alignment of saved_msrs"][::std::mem::align_of::<saved_msrs>() - 8usize];
    ["Offset of field: saved_msrs::num"][::std::mem::offset_of!(saved_msrs, num) - 0usize];
    ["Offset of field: saved_msrs::array"][::std::mem::offset_of!(saved_msrs, array) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_print_flags {
    pub mask: ::std::os::raw::c_ulong,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trace_print_flags"][::std::mem::size_of::<trace_print_flags>() - 16usize];
    ["Alignment of trace_print_flags"][::std::mem::align_of::<trace_print_flags>() - 8usize];
    ["Offset of field: trace_print_flags::mask"]
        [::std::mem::offset_of!(trace_print_flags, mask) - 0usize];
    ["Offset of field: trace_print_flags::name"]
        [::std::mem::offset_of!(trace_print_flags, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_print_flags_u64 {
    pub mask: ::std::os::raw::c_ulonglong,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trace_print_flags_u64"][::std::mem::size_of::<trace_print_flags_u64>() - 16usize];
    ["Alignment of trace_print_flags_u64"]
        [::std::mem::align_of::<trace_print_flags_u64>() - 8usize];
    ["Offset of field: trace_print_flags_u64::mask"]
        [::std::mem::offset_of!(trace_print_flags_u64, mask) - 0usize];
    ["Offset of field: trace_print_flags_u64::name"]
        [::std::mem::offset_of!(trace_print_flags_u64, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracepoint_func {
    pub func: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub prio: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tracepoint_func"][::std::mem::size_of::<tracepoint_func>() - 24usize];
    ["Alignment of tracepoint_func"][::std::mem::align_of::<tracepoint_func>() - 8usize];
    ["Offset of field: tracepoint_func::func"]
        [::std::mem::offset_of!(tracepoint_func, func) - 0usize];
    ["Offset of field: tracepoint_func::data"]
        [::std::mem::offset_of!(tracepoint_func, data) - 8usize];
    ["Offset of field: tracepoint_func::prio"]
        [::std::mem::offset_of!(tracepoint_func, prio) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tracepoint {
    pub name: *const ::std::os::raw::c_char,
    pub key: static_key,
    pub static_call_key: *mut static_call_key,
    pub static_call_tramp: *mut ::std::os::raw::c_void,
    pub iterator: *mut ::std::os::raw::c_void,
    pub probestub: *mut ::std::os::raw::c_void,
    pub regfunc: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub unregfunc: ::std::option::Option<unsafe extern "C" fn()>,
    pub funcs: *mut tracepoint_func,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tracepoint"][::std::mem::size_of::<tracepoint>() - 80usize];
    ["Alignment of tracepoint"][::std::mem::align_of::<tracepoint>() - 8usize];
    ["Offset of field: tracepoint::name"][::std::mem::offset_of!(tracepoint, name) - 0usize];
    ["Offset of field: tracepoint::key"][::std::mem::offset_of!(tracepoint, key) - 8usize];
    ["Offset of field: tracepoint::static_call_key"]
        [::std::mem::offset_of!(tracepoint, static_call_key) - 24usize];
    ["Offset of field: tracepoint::static_call_tramp"]
        [::std::mem::offset_of!(tracepoint, static_call_tramp) - 32usize];
    ["Offset of field: tracepoint::iterator"]
        [::std::mem::offset_of!(tracepoint, iterator) - 40usize];
    ["Offset of field: tracepoint::probestub"]
        [::std::mem::offset_of!(tracepoint, probestub) - 48usize];
    ["Offset of field: tracepoint::regfunc"][::std::mem::offset_of!(tracepoint, regfunc) - 56usize];
    ["Offset of field: tracepoint::unregfunc"]
        [::std::mem::offset_of!(tracepoint, unregfunc) - 64usize];
    ["Offset of field: tracepoint::funcs"][::std::mem::offset_of!(tracepoint, funcs) - 72usize];
};
pub type tracepoint_ptr_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct bpf_raw_event_map {
    pub tp: *mut tracepoint,
    pub bpf_func: *mut ::std::os::raw::c_void,
    pub num_args: u32_,
    pub writable_size: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_raw_event_map"][::std::mem::size_of::<bpf_raw_event_map>() - 32usize];
    ["Alignment of bpf_raw_event_map"][::std::mem::align_of::<bpf_raw_event_map>() - 32usize];
    ["Offset of field: bpf_raw_event_map::tp"]
        [::std::mem::offset_of!(bpf_raw_event_map, tp) - 0usize];
    ["Offset of field: bpf_raw_event_map::bpf_func"]
        [::std::mem::offset_of!(bpf_raw_event_map, bpf_func) - 8usize];
    ["Offset of field: bpf_raw_event_map::num_args"]
        [::std::mem::offset_of!(bpf_raw_event_map, num_args) - 16usize];
    ["Offset of field: bpf_raw_event_map::writable_size"]
        [::std::mem::offset_of!(bpf_raw_event_map, writable_size) - 20usize];
};
extern "C" {
    pub static mut __tracepoint_read_msr: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_write_msr: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_rdpmc: tracepoint;
}
extern "C" {
    pub fn do_trace_write_msr(
        msr: ::std::os::raw::c_uint,
        val: u64_,
        failed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn do_trace_read_msr(msr: ::std::os::raw::c_uint, val: u64_, failed: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_trace_rdpmc(msr: ::std::os::raw::c_uint, val: u64_, failed: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rdmsr_safe_regs(regs: *mut u32_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrmsr_safe_regs(regs: *mut u32_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msrs_alloc() -> *mut msr;
}
extern "C" {
    pub fn msrs_free(msrs: *mut msr);
}
extern "C" {
    pub fn msr_set_bit(msr: u32_, bit: u8_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msr_clear_bit(msr: u32_, bit: u8_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rdmsr_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        l: *mut u32_,
        h: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrmsr_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        l: u32_,
        h: u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rdmsrl_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        q: *mut u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrmsrl_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        q: u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rdmsr_on_cpus(mask: *const cpumask, msr_no: u32_, msrs: *mut msr);
}
extern "C" {
    pub fn wrmsr_on_cpus(mask: *const cpumask, msr_no: u32_, msrs: *mut msr);
}
extern "C" {
    pub fn rdmsr_safe_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        l: *mut u32_,
        h: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrmsr_safe_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        l: u32_,
        h: u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rdmsrl_safe_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        q: *mut u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrmsrl_safe_on_cpu(
        cpu: ::std::os::raw::c_uint,
        msr_no: u32_,
        q: u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rdmsr_safe_regs_on_cpu(
        cpu: ::std::os::raw::c_uint,
        regs: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrmsr_safe_regs_on_cpu(
        cpu: ::std::os::raw::c_uint,
        regs: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
pub type cycles_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub static mut cpu_khz: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut tsc_khz: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn disable_TSC();
}
extern "C" {
    pub fn tsc_early_init();
}
extern "C" {
    pub fn tsc_init();
}
extern "C" {
    pub fn mark_tsc_unstable(reason: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn unsynchronized_tsc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_tsc_unstable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mark_tsc_async_resets(reason: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn native_calibrate_cpu_early() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn native_calibrate_tsc() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn native_sched_clock_from_tsc(tsc: u64_) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut tsc_clocksource_reliable: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut tsc_async_resets: bool_;
}
extern "C" {
    pub fn tsc_store_and_check_tsc_adjust(bootcpu: bool_) -> bool_;
}
extern "C" {
    pub fn tsc_verify_tsc_adjust(resume: bool_);
}
extern "C" {
    pub fn check_tsc_sync_target();
}
extern "C" {
    pub fn notsc_setup(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tsc_save_sched_clock_state();
}
extern "C" {
    pub fn tsc_restore_sched_clock_state();
}
extern "C" {
    pub fn cpu_khz_from_msr() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut tick_usec: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut tick_nsec: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn do_adjtimex(arg1: *mut __kernel_timex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_clock_adjtime(
        which_clock: clockid_t,
        ktx: *mut __kernel_timex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hardpps(arg1: *const timespec64, arg2: *const timespec64);
}
extern "C" {
    pub fn read_current_timer(timer_val: *mut ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
pub type old_time32_t = s32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct old_timespec32 {
    pub tv_sec: old_time32_t,
    pub tv_nsec: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of old_timespec32"][::std::mem::size_of::<old_timespec32>() - 8usize];
    ["Alignment of old_timespec32"][::std::mem::align_of::<old_timespec32>() - 4usize];
    ["Offset of field: old_timespec32::tv_sec"]
        [::std::mem::offset_of!(old_timespec32, tv_sec) - 0usize];
    ["Offset of field: old_timespec32::tv_nsec"]
        [::std::mem::offset_of!(old_timespec32, tv_nsec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct old_timeval32 {
    pub tv_sec: old_time32_t,
    pub tv_usec: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of old_timeval32"][::std::mem::size_of::<old_timeval32>() - 8usize];
    ["Alignment of old_timeval32"][::std::mem::align_of::<old_timeval32>() - 4usize];
    ["Offset of field: old_timeval32::tv_sec"]
        [::std::mem::offset_of!(old_timeval32, tv_sec) - 0usize];
    ["Offset of field: old_timeval32::tv_usec"]
        [::std::mem::offset_of!(old_timeval32, tv_usec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct old_itimerspec32 {
    pub it_interval: old_timespec32,
    pub it_value: old_timespec32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of old_itimerspec32"][::std::mem::size_of::<old_itimerspec32>() - 16usize];
    ["Alignment of old_itimerspec32"][::std::mem::align_of::<old_itimerspec32>() - 4usize];
    ["Offset of field: old_itimerspec32::it_interval"]
        [::std::mem::offset_of!(old_itimerspec32, it_interval) - 0usize];
    ["Offset of field: old_itimerspec32::it_value"]
        [::std::mem::offset_of!(old_itimerspec32, it_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct old_utimbuf32 {
    pub actime: old_time32_t,
    pub modtime: old_time32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of old_utimbuf32"][::std::mem::size_of::<old_utimbuf32>() - 8usize];
    ["Alignment of old_utimbuf32"][::std::mem::align_of::<old_utimbuf32>() - 4usize];
    ["Offset of field: old_utimbuf32::actime"]
        [::std::mem::offset_of!(old_utimbuf32, actime) - 0usize];
    ["Offset of field: old_utimbuf32::modtime"]
        [::std::mem::offset_of!(old_utimbuf32, modtime) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct old_timex32 {
    pub modes: u32_,
    pub offset: s32,
    pub freq: s32,
    pub maxerror: s32,
    pub esterror: s32,
    pub status: s32,
    pub constant: s32,
    pub precision: s32,
    pub tolerance: s32,
    pub time: old_timeval32,
    pub tick: s32,
    pub ppsfreq: s32,
    pub jitter: s32,
    pub shift: s32,
    pub stabil: s32,
    pub jitcnt: s32,
    pub calcnt: s32,
    pub errcnt: s32,
    pub stbcnt: s32,
    pub tai: s32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of old_timex32"][::std::mem::size_of::<old_timex32>() - 128usize];
    ["Alignment of old_timex32"][::std::mem::align_of::<old_timex32>() - 4usize];
    ["Offset of field: old_timex32::modes"][::std::mem::offset_of!(old_timex32, modes) - 0usize];
    ["Offset of field: old_timex32::offset"][::std::mem::offset_of!(old_timex32, offset) - 4usize];
    ["Offset of field: old_timex32::freq"][::std::mem::offset_of!(old_timex32, freq) - 8usize];
    ["Offset of field: old_timex32::maxerror"]
        [::std::mem::offset_of!(old_timex32, maxerror) - 12usize];
    ["Offset of field: old_timex32::esterror"]
        [::std::mem::offset_of!(old_timex32, esterror) - 16usize];
    ["Offset of field: old_timex32::status"][::std::mem::offset_of!(old_timex32, status) - 20usize];
    ["Offset of field: old_timex32::constant"]
        [::std::mem::offset_of!(old_timex32, constant) - 24usize];
    ["Offset of field: old_timex32::precision"]
        [::std::mem::offset_of!(old_timex32, precision) - 28usize];
    ["Offset of field: old_timex32::tolerance"]
        [::std::mem::offset_of!(old_timex32, tolerance) - 32usize];
    ["Offset of field: old_timex32::time"][::std::mem::offset_of!(old_timex32, time) - 36usize];
    ["Offset of field: old_timex32::tick"][::std::mem::offset_of!(old_timex32, tick) - 44usize];
    ["Offset of field: old_timex32::ppsfreq"]
        [::std::mem::offset_of!(old_timex32, ppsfreq) - 48usize];
    ["Offset of field: old_timex32::jitter"][::std::mem::offset_of!(old_timex32, jitter) - 52usize];
    ["Offset of field: old_timex32::shift"][::std::mem::offset_of!(old_timex32, shift) - 56usize];
    ["Offset of field: old_timex32::stabil"][::std::mem::offset_of!(old_timex32, stabil) - 60usize];
    ["Offset of field: old_timex32::jitcnt"][::std::mem::offset_of!(old_timex32, jitcnt) - 64usize];
    ["Offset of field: old_timex32::calcnt"][::std::mem::offset_of!(old_timex32, calcnt) - 68usize];
    ["Offset of field: old_timex32::errcnt"][::std::mem::offset_of!(old_timex32, errcnt) - 72usize];
    ["Offset of field: old_timex32::stbcnt"][::std::mem::offset_of!(old_timex32, stbcnt) - 76usize];
    ["Offset of field: old_timex32::tai"][::std::mem::offset_of!(old_timex32, tai) - 80usize];
};
extern "C" {
    pub fn get_old_timespec32(
        arg1: *mut timespec64,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_old_timespec32(
        arg1: *const timespec64,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_old_itimerspec32(
        its: *mut itimerspec64,
        uits: *const old_itimerspec32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_old_itimerspec32(
        its: *const itimerspec64,
        uits: *mut old_itimerspec32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_old_timex32(
        arg1: *mut __kernel_timex,
        arg2: *const old_timex32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_old_timex32(
        arg1: *mut old_timex32,
        arg2: *const __kernel_timex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " ns_to_kernel_old_timeval - Convert nanoseconds to timeval\n @nsec:\tthe nanoseconds value to be converted\n\n Returns the timeval representation of the nsec parameter."]
    pub fn ns_to_kernel_old_timeval(nsec: s64) -> __kernel_old_timeval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timens_offset {
    pub sec: s64,
    pub nsec: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timens_offset"][::std::mem::size_of::<timens_offset>() - 16usize];
    ["Alignment of timens_offset"][::std::mem::align_of::<timens_offset>() - 8usize];
    ["Offset of field: timens_offset::sec"][::std::mem::offset_of!(timens_offset, sec) - 0usize];
    ["Offset of field: timens_offset::nsec"][::std::mem::offset_of!(timens_offset, nsec) - 8usize];
};
extern "C" {
    pub fn register_refined_jiffies(
        clock_tick_rate: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut jiffies_64: u64_;
}
extern "C" {
    pub static mut jiffies: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut preset_lpj: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn jiffies_to_msecs(j: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn jiffies_to_usecs(j: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn jiffies64_to_nsecs(j: u64_) -> u64_;
}
extern "C" {
    pub fn jiffies64_to_msecs(j: u64_) -> u64_;
}
extern "C" {
    pub fn __msecs_to_jiffies(m: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __usecs_to_jiffies(u: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn timespec64_to_jiffies(value: *const timespec64) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn jiffies_to_timespec64(jiffies: ::std::os::raw::c_ulong, value: *mut timespec64);
}
extern "C" {
    pub fn jiffies_to_clock_t(x: ::std::os::raw::c_ulong) -> clock_t;
}
extern "C" {
    pub fn clock_t_to_jiffies(x: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn jiffies_64_to_clock_t(x: u64_) -> u64_;
}
extern "C" {
    pub fn nsec_to_clock_t(x: u64_) -> u64_;
}
extern "C" {
    pub fn nsecs_to_jiffies64(n: u64_) -> u64_;
}
extern "C" {
    pub fn nsecs_to_jiffies(n: u64_) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ktime_add_safe(lhs: ktime_t, rhs: ktime_t) -> ktime_t;
}
pub const clocksource_ids_CSID_GENERIC: clocksource_ids = 0;
pub const clocksource_ids_CSID_ARM_ARCH_COUNTER: clocksource_ids = 1;
pub const clocksource_ids_CSID_X86_TSC_EARLY: clocksource_ids = 2;
pub const clocksource_ids_CSID_X86_TSC: clocksource_ids = 3;
pub const clocksource_ids_CSID_X86_KVM_CLK: clocksource_ids = 4;
pub const clocksource_ids_CSID_X86_ART: clocksource_ids = 5;
pub const clocksource_ids_CSID_MAX: clocksource_ids = 6;
pub type clocksource_ids = ::std::os::raw::c_uint;
extern "C" {
    pub fn timekeeping_init();
}
extern "C" {
    pub static mut timekeeping_suspended: ::std::os::raw::c_int;
}
extern "C" {
    pub fn legacy_timer_tick(ticks: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn do_settimeofday64(ts: *const timespec64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_sys_settimeofday64(
        tv: *const timespec64,
        tz: *const timezone,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ktime_get_raw_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_real_ts64(tv: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_coarse_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_coarse_real_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn getboottime64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_seconds() -> time64_t;
}
extern "C" {
    pub fn __ktime_get_real_seconds() -> time64_t;
}
extern "C" {
    pub fn ktime_get_real_seconds() -> time64_t;
}
pub const tk_offsets_TK_OFFS_REAL: tk_offsets = 0;
pub const tk_offsets_TK_OFFS_BOOT: tk_offsets = 1;
pub const tk_offsets_TK_OFFS_TAI: tk_offsets = 2;
pub const tk_offsets_TK_OFFS_MAX: tk_offsets = 3;
pub type tk_offsets = ::std::os::raw::c_uint;
extern "C" {
    pub fn ktime_get() -> ktime_t;
}
extern "C" {
    pub fn ktime_get_with_offset(offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_get_coarse_with_offset(offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_mono_to_any(tmono: ktime_t, offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_get_raw() -> ktime_t;
}
extern "C" {
    pub fn ktime_get_resolution_ns() -> u32_;
}
extern "C" {
    pub fn ktime_get_mono_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_raw_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_boot_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_tai_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_real_fast_ns() -> u64_;
}
extern "C" {
    pub fn timekeeping_rtc_skipsuspend() -> bool_;
}
extern "C" {
    pub fn timekeeping_rtc_skipresume() -> bool_;
}
extern "C" {
    pub fn timekeeping_inject_sleeptime64(delta: *const timespec64);
}
#[doc = " struct ktime_timestamps - Simultaneous mono/boot/real timestamps\n @mono:\tMonotonic timestamp\n @boot:\tBoottime timestamp\n @real:\tRealtime timestamp"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ktime_timestamps {
    pub mono: u64_,
    pub boot: u64_,
    pub real: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ktime_timestamps"][::std::mem::size_of::<ktime_timestamps>() - 24usize];
    ["Alignment of ktime_timestamps"][::std::mem::align_of::<ktime_timestamps>() - 8usize];
    ["Offset of field: ktime_timestamps::mono"]
        [::std::mem::offset_of!(ktime_timestamps, mono) - 0usize];
    ["Offset of field: ktime_timestamps::boot"]
        [::std::mem::offset_of!(ktime_timestamps, boot) - 8usize];
    ["Offset of field: ktime_timestamps::real"]
        [::std::mem::offset_of!(ktime_timestamps, real) - 16usize];
};
#[doc = " struct system_time_snapshot - simultaneous raw/real time capture with\n\t\t\t\t counter value\n @cycles:\tClocksource counter value to produce the system times\n @real:\tRealtime system time\n @raw:\tMonotonic raw system time\n @cs_id:\tClocksource ID\n @clock_was_set_seq:\tThe sequence number of clock-was-set events\n @cs_was_changed_seq:\tThe sequence number of clocksource change events"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct system_time_snapshot {
    pub cycles: u64_,
    pub real: ktime_t,
    pub raw: ktime_t,
    pub cs_id: clocksource_ids,
    pub clock_was_set_seq: ::std::os::raw::c_uint,
    pub cs_was_changed_seq: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of system_time_snapshot"][::std::mem::size_of::<system_time_snapshot>() - 40usize];
    ["Alignment of system_time_snapshot"][::std::mem::align_of::<system_time_snapshot>() - 8usize];
    ["Offset of field: system_time_snapshot::cycles"]
        [::std::mem::offset_of!(system_time_snapshot, cycles) - 0usize];
    ["Offset of field: system_time_snapshot::real"]
        [::std::mem::offset_of!(system_time_snapshot, real) - 8usize];
    ["Offset of field: system_time_snapshot::raw"]
        [::std::mem::offset_of!(system_time_snapshot, raw) - 16usize];
    ["Offset of field: system_time_snapshot::cs_id"]
        [::std::mem::offset_of!(system_time_snapshot, cs_id) - 24usize];
    ["Offset of field: system_time_snapshot::clock_was_set_seq"]
        [::std::mem::offset_of!(system_time_snapshot, clock_was_set_seq) - 28usize];
    ["Offset of field: system_time_snapshot::cs_was_changed_seq"]
        [::std::mem::offset_of!(system_time_snapshot, cs_was_changed_seq) - 32usize];
};
#[doc = " struct system_device_crosststamp - system/device cross-timestamp\n\t\t\t\t      (synchronized capture)\n @device:\t\tDevice time\n @sys_realtime:\tRealtime simultaneous with device time\n @sys_monoraw:\tMonotonic raw simultaneous with device time"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct system_device_crosststamp {
    pub device: ktime_t,
    pub sys_realtime: ktime_t,
    pub sys_monoraw: ktime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of system_device_crosststamp"]
        [::std::mem::size_of::<system_device_crosststamp>() - 24usize];
    ["Alignment of system_device_crosststamp"]
        [::std::mem::align_of::<system_device_crosststamp>() - 8usize];
    ["Offset of field: system_device_crosststamp::device"]
        [::std::mem::offset_of!(system_device_crosststamp, device) - 0usize];
    ["Offset of field: system_device_crosststamp::sys_realtime"]
        [::std::mem::offset_of!(system_device_crosststamp, sys_realtime) - 8usize];
    ["Offset of field: system_device_crosststamp::sys_monoraw"]
        [::std::mem::offset_of!(system_device_crosststamp, sys_monoraw) - 16usize];
};
#[doc = " struct system_counterval_t - system counter value with the ID of the\n\t\t\t\tcorresponding clocksource\n @cycles:\tSystem counter value\n @cs_id:\tClocksource ID corresponding to system counter value. Used by\n\t\ttimekeeping code to verify comparability of two cycle values.\n\t\tThe default ID, CSID_GENERIC, does not identify a specific\n\t\tclocksource.\n @use_nsecs:\t@cycles is in nanoseconds."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct system_counterval_t {
    pub cycles: u64_,
    pub cs_id: clocksource_ids,
    pub use_nsecs: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of system_counterval_t"][::std::mem::size_of::<system_counterval_t>() - 16usize];
    ["Alignment of system_counterval_t"][::std::mem::align_of::<system_counterval_t>() - 8usize];
    ["Offset of field: system_counterval_t::cycles"]
        [::std::mem::offset_of!(system_counterval_t, cycles) - 0usize];
    ["Offset of field: system_counterval_t::cs_id"]
        [::std::mem::offset_of!(system_counterval_t, cs_id) - 8usize];
    ["Offset of field: system_counterval_t::use_nsecs"]
        [::std::mem::offset_of!(system_counterval_t, use_nsecs) - 12usize];
};
extern "C" {
    pub fn ktime_real_to_base_clock(
        treal: ktime_t,
        base_id: clocksource_ids,
        cycles: *mut u64_,
    ) -> bool_;
}
extern "C" {
    pub fn timekeeping_clocksource_has_base(id: clocksource_ids) -> bool_;
}
extern "C" {
    pub fn get_device_system_crosststamp(
        get_time_fn: ::std::option::Option<
            unsafe extern "C" fn(
                device_time: *mut ktime_t,
                system_counterval: *mut system_counterval_t,
                ctx: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        ctx: *mut ::std::os::raw::c_void,
        history: *mut system_time_snapshot,
        xtstamp: *mut system_device_crosststamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ktime_get_snapshot(systime_snapshot: *mut system_time_snapshot);
}
extern "C" {
    pub fn ktime_get_fast_timestamps(snap: *mut ktime_timestamps);
}
extern "C" {
    pub static mut persistent_clock_is_local: ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_persistent_clock64(ts: *mut timespec64);
}
extern "C" {
    pub fn read_persistent_wall_and_boot_offset(
        wall_clock: *mut timespec64,
        boot_offset: *mut timespec64,
    );
}
extern "C" {
    pub fn update_persistent_clock64(now: timespec64) -> ::std::os::raw::c_int;
}
pub const debug_obj_state_ODEBUG_STATE_NONE: debug_obj_state = 0;
pub const debug_obj_state_ODEBUG_STATE_INIT: debug_obj_state = 1;
pub const debug_obj_state_ODEBUG_STATE_INACTIVE: debug_obj_state = 2;
pub const debug_obj_state_ODEBUG_STATE_ACTIVE: debug_obj_state = 3;
pub const debug_obj_state_ODEBUG_STATE_DESTROYED: debug_obj_state = 4;
pub const debug_obj_state_ODEBUG_STATE_NOTAVAILABLE: debug_obj_state = 5;
pub const debug_obj_state_ODEBUG_STATE_MAX: debug_obj_state = 6;
pub type debug_obj_state = ::std::os::raw::c_uint;
#[doc = " struct debug_obj - representation of an tracked object\n @node:\thlist node to link the object into the tracker list\n @state:\ttracked object state\n @astate:\tcurrent active state\n @object:\tpointer to the real object\n @descr:\tpointer to an object type specific debug description structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct debug_obj {
    pub node: hlist_node,
    pub state: debug_obj_state,
    pub astate: ::std::os::raw::c_uint,
    pub object: *mut ::std::os::raw::c_void,
    pub descr: *const debug_obj_descr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of debug_obj"][::std::mem::size_of::<debug_obj>() - 40usize];
    ["Alignment of debug_obj"][::std::mem::align_of::<debug_obj>() - 8usize];
    ["Offset of field: debug_obj::node"][::std::mem::offset_of!(debug_obj, node) - 0usize];
    ["Offset of field: debug_obj::state"][::std::mem::offset_of!(debug_obj, state) - 16usize];
    ["Offset of field: debug_obj::astate"][::std::mem::offset_of!(debug_obj, astate) - 20usize];
    ["Offset of field: debug_obj::object"][::std::mem::offset_of!(debug_obj, object) - 24usize];
    ["Offset of field: debug_obj::descr"][::std::mem::offset_of!(debug_obj, descr) - 32usize];
};
#[doc = " struct debug_obj_descr - object type specific debug description structure\n\n @name:\t\tname of the object typee\n @debug_hint:\t\tfunction returning address, which have associated\n\t\t\tkernel symbol, to allow identify the object\n @is_static_object:\treturn true if the obj is static, otherwise return false\n @fixup_init:\t\tfixup function, which is called when the init check\n\t\t\tfails. All fixup functions must return true if fixup\n\t\t\twas successful, otherwise return false\n @fixup_activate:\tfixup function, which is called when the activate check\n\t\t\tfails\n @fixup_destroy:\tfixup function, which is called when the destroy check\n\t\t\tfails\n @fixup_free:\t\tfixup function, which is called when the free check\n\t\t\tfails\n @fixup_assert_init:  fixup function, which is called when the assert_init\n\t\t\tcheck fails"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct debug_obj_descr {
    pub name: *const ::std::os::raw::c_char,
    pub debug_hint: ::std::option::Option<
        unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub is_static_object:
        ::std::option::Option<unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void) -> bool_>,
    pub fixup_init: ::std::option::Option<
        unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_activate: ::std::option::Option<
        unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_destroy: ::std::option::Option<
        unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_free: ::std::option::Option<
        unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_assert_init: ::std::option::Option<
        unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void, state: debug_obj_state) -> bool_,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of debug_obj_descr"][::std::mem::size_of::<debug_obj_descr>() - 64usize];
    ["Alignment of debug_obj_descr"][::std::mem::align_of::<debug_obj_descr>() - 8usize];
    ["Offset of field: debug_obj_descr::name"]
        [::std::mem::offset_of!(debug_obj_descr, name) - 0usize];
    ["Offset of field: debug_obj_descr::debug_hint"]
        [::std::mem::offset_of!(debug_obj_descr, debug_hint) - 8usize];
    ["Offset of field: debug_obj_descr::is_static_object"]
        [::std::mem::offset_of!(debug_obj_descr, is_static_object) - 16usize];
    ["Offset of field: debug_obj_descr::fixup_init"]
        [::std::mem::offset_of!(debug_obj_descr, fixup_init) - 24usize];
    ["Offset of field: debug_obj_descr::fixup_activate"]
        [::std::mem::offset_of!(debug_obj_descr, fixup_activate) - 32usize];
    ["Offset of field: debug_obj_descr::fixup_destroy"]
        [::std::mem::offset_of!(debug_obj_descr, fixup_destroy) - 40usize];
    ["Offset of field: debug_obj_descr::fixup_free"]
        [::std::mem::offset_of!(debug_obj_descr, fixup_free) - 48usize];
    ["Offset of field: debug_obj_descr::fixup_assert_init"]
        [::std::mem::offset_of!(debug_obj_descr, fixup_assert_init) - 56usize];
};
extern "C" {
    pub fn init_timer_key(
        timer: *mut timer_list,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
        flags: ::std::os::raw::c_uint,
        name: *const ::std::os::raw::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn add_timer_on(timer: *mut timer_list, cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mod_timer(
        timer: *mut timer_list,
        expires: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mod_timer_pending(
        timer: *mut timer_list,
        expires: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_reduce(
        timer: *mut timer_list,
        expires: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_timer(timer: *mut timer_list);
}
extern "C" {
    pub fn add_timer_local(timer: *mut timer_list);
}
extern "C" {
    pub fn add_timer_global(timer: *mut timer_list);
}
extern "C" {
    pub fn try_to_del_timer_sync(timer: *mut timer_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete_sync(timer: *mut timer_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(timer: *mut timer_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_shutdown_sync(timer: *mut timer_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_shutdown(timer: *mut timer_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_timers();
}
extern "C" {
    pub fn it_real_fn(arg1: *mut hrtimer) -> hrtimer_restart;
}
extern "C" {
    pub fn __round_jiffies(
        j: ::std::os::raw::c_ulong,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_relative(
        j: ::std::os::raw::c_ulong,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn round_jiffies(j: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn round_jiffies_relative(j: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_up(
        j: ::std::os::raw::c_ulong,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_up_relative(
        j: ::std::os::raw::c_ulong,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn round_jiffies_up(j: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn round_jiffies_up_relative(j: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn timers_prepare_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timers_dead_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct workqueue_struct {
    _unused: [u8; 0],
}
pub type work_func_t = ::std::option::Option<unsafe extern "C" fn(work: *mut work_struct)>;
extern "C" {
    pub fn delayed_work_timer_fn(t: *mut timer_list);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct work_struct {
    pub data: atomic_long_t,
    pub entry: list_head,
    pub func: work_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of work_struct"][::std::mem::size_of::<work_struct>() - 32usize];
    ["Alignment of work_struct"][::std::mem::align_of::<work_struct>() - 8usize];
    ["Offset of field: work_struct::data"][::std::mem::offset_of!(work_struct, data) - 0usize];
    ["Offset of field: work_struct::entry"][::std::mem::offset_of!(work_struct, entry) - 8usize];
    ["Offset of field: work_struct::func"][::std::mem::offset_of!(work_struct, func) - 24usize];
};
pub const work_bits_WORK_STRUCT_PENDING_BIT: work_bits = 0;
pub const work_bits_WORK_STRUCT_INACTIVE_BIT: work_bits = 1;
pub const work_bits_WORK_STRUCT_PWQ_BIT: work_bits = 2;
pub const work_bits_WORK_STRUCT_LINKED_BIT: work_bits = 3;
pub const work_bits_WORK_STRUCT_FLAG_BITS: work_bits = 4;
pub const work_bits_WORK_STRUCT_COLOR_SHIFT: work_bits = 4;
pub const work_bits_WORK_STRUCT_COLOR_BITS: work_bits = 4;
pub const work_bits_WORK_STRUCT_PWQ_SHIFT: work_bits = 8;
pub const work_bits_WORK_OFFQ_FLAG_SHIFT: work_bits = 4;
pub const work_bits_WORK_OFFQ_BH_BIT: work_bits = 4;
pub const work_bits_WORK_OFFQ_FLAG_END: work_bits = 5;
pub const work_bits_WORK_OFFQ_FLAG_BITS: work_bits = 1;
pub const work_bits_WORK_OFFQ_DISABLE_SHIFT: work_bits = 5;
pub const work_bits_WORK_OFFQ_DISABLE_BITS: work_bits = 16;
pub const work_bits_WORK_OFFQ_POOL_SHIFT: work_bits = 21;
pub const work_bits_WORK_OFFQ_LEFT: work_bits = 43;
pub const work_bits_WORK_OFFQ_POOL_BITS: work_bits = 31;
pub type work_bits = ::std::os::raw::c_uint;
pub const work_flags_WORK_STRUCT_PENDING: work_flags = 1;
pub const work_flags_WORK_STRUCT_INACTIVE: work_flags = 2;
pub const work_flags_WORK_STRUCT_PWQ: work_flags = 4;
pub const work_flags_WORK_STRUCT_LINKED: work_flags = 8;
pub const work_flags_WORK_STRUCT_STATIC: work_flags = 0;
pub type work_flags = ::std::os::raw::c_uint;
pub const wq_misc_consts_WORK_NR_COLORS: wq_misc_consts = 16;
pub const wq_misc_consts_WORK_CPU_UNBOUND: wq_misc_consts = 8192;
pub const wq_misc_consts_WORK_BUSY_PENDING: wq_misc_consts = 1;
pub const wq_misc_consts_WORK_BUSY_RUNNING: wq_misc_consts = 2;
pub const wq_misc_consts_WORKER_DESC_LEN: wq_misc_consts = 32;
pub type wq_misc_consts = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delayed_work {
    pub work: work_struct,
    pub timer: timer_list,
    pub wq: *mut workqueue_struct,
    pub cpu: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of delayed_work"][::std::mem::size_of::<delayed_work>() - 88usize];
    ["Alignment of delayed_work"][::std::mem::align_of::<delayed_work>() - 8usize];
    ["Offset of field: delayed_work::work"][::std::mem::offset_of!(delayed_work, work) - 0usize];
    ["Offset of field: delayed_work::timer"][::std::mem::offset_of!(delayed_work, timer) - 32usize];
    ["Offset of field: delayed_work::wq"][::std::mem::offset_of!(delayed_work, wq) - 72usize];
    ["Offset of field: delayed_work::cpu"][::std::mem::offset_of!(delayed_work, cpu) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_work {
    pub work: work_struct,
    pub rcu: callback_head,
    pub wq: *mut workqueue_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_work"][::std::mem::size_of::<rcu_work>() - 56usize];
    ["Alignment of rcu_work"][::std::mem::align_of::<rcu_work>() - 8usize];
    ["Offset of field: rcu_work::work"][::std::mem::offset_of!(rcu_work, work) - 0usize];
    ["Offset of field: rcu_work::rcu"][::std::mem::offset_of!(rcu_work, rcu) - 32usize];
    ["Offset of field: rcu_work::wq"][::std::mem::offset_of!(rcu_work, wq) - 48usize];
};
pub const wq_affn_scope_WQ_AFFN_DFL: wq_affn_scope = 0;
pub const wq_affn_scope_WQ_AFFN_CPU: wq_affn_scope = 1;
pub const wq_affn_scope_WQ_AFFN_SMT: wq_affn_scope = 2;
pub const wq_affn_scope_WQ_AFFN_CACHE: wq_affn_scope = 3;
pub const wq_affn_scope_WQ_AFFN_NUMA: wq_affn_scope = 4;
pub const wq_affn_scope_WQ_AFFN_SYSTEM: wq_affn_scope = 5;
pub const wq_affn_scope_WQ_AFFN_NR_TYPES: wq_affn_scope = 6;
pub type wq_affn_scope = ::std::os::raw::c_uint;
#[doc = " struct workqueue_attrs - A struct for workqueue attributes.\n\n This can be used to change attributes of an unbound workqueue."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct workqueue_attrs {
    #[doc = " @nice: nice level"]
    pub nice: ::std::os::raw::c_int,
    #[doc = " @cpumask: allowed CPUs\n\n Work items in this workqueue are affine to these CPUs and not allowed\n to execute on other CPUs. A pool serving a workqueue must have the\n same @cpumask."]
    pub cpumask: cpumask_var_t,
    #[doc = " @__pod_cpumask: internal attribute used to create per-pod pools\n\n Internal use only.\n\n Per-pod unbound worker pools are used to improve locality. Always a\n subset of ->cpumask. A workqueue can be associated with multiple\n worker pools with disjoint @__pod_cpumask's. Whether the enforcement\n of a pool's @__pod_cpumask is strict depends on @affn_strict."]
    pub __pod_cpumask: cpumask_var_t,
    #[doc = " @affn_strict: affinity scope is strict\n\n If clear, workqueue will make a best-effort attempt at starting the\n worker inside @__pod_cpumask but the scheduler is free to migrate it\n outside.\n\n If set, workers are only allowed to run inside @__pod_cpumask."]
    pub affn_strict: bool_,
    #[doc = " @affn_scope: unbound CPU affinity scope\n\n CPU pods are used to improve execution locality of unbound work\n items. There are multiple pod types, one for each wq_affn_scope, and\n every CPU in the system belongs to one pod in every pod type. CPUs\n that belong to the same pod share the worker pool. For example,\n selecting %WQ_AFFN_NUMA makes the workqueue use a separate worker\n pool for each NUMA node."]
    pub affn_scope: wq_affn_scope,
    #[doc = " @ordered: work items must be executed one by one in queueing order"]
    pub ordered: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of workqueue_attrs"][::std::mem::size_of::<workqueue_attrs>() - 40usize];
    ["Alignment of workqueue_attrs"][::std::mem::align_of::<workqueue_attrs>() - 8usize];
    ["Offset of field: workqueue_attrs::nice"]
        [::std::mem::offset_of!(workqueue_attrs, nice) - 0usize];
    ["Offset of field: workqueue_attrs::cpumask"]
        [::std::mem::offset_of!(workqueue_attrs, cpumask) - 8usize];
    ["Offset of field: workqueue_attrs::__pod_cpumask"]
        [::std::mem::offset_of!(workqueue_attrs, __pod_cpumask) - 16usize];
    ["Offset of field: workqueue_attrs::affn_strict"]
        [::std::mem::offset_of!(workqueue_attrs, affn_strict) - 24usize];
    ["Offset of field: workqueue_attrs::affn_scope"]
        [::std::mem::offset_of!(workqueue_attrs, affn_scope) - 28usize];
    ["Offset of field: workqueue_attrs::ordered"]
        [::std::mem::offset_of!(workqueue_attrs, ordered) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct execute_work {
    pub work: work_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of execute_work"][::std::mem::size_of::<execute_work>() - 32usize];
    ["Alignment of execute_work"][::std::mem::align_of::<execute_work>() - 8usize];
    ["Offset of field: execute_work::work"][::std::mem::offset_of!(execute_work, work) - 0usize];
};
pub const wq_flags_WQ_BH: wq_flags = 1;
pub const wq_flags_WQ_UNBOUND: wq_flags = 2;
pub const wq_flags_WQ_FREEZABLE: wq_flags = 4;
pub const wq_flags_WQ_MEM_RECLAIM: wq_flags = 8;
pub const wq_flags_WQ_HIGHPRI: wq_flags = 16;
pub const wq_flags_WQ_CPU_INTENSIVE: wq_flags = 32;
pub const wq_flags_WQ_SYSFS: wq_flags = 64;
pub const wq_flags_WQ_POWER_EFFICIENT: wq_flags = 128;
pub const wq_flags___WQ_DESTROYING: wq_flags = 32768;
pub const wq_flags___WQ_DRAINING: wq_flags = 65536;
pub const wq_flags___WQ_ORDERED: wq_flags = 131072;
pub const wq_flags___WQ_LEGACY: wq_flags = 262144;
pub const wq_flags___WQ_BH_ALLOWS: wq_flags = 17;
pub type wq_flags = ::std::os::raw::c_uint;
pub const wq_consts_WQ_MAX_ACTIVE: wq_consts = 512;
pub const wq_consts_WQ_UNBOUND_MAX_ACTIVE: wq_consts = 512;
pub const wq_consts_WQ_DFL_ACTIVE: wq_consts = 256;
pub const wq_consts_WQ_DFL_MIN_ACTIVE: wq_consts = 8;
pub type wq_consts = ::std::os::raw::c_uint;
extern "C" {
    pub static mut system_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_highpri_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_long_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_unbound_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_freezable_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_power_efficient_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_freezable_power_efficient_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_bh_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_bh_highpri_wq: *mut workqueue_struct;
}
extern "C" {
    pub fn workqueue_softirq_action(highpri: bool_);
}
extern "C" {
    pub fn workqueue_softirq_dead(cpu: ::std::os::raw::c_uint);
}
extern "C" {
    #[doc = " alloc_workqueue - allocate a workqueue\n @fmt: printf format for the name of the workqueue\n @flags: WQ_* flags\n @max_active: max in-flight work items, 0 for default\n @...: args for @fmt\n\n For a per-cpu workqueue, @max_active limits the number of in-flight work\n items for each CPU. e.g. @max_active of 1 indicates that each CPU can be\n executing at most one work item for the workqueue.\n\n For unbound workqueues, @max_active limits the number of in-flight work items\n for the whole system. e.g. @max_active of 16 indicates that that there can be\n at most 16 work items executing for the workqueue in the whole system.\n\n As sharing the same active counter for an unbound workqueue across multiple\n NUMA nodes can be expensive, @max_active is distributed to each NUMA node\n according to the proportion of the number of online CPUs and enforced\n independently.\n\n Depending on online CPU distribution, a node may end up with per-node\n max_active which is significantly lower than @max_active, which can lead to\n deadlocks if the per-node concurrency limit is lower than the maximum number\n of interdependent work items for the workqueue.\n\n To guarantee forward progress regardless of online CPU distribution, the\n concurrency limit on every node is guaranteed to be equal to or greater than\n min_active which is set to min(@max_active, %WQ_DFL_MIN_ACTIVE). This means\n that the sum of per-node max_active's may be larger than @max_active.\n\n For detailed information on %WQ_* flags, please refer to\n Documentation/core-api/workqueue.rst.\n\n RETURNS:\n Pointer to the allocated workqueue on success, %NULL on failure."]
    pub fn alloc_workqueue(
        fmt: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        max_active: ::std::os::raw::c_int,
        ...
    ) -> *mut workqueue_struct;
}
extern "C" {
    pub fn destroy_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn alloc_workqueue_attrs() -> *mut workqueue_attrs;
}
extern "C" {
    pub fn free_workqueue_attrs(attrs: *mut workqueue_attrs);
}
extern "C" {
    pub fn apply_workqueue_attrs(
        wq: *mut workqueue_struct,
        attrs: *const workqueue_attrs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn workqueue_unbound_exclude_cpumask(cpumask: cpumask_var_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn queue_work_on(
        cpu: ::std::os::raw::c_int,
        wq: *mut workqueue_struct,
        work: *mut work_struct,
    ) -> bool_;
}
extern "C" {
    pub fn queue_work_node(
        node: ::std::os::raw::c_int,
        wq: *mut workqueue_struct,
        work: *mut work_struct,
    ) -> bool_;
}
extern "C" {
    pub fn queue_delayed_work_on(
        cpu: ::std::os::raw::c_int,
        wq: *mut workqueue_struct,
        work: *mut delayed_work,
        delay: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn mod_delayed_work_on(
        cpu: ::std::os::raw::c_int,
        wq: *mut workqueue_struct,
        dwork: *mut delayed_work,
        delay: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn queue_rcu_work(wq: *mut workqueue_struct, rwork: *mut rcu_work) -> bool_;
}
extern "C" {
    pub fn __flush_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn drain_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn schedule_on_each_cpu(func: work_func_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execute_in_process_context(
        fn_: work_func_t,
        arg1: *mut execute_work,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flush_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn cancel_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn cancel_work_sync(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn flush_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn cancel_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn cancel_delayed_work_sync(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn disable_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn disable_work_sync(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn enable_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn disable_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn disable_delayed_work_sync(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn enable_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn flush_rcu_work(rwork: *mut rcu_work) -> bool_;
}
extern "C" {
    pub fn workqueue_set_max_active(wq: *mut workqueue_struct, max_active: ::std::os::raw::c_int);
}
extern "C" {
    pub fn workqueue_set_min_active(wq: *mut workqueue_struct, min_active: ::std::os::raw::c_int);
}
extern "C" {
    pub fn current_work() -> *mut work_struct;
}
extern "C" {
    pub fn current_is_workqueue_rescuer() -> bool_;
}
extern "C" {
    pub fn workqueue_congested(cpu: ::std::os::raw::c_int, wq: *mut workqueue_struct) -> bool_;
}
extern "C" {
    pub fn work_busy(work: *mut work_struct) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn set_worker_desc(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn print_worker_info(log_lvl: *const ::std::os::raw::c_char, task: *mut task_struct);
}
extern "C" {
    pub fn show_all_workqueues();
}
extern "C" {
    pub fn show_freezable_workqueues();
}
extern "C" {
    pub fn show_one_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn wq_worker_comm(buf: *mut ::std::os::raw::c_char, size: usize, task: *mut task_struct);
}
extern "C" {
    pub fn __warn_flushing_systemwide_wq();
}
extern "C" {
    pub fn work_on_cpu_key(
        cpu: ::std::os::raw::c_int,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long,
        >,
        arg: *mut ::std::os::raw::c_void,
        key: *mut lock_class_key,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn work_on_cpu_safe_key(
        cpu: ::std::os::raw::c_int,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long,
        >,
        arg: *mut ::std::os::raw::c_void,
        key: *mut lock_class_key,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn freeze_workqueues_begin();
}
extern "C" {
    pub fn freeze_workqueues_busy() -> bool_;
}
extern "C" {
    pub fn thaw_workqueues();
}
extern "C" {
    pub fn workqueue_sysfs_register(wq: *mut workqueue_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn workqueue_prepare_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn workqueue_online_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn workqueue_offline_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn workqueue_init_early();
}
extern "C" {
    pub fn workqueue_init();
}
extern "C" {
    pub fn workqueue_init_topology();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_cblist {
    pub head: *mut callback_head,
    pub tail: *mut *mut callback_head,
    pub len: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_cblist"][::std::mem::size_of::<rcu_cblist>() - 24usize];
    ["Alignment of rcu_cblist"][::std::mem::align_of::<rcu_cblist>() - 8usize];
    ["Offset of field: rcu_cblist::head"][::std::mem::offset_of!(rcu_cblist, head) - 0usize];
    ["Offset of field: rcu_cblist::tail"][::std::mem::offset_of!(rcu_cblist, tail) - 8usize];
    ["Offset of field: rcu_cblist::len"][::std::mem::offset_of!(rcu_cblist, len) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_segcblist {
    pub head: *mut callback_head,
    pub tails: [*mut *mut callback_head; 4usize],
    pub gp_seq: [::std::os::raw::c_ulong; 4usize],
    pub len: atomic_long_t,
    pub seglen: [::std::os::raw::c_long; 4usize],
    pub flags: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_segcblist"][::std::mem::size_of::<rcu_segcblist>() - 120usize];
    ["Alignment of rcu_segcblist"][::std::mem::align_of::<rcu_segcblist>() - 8usize];
    ["Offset of field: rcu_segcblist::head"][::std::mem::offset_of!(rcu_segcblist, head) - 0usize];
    ["Offset of field: rcu_segcblist::tails"]
        [::std::mem::offset_of!(rcu_segcblist, tails) - 8usize];
    ["Offset of field: rcu_segcblist::gp_seq"]
        [::std::mem::offset_of!(rcu_segcblist, gp_seq) - 40usize];
    ["Offset of field: rcu_segcblist::len"][::std::mem::offset_of!(rcu_segcblist, len) - 72usize];
    ["Offset of field: rcu_segcblist::seglen"]
        [::std::mem::offset_of!(rcu_segcblist, seglen) - 80usize];
    ["Offset of field: rcu_segcblist::flags"]
        [::std::mem::offset_of!(rcu_segcblist, flags) - 112usize];
};
extern "C" {
    pub fn init_srcu_struct(ssp: *mut srcu_struct) -> ::std::os::raw::c_int;
}
pub type wait_queue_entry_t = wait_queue_entry;
pub type wait_queue_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        wq_entry: *mut wait_queue_entry,
        mode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn default_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait_queue_entry {
    pub flags: ::std::os::raw::c_uint,
    pub private: *mut ::std::os::raw::c_void,
    pub func: wait_queue_func_t,
    pub entry: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait_queue_entry"][::std::mem::size_of::<wait_queue_entry>() - 40usize];
    ["Alignment of wait_queue_entry"][::std::mem::align_of::<wait_queue_entry>() - 8usize];
    ["Offset of field: wait_queue_entry::flags"]
        [::std::mem::offset_of!(wait_queue_entry, flags) - 0usize];
    ["Offset of field: wait_queue_entry::private"]
        [::std::mem::offset_of!(wait_queue_entry, private) - 8usize];
    ["Offset of field: wait_queue_entry::func"]
        [::std::mem::offset_of!(wait_queue_entry, func) - 16usize];
    ["Offset of field: wait_queue_entry::entry"]
        [::std::mem::offset_of!(wait_queue_entry, entry) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_queue_head {
    pub lock: spinlock_t,
    pub head: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait_queue_head"][::std::mem::size_of::<wait_queue_head>() - 24usize];
    ["Alignment of wait_queue_head"][::std::mem::align_of::<wait_queue_head>() - 8usize];
    ["Offset of field: wait_queue_head::lock"]
        [::std::mem::offset_of!(wait_queue_head, lock) - 0usize];
    ["Offset of field: wait_queue_head::head"]
        [::std::mem::offset_of!(wait_queue_head, head) - 8usize];
};
pub type wait_queue_head_t = wait_queue_head;
extern "C" {
    pub fn __init_waitqueue_head(
        wq_head: *mut wait_queue_head,
        name: *const ::std::os::raw::c_char,
        arg1: *mut lock_class_key,
    );
}
extern "C" {
    pub fn add_wait_queue(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn add_wait_queue_exclusive(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn add_wait_queue_priority(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn remove_wait_queue(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn __wake_up(
        wq_head: *mut wait_queue_head,
        mode: ::std::os::raw::c_uint,
        nr: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __wake_up_on_current_cpu(
        wq_head: *mut wait_queue_head,
        mode: ::std::os::raw::c_uint,
        key: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked_key(
        wq_head: *mut wait_queue_head,
        mode: ::std::os::raw::c_uint,
        key: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __wake_up_sync_key(
        wq_head: *mut wait_queue_head,
        mode: ::std::os::raw::c_uint,
        key: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked_sync_key(
        wq_head: *mut wait_queue_head,
        mode: ::std::os::raw::c_uint,
        key: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked(
        wq_head: *mut wait_queue_head,
        mode: ::std::os::raw::c_uint,
        nr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn __wake_up_sync(wq_head: *mut wait_queue_head, mode: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn __wake_up_pollfree(wq_head: *mut wait_queue_head);
}
extern "C" {
    pub fn init_wait_entry(wq_entry: *mut wait_queue_entry, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_wait_intr(
        arg1: *mut wait_queue_head_t,
        arg2: *mut wait_queue_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_wait_intr_irq(
        arg1: *mut wait_queue_head_t,
        arg2: *mut wait_queue_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prepare_to_wait(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn prepare_to_wait_exclusive(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn prepare_to_wait_event(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn finish_wait(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn wait_woken(
        wq_entry: *mut wait_queue_entry,
        mode: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn woken_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: ::std::os::raw::c_uint,
        sync: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autoremove_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: ::std::os::raw::c_uint,
        sync: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type task_call_f = ::std::option::Option<
    unsafe extern "C" fn(
        p: *mut task_struct,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn task_call_func(
        p: *mut task_struct,
        func: task_call_f,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swait_queue_head {
    pub lock: raw_spinlock_t,
    pub task_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of swait_queue_head"][::std::mem::size_of::<swait_queue_head>() - 24usize];
    ["Alignment of swait_queue_head"][::std::mem::align_of::<swait_queue_head>() - 8usize];
    ["Offset of field: swait_queue_head::lock"]
        [::std::mem::offset_of!(swait_queue_head, lock) - 0usize];
    ["Offset of field: swait_queue_head::task_list"]
        [::std::mem::offset_of!(swait_queue_head, task_list) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swait_queue {
    pub task: *mut task_struct,
    pub task_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of swait_queue"][::std::mem::size_of::<swait_queue>() - 24usize];
    ["Alignment of swait_queue"][::std::mem::align_of::<swait_queue>() - 8usize];
    ["Offset of field: swait_queue::task"][::std::mem::offset_of!(swait_queue, task) - 0usize];
    ["Offset of field: swait_queue::task_list"]
        [::std::mem::offset_of!(swait_queue, task_list) - 8usize];
};
extern "C" {
    pub fn __init_swait_queue_head(
        q: *mut swait_queue_head,
        name: *const ::std::os::raw::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn swake_up_one(q: *mut swait_queue_head);
}
extern "C" {
    pub fn swake_up_all(q: *mut swait_queue_head);
}
extern "C" {
    pub fn swake_up_locked(q: *mut swait_queue_head, wake_flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn prepare_to_swait_exclusive(
        q: *mut swait_queue_head,
        wait: *mut swait_queue,
        state: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn prepare_to_swait_event(
        q: *mut swait_queue_head,
        wait: *mut swait_queue,
        state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __finish_swait(q: *mut swait_queue_head, wait: *mut swait_queue);
}
extern "C" {
    pub fn finish_swait(q: *mut swait_queue_head, wait: *mut swait_queue);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct completion {
    pub done: ::std::os::raw::c_uint,
    pub wait: swait_queue_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of completion"][::std::mem::size_of::<completion>() - 32usize];
    ["Alignment of completion"][::std::mem::align_of::<completion>() - 8usize];
    ["Offset of field: completion::done"][::std::mem::offset_of!(completion, done) - 0usize];
    ["Offset of field: completion::wait"][::std::mem::offset_of!(completion, wait) - 8usize];
};
extern "C" {
    pub fn wait_for_completion(arg1: *mut completion);
}
extern "C" {
    pub fn wait_for_completion_io(arg1: *mut completion);
}
extern "C" {
    pub fn wait_for_completion_interruptible(x: *mut completion) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait_for_completion_killable(x: *mut completion) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait_for_completion_state(
        x: *mut completion,
        state: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait_for_completion_timeout(
        x: *mut completion,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wait_for_completion_io_timeout(
        x: *mut completion,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wait_for_completion_interruptible_timeout(
        x: *mut completion,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wait_for_completion_killable_timeout(
        x: *mut completion,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn try_wait_for_completion(x: *mut completion) -> bool_;
}
extern "C" {
    pub fn completion_done(x: *mut completion) -> bool_;
}
extern "C" {
    pub fn complete(arg1: *mut completion);
}
extern "C" {
    pub fn complete_on_current_cpu(x: *mut completion);
}
extern "C" {
    pub fn complete_all(arg1: *mut completion);
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct srcu_data {
    pub srcu_lock_count: [atomic_long_t; 2usize],
    pub srcu_unlock_count: [atomic_long_t; 2usize],
    pub srcu_nmi_safety: ::std::os::raw::c_int,
    pub __bindgen_padding_0: [u32; 7usize],
    pub lock: spinlock_t,
    pub srcu_cblist: rcu_segcblist,
    pub srcu_gp_seq_needed: ::std::os::raw::c_ulong,
    pub srcu_gp_seq_needed_exp: ::std::os::raw::c_ulong,
    pub srcu_cblist_invoking: bool_,
    pub delay_work: timer_list,
    pub work: work_struct,
    pub srcu_barrier_head: callback_head,
    pub mynode: *mut srcu_node,
    pub grpmask: ::std::os::raw::c_ulong,
    pub cpu: ::std::os::raw::c_int,
    pub ssp: *mut srcu_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_data"][::std::mem::size_of::<srcu_data>() - 384usize];
    ["Alignment of srcu_data"][::std::mem::align_of::<srcu_data>() - 64usize];
    ["Offset of field: srcu_data::srcu_lock_count"]
        [::std::mem::offset_of!(srcu_data, srcu_lock_count) - 0usize];
    ["Offset of field: srcu_data::srcu_unlock_count"]
        [::std::mem::offset_of!(srcu_data, srcu_unlock_count) - 16usize];
    ["Offset of field: srcu_data::srcu_nmi_safety"]
        [::std::mem::offset_of!(srcu_data, srcu_nmi_safety) - 32usize];
    ["Offset of field: srcu_data::lock"][::std::mem::offset_of!(srcu_data, lock) - 64usize];
    ["Offset of field: srcu_data::srcu_cblist"]
        [::std::mem::offset_of!(srcu_data, srcu_cblist) - 72usize];
    ["Offset of field: srcu_data::srcu_gp_seq_needed"]
        [::std::mem::offset_of!(srcu_data, srcu_gp_seq_needed) - 192usize];
    ["Offset of field: srcu_data::srcu_gp_seq_needed_exp"]
        [::std::mem::offset_of!(srcu_data, srcu_gp_seq_needed_exp) - 200usize];
    ["Offset of field: srcu_data::srcu_cblist_invoking"]
        [::std::mem::offset_of!(srcu_data, srcu_cblist_invoking) - 208usize];
    ["Offset of field: srcu_data::delay_work"]
        [::std::mem::offset_of!(srcu_data, delay_work) - 216usize];
    ["Offset of field: srcu_data::work"][::std::mem::offset_of!(srcu_data, work) - 256usize];
    ["Offset of field: srcu_data::srcu_barrier_head"]
        [::std::mem::offset_of!(srcu_data, srcu_barrier_head) - 288usize];
    ["Offset of field: srcu_data::mynode"][::std::mem::offset_of!(srcu_data, mynode) - 304usize];
    ["Offset of field: srcu_data::grpmask"][::std::mem::offset_of!(srcu_data, grpmask) - 312usize];
    ["Offset of field: srcu_data::cpu"][::std::mem::offset_of!(srcu_data, cpu) - 320usize];
    ["Offset of field: srcu_data::ssp"][::std::mem::offset_of!(srcu_data, ssp) - 328usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_node {
    pub lock: spinlock_t,
    pub srcu_have_cbs: [::std::os::raw::c_ulong; 4usize],
    pub srcu_data_have_cbs: [::std::os::raw::c_ulong; 4usize],
    pub srcu_gp_seq_needed_exp: ::std::os::raw::c_ulong,
    pub srcu_parent: *mut srcu_node,
    pub grplo: ::std::os::raw::c_int,
    pub grphi: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_node"][::std::mem::size_of::<srcu_node>() - 96usize];
    ["Alignment of srcu_node"][::std::mem::align_of::<srcu_node>() - 8usize];
    ["Offset of field: srcu_node::lock"][::std::mem::offset_of!(srcu_node, lock) - 0usize];
    ["Offset of field: srcu_node::srcu_have_cbs"]
        [::std::mem::offset_of!(srcu_node, srcu_have_cbs) - 8usize];
    ["Offset of field: srcu_node::srcu_data_have_cbs"]
        [::std::mem::offset_of!(srcu_node, srcu_data_have_cbs) - 40usize];
    ["Offset of field: srcu_node::srcu_gp_seq_needed_exp"]
        [::std::mem::offset_of!(srcu_node, srcu_gp_seq_needed_exp) - 72usize];
    ["Offset of field: srcu_node::srcu_parent"]
        [::std::mem::offset_of!(srcu_node, srcu_parent) - 80usize];
    ["Offset of field: srcu_node::grplo"][::std::mem::offset_of!(srcu_node, grplo) - 88usize];
    ["Offset of field: srcu_node::grphi"][::std::mem::offset_of!(srcu_node, grphi) - 92usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_usage {
    pub node: *mut srcu_node,
    pub level: [*mut srcu_node; 4usize],
    pub srcu_size_state: ::std::os::raw::c_int,
    pub srcu_cb_mutex: mutex,
    pub lock: spinlock_t,
    pub srcu_gp_mutex: mutex,
    pub srcu_gp_seq: ::std::os::raw::c_ulong,
    pub srcu_gp_seq_needed: ::std::os::raw::c_ulong,
    pub srcu_gp_seq_needed_exp: ::std::os::raw::c_ulong,
    pub srcu_gp_start: ::std::os::raw::c_ulong,
    pub srcu_last_gp_end: ::std::os::raw::c_ulong,
    pub srcu_size_jiffies: ::std::os::raw::c_ulong,
    pub srcu_n_lock_retries: ::std::os::raw::c_ulong,
    pub srcu_n_exp_nodelay: ::std::os::raw::c_ulong,
    pub sda_is_static: bool_,
    pub srcu_barrier_seq: ::std::os::raw::c_ulong,
    pub srcu_barrier_mutex: mutex,
    pub srcu_barrier_completion: completion,
    pub srcu_barrier_cpu_cnt: atomic_t,
    pub reschedule_jiffies: ::std::os::raw::c_ulong,
    pub reschedule_count: ::std::os::raw::c_ulong,
    pub work: delayed_work,
    pub srcu_ssp: *mut srcu_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_usage"][::std::mem::size_of::<srcu_usage>() - 384usize];
    ["Alignment of srcu_usage"][::std::mem::align_of::<srcu_usage>() - 8usize];
    ["Offset of field: srcu_usage::node"][::std::mem::offset_of!(srcu_usage, node) - 0usize];
    ["Offset of field: srcu_usage::level"][::std::mem::offset_of!(srcu_usage, level) - 8usize];
    ["Offset of field: srcu_usage::srcu_size_state"]
        [::std::mem::offset_of!(srcu_usage, srcu_size_state) - 40usize];
    ["Offset of field: srcu_usage::srcu_cb_mutex"]
        [::std::mem::offset_of!(srcu_usage, srcu_cb_mutex) - 48usize];
    ["Offset of field: srcu_usage::lock"][::std::mem::offset_of!(srcu_usage, lock) - 80usize];
    ["Offset of field: srcu_usage::srcu_gp_mutex"]
        [::std::mem::offset_of!(srcu_usage, srcu_gp_mutex) - 88usize];
    ["Offset of field: srcu_usage::srcu_gp_seq"]
        [::std::mem::offset_of!(srcu_usage, srcu_gp_seq) - 120usize];
    ["Offset of field: srcu_usage::srcu_gp_seq_needed"]
        [::std::mem::offset_of!(srcu_usage, srcu_gp_seq_needed) - 128usize];
    ["Offset of field: srcu_usage::srcu_gp_seq_needed_exp"]
        [::std::mem::offset_of!(srcu_usage, srcu_gp_seq_needed_exp) - 136usize];
    ["Offset of field: srcu_usage::srcu_gp_start"]
        [::std::mem::offset_of!(srcu_usage, srcu_gp_start) - 144usize];
    ["Offset of field: srcu_usage::srcu_last_gp_end"]
        [::std::mem::offset_of!(srcu_usage, srcu_last_gp_end) - 152usize];
    ["Offset of field: srcu_usage::srcu_size_jiffies"]
        [::std::mem::offset_of!(srcu_usage, srcu_size_jiffies) - 160usize];
    ["Offset of field: srcu_usage::srcu_n_lock_retries"]
        [::std::mem::offset_of!(srcu_usage, srcu_n_lock_retries) - 168usize];
    ["Offset of field: srcu_usage::srcu_n_exp_nodelay"]
        [::std::mem::offset_of!(srcu_usage, srcu_n_exp_nodelay) - 176usize];
    ["Offset of field: srcu_usage::sda_is_static"]
        [::std::mem::offset_of!(srcu_usage, sda_is_static) - 184usize];
    ["Offset of field: srcu_usage::srcu_barrier_seq"]
        [::std::mem::offset_of!(srcu_usage, srcu_barrier_seq) - 192usize];
    ["Offset of field: srcu_usage::srcu_barrier_mutex"]
        [::std::mem::offset_of!(srcu_usage, srcu_barrier_mutex) - 200usize];
    ["Offset of field: srcu_usage::srcu_barrier_completion"]
        [::std::mem::offset_of!(srcu_usage, srcu_barrier_completion) - 232usize];
    ["Offset of field: srcu_usage::srcu_barrier_cpu_cnt"]
        [::std::mem::offset_of!(srcu_usage, srcu_barrier_cpu_cnt) - 264usize];
    ["Offset of field: srcu_usage::reschedule_jiffies"]
        [::std::mem::offset_of!(srcu_usage, reschedule_jiffies) - 272usize];
    ["Offset of field: srcu_usage::reschedule_count"]
        [::std::mem::offset_of!(srcu_usage, reschedule_count) - 280usize];
    ["Offset of field: srcu_usage::work"][::std::mem::offset_of!(srcu_usage, work) - 288usize];
    ["Offset of field: srcu_usage::srcu_ssp"]
        [::std::mem::offset_of!(srcu_usage, srcu_ssp) - 376usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct srcu_struct {
    pub srcu_idx: ::std::os::raw::c_uint,
    pub sda: *mut srcu_data,
    pub dep_map: lockdep_map,
    pub srcu_sup: *mut srcu_usage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_struct"][::std::mem::size_of::<srcu_struct>() - 24usize];
    ["Alignment of srcu_struct"][::std::mem::align_of::<srcu_struct>() - 8usize];
    ["Offset of field: srcu_struct::srcu_idx"]
        [::std::mem::offset_of!(srcu_struct, srcu_idx) - 0usize];
    ["Offset of field: srcu_struct::sda"][::std::mem::offset_of!(srcu_struct, sda) - 8usize];
    ["Offset of field: srcu_struct::dep_map"]
        [::std::mem::offset_of!(srcu_struct, dep_map) - 16usize];
    ["Offset of field: srcu_struct::srcu_sup"]
        [::std::mem::offset_of!(srcu_struct, srcu_sup) - 16usize];
};
extern "C" {
    pub fn synchronize_srcu_expedited(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn srcu_barrier(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn srcu_torture_stats_print(
        ssp: *mut srcu_struct,
        tt: *mut ::std::os::raw::c_char,
        tf: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn call_srcu(
        ssp: *mut srcu_struct,
        head: *mut callback_head,
        func: ::std::option::Option<unsafe extern "C" fn(head: *mut callback_head)>,
    );
}
extern "C" {
    pub fn cleanup_srcu_struct(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn __srcu_read_lock(ssp: *mut srcu_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __srcu_read_unlock(ssp: *mut srcu_struct, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn synchronize_srcu(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn get_state_synchronize_srcu(ssp: *mut srcu_struct) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_srcu(ssp: *mut srcu_struct) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn poll_state_synchronize_srcu(
        ssp: *mut srcu_struct,
        cookie: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn srcu_init();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_srcu_t {
    pub lock: *mut srcu_struct,
    pub idx: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_srcu_t"][::std::mem::size_of::<class_srcu_t>() - 16usize];
    ["Alignment of class_srcu_t"][::std::mem::align_of::<class_srcu_t>() - 8usize];
    ["Offset of field: class_srcu_t::lock"][::std::mem::offset_of!(class_srcu_t, lock) - 0usize];
    ["Offset of field: class_srcu_t::idx"][::std::mem::offset_of!(class_srcu_t, idx) - 8usize];
};
pub type notifier_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        nb: *mut notifier_block,
        action: ::std::os::raw::c_ulong,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct notifier_block {
    pub notifier_call: notifier_fn_t,
    pub next: *mut notifier_block,
    pub priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of notifier_block"][::std::mem::size_of::<notifier_block>() - 24usize];
    ["Alignment of notifier_block"][::std::mem::align_of::<notifier_block>() - 8usize];
    ["Offset of field: notifier_block::notifier_call"]
        [::std::mem::offset_of!(notifier_block, notifier_call) - 0usize];
    ["Offset of field: notifier_block::next"]
        [::std::mem::offset_of!(notifier_block, next) - 8usize];
    ["Offset of field: notifier_block::priority"]
        [::std::mem::offset_of!(notifier_block, priority) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct atomic_notifier_head {
    pub lock: spinlock_t,
    pub head: *mut notifier_block,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic_notifier_head"][::std::mem::size_of::<atomic_notifier_head>() - 16usize];
    ["Alignment of atomic_notifier_head"][::std::mem::align_of::<atomic_notifier_head>() - 8usize];
    ["Offset of field: atomic_notifier_head::lock"]
        [::std::mem::offset_of!(atomic_notifier_head, lock) - 0usize];
    ["Offset of field: atomic_notifier_head::head"]
        [::std::mem::offset_of!(atomic_notifier_head, head) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blocking_notifier_head {
    pub rwsem: rw_semaphore,
    pub head: *mut notifier_block,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of blocking_notifier_head"][::std::mem::size_of::<blocking_notifier_head>() - 48usize];
    ["Alignment of blocking_notifier_head"]
        [::std::mem::align_of::<blocking_notifier_head>() - 8usize];
    ["Offset of field: blocking_notifier_head::rwsem"]
        [::std::mem::offset_of!(blocking_notifier_head, rwsem) - 0usize];
    ["Offset of field: blocking_notifier_head::head"]
        [::std::mem::offset_of!(blocking_notifier_head, head) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct raw_notifier_head {
    pub head: *mut notifier_block,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of raw_notifier_head"][::std::mem::size_of::<raw_notifier_head>() - 8usize];
    ["Alignment of raw_notifier_head"][::std::mem::align_of::<raw_notifier_head>() - 8usize];
    ["Offset of field: raw_notifier_head::head"]
        [::std::mem::offset_of!(raw_notifier_head, head) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_notifier_head {
    pub mutex: mutex,
    pub srcuu: srcu_usage,
    pub srcu: srcu_struct,
    pub head: *mut notifier_block,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_notifier_head"][::std::mem::size_of::<srcu_notifier_head>() - 448usize];
    ["Alignment of srcu_notifier_head"][::std::mem::align_of::<srcu_notifier_head>() - 8usize];
    ["Offset of field: srcu_notifier_head::mutex"]
        [::std::mem::offset_of!(srcu_notifier_head, mutex) - 0usize];
    ["Offset of field: srcu_notifier_head::srcuu"]
        [::std::mem::offset_of!(srcu_notifier_head, srcuu) - 32usize];
    ["Offset of field: srcu_notifier_head::srcu"]
        [::std::mem::offset_of!(srcu_notifier_head, srcu) - 416usize];
    ["Offset of field: srcu_notifier_head::head"]
        [::std::mem::offset_of!(srcu_notifier_head, head) - 440usize];
};
extern "C" {
    pub fn srcu_init_notifier_head(nh: *mut srcu_notifier_head);
}
extern "C" {
    pub fn atomic_notifier_chain_register(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_register(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_notifier_chain_register(
        nh: *mut raw_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srcu_notifier_chain_register(
        nh: *mut srcu_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atomic_notifier_chain_register_unique_prio(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_register_unique_prio(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atomic_notifier_chain_unregister(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_unregister(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_notifier_chain_unregister(
        nh: *mut raw_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srcu_notifier_chain_unregister(
        nh: *mut srcu_notifier_head,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atomic_notifier_call_chain(
        nh: *mut atomic_notifier_head,
        val: ::std::os::raw::c_ulong,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blocking_notifier_call_chain(
        nh: *mut blocking_notifier_head,
        val: ::std::os::raw::c_ulong,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_notifier_call_chain(
        nh: *mut raw_notifier_head,
        val: ::std::os::raw::c_ulong,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srcu_notifier_call_chain(
        nh: *mut srcu_notifier_head,
        val: ::std::os::raw::c_ulong,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blocking_notifier_call_chain_robust(
        nh: *mut blocking_notifier_head,
        val_up: ::std::os::raw::c_ulong,
        val_down: ::std::os::raw::c_ulong,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raw_notifier_call_chain_robust(
        nh: *mut raw_notifier_head,
        val_up: ::std::os::raw::c_ulong,
        val_down: ::std::os::raw::c_ulong,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atomic_notifier_call_chain_is_empty(nh: *mut atomic_notifier_head) -> bool_;
}
extern "C" {
    pub static mut reboot_notifier_list: blocking_notifier_head;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_cell {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_device {
    _unused: [u8; 0],
}
#[doc = " struct nvmem_cell_lookup - cell lookup entry\n\n @nvmem_name:\tName of the provider.\n @cell_name:\tName of the nvmem cell as defined in the name field of\n\t\tstruct nvmem_cell_info.\n @dev_id:\tName of the consumer device that will be associated with\n\t\tthis cell.\n @con_id:\tConnector id for this cell lookup."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_cell_lookup {
    pub nvmem_name: *const ::std::os::raw::c_char,
    pub cell_name: *const ::std::os::raw::c_char,
    pub dev_id: *const ::std::os::raw::c_char,
    pub con_id: *const ::std::os::raw::c_char,
    pub node: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvmem_cell_lookup"][::std::mem::size_of::<nvmem_cell_lookup>() - 48usize];
    ["Alignment of nvmem_cell_lookup"][::std::mem::align_of::<nvmem_cell_lookup>() - 8usize];
    ["Offset of field: nvmem_cell_lookup::nvmem_name"]
        [::std::mem::offset_of!(nvmem_cell_lookup, nvmem_name) - 0usize];
    ["Offset of field: nvmem_cell_lookup::cell_name"]
        [::std::mem::offset_of!(nvmem_cell_lookup, cell_name) - 8usize];
    ["Offset of field: nvmem_cell_lookup::dev_id"]
        [::std::mem::offset_of!(nvmem_cell_lookup, dev_id) - 16usize];
    ["Offset of field: nvmem_cell_lookup::con_id"]
        [::std::mem::offset_of!(nvmem_cell_lookup, con_id) - 24usize];
    ["Offset of field: nvmem_cell_lookup::node"]
        [::std::mem::offset_of!(nvmem_cell_lookup, node) - 32usize];
};
pub const NVMEM_ADD: _bindgen_ty_12 = 1;
pub const NVMEM_REMOVE: _bindgen_ty_12 = 2;
pub const NVMEM_CELL_ADD: _bindgen_ty_12 = 3;
pub const NVMEM_CELL_REMOVE: _bindgen_ty_12 = 4;
pub const NVMEM_LAYOUT_ADD: _bindgen_ty_12 = 5;
pub const NVMEM_LAYOUT_REMOVE: _bindgen_ty_12 = 6;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
extern "C" {
    pub fn nvmem_cell_get(dev: *mut device, id: *const ::std::os::raw::c_char) -> *mut nvmem_cell;
}
extern "C" {
    pub fn devm_nvmem_cell_get(
        dev: *mut device,
        id: *const ::std::os::raw::c_char,
    ) -> *mut nvmem_cell;
}
extern "C" {
    pub fn nvmem_cell_put(cell: *mut nvmem_cell);
}
extern "C" {
    pub fn devm_nvmem_cell_put(dev: *mut device, cell: *mut nvmem_cell);
}
extern "C" {
    pub fn nvmem_cell_read(cell: *mut nvmem_cell, len: *mut usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nvmem_cell_write(
        cell: *mut nvmem_cell,
        buf: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_cell_read_u8(
        dev: *mut device,
        cell_id: *const ::std::os::raw::c_char,
        val: *mut u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_cell_read_u16(
        dev: *mut device,
        cell_id: *const ::std::os::raw::c_char,
        val: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_cell_read_u32(
        dev: *mut device,
        cell_id: *const ::std::os::raw::c_char,
        val: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_cell_read_u64(
        dev: *mut device,
        cell_id: *const ::std::os::raw::c_char,
        val: *mut u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_cell_read_variable_le_u32(
        dev: *mut device,
        cell_id: *const ::std::os::raw::c_char,
        val: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_cell_read_variable_le_u64(
        dev: *mut device,
        cell_id: *const ::std::os::raw::c_char,
        val: *mut u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_device_get(
        dev: *mut device,
        name: *const ::std::os::raw::c_char,
    ) -> *mut nvmem_device;
}
extern "C" {
    pub fn devm_nvmem_device_get(
        dev: *mut device,
        name: *const ::std::os::raw::c_char,
    ) -> *mut nvmem_device;
}
extern "C" {
    pub fn nvmem_device_put(nvmem: *mut nvmem_device);
}
extern "C" {
    pub fn devm_nvmem_device_put(dev: *mut device, nvmem: *mut nvmem_device);
}
extern "C" {
    pub fn nvmem_device_read(
        nvmem: *mut nvmem_device,
        offset: ::std::os::raw::c_uint,
        bytes: usize,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_device_write(
        nvmem: *mut nvmem_device,
        offset: ::std::os::raw::c_uint,
        bytes: usize,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_device_cell_read(
        nvmem: *mut nvmem_device,
        info: *mut nvmem_cell_info,
        buf: *mut ::std::os::raw::c_void,
    ) -> isize;
}
extern "C" {
    pub fn nvmem_device_cell_write(
        nvmem: *mut nvmem_device,
        info: *mut nvmem_cell_info,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_dev_name(nvmem: *mut nvmem_device) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn nvmem_dev_size(nvmem: *mut nvmem_device) -> usize;
}
extern "C" {
    pub fn nvmem_add_cell_lookups(entries: *mut nvmem_cell_lookup, nentries: usize);
}
extern "C" {
    pub fn nvmem_del_cell_lookups(entries: *mut nvmem_cell_lookup, nentries: usize);
}
extern "C" {
    pub fn nvmem_register_notifier(nb: *mut notifier_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_unregister_notifier(nb: *mut notifier_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_device_find(
        data: *mut ::std::os::raw::c_void,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut nvmem_device;
}
pub const irqreturn_IRQ_NONE: irqreturn = 0;
pub const irqreturn_IRQ_HANDLED: irqreturn = 1;
pub const irqreturn_IRQ_WAKE_THREAD: irqreturn = 2;
#[doc = " enum irqreturn - irqreturn type values\n @IRQ_NONE:\t\tinterrupt was not from this device or was not handled\n @IRQ_HANDLED:\tinterrupt was handled by this device\n @IRQ_WAKE_THREAD:\thandler requests to wake the handler thread"]
pub type irqreturn = ::std::os::raw::c_uint;
#[doc = " enum irqreturn - irqreturn type values\n @IRQ_NONE:\t\tinterrupt was not from this device or was not handled\n @IRQ_HANDLED:\tinterrupt was handled by this device\n @IRQ_WAKE_THREAD:\thandler requests to wake the handler thread"]
pub use self::irqreturn as irqreturn_t;
extern "C" {
    pub static mut nr_irqs: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irq_desc {
    _unused: [u8; 0],
}
extern "C" {
    pub fn irq_to_desc(irq: ::std::os::raw::c_uint) -> *mut irq_desc;
}
extern "C" {
    pub fn irq_get_next_irq(offset: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
pub const ctx_state_CONTEXT_DISABLED: ctx_state = -1;
pub const ctx_state_CONTEXT_KERNEL: ctx_state = 0;
pub const ctx_state_CONTEXT_IDLE: ctx_state = 1;
pub const ctx_state_CONTEXT_USER: ctx_state = 2;
pub const ctx_state_CONTEXT_GUEST: ctx_state = 3;
pub const ctx_state_CONTEXT_MAX: ctx_state = 4;
pub type ctx_state = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct context_tracking {
    pub active: bool_,
    pub recursion: ::std::os::raw::c_int,
    pub state: atomic_t,
    pub dynticks_nesting: ::std::os::raw::c_long,
    pub dynticks_nmi_nesting: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of context_tracking"][::std::mem::size_of::<context_tracking>() - 32usize];
    ["Alignment of context_tracking"][::std::mem::align_of::<context_tracking>() - 8usize];
    ["Offset of field: context_tracking::active"]
        [::std::mem::offset_of!(context_tracking, active) - 0usize];
    ["Offset of field: context_tracking::recursion"]
        [::std::mem::offset_of!(context_tracking, recursion) - 4usize];
    ["Offset of field: context_tracking::state"]
        [::std::mem::offset_of!(context_tracking, state) - 8usize];
    ["Offset of field: context_tracking::dynticks_nesting"]
        [::std::mem::offset_of!(context_tracking, dynticks_nesting) - 16usize];
    ["Offset of field: context_tracking::dynticks_nmi_nesting"]
        [::std::mem::offset_of!(context_tracking, dynticks_nmi_nesting) - 24usize];
};
extern "C" {
    pub static mut context_tracking: context_tracking;
}
extern "C" {
    pub static mut context_tracking_key: static_key_false;
}
extern "C" {
    pub static mut trace_hwlat_callback_enabled: bool_;
}
extern "C" {
    pub fn trace_hwlat_callback(enter: bool_);
}
extern "C" {
    pub static mut trace_osnoise_callback_enabled: bool_;
}
extern "C" {
    pub fn trace_osnoise_callback(enter: bool_);
}
extern "C" {
    pub fn vtime_account_kernel(tsk: *mut task_struct);
}
extern "C" {
    pub fn vtime_account_idle(tsk: *mut task_struct);
}
extern "C" {
    pub fn vtime_user_enter(tsk: *mut task_struct);
}
extern "C" {
    pub fn vtime_user_exit(tsk: *mut task_struct);
}
extern "C" {
    pub fn vtime_guest_enter(tsk: *mut task_struct);
}
extern "C" {
    pub fn vtime_guest_exit(tsk: *mut task_struct);
}
extern "C" {
    pub fn vtime_init_idle(tsk: *mut task_struct, cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vtime_task_switch_generic(prev: *mut task_struct);
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct irq_cpustat_t {
    pub kvm_cpu_l1tf_flush_l1d: u8_,
    pub __nmi_count: ::std::os::raw::c_uint,
    pub apic_timer_irqs: ::std::os::raw::c_uint,
    pub irq_spurious_count: ::std::os::raw::c_uint,
    pub icr_read_retry_count: ::std::os::raw::c_uint,
    pub kvm_posted_intr_ipis: ::std::os::raw::c_uint,
    pub kvm_posted_intr_wakeup_ipis: ::std::os::raw::c_uint,
    pub kvm_posted_intr_nested_ipis: ::std::os::raw::c_uint,
    pub x86_platform_ipis: ::std::os::raw::c_uint,
    pub apic_perf_irqs: ::std::os::raw::c_uint,
    pub apic_irq_work_irqs: ::std::os::raw::c_uint,
    pub irq_resched_count: ::std::os::raw::c_uint,
    pub irq_call_count: ::std::os::raw::c_uint,
    pub irq_tlb_count: ::std::os::raw::c_uint,
    pub irq_thermal_count: ::std::os::raw::c_uint,
    pub irq_threshold_count: ::std::os::raw::c_uint,
    pub irq_deferred_error_count: ::std::os::raw::c_uint,
    pub irq_hv_callback_count: ::std::os::raw::c_uint,
    pub irq_hv_reenlightenment_count: ::std::os::raw::c_uint,
    pub hyperv_stimer0_count: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of irq_cpustat_t"][::std::mem::size_of::<irq_cpustat_t>() - 128usize];
    ["Alignment of irq_cpustat_t"][::std::mem::align_of::<irq_cpustat_t>() - 64usize];
    ["Offset of field: irq_cpustat_t::kvm_cpu_l1tf_flush_l1d"]
        [::std::mem::offset_of!(irq_cpustat_t, kvm_cpu_l1tf_flush_l1d) - 0usize];
    ["Offset of field: irq_cpustat_t::__nmi_count"]
        [::std::mem::offset_of!(irq_cpustat_t, __nmi_count) - 4usize];
    ["Offset of field: irq_cpustat_t::apic_timer_irqs"]
        [::std::mem::offset_of!(irq_cpustat_t, apic_timer_irqs) - 8usize];
    ["Offset of field: irq_cpustat_t::irq_spurious_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_spurious_count) - 12usize];
    ["Offset of field: irq_cpustat_t::icr_read_retry_count"]
        [::std::mem::offset_of!(irq_cpustat_t, icr_read_retry_count) - 16usize];
    ["Offset of field: irq_cpustat_t::kvm_posted_intr_ipis"]
        [::std::mem::offset_of!(irq_cpustat_t, kvm_posted_intr_ipis) - 20usize];
    ["Offset of field: irq_cpustat_t::kvm_posted_intr_wakeup_ipis"]
        [::std::mem::offset_of!(irq_cpustat_t, kvm_posted_intr_wakeup_ipis) - 24usize];
    ["Offset of field: irq_cpustat_t::kvm_posted_intr_nested_ipis"]
        [::std::mem::offset_of!(irq_cpustat_t, kvm_posted_intr_nested_ipis) - 28usize];
    ["Offset of field: irq_cpustat_t::x86_platform_ipis"]
        [::std::mem::offset_of!(irq_cpustat_t, x86_platform_ipis) - 32usize];
    ["Offset of field: irq_cpustat_t::apic_perf_irqs"]
        [::std::mem::offset_of!(irq_cpustat_t, apic_perf_irqs) - 36usize];
    ["Offset of field: irq_cpustat_t::apic_irq_work_irqs"]
        [::std::mem::offset_of!(irq_cpustat_t, apic_irq_work_irqs) - 40usize];
    ["Offset of field: irq_cpustat_t::irq_resched_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_resched_count) - 44usize];
    ["Offset of field: irq_cpustat_t::irq_call_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_call_count) - 48usize];
    ["Offset of field: irq_cpustat_t::irq_tlb_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_tlb_count) - 52usize];
    ["Offset of field: irq_cpustat_t::irq_thermal_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_thermal_count) - 56usize];
    ["Offset of field: irq_cpustat_t::irq_threshold_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_threshold_count) - 60usize];
    ["Offset of field: irq_cpustat_t::irq_deferred_error_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_deferred_error_count) - 64usize];
    ["Offset of field: irq_cpustat_t::irq_hv_callback_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_hv_callback_count) - 68usize];
    ["Offset of field: irq_cpustat_t::irq_hv_reenlightenment_count"]
        [::std::mem::offset_of!(irq_cpustat_t, irq_hv_reenlightenment_count) - 72usize];
    ["Offset of field: irq_cpustat_t::hyperv_stimer0_count"]
        [::std::mem::offset_of!(irq_cpustat_t, hyperv_stimer0_count) - 76usize];
};
extern "C" {
    pub static mut irq_stat: irq_cpustat_t;
}
extern "C" {
    pub fn ack_bad_irq(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn arch_irq_stat_cpu(cpu: ::std::os::raw::c_uint) -> u64_;
}
extern "C" {
    pub fn arch_irq_stat() -> u64_;
}
extern "C" {
    pub fn synchronize_irq(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn synchronize_hardirq(irq: ::std::os::raw::c_uint) -> bool_;
}
extern "C" {
    pub fn __rcu_irq_enter_check_tick();
}
extern "C" {
    pub fn irq_enter();
}
extern "C" {
    pub fn irq_enter_rcu();
}
extern "C" {
    pub fn irq_exit();
}
extern "C" {
    pub fn irq_exit_rcu();
}
extern "C" {
    pub fn rb_insert_color(arg1: *mut rb_node, arg2: *mut rb_root);
}
extern "C" {
    pub fn rb_erase(arg1: *mut rb_node, arg2: *mut rb_root);
}
extern "C" {
    pub fn rb_next(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_prev(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_first(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_last(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_first_postorder(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_next_postorder(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_replace_node(victim: *mut rb_node, new: *mut rb_node, root: *mut rb_root);
}
extern "C" {
    pub fn rb_replace_node_rcu(victim: *mut rb_node, new: *mut rb_node, root: *mut rb_root);
}
extern "C" {
    pub fn timerqueue_add(head: *mut timerqueue_head, node: *mut timerqueue_node) -> bool_;
}
extern "C" {
    pub fn timerqueue_del(head: *mut timerqueue_head, node: *mut timerqueue_node) -> bool_;
}
extern "C" {
    pub fn timerqueue_iterate_next(node: *mut timerqueue_node) -> *mut timerqueue_node;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seqcount_latch_t {
    pub seqcount: seqcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount_latch_t"][::std::mem::size_of::<seqcount_latch_t>() - 4usize];
    ["Alignment of seqcount_latch_t"][::std::mem::align_of::<seqcount_latch_t>() - 4usize];
    ["Offset of field: seqcount_latch_t::seqcount"]
        [::std::mem::offset_of!(seqcount_latch_t, seqcount) - 0usize];
};
#[doc = " struct hrtimer_clock_base - the timer base for a specific clock\n @cpu_base:\t\tper cpu clock base\n @index:\t\tclock type index for per_cpu support when moving a\n\t\t\ttimer to a base on another cpu.\n @clockid:\t\tclock id for per_cpu support\n @seq:\t\tseqcount around __run_hrtimer\n @running:\t\tpointer to the currently running hrtimer\n @active:\t\tred black tree root node for the active timers\n @get_time:\t\tfunction to retrieve the current time of the clock\n @offset:\t\toffset of this clock to the monotonic base"]
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct hrtimer_clock_base {
    pub cpu_base: *mut hrtimer_cpu_base,
    pub index: ::std::os::raw::c_uint,
    pub clockid: clockid_t,
    pub seq: seqcount_raw_spinlock_t,
    pub running: *mut hrtimer,
    pub active: timerqueue_head,
    pub get_time: ::std::option::Option<unsafe extern "C" fn() -> ktime_t>,
    pub offset: ktime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer_clock_base"][::std::mem::size_of::<hrtimer_clock_base>() - 64usize];
    ["Alignment of hrtimer_clock_base"][::std::mem::align_of::<hrtimer_clock_base>() - 64usize];
    ["Offset of field: hrtimer_clock_base::cpu_base"]
        [::std::mem::offset_of!(hrtimer_clock_base, cpu_base) - 0usize];
    ["Offset of field: hrtimer_clock_base::index"]
        [::std::mem::offset_of!(hrtimer_clock_base, index) - 8usize];
    ["Offset of field: hrtimer_clock_base::clockid"]
        [::std::mem::offset_of!(hrtimer_clock_base, clockid) - 12usize];
    ["Offset of field: hrtimer_clock_base::seq"]
        [::std::mem::offset_of!(hrtimer_clock_base, seq) - 16usize];
    ["Offset of field: hrtimer_clock_base::running"]
        [::std::mem::offset_of!(hrtimer_clock_base, running) - 24usize];
    ["Offset of field: hrtimer_clock_base::active"]
        [::std::mem::offset_of!(hrtimer_clock_base, active) - 32usize];
    ["Offset of field: hrtimer_clock_base::get_time"]
        [::std::mem::offset_of!(hrtimer_clock_base, get_time) - 48usize];
    ["Offset of field: hrtimer_clock_base::offset"]
        [::std::mem::offset_of!(hrtimer_clock_base, offset) - 56usize];
};
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC: hrtimer_base_type = 0;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME: hrtimer_base_type = 1;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME: hrtimer_base_type = 2;
pub const hrtimer_base_type_HRTIMER_BASE_TAI: hrtimer_base_type = 3;
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC_SOFT: hrtimer_base_type = 4;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME_SOFT: hrtimer_base_type = 5;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME_SOFT: hrtimer_base_type = 6;
pub const hrtimer_base_type_HRTIMER_BASE_TAI_SOFT: hrtimer_base_type = 7;
pub const hrtimer_base_type_HRTIMER_MAX_CLOCK_BASES: hrtimer_base_type = 8;
pub type hrtimer_base_type = ::std::os::raw::c_uint;
#[doc = " struct hrtimer_cpu_base - the per cpu clock bases\n @lock:\t\tlock protecting the base and associated clock bases\n\t\t\tand timers\n @cpu:\t\tcpu number\n @active_bases:\tBitfield to mark bases with active timers\n @clock_was_set_seq:\tSequence counter of clock was set events\n @hres_active:\tState of high resolution mode\n @in_hrtirq:\t\thrtimer_interrupt() is currently executing\n @hang_detected:\tThe last hrtimer interrupt detected a hang\n @softirq_activated:\tdisplays, if the softirq is raised - update of softirq\n\t\t\trelated settings is not required then.\n @nr_events:\t\tTotal number of hrtimer interrupt events\n @nr_retries:\t\tTotal number of hrtimer interrupt retries\n @nr_hangs:\t\tTotal number of hrtimer interrupt hangs\n @max_hang_time:\tMaximum time spent in hrtimer_interrupt\n @softirq_expiry_lock: Lock which is taken while softirq based hrtimer are\n\t\t\t expired\n @online:\t\tCPU is online from an hrtimers point of view\n @timer_waiters:\tA hrtimer_cancel() invocation waits for the timer\n\t\t\tcallback to finish.\n @expires_next:\tabsolute time of the next event, is required for remote\n\t\t\thrtimer enqueue; it is the total first expiry time (hard\n\t\t\tand soft hrtimer are taken into account)\n @next_timer:\t\tPointer to the first expiring timer\n @softirq_expires_next: Time to check, if soft queues needs also to be expired\n @softirq_next_timer: Pointer to the first expiring softirq based timer\n @clock_base:\t\tarray of clock bases for this cpu\n\n Note: next_timer is just an optimization for __remove_hrtimer().\n\t Do not dereference the pointer because it is not reliable on\n\t cross cpu removals."]
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct hrtimer_cpu_base {
    pub lock: raw_spinlock_t,
    pub cpu: ::std::os::raw::c_uint,
    pub active_bases: ::std::os::raw::c_uint,
    pub clock_was_set_seq: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub nr_events: ::std::os::raw::c_uint,
    pub nr_retries: ::std::os::raw::c_ushort,
    pub nr_hangs: ::std::os::raw::c_ushort,
    pub max_hang_time: ::std::os::raw::c_uint,
    pub expires_next: ktime_t,
    pub next_timer: *mut hrtimer,
    pub softirq_expires_next: ktime_t,
    pub softirq_next_timer: *mut hrtimer,
    pub clock_base: [hrtimer_clock_base; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer_cpu_base"][::std::mem::size_of::<hrtimer_cpu_base>() - 576usize];
    ["Alignment of hrtimer_cpu_base"][::std::mem::align_of::<hrtimer_cpu_base>() - 64usize];
    ["Offset of field: hrtimer_cpu_base::lock"]
        [::std::mem::offset_of!(hrtimer_cpu_base, lock) - 0usize];
    ["Offset of field: hrtimer_cpu_base::cpu"]
        [::std::mem::offset_of!(hrtimer_cpu_base, cpu) - 4usize];
    ["Offset of field: hrtimer_cpu_base::active_bases"]
        [::std::mem::offset_of!(hrtimer_cpu_base, active_bases) - 8usize];
    ["Offset of field: hrtimer_cpu_base::clock_was_set_seq"]
        [::std::mem::offset_of!(hrtimer_cpu_base, clock_was_set_seq) - 12usize];
    ["Offset of field: hrtimer_cpu_base::nr_events"]
        [::std::mem::offset_of!(hrtimer_cpu_base, nr_events) - 20usize];
    ["Offset of field: hrtimer_cpu_base::nr_retries"]
        [::std::mem::offset_of!(hrtimer_cpu_base, nr_retries) - 24usize];
    ["Offset of field: hrtimer_cpu_base::nr_hangs"]
        [::std::mem::offset_of!(hrtimer_cpu_base, nr_hangs) - 26usize];
    ["Offset of field: hrtimer_cpu_base::max_hang_time"]
        [::std::mem::offset_of!(hrtimer_cpu_base, max_hang_time) - 28usize];
    ["Offset of field: hrtimer_cpu_base::expires_next"]
        [::std::mem::offset_of!(hrtimer_cpu_base, expires_next) - 32usize];
    ["Offset of field: hrtimer_cpu_base::next_timer"]
        [::std::mem::offset_of!(hrtimer_cpu_base, next_timer) - 40usize];
    ["Offset of field: hrtimer_cpu_base::softirq_expires_next"]
        [::std::mem::offset_of!(hrtimer_cpu_base, softirq_expires_next) - 48usize];
    ["Offset of field: hrtimer_cpu_base::softirq_next_timer"]
        [::std::mem::offset_of!(hrtimer_cpu_base, softirq_next_timer) - 56usize];
    ["Offset of field: hrtimer_cpu_base::clock_base"]
        [::std::mem::offset_of!(hrtimer_cpu_base, clock_base) - 64usize];
};
impl hrtimer_cpu_base {
    #[inline]
    pub fn hres_active(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hres_active(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_hrtirq(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_hrtirq(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hang_detected(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hang_detected(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn softirq_activated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_softirq_activated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn online(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_online(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hres_active: ::std::os::raw::c_uint,
        in_hrtirq: ::std::os::raw::c_uint,
        hang_detected: ::std::os::raw::c_uint,
        softirq_activated: ::std::os::raw::c_uint,
        online: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hres_active: u32 = unsafe { ::std::mem::transmute(hres_active) };
            hres_active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let in_hrtirq: u32 = unsafe { ::std::mem::transmute(in_hrtirq) };
            in_hrtirq as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let hang_detected: u32 = unsafe { ::std::mem::transmute(hang_detected) };
            hang_detected as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let softirq_activated: u32 = unsafe { ::std::mem::transmute(softirq_activated) };
            softirq_activated as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let online: u32 = unsafe { ::std::mem::transmute(online) };
            online as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const hrtimer_mode_HRTIMER_MODE_ABS: hrtimer_mode = 0;
pub const hrtimer_mode_HRTIMER_MODE_REL: hrtimer_mode = 1;
pub const hrtimer_mode_HRTIMER_MODE_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_HARD: hrtimer_mode = 8;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED: hrtimer_mode = 3;
pub const hrtimer_mode_HRTIMER_MODE_ABS_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_REL_SOFT: hrtimer_mode = 5;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED_SOFT: hrtimer_mode = 6;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED_SOFT: hrtimer_mode = 7;
pub const hrtimer_mode_HRTIMER_MODE_ABS_HARD: hrtimer_mode = 8;
pub const hrtimer_mode_HRTIMER_MODE_REL_HARD: hrtimer_mode = 9;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED_HARD: hrtimer_mode = 10;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED_HARD: hrtimer_mode = 11;
pub type hrtimer_mode = ::std::os::raw::c_uint;
#[doc = " struct hrtimer_sleeper - simple sleeper structure\n @timer:\tembedded timer structure\n @task:\ttask to wake up\n\n task is set to NULL, when the timer expires."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hrtimer_sleeper {
    pub timer: hrtimer,
    pub task: *mut task_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer_sleeper"][::std::mem::size_of::<hrtimer_sleeper>() - 72usize];
    ["Alignment of hrtimer_sleeper"][::std::mem::align_of::<hrtimer_sleeper>() - 8usize];
    ["Offset of field: hrtimer_sleeper::timer"]
        [::std::mem::offset_of!(hrtimer_sleeper, timer) - 0usize];
    ["Offset of field: hrtimer_sleeper::task"]
        [::std::mem::offset_of!(hrtimer_sleeper, task) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clock_event_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn hrtimer_interrupt(dev: *mut clock_event_device);
}
extern "C" {
    pub static mut hrtimer_resolution: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn timerfd_clock_was_set();
}
extern "C" {
    pub fn timerfd_resume();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tick_device {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut tick_cpu_device: tick_device;
}
extern "C" {
    pub fn hrtimer_init(timer: *mut hrtimer, which_clock: clockid_t, mode: hrtimer_mode);
}
extern "C" {
    pub fn hrtimer_init_sleeper(sl: *mut hrtimer_sleeper, clock_id: clockid_t, mode: hrtimer_mode);
}
extern "C" {
    pub fn hrtimer_start_range_ns(
        timer: *mut hrtimer,
        tim: ktime_t,
        range_ns: u64_,
        mode: hrtimer_mode,
    );
}
extern "C" {
    pub fn hrtimer_cancel(timer: *mut hrtimer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hrtimer_try_to_cancel(timer: *mut hrtimer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hrtimer_sleeper_start_expires(sl: *mut hrtimer_sleeper, mode: hrtimer_mode);
}
extern "C" {
    pub fn __hrtimer_get_remaining(timer: *const hrtimer, adjust: bool_) -> ktime_t;
}
extern "C" {
    pub fn hrtimer_get_next_event() -> u64_;
}
extern "C" {
    pub fn hrtimer_next_event_without(exclude: *const hrtimer) -> u64_;
}
extern "C" {
    pub fn hrtimer_active(timer: *const hrtimer) -> bool_;
}
extern "C" {
    pub fn hrtimer_forward(timer: *mut hrtimer, now: ktime_t, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn nanosleep_copyout(
        arg1: *mut restart_block,
        arg2: *mut timespec64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hrtimer_nanosleep(
        rqtp: ktime_t,
        mode: hrtimer_mode,
        clockid: clockid_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn schedule_hrtimeout_range(
        expires: *mut ktime_t,
        delta: u64_,
        mode: hrtimer_mode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn schedule_hrtimeout_range_clock(
        expires: *mut ktime_t,
        delta: u64_,
        mode: hrtimer_mode,
        clock_id: clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn schedule_hrtimeout(expires: *mut ktime_t, mode: hrtimer_mode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hrtimer_run_queues();
}
extern "C" {
    pub fn hrtimers_init();
}
extern "C" {
    pub fn sysrq_timer_list_show();
}
extern "C" {
    pub fn hrtimers_prepare_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hrtimers_cpu_dying(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
pub const refcount_saturation_type_REFCOUNT_ADD_NOT_ZERO_OVF: refcount_saturation_type = 0;
pub const refcount_saturation_type_REFCOUNT_ADD_OVF: refcount_saturation_type = 1;
pub const refcount_saturation_type_REFCOUNT_ADD_UAF: refcount_saturation_type = 2;
pub const refcount_saturation_type_REFCOUNT_SUB_UAF: refcount_saturation_type = 3;
pub const refcount_saturation_type_REFCOUNT_DEC_LEAK: refcount_saturation_type = 4;
pub type refcount_saturation_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn refcount_warn_saturate(r: *mut refcount_t, t: refcount_saturation_type);
}
extern "C" {
    pub fn refcount_dec_if_one(r: *mut refcount_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_not_one(r: *mut refcount_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_mutex_lock(r: *mut refcount_t, lock: *mut mutex) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_lock(r: *mut refcount_t, lock: *mut spinlock_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_lock_irqsave(
        r: *mut refcount_t,
        lock: *mut spinlock_t,
        flags: *mut ::std::os::raw::c_ulong,
    ) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kref {
    pub refcount: refcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kref"][::std::mem::size_of::<kref>() - 4usize];
    ["Alignment of kref"][::std::mem::align_of::<kref>() - 4usize];
    ["Offset of field: kref::refcount"][::std::mem::offset_of!(kref, refcount) - 0usize];
};
extern "C" {
    pub fn irq_init_percpu_irqstack(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fixup_irqs();
}
extern "C" {
    pub fn kvm_set_posted_intr_wakeup_handler(
        handler: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub static mut x86_platform_ipi_callback: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn native_init_IRQ();
}
extern "C" {
    pub fn __handle_irq(desc: *mut irq_desc, regs: *mut pt_regs);
}
extern "C" {
    pub fn init_ISA_irqs();
}
extern "C" {
    pub fn arch_trigger_cpumask_backtrace(mask: *const cpumask, exclude_cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut _text: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _stext: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _etext: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _data: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _sdata: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _edata: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __bss_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __bss_stop: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __init_begin: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __init_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _sinittext: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _einittext: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __start_ro_after_init: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_ro_after_init: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __per_cpu_load: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __per_cpu_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __per_cpu_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __kprobes_text_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __kprobes_text_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __entry_text_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __entry_text_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __start_rodata: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_rodata: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __irqentry_text_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __irqentry_text_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __softirqentry_text_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __softirqentry_text_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __start_once: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_once: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __ctors_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __ctors_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __start_opd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_opd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __noinstr_text_start: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __noinstr_text_end: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static __nosave_begin: ::std::os::raw::c_void;
}
extern "C" {
    pub static __nosave_end: ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct func_desc_t {
    pub addr: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of func_desc_t"][::std::mem::size_of::<func_desc_t>() - 8usize];
    ["Alignment of func_desc_t"][::std::mem::align_of::<func_desc_t>() - 8usize];
    ["Offset of field: func_desc_t::addr"][::std::mem::offset_of!(func_desc_t, addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception_table_entry {
    pub insn: ::std::os::raw::c_int,
    pub fixup: ::std::os::raw::c_int,
    pub data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of exception_table_entry"][::std::mem::size_of::<exception_table_entry>() - 12usize];
    ["Alignment of exception_table_entry"]
        [::std::mem::align_of::<exception_table_entry>() - 4usize];
    ["Offset of field: exception_table_entry::insn"]
        [::std::mem::offset_of!(exception_table_entry, insn) - 0usize];
    ["Offset of field: exception_table_entry::fixup"]
        [::std::mem::offset_of!(exception_table_entry, fixup) - 4usize];
    ["Offset of field: exception_table_entry::data"]
        [::std::mem::offset_of!(exception_table_entry, data) - 8usize];
};
extern "C" {
    pub fn fixup_exception(
        regs: *mut pt_regs,
        trapnr: ::std::os::raw::c_int,
        error_code: ::std::os::raw::c_ulong,
        fault_addr: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fixup_bug(regs: *mut pt_regs, trapnr: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_get_fixup_type(ip: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn early_fixup_exception(regs: *mut pt_regs, trapnr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_handler_msr_mce(regs: *mut pt_regs, wrmsr: bool_) -> !;
}
extern "C" {
    pub fn ex_handler_bpf(x: *const exception_table_entry, regs: *mut pt_regs) -> bool_;
}
extern "C" {
    pub static mut __brk_base: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __brk_limit: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_rodata_aligned: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_rodata_hpage_align: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut __end_of_kernel_reserve: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _brk_start: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut _brk_end: ::std::os::raw::c_ulong;
}
pub const IRQC_IS_HARDIRQ: _bindgen_ty_13 = 0;
pub const IRQC_IS_NESTED: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub type irq_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> irqreturn_t,
>;
#[doc = " struct irqaction - per interrupt action descriptor\n @handler:\tinterrupt handler function\n @name:\tname of the device\n @dev_id:\tcookie to identify the device\n @percpu_dev_id:\tcookie to identify the device\n @next:\tpointer to the next irqaction for shared interrupts\n @irq:\tinterrupt number\n @flags:\tflags (see IRQF_* above)\n @thread_fn:\tinterrupt handler function for threaded interrupts\n @thread:\tthread pointer for threaded interrupts\n @secondary:\tpointer to secondary irqaction (force threading)\n @thread_flags:\tflags related to @thread\n @thread_mask:\tbitmask for keeping track of @thread activity\n @dir:\tpointer to the proc/irq/NN/name entry"]
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct irqaction {
    pub handler: irq_handler_t,
    pub dev_id: *mut ::std::os::raw::c_void,
    pub percpu_dev_id: *mut ::std::os::raw::c_void,
    pub next: *mut irqaction,
    pub thread_fn: irq_handler_t,
    pub thread: *mut task_struct,
    pub secondary: *mut irqaction,
    pub irq: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub thread_flags: ::std::os::raw::c_ulong,
    pub thread_mask: ::std::os::raw::c_ulong,
    pub name: *const ::std::os::raw::c_char,
    pub dir: *mut proc_dir_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of irqaction"][::std::mem::size_of::<irqaction>() - 128usize];
    ["Alignment of irqaction"][::std::mem::align_of::<irqaction>() - 64usize];
    ["Offset of field: irqaction::handler"][::std::mem::offset_of!(irqaction, handler) - 0usize];
    ["Offset of field: irqaction::dev_id"][::std::mem::offset_of!(irqaction, dev_id) - 8usize];
    ["Offset of field: irqaction::percpu_dev_id"]
        [::std::mem::offset_of!(irqaction, percpu_dev_id) - 16usize];
    ["Offset of field: irqaction::next"][::std::mem::offset_of!(irqaction, next) - 24usize];
    ["Offset of field: irqaction::thread_fn"]
        [::std::mem::offset_of!(irqaction, thread_fn) - 32usize];
    ["Offset of field: irqaction::thread"][::std::mem::offset_of!(irqaction, thread) - 40usize];
    ["Offset of field: irqaction::secondary"]
        [::std::mem::offset_of!(irqaction, secondary) - 48usize];
    ["Offset of field: irqaction::irq"][::std::mem::offset_of!(irqaction, irq) - 56usize];
    ["Offset of field: irqaction::flags"][::std::mem::offset_of!(irqaction, flags) - 60usize];
    ["Offset of field: irqaction::thread_flags"]
        [::std::mem::offset_of!(irqaction, thread_flags) - 64usize];
    ["Offset of field: irqaction::thread_mask"]
        [::std::mem::offset_of!(irqaction, thread_mask) - 72usize];
    ["Offset of field: irqaction::name"][::std::mem::offset_of!(irqaction, name) - 80usize];
    ["Offset of field: irqaction::dir"][::std::mem::offset_of!(irqaction, dir) - 88usize];
};
extern "C" {
    pub fn no_action(
        cpl: ::std::os::raw::c_int,
        dev_id: *mut ::std::os::raw::c_void,
    ) -> irqreturn_t;
}
extern "C" {
    pub fn request_threaded_irq(
        irq: ::std::os::raw::c_uint,
        handler: irq_handler_t,
        thread_fn: irq_handler_t,
        flags: ::std::os::raw::c_ulong,
        name: *const ::std::os::raw::c_char,
        dev: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn request_any_context_irq(
        irq: ::std::os::raw::c_uint,
        handler: irq_handler_t,
        flags: ::std::os::raw::c_ulong,
        name: *const ::std::os::raw::c_char,
        dev_id: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __request_percpu_irq(
        irq: ::std::os::raw::c_uint,
        handler: irq_handler_t,
        flags: ::std::os::raw::c_ulong,
        devname: *const ::std::os::raw::c_char,
        percpu_dev_id: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn request_nmi(
        irq: ::std::os::raw::c_uint,
        handler: irq_handler_t,
        flags: ::std::os::raw::c_ulong,
        name: *const ::std::os::raw::c_char,
        dev: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn request_percpu_nmi(
        irq: ::std::os::raw::c_uint,
        handler: irq_handler_t,
        devname: *const ::std::os::raw::c_char,
        dev: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_irq(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn free_percpu_irq(arg1: ::std::os::raw::c_uint, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free_nmi(
        irq: ::std::os::raw::c_uint,
        dev_id: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn free_percpu_nmi(irq: ::std::os::raw::c_uint, percpu_dev_id: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn devm_request_threaded_irq(
        dev: *mut device,
        irq: ::std::os::raw::c_uint,
        handler: irq_handler_t,
        thread_fn: irq_handler_t,
        irqflags: ::std::os::raw::c_ulong,
        devname: *const ::std::os::raw::c_char,
        dev_id: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devm_request_any_context_irq(
        dev: *mut device,
        irq: ::std::os::raw::c_uint,
        handler: irq_handler_t,
        irqflags: ::std::os::raw::c_ulong,
        devname: *const ::std::os::raw::c_char,
        dev_id: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devm_free_irq(
        dev: *mut device,
        irq: ::std::os::raw::c_uint,
        dev_id: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn irq_has_action(irq: ::std::os::raw::c_uint) -> bool_;
}
extern "C" {
    pub fn disable_irq_nosync(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn disable_hardirq(irq: ::std::os::raw::c_uint) -> bool_;
}
extern "C" {
    pub fn disable_irq(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn disable_percpu_irq(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn enable_irq(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn enable_percpu_irq(irq: ::std::os::raw::c_uint, type_: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn irq_percpu_is_enabled(irq: ::std::os::raw::c_uint) -> bool_;
}
extern "C" {
    pub fn irq_wake_thread(irq: ::std::os::raw::c_uint, dev_id: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_disable_irq_t {
    pub lock: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_disable_irq_t"][::std::mem::size_of::<class_disable_irq_t>() - 8usize];
    ["Alignment of class_disable_irq_t"][::std::mem::align_of::<class_disable_irq_t>() - 8usize];
    ["Offset of field: class_disable_irq_t::lock"]
        [::std::mem::offset_of!(class_disable_irq_t, lock) - 0usize];
};
extern "C" {
    pub fn disable_nmi_nosync(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn disable_percpu_nmi(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn enable_nmi(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn enable_percpu_nmi(irq: ::std::os::raw::c_uint, type_: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn prepare_percpu_nmi(irq: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teardown_percpu_nmi(irq: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn irq_inject_interrupt(irq: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn suspend_device_irqs();
}
extern "C" {
    pub fn resume_device_irqs();
}
extern "C" {
    pub fn rearm_wake_irq(irq: ::std::os::raw::c_uint);
}
#[doc = " struct irq_affinity_notify - context for notification of IRQ affinity changes\n @irq:\t\tInterrupt to which notification applies\n @kref:\t\tReference count, for internal use\n @work:\t\tWork item, for internal use\n @notify:\t\tFunction to be called on change.  This will be\n\t\t\tcalled in process context.\n @release:\t\tFunction to be called on release.  This will be\n\t\t\tcalled in process context.  Once registered, the\n\t\t\tstructure must only be freed when this function is\n\t\t\tcalled or later."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irq_affinity_notify {
    pub irq: ::std::os::raw::c_uint,
    pub kref: kref,
    pub work: work_struct,
    pub notify: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut irq_affinity_notify, mask: *const cpumask_t),
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(ref_: *mut kref)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of irq_affinity_notify"][::std::mem::size_of::<irq_affinity_notify>() - 56usize];
    ["Alignment of irq_affinity_notify"][::std::mem::align_of::<irq_affinity_notify>() - 8usize];
    ["Offset of field: irq_affinity_notify::irq"]
        [::std::mem::offset_of!(irq_affinity_notify, irq) - 0usize];
    ["Offset of field: irq_affinity_notify::kref"]
        [::std::mem::offset_of!(irq_affinity_notify, kref) - 4usize];
    ["Offset of field: irq_affinity_notify::work"]
        [::std::mem::offset_of!(irq_affinity_notify, work) - 8usize];
    ["Offset of field: irq_affinity_notify::notify"]
        [::std::mem::offset_of!(irq_affinity_notify, notify) - 40usize];
    ["Offset of field: irq_affinity_notify::release"]
        [::std::mem::offset_of!(irq_affinity_notify, release) - 48usize];
};
#[doc = " struct irq_affinity - Description for automatic irq affinity assignements\n @pre_vectors:\tDon't apply affinity to @pre_vectors at beginning of\n\t\t\tthe MSI(-X) vector space\n @post_vectors:\tDon't apply affinity to @post_vectors at end of\n\t\t\tthe MSI(-X) vector space\n @nr_sets:\t\tThe number of interrupt sets for which affinity\n\t\t\tspreading is required\n @set_size:\t\tArray holding the size of each interrupt set\n @calc_sets:\t\tCallback for calculating the number and size\n\t\t\tof interrupt sets\n @priv:\t\tPrivate data for usage by @calc_sets, usually a\n\t\t\tpointer to driver/device specific data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irq_affinity {
    pub pre_vectors: ::std::os::raw::c_uint,
    pub post_vectors: ::std::os::raw::c_uint,
    pub nr_sets: ::std::os::raw::c_uint,
    pub set_size: [::std::os::raw::c_uint; 4usize],
    pub calc_sets: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut irq_affinity, nvecs: ::std::os::raw::c_uint),
    >,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of irq_affinity"][::std::mem::size_of::<irq_affinity>() - 48usize];
    ["Alignment of irq_affinity"][::std::mem::align_of::<irq_affinity>() - 8usize];
    ["Offset of field: irq_affinity::pre_vectors"]
        [::std::mem::offset_of!(irq_affinity, pre_vectors) - 0usize];
    ["Offset of field: irq_affinity::post_vectors"]
        [::std::mem::offset_of!(irq_affinity, post_vectors) - 4usize];
    ["Offset of field: irq_affinity::nr_sets"]
        [::std::mem::offset_of!(irq_affinity, nr_sets) - 8usize];
    ["Offset of field: irq_affinity::set_size"]
        [::std::mem::offset_of!(irq_affinity, set_size) - 12usize];
    ["Offset of field: irq_affinity::calc_sets"]
        [::std::mem::offset_of!(irq_affinity, calc_sets) - 32usize];
    ["Offset of field: irq_affinity::priv_"][::std::mem::offset_of!(irq_affinity, priv_) - 40usize];
};
#[doc = " struct irq_affinity_desc - Interrupt affinity descriptor\n @mask:\tcpumask to hold the affinity assignment\n @is_managed: 1 if the interrupt is managed internally"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irq_affinity_desc {
    pub mask: cpumask,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of irq_affinity_desc"][::std::mem::size_of::<irq_affinity_desc>() - 1032usize];
    ["Alignment of irq_affinity_desc"][::std::mem::align_of::<irq_affinity_desc>() - 8usize];
    ["Offset of field: irq_affinity_desc::mask"]
        [::std::mem::offset_of!(irq_affinity_desc, mask) - 0usize];
};
impl irq_affinity_desc {
    #[inline]
    pub fn is_managed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_managed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_managed: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_managed: u32 = unsafe { ::std::mem::transmute(is_managed) };
            is_managed as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut irq_default_affinity: cpumask_var_t;
}
extern "C" {
    pub fn irq_set_affinity(
        irq: ::std::os::raw::c_uint,
        cpumask: *const cpumask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn irq_force_affinity(
        irq: ::std::os::raw::c_uint,
        cpumask: *const cpumask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn irq_can_set_affinity(irq: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn irq_select_affinity(irq: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __irq_apply_affinity_hint(
        irq: ::std::os::raw::c_uint,
        m: *const cpumask,
        setaffinity: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn irq_update_affinity_desc(
        irq: ::std::os::raw::c_uint,
        affinity: *mut irq_affinity_desc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn irq_set_affinity_notifier(
        irq: ::std::os::raw::c_uint,
        notify: *mut irq_affinity_notify,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn irq_create_affinity_masks(
        nvec: ::std::os::raw::c_uint,
        affd: *mut irq_affinity,
    ) -> *mut irq_affinity_desc;
}
extern "C" {
    pub fn irq_calc_affinity_vectors(
        minvec: ::std::os::raw::c_uint,
        maxvec: ::std::os::raw::c_uint,
        affd: *const irq_affinity,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn irq_set_irq_wake(
        irq: ::std::os::raw::c_uint,
        on: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const irqchip_irq_state_IRQCHIP_STATE_PENDING: irqchip_irq_state = 0;
pub const irqchip_irq_state_IRQCHIP_STATE_ACTIVE: irqchip_irq_state = 1;
pub const irqchip_irq_state_IRQCHIP_STATE_MASKED: irqchip_irq_state = 2;
pub const irqchip_irq_state_IRQCHIP_STATE_LINE_LEVEL: irqchip_irq_state = 3;
pub type irqchip_irq_state = ::std::os::raw::c_uint;
extern "C" {
    pub fn irq_get_irqchip_state(
        irq: ::std::os::raw::c_uint,
        which: irqchip_irq_state,
        state: *mut bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn irq_set_irqchip_state(
        irq: ::std::os::raw::c_uint,
        which: irqchip_irq_state,
        state: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut force_irqthreads_key: static_key_false;
}
pub const HI_SOFTIRQ: _bindgen_ty_14 = 0;
pub const TIMER_SOFTIRQ: _bindgen_ty_14 = 1;
pub const NET_TX_SOFTIRQ: _bindgen_ty_14 = 2;
pub const NET_RX_SOFTIRQ: _bindgen_ty_14 = 3;
pub const BLOCK_SOFTIRQ: _bindgen_ty_14 = 4;
pub const IRQ_POLL_SOFTIRQ: _bindgen_ty_14 = 5;
pub const TASKLET_SOFTIRQ: _bindgen_ty_14 = 6;
pub const SCHED_SOFTIRQ: _bindgen_ty_14 = 7;
pub const HRTIMER_SOFTIRQ: _bindgen_ty_14 = 8;
pub const RCU_SOFTIRQ: _bindgen_ty_14 = 9;
pub const NR_SOFTIRQS: _bindgen_ty_14 = 10;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
extern "C" {
    pub static softirq_to_name: [*const ::std::os::raw::c_char; 10usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct softirq_action {
    pub action: ::std::option::Option<unsafe extern "C" fn(arg1: *mut softirq_action)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of softirq_action"][::std::mem::size_of::<softirq_action>() - 8usize];
    ["Alignment of softirq_action"][::std::mem::align_of::<softirq_action>() - 8usize];
    ["Offset of field: softirq_action::action"]
        [::std::mem::offset_of!(softirq_action, action) - 0usize];
};
extern "C" {
    pub fn do_softirq();
}
extern "C" {
    pub fn __do_softirq();
}
extern "C" {
    pub fn open_softirq(
        nr: ::std::os::raw::c_int,
        action: ::std::option::Option<unsafe extern "C" fn(arg1: *mut softirq_action)>,
    );
}
extern "C" {
    pub fn softirq_init();
}
extern "C" {
    pub fn __raise_softirq_irqoff(nr: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn raise_softirq_irqoff(nr: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn raise_softirq(nr: ::std::os::raw::c_uint);
}
extern "C" {
    pub static mut ksoftirqd: *mut task_struct;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tasklet_struct {
    pub next: *mut tasklet_struct,
    pub state: ::std::os::raw::c_ulong,
    pub count: atomic_t,
    pub use_callback: bool_,
    pub __bindgen_anon_1: tasklet_struct__bindgen_ty_1,
    pub data: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tasklet_struct__bindgen_ty_1 {
    pub func: ::std::option::Option<unsafe extern "C" fn(data: ::std::os::raw::c_ulong)>,
    pub callback: ::std::option::Option<unsafe extern "C" fn(t: *mut tasklet_struct)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tasklet_struct__bindgen_ty_1"]
        [::std::mem::size_of::<tasklet_struct__bindgen_ty_1>() - 8usize];
    ["Alignment of tasklet_struct__bindgen_ty_1"]
        [::std::mem::align_of::<tasklet_struct__bindgen_ty_1>() - 8usize];
    ["Offset of field: tasklet_struct__bindgen_ty_1::func"]
        [::std::mem::offset_of!(tasklet_struct__bindgen_ty_1, func) - 0usize];
    ["Offset of field: tasklet_struct__bindgen_ty_1::callback"]
        [::std::mem::offset_of!(tasklet_struct__bindgen_ty_1, callback) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tasklet_struct"][::std::mem::size_of::<tasklet_struct>() - 40usize];
    ["Alignment of tasklet_struct"][::std::mem::align_of::<tasklet_struct>() - 8usize];
    ["Offset of field: tasklet_struct::next"]
        [::std::mem::offset_of!(tasklet_struct, next) - 0usize];
    ["Offset of field: tasklet_struct::state"]
        [::std::mem::offset_of!(tasklet_struct, state) - 8usize];
    ["Offset of field: tasklet_struct::count"]
        [::std::mem::offset_of!(tasklet_struct, count) - 16usize];
    ["Offset of field: tasklet_struct::use_callback"]
        [::std::mem::offset_of!(tasklet_struct, use_callback) - 20usize];
    ["Offset of field: tasklet_struct::data"]
        [::std::mem::offset_of!(tasklet_struct, data) - 32usize];
};
pub const TASKLET_STATE_SCHED: _bindgen_ty_15 = 0;
pub const TASKLET_STATE_RUN: _bindgen_ty_15 = 1;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
extern "C" {
    pub fn tasklet_unlock(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_unlock_wait(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_unlock_spin_wait(t: *mut tasklet_struct);
}
extern "C" {
    pub fn __tasklet_schedule(t: *mut tasklet_struct);
}
extern "C" {
    pub fn __tasklet_hi_schedule(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_kill(t: *mut tasklet_struct);
}
extern "C" {
    pub fn tasklet_init(
        t: *mut tasklet_struct,
        func: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong)>,
        data: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn tasklet_setup(
        t: *mut tasklet_struct,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: *mut tasklet_struct)>,
    );
}
extern "C" {
    pub fn probe_irq_on() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn probe_irq_off(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn probe_irq_mask(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn init_irq_proc();
}
extern "C" {
    pub fn show_interrupts(
        p: *mut seq_file,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_show_interrupts(
        p: *mut seq_file,
        prec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn early_irq_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_probe_nr_irqs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_early_irq_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut printk_ratelimit_state: ratelimit_state;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_printk_info {
    pub subsystem: [::std::os::raw::c_char; 16usize],
    pub device: [::std::os::raw::c_char; 48usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_printk_info"][::std::mem::size_of::<dev_printk_info>() - 64usize];
    ["Alignment of dev_printk_info"][::std::mem::align_of::<dev_printk_info>() - 1usize];
    ["Offset of field: dev_printk_info::subsystem"]
        [::std::mem::offset_of!(dev_printk_info, subsystem) - 0usize];
    ["Offset of field: dev_printk_info::device"]
        [::std::mem::offset_of!(dev_printk_info, device) - 16usize];
};
extern "C" {
    pub fn dev_vprintk_emit(
        level: ::std::os::raw::c_int,
        dev: *const device,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dev_printk_emit(
        level: ::std::os::raw::c_int,
        dev: *const device,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dev_printk(
        level: *const ::std::os::raw::c_char,
        dev: *const device,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn _dev_emerg(dev: *const device, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _dev_alert(dev: *const device, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _dev_crit(dev: *const device, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _dev_err(dev: *const device, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _dev_warn(dev: *const device, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _dev_notice(dev: *const device, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _dev_info(dev: *const device, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dev_err_probe(
        dev: *const device,
        err: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_nulls_head {
    pub first: *mut hlist_nulls_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_nulls_head"][::std::mem::size_of::<hlist_nulls_head>() - 8usize];
    ["Alignment of hlist_nulls_head"][::std::mem::align_of::<hlist_nulls_head>() - 8usize];
    ["Offset of field: hlist_nulls_head::first"]
        [::std::mem::offset_of!(hlist_nulls_head, first) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_nulls_node {
    pub next: *mut hlist_nulls_node,
    pub pprev: *mut *mut hlist_nulls_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_nulls_node"][::std::mem::size_of::<hlist_nulls_node>() - 16usize];
    ["Alignment of hlist_nulls_node"][::std::mem::align_of::<hlist_nulls_node>() - 8usize];
    ["Offset of field: hlist_nulls_node::next"]
        [::std::mem::offset_of!(hlist_nulls_node, next) - 0usize];
    ["Offset of field: hlist_nulls_node::pprev"]
        [::std::mem::offset_of!(hlist_nulls_node, pprev) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct rand_pool_info {
    pub entropy_count: ::std::os::raw::c_int,
    pub buf_size: ::std::os::raw::c_int,
    pub buf: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rand_pool_info"][::std::mem::size_of::<rand_pool_info>() - 8usize];
    ["Alignment of rand_pool_info"][::std::mem::align_of::<rand_pool_info>() - 4usize];
    ["Offset of field: rand_pool_info::entropy_count"]
        [::std::mem::offset_of!(rand_pool_info, entropy_count) - 0usize];
    ["Offset of field: rand_pool_info::buf_size"]
        [::std::mem::offset_of!(rand_pool_info, buf_size) - 4usize];
    ["Offset of field: rand_pool_info::buf"][::std::mem::offset_of!(rand_pool_info, buf) - 8usize];
};
#[doc = " struct vgetrandom_opaque_params - arguments for allocating memory for vgetrandom\n\n @size_per_opaque_state:\tSize of each state that is to be passed to vgetrandom().\n @mmap_prot:\t\t\tValue of the prot argument in mmap(2).\n @mmap_flags:\t\t\tValue of the flags argument in mmap(2).\n @reserved:\t\t\tReserved for future use."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgetrandom_opaque_params {
    pub size_of_opaque_state: __u32,
    pub mmap_prot: __u32,
    pub mmap_flags: __u32,
    pub reserved: [__u32; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vgetrandom_opaque_params"]
        [::std::mem::size_of::<vgetrandom_opaque_params>() - 64usize];
    ["Alignment of vgetrandom_opaque_params"]
        [::std::mem::align_of::<vgetrandom_opaque_params>() - 4usize];
    ["Offset of field: vgetrandom_opaque_params::size_of_opaque_state"]
        [::std::mem::offset_of!(vgetrandom_opaque_params, size_of_opaque_state) - 0usize];
    ["Offset of field: vgetrandom_opaque_params::mmap_prot"]
        [::std::mem::offset_of!(vgetrandom_opaque_params, mmap_prot) - 4usize];
    ["Offset of field: vgetrandom_opaque_params::mmap_flags"]
        [::std::mem::offset_of!(vgetrandom_opaque_params, mmap_flags) - 8usize];
    ["Offset of field: vgetrandom_opaque_params::reserved"]
        [::std::mem::offset_of!(vgetrandom_opaque_params, reserved) - 12usize];
};
extern "C" {
    pub fn add_device_randomness(buf: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn add_bootloader_randomness(buf: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn add_input_randomness(
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn add_interrupt_randomness(irq: ::std::os::raw::c_int);
}
extern "C" {
    pub fn add_hwgenerator_randomness(
        buf: *const ::std::os::raw::c_void,
        len: usize,
        entropy: usize,
        sleep_after: bool_,
    );
}
extern "C" {
    pub fn add_vmfork_randomness(unique_vm_id: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn register_random_vmfork_notifier(nb: *mut notifier_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unregister_random_vmfork_notifier(nb: *mut notifier_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_random_bytes(buf: *mut ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn get_random_u8() -> u8_;
}
extern "C" {
    pub fn get_random_u16() -> u16_;
}
extern "C" {
    pub fn get_random_u32() -> u32_;
}
extern "C" {
    pub fn get_random_u64() -> u64_;
}
extern "C" {
    pub fn __get_random_u32_below(ceil: u32_) -> u32_;
}
extern "C" {
    pub fn random_init_early(command_line: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn random_init();
}
extern "C" {
    pub fn rng_is_initialized() -> bool_;
}
extern "C" {
    pub fn wait_for_random_bytes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execute_with_initialized_rng(nb: *mut notifier_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __do_once_start(done: *mut bool_, flags: *mut ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn __do_once_done(
        done: *mut bool_,
        once_key: *mut static_key_true,
        flags: *mut ::std::os::raw::c_ulong,
        mod_: *mut module,
    );
}
extern "C" {
    pub fn __do_once_sleepable_start(done: *mut bool_) -> bool_;
}
extern "C" {
    pub fn __do_once_sleepable_done(
        done: *mut bool_,
        once_key: *mut static_key_true,
        mod_: *mut module,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rnd_state {
    pub s1: __u32,
    pub s2: __u32,
    pub s3: __u32,
    pub s4: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rnd_state"][::std::mem::size_of::<rnd_state>() - 16usize];
    ["Alignment of rnd_state"][::std::mem::align_of::<rnd_state>() - 4usize];
    ["Offset of field: rnd_state::s1"][::std::mem::offset_of!(rnd_state, s1) - 0usize];
    ["Offset of field: rnd_state::s2"][::std::mem::offset_of!(rnd_state, s2) - 4usize];
    ["Offset of field: rnd_state::s3"][::std::mem::offset_of!(rnd_state, s3) - 8usize];
    ["Offset of field: rnd_state::s4"][::std::mem::offset_of!(rnd_state, s4) - 12usize];
};
extern "C" {
    pub fn prandom_u32_state(state: *mut rnd_state) -> u32_;
}
extern "C" {
    pub fn prandom_bytes_state(
        state: *mut rnd_state,
        buf: *mut ::std::os::raw::c_void,
        nbytes: usize,
    );
}
extern "C" {
    pub fn prandom_seed_full_state(pcpu_state: *mut rnd_state);
}
extern "C" {
    pub fn random_prepare_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random_online_cpu(cpu: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static random_fops: file_operations;
}
extern "C" {
    pub static urandom_fops: file_operations;
}
extern "C" {
    pub static mut _unused_nodemask_arg_: nodemask_t;
}
pub const node_states_N_POSSIBLE: node_states = 0;
pub const node_states_N_ONLINE: node_states = 1;
pub const node_states_N_NORMAL_MEMORY: node_states = 2;
pub const node_states_N_HIGH_MEMORY: node_states = 2;
pub const node_states_N_MEMORY: node_states = 3;
pub const node_states_N_CPU: node_states = 4;
pub const node_states_N_GENERIC_INITIATOR: node_states = 5;
pub const node_states_NR_NODE_STATES: node_states = 6;
pub type node_states = ::std::os::raw::c_uint;
extern "C" {
    pub static mut node_states: [nodemask_t; 6usize];
}
extern "C" {
    pub static mut nr_node_ids: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut nr_online_nodes: ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nodemask_scratch {
    pub mask1: nodemask_t,
    pub mask2: nodemask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nodemask_scratch"][::std::mem::size_of::<nodemask_scratch>() - 256usize];
    ["Alignment of nodemask_scratch"][::std::mem::align_of::<nodemask_scratch>() - 8usize];
    ["Offset of field: nodemask_scratch::mask1"]
        [::std::mem::offset_of!(nodemask_scratch, mask1) - 0usize];
    ["Offset of field: nodemask_scratch::mask2"]
        [::std::mem::offset_of!(nodemask_scratch, mask2) - 128usize];
};
pub const pageblock_bits_PB_migrate: pageblock_bits = 0;
pub const pageblock_bits_PB_migrate_end: pageblock_bits = 2;
pub const pageblock_bits_PB_migrate_skip: pageblock_bits = 3;
pub const pageblock_bits_NR_PAGEBLOCK_BITS: pageblock_bits = 4;
pub type pageblock_bits = ::std::os::raw::c_uint;
extern "C" {
    pub fn get_pfnblock_flags_mask(
        page: *const page,
        pfn: ::std::os::raw::c_ulong,
        mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn set_pfnblock_flags_mask(
        page: *mut page,
        flags: ::std::os::raw::c_ulong,
        pfn: ::std::os::raw::c_ulong,
        mask: ::std::os::raw::c_ulong,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_metadata {
    pub end: ::std::os::raw::c_uchar,
    pub gap: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_metadata"][::std::mem::size_of::<maple_metadata>() - 2usize];
    ["Alignment of maple_metadata"][::std::mem::align_of::<maple_metadata>() - 1usize];
    ["Offset of field: maple_metadata::end"][::std::mem::offset_of!(maple_metadata, end) - 0usize];
    ["Offset of field: maple_metadata::gap"][::std::mem::offset_of!(maple_metadata, gap) - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_range_64 {
    pub parent: *mut maple_pnode,
    pub pivot: [::std::os::raw::c_ulong; 15usize],
    pub __bindgen_anon_1: maple_range_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_range_64__bindgen_ty_1 {
    pub slot: [*mut ::std::os::raw::c_void; 16usize],
    pub __bindgen_anon_1: maple_range_64__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_range_64__bindgen_ty_1__bindgen_ty_1 {
    pub pad: [*mut ::std::os::raw::c_void; 15usize],
    pub meta: maple_metadata,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_range_64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<maple_range_64__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of maple_range_64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<maple_range_64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: maple_range_64__bindgen_ty_1__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(maple_range_64__bindgen_ty_1__bindgen_ty_1, pad) - 0usize];
    ["Offset of field: maple_range_64__bindgen_ty_1__bindgen_ty_1::meta"]
        [::std::mem::offset_of!(maple_range_64__bindgen_ty_1__bindgen_ty_1, meta) - 120usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_range_64__bindgen_ty_1"]
        [::std::mem::size_of::<maple_range_64__bindgen_ty_1>() - 128usize];
    ["Alignment of maple_range_64__bindgen_ty_1"]
        [::std::mem::align_of::<maple_range_64__bindgen_ty_1>() - 8usize];
    ["Offset of field: maple_range_64__bindgen_ty_1::slot"]
        [::std::mem::offset_of!(maple_range_64__bindgen_ty_1, slot) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_range_64"][::std::mem::size_of::<maple_range_64>() - 256usize];
    ["Alignment of maple_range_64"][::std::mem::align_of::<maple_range_64>() - 8usize];
    ["Offset of field: maple_range_64::parent"]
        [::std::mem::offset_of!(maple_range_64, parent) - 0usize];
    ["Offset of field: maple_range_64::pivot"]
        [::std::mem::offset_of!(maple_range_64, pivot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_arange_64 {
    pub parent: *mut maple_pnode,
    pub pivot: [::std::os::raw::c_ulong; 9usize],
    pub slot: [*mut ::std::os::raw::c_void; 10usize],
    pub gap: [::std::os::raw::c_ulong; 10usize],
    pub meta: maple_metadata,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_arange_64"][::std::mem::size_of::<maple_arange_64>() - 248usize];
    ["Alignment of maple_arange_64"][::std::mem::align_of::<maple_arange_64>() - 8usize];
    ["Offset of field: maple_arange_64::parent"]
        [::std::mem::offset_of!(maple_arange_64, parent) - 0usize];
    ["Offset of field: maple_arange_64::pivot"]
        [::std::mem::offset_of!(maple_arange_64, pivot) - 8usize];
    ["Offset of field: maple_arange_64::slot"]
        [::std::mem::offset_of!(maple_arange_64, slot) - 80usize];
    ["Offset of field: maple_arange_64::gap"]
        [::std::mem::offset_of!(maple_arange_64, gap) - 160usize];
    ["Offset of field: maple_arange_64::meta"]
        [::std::mem::offset_of!(maple_arange_64, meta) - 240usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_alloc {
    pub total: ::std::os::raw::c_ulong,
    pub node_count: ::std::os::raw::c_uchar,
    pub request_count: ::std::os::raw::c_uint,
    pub slot: [*mut maple_alloc; 30usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_alloc"][::std::mem::size_of::<maple_alloc>() - 256usize];
    ["Alignment of maple_alloc"][::std::mem::align_of::<maple_alloc>() - 8usize];
    ["Offset of field: maple_alloc::total"][::std::mem::offset_of!(maple_alloc, total) - 0usize];
    ["Offset of field: maple_alloc::node_count"]
        [::std::mem::offset_of!(maple_alloc, node_count) - 8usize];
    ["Offset of field: maple_alloc::request_count"]
        [::std::mem::offset_of!(maple_alloc, request_count) - 12usize];
    ["Offset of field: maple_alloc::slot"][::std::mem::offset_of!(maple_alloc, slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_topiary {
    pub parent: *mut maple_pnode,
    pub next: *mut maple_enode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_topiary"][::std::mem::size_of::<maple_topiary>() - 16usize];
    ["Alignment of maple_topiary"][::std::mem::align_of::<maple_topiary>() - 8usize];
    ["Offset of field: maple_topiary::parent"]
        [::std::mem::offset_of!(maple_topiary, parent) - 0usize];
    ["Offset of field: maple_topiary::next"][::std::mem::offset_of!(maple_topiary, next) - 8usize];
};
pub const maple_type_maple_dense: maple_type = 0;
pub const maple_type_maple_leaf_64: maple_type = 1;
pub const maple_type_maple_range_64: maple_type = 2;
pub const maple_type_maple_arange_64: maple_type = 3;
pub type maple_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockdep_map_p {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockdep_map_p"][::std::mem::size_of::<lockdep_map_p>() - 0usize];
    ["Alignment of lockdep_map_p"][::std::mem::align_of::<lockdep_map_p>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_tree {
    pub __bindgen_anon_1: maple_tree__bindgen_ty_1,
    pub ma_flags: ::std::os::raw::c_uint,
    pub ma_root: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_tree__bindgen_ty_1 {
    pub ma_lock: spinlock_t,
    pub ma_external_lock: lockdep_map_p,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_tree__bindgen_ty_1"]
        [::std::mem::size_of::<maple_tree__bindgen_ty_1>() - 4usize];
    ["Alignment of maple_tree__bindgen_ty_1"]
        [::std::mem::align_of::<maple_tree__bindgen_ty_1>() - 4usize];
    ["Offset of field: maple_tree__bindgen_ty_1::ma_lock"]
        [::std::mem::offset_of!(maple_tree__bindgen_ty_1, ma_lock) - 0usize];
    ["Offset of field: maple_tree__bindgen_ty_1::ma_external_lock"]
        [::std::mem::offset_of!(maple_tree__bindgen_ty_1, ma_external_lock) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_tree"][::std::mem::size_of::<maple_tree>() - 16usize];
    ["Alignment of maple_tree"][::std::mem::align_of::<maple_tree>() - 8usize];
    ["Offset of field: maple_tree::ma_flags"]
        [::std::mem::offset_of!(maple_tree, ma_flags) - 4usize];
    ["Offset of field: maple_tree::ma_root"][::std::mem::offset_of!(maple_tree, ma_root) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_node {
    pub __bindgen_anon_1: maple_node__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_node__bindgen_ty_1 {
    pub __bindgen_anon_1: maple_node__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: maple_node__bindgen_ty_1__bindgen_ty_2,
    pub mr64: maple_range_64,
    pub ma64: maple_arange_64,
    pub alloc: maple_alloc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_node__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut maple_pnode,
    pub slot: [*mut ::std::os::raw::c_void; 31usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_node__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<maple_node__bindgen_ty_1__bindgen_ty_1>() - 256usize];
    ["Alignment of maple_node__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<maple_node__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_1::parent"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_1, parent) - 0usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_1::slot"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_1, slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_node__bindgen_ty_1__bindgen_ty_2 {
    pub pad: *mut ::std::os::raw::c_void,
    pub rcu: callback_head,
    pub piv_parent: *mut maple_enode,
    pub parent_slot: ::std::os::raw::c_uchar,
    pub type_: maple_type,
    pub slot_len: ::std::os::raw::c_uchar,
    pub ma_flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_node__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<maple_node__bindgen_ty_1__bindgen_ty_2>() - 48usize];
    ["Alignment of maple_node__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<maple_node__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_2::pad"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_2, pad) - 0usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_2::rcu"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_2, rcu) - 8usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_2::piv_parent"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_2, piv_parent) - 24usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_2::parent_slot"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_2, parent_slot) - 32usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_2::type_"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_2, type_) - 36usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_2::slot_len"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_2, slot_len) - 40usize];
    ["Offset of field: maple_node__bindgen_ty_1__bindgen_ty_2::ma_flags"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1__bindgen_ty_2, ma_flags) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_node__bindgen_ty_1"]
        [::std::mem::size_of::<maple_node__bindgen_ty_1>() - 256usize];
    ["Alignment of maple_node__bindgen_ty_1"]
        [::std::mem::align_of::<maple_node__bindgen_ty_1>() - 8usize];
    ["Offset of field: maple_node__bindgen_ty_1::mr64"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1, mr64) - 0usize];
    ["Offset of field: maple_node__bindgen_ty_1::ma64"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1, ma64) - 0usize];
    ["Offset of field: maple_node__bindgen_ty_1::alloc"]
        [::std::mem::offset_of!(maple_node__bindgen_ty_1, alloc) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_node"][::std::mem::size_of::<maple_node>() - 256usize];
    ["Alignment of maple_node"][::std::mem::align_of::<maple_node>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_topiary {
    pub head: *mut maple_enode,
    pub tail: *mut maple_enode,
    pub mtree: *mut maple_tree,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_topiary"][::std::mem::size_of::<ma_topiary>() - 24usize];
    ["Alignment of ma_topiary"][::std::mem::align_of::<ma_topiary>() - 8usize];
    ["Offset of field: ma_topiary::head"][::std::mem::offset_of!(ma_topiary, head) - 0usize];
    ["Offset of field: ma_topiary::tail"][::std::mem::offset_of!(ma_topiary, tail) - 8usize];
    ["Offset of field: ma_topiary::mtree"][::std::mem::offset_of!(ma_topiary, mtree) - 16usize];
};
extern "C" {
    pub fn mtree_load(
        mt: *mut maple_tree,
        index: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mtree_insert(
        mt: *mut maple_tree,
        index: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_insert_range(
        mt: *mut maple_tree,
        first: ::std::os::raw::c_ulong,
        last: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_alloc_range(
        mt: *mut maple_tree,
        startp: *mut ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
        min: ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_alloc_cyclic(
        mt: *mut maple_tree,
        startp: *mut ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        range_lo: ::std::os::raw::c_ulong,
        range_hi: ::std::os::raw::c_ulong,
        next: *mut ::std::os::raw::c_ulong,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_alloc_rrange(
        mt: *mut maple_tree,
        startp: *mut ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
        min: ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_store_range(
        mt: *mut maple_tree,
        first: ::std::os::raw::c_ulong,
        last: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_store(
        mt: *mut maple_tree,
        index: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_erase(
        mt: *mut maple_tree,
        index: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mtree_dup(
        mt: *mut maple_tree,
        new: *mut maple_tree,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mt_dup(mt: *mut maple_tree, new: *mut maple_tree, gfp: gfp_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mtree_destroy(mt: *mut maple_tree);
}
extern "C" {
    pub fn __mt_destroy(mt: *mut maple_tree);
}
pub const maple_status_ma_active: maple_status = 0;
pub const maple_status_ma_start: maple_status = 1;
pub const maple_status_ma_root: maple_status = 2;
pub const maple_status_ma_none: maple_status = 3;
pub const maple_status_ma_pause: maple_status = 4;
pub const maple_status_ma_overflow: maple_status = 5;
pub const maple_status_ma_underflow: maple_status = 6;
pub const maple_status_ma_error: maple_status = 7;
pub type maple_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_state {
    pub tree: *mut maple_tree,
    pub index: ::std::os::raw::c_ulong,
    pub last: ::std::os::raw::c_ulong,
    pub node: *mut maple_enode,
    pub min: ::std::os::raw::c_ulong,
    pub max: ::std::os::raw::c_ulong,
    pub alloc: *mut maple_alloc,
    pub status: maple_status,
    pub depth: ::std::os::raw::c_uchar,
    pub offset: ::std::os::raw::c_uchar,
    pub mas_flags: ::std::os::raw::c_uchar,
    pub end: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_state"][::std::mem::size_of::<ma_state>() - 64usize];
    ["Alignment of ma_state"][::std::mem::align_of::<ma_state>() - 8usize];
    ["Offset of field: ma_state::tree"][::std::mem::offset_of!(ma_state, tree) - 0usize];
    ["Offset of field: ma_state::index"][::std::mem::offset_of!(ma_state, index) - 8usize];
    ["Offset of field: ma_state::last"][::std::mem::offset_of!(ma_state, last) - 16usize];
    ["Offset of field: ma_state::node"][::std::mem::offset_of!(ma_state, node) - 24usize];
    ["Offset of field: ma_state::min"][::std::mem::offset_of!(ma_state, min) - 32usize];
    ["Offset of field: ma_state::max"][::std::mem::offset_of!(ma_state, max) - 40usize];
    ["Offset of field: ma_state::alloc"][::std::mem::offset_of!(ma_state, alloc) - 48usize];
    ["Offset of field: ma_state::status"][::std::mem::offset_of!(ma_state, status) - 56usize];
    ["Offset of field: ma_state::depth"][::std::mem::offset_of!(ma_state, depth) - 60usize];
    ["Offset of field: ma_state::offset"][::std::mem::offset_of!(ma_state, offset) - 61usize];
    ["Offset of field: ma_state::mas_flags"][::std::mem::offset_of!(ma_state, mas_flags) - 62usize];
    ["Offset of field: ma_state::end"][::std::mem::offset_of!(ma_state, end) - 63usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_wr_state {
    pub mas: *mut ma_state,
    pub node: *mut maple_node,
    pub r_min: ::std::os::raw::c_ulong,
    pub r_max: ::std::os::raw::c_ulong,
    pub type_: maple_type,
    pub offset_end: ::std::os::raw::c_uchar,
    pub pivots: *mut ::std::os::raw::c_ulong,
    pub end_piv: ::std::os::raw::c_ulong,
    pub slots: *mut *mut ::std::os::raw::c_void,
    pub entry: *mut ::std::os::raw::c_void,
    pub content: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_wr_state"][::std::mem::size_of::<ma_wr_state>() - 80usize];
    ["Alignment of ma_wr_state"][::std::mem::align_of::<ma_wr_state>() - 8usize];
    ["Offset of field: ma_wr_state::mas"][::std::mem::offset_of!(ma_wr_state, mas) - 0usize];
    ["Offset of field: ma_wr_state::node"][::std::mem::offset_of!(ma_wr_state, node) - 8usize];
    ["Offset of field: ma_wr_state::r_min"][::std::mem::offset_of!(ma_wr_state, r_min) - 16usize];
    ["Offset of field: ma_wr_state::r_max"][::std::mem::offset_of!(ma_wr_state, r_max) - 24usize];
    ["Offset of field: ma_wr_state::type_"][::std::mem::offset_of!(ma_wr_state, type_) - 32usize];
    ["Offset of field: ma_wr_state::offset_end"]
        [::std::mem::offset_of!(ma_wr_state, offset_end) - 36usize];
    ["Offset of field: ma_wr_state::pivots"][::std::mem::offset_of!(ma_wr_state, pivots) - 40usize];
    ["Offset of field: ma_wr_state::end_piv"]
        [::std::mem::offset_of!(ma_wr_state, end_piv) - 48usize];
    ["Offset of field: ma_wr_state::slots"][::std::mem::offset_of!(ma_wr_state, slots) - 56usize];
    ["Offset of field: ma_wr_state::entry"][::std::mem::offset_of!(ma_wr_state, entry) - 64usize];
    ["Offset of field: ma_wr_state::content"]
        [::std::mem::offset_of!(ma_wr_state, content) - 72usize];
};
extern "C" {
    pub fn mas_walk(mas: *mut ma_state) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_store(
        mas: *mut ma_state,
        entry: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_erase(mas: *mut ma_state) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_store_gfp(
        mas: *mut ma_state,
        entry: *mut ::std::os::raw::c_void,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mas_store_prealloc(mas: *mut ma_state, entry: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mas_find(
        mas: *mut ma_state,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_find_range(
        mas: *mut ma_state,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_find_rev(
        mas: *mut ma_state,
        min: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_find_range_rev(
        mas: *mut ma_state,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_preallocate(
        mas: *mut ma_state,
        entry: *mut ::std::os::raw::c_void,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mas_alloc_cyclic(
        mas: *mut ma_state,
        startp: *mut ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        range_lo: ::std::os::raw::c_ulong,
        range_hi: ::std::os::raw::c_ulong,
        next: *mut ::std::os::raw::c_ulong,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mas_nomem(mas: *mut ma_state, gfp: gfp_t) -> bool_;
}
extern "C" {
    pub fn mas_pause(mas: *mut ma_state);
}
extern "C" {
    pub fn maple_tree_init();
}
extern "C" {
    pub fn mas_destroy(mas: *mut ma_state);
}
extern "C" {
    pub fn mas_expected_entries(
        mas: *mut ma_state,
        nr_entries: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mas_prev(
        mas: *mut ma_state,
        min: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_prev_range(
        mas: *mut ma_state,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_next(
        mas: *mut ma_state,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_next_range(
        mas: *mut ma_state,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mas_empty_area(
        mas: *mut ma_state,
        min: ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mas_empty_area_rev(
        mas: *mut ma_state,
        min: ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mt_find(
        mt: *mut maple_tree,
        index: *mut ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mt_find_after(
        mt: *mut maple_tree,
        index: *mut ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mt_prev(
        mt: *mut maple_tree,
        index: ::std::os::raw::c_ulong,
        min: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mt_next(
        mt: *mut maple_tree,
        index: ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
pub const uprobe_filter_ctx_UPROBE_FILTER_REGISTER: uprobe_filter_ctx = 0;
pub const uprobe_filter_ctx_UPROBE_FILTER_UNREGISTER: uprobe_filter_ctx = 1;
pub const uprobe_filter_ctx_UPROBE_FILTER_MMAP: uprobe_filter_ctx = 2;
pub type uprobe_filter_ctx = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobe_consumer {
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut uprobe_consumer,
            regs: *mut pt_regs,
        ) -> ::std::os::raw::c_int,
    >,
    pub ret_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut uprobe_consumer,
            func: ::std::os::raw::c_ulong,
            regs: *mut pt_regs,
        ) -> ::std::os::raw::c_int,
    >,
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut uprobe_consumer,
            ctx: uprobe_filter_ctx,
            mm: *mut mm_struct,
        ) -> bool_,
    >,
    pub next: *mut uprobe_consumer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_consumer"][::std::mem::size_of::<uprobe_consumer>() - 32usize];
    ["Alignment of uprobe_consumer"][::std::mem::align_of::<uprobe_consumer>() - 8usize];
    ["Offset of field: uprobe_consumer::handler"]
        [::std::mem::offset_of!(uprobe_consumer, handler) - 0usize];
    ["Offset of field: uprobe_consumer::ret_handler"]
        [::std::mem::offset_of!(uprobe_consumer, ret_handler) - 8usize];
    ["Offset of field: uprobe_consumer::filter"]
        [::std::mem::offset_of!(uprobe_consumer, filter) - 16usize];
    ["Offset of field: uprobe_consumer::next"]
        [::std::mem::offset_of!(uprobe_consumer, next) - 24usize];
};
pub type uprobe_opcode_t = u8_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobe_xol_ops {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arch_uprobe {
    pub __bindgen_anon_1: arch_uprobe__bindgen_ty_1,
    pub ops: *const uprobe_xol_ops,
    pub __bindgen_anon_2: arch_uprobe__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arch_uprobe__bindgen_ty_1 {
    pub insn: [u8_; 16usize],
    pub ixol: [u8_; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe__bindgen_ty_1"]
        [::std::mem::size_of::<arch_uprobe__bindgen_ty_1>() - 16usize];
    ["Alignment of arch_uprobe__bindgen_ty_1"]
        [::std::mem::align_of::<arch_uprobe__bindgen_ty_1>() - 1usize];
    ["Offset of field: arch_uprobe__bindgen_ty_1::insn"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_1, insn) - 0usize];
    ["Offset of field: arch_uprobe__bindgen_ty_1::ixol"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_1, ixol) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union arch_uprobe__bindgen_ty_2 {
    pub branch: arch_uprobe__bindgen_ty_2__bindgen_ty_1,
    pub defparam: arch_uprobe__bindgen_ty_2__bindgen_ty_2,
    pub push: arch_uprobe__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_uprobe__bindgen_ty_2__bindgen_ty_1 {
    pub offs: s32,
    pub ilen: u8_,
    pub opc1: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<arch_uprobe__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of arch_uprobe__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<arch_uprobe__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2__bindgen_ty_1::offs"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2__bindgen_ty_1, offs) - 0usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2__bindgen_ty_1::ilen"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2__bindgen_ty_1, ilen) - 4usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2__bindgen_ty_1::opc1"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2__bindgen_ty_1, opc1) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_uprobe__bindgen_ty_2__bindgen_ty_2 {
    pub fixups: u8_,
    pub ilen: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<arch_uprobe__bindgen_ty_2__bindgen_ty_2>() - 2usize];
    ["Alignment of arch_uprobe__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<arch_uprobe__bindgen_ty_2__bindgen_ty_2>() - 1usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2__bindgen_ty_2::fixups"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2__bindgen_ty_2, fixups) - 0usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2__bindgen_ty_2::ilen"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2__bindgen_ty_2, ilen) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_uprobe__bindgen_ty_2__bindgen_ty_3 {
    pub reg_offset: u8_,
    pub ilen: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<arch_uprobe__bindgen_ty_2__bindgen_ty_3>() - 2usize];
    ["Alignment of arch_uprobe__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<arch_uprobe__bindgen_ty_2__bindgen_ty_3>() - 1usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2__bindgen_ty_3::reg_offset"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2__bindgen_ty_3, reg_offset) - 0usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2__bindgen_ty_3::ilen"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2__bindgen_ty_3, ilen) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe__bindgen_ty_2"]
        [::std::mem::size_of::<arch_uprobe__bindgen_ty_2>() - 8usize];
    ["Alignment of arch_uprobe__bindgen_ty_2"]
        [::std::mem::align_of::<arch_uprobe__bindgen_ty_2>() - 4usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2::branch"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2, branch) - 0usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2::defparam"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2, defparam) - 0usize];
    ["Offset of field: arch_uprobe__bindgen_ty_2::push"]
        [::std::mem::offset_of!(arch_uprobe__bindgen_ty_2, push) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe"][::std::mem::size_of::<arch_uprobe>() - 32usize];
    ["Alignment of arch_uprobe"][::std::mem::align_of::<arch_uprobe>() - 8usize];
    ["Offset of field: arch_uprobe::ops"][::std::mem::offset_of!(arch_uprobe, ops) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_uprobe_task {
    pub saved_scratch_register: ::std::os::raw::c_ulong,
    pub saved_trap_nr: ::std::os::raw::c_uint,
    pub saved_tf: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe_task"][::std::mem::size_of::<arch_uprobe_task>() - 16usize];
    ["Alignment of arch_uprobe_task"][::std::mem::align_of::<arch_uprobe_task>() - 8usize];
    ["Offset of field: arch_uprobe_task::saved_scratch_register"]
        [::std::mem::offset_of!(arch_uprobe_task, saved_scratch_register) - 0usize];
    ["Offset of field: arch_uprobe_task::saved_trap_nr"]
        [::std::mem::offset_of!(arch_uprobe_task, saved_trap_nr) - 8usize];
    ["Offset of field: arch_uprobe_task::saved_tf"]
        [::std::mem::offset_of!(arch_uprobe_task, saved_tf) - 12usize];
};
pub const uprobe_task_state_UTASK_RUNNING: uprobe_task_state = 0;
pub const uprobe_task_state_UTASK_SSTEP: uprobe_task_state = 1;
pub const uprobe_task_state_UTASK_SSTEP_ACK: uprobe_task_state = 2;
pub const uprobe_task_state_UTASK_SSTEP_TRAPPED: uprobe_task_state = 3;
pub type uprobe_task_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobe_task {
    pub state: uprobe_task_state,
    pub __bindgen_anon_1: uprobe_task__bindgen_ty_1,
    pub active_uprobe: *mut uprobe,
    pub xol_vaddr: ::std::os::raw::c_ulong,
    pub return_instances: *mut return_instance,
    pub depth: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uprobe_task__bindgen_ty_1 {
    pub __bindgen_anon_1: uprobe_task__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: uprobe_task__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobe_task__bindgen_ty_1__bindgen_ty_1 {
    pub autask: arch_uprobe_task,
    pub vaddr: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<uprobe_task__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of uprobe_task__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<uprobe_task__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_1::autask"]
        [::std::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_1, autask) - 0usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_1::vaddr"]
        [::std::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_1, vaddr) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobe_task__bindgen_ty_1__bindgen_ty_2 {
    pub dup_xol_work: callback_head,
    pub dup_xol_addr: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<uprobe_task__bindgen_ty_1__bindgen_ty_2>() - 24usize];
    ["Alignment of uprobe_task__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<uprobe_task__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_2::dup_xol_work"]
        [::std::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_2, dup_xol_work) - 0usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_2::dup_xol_addr"]
        [::std::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_2, dup_xol_addr) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task__bindgen_ty_1"]
        [::std::mem::size_of::<uprobe_task__bindgen_ty_1>() - 24usize];
    ["Alignment of uprobe_task__bindgen_ty_1"]
        [::std::mem::align_of::<uprobe_task__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task"][::std::mem::size_of::<uprobe_task>() - 64usize];
    ["Alignment of uprobe_task"][::std::mem::align_of::<uprobe_task>() - 8usize];
    ["Offset of field: uprobe_task::state"][::std::mem::offset_of!(uprobe_task, state) - 0usize];
    ["Offset of field: uprobe_task::active_uprobe"]
        [::std::mem::offset_of!(uprobe_task, active_uprobe) - 32usize];
    ["Offset of field: uprobe_task::xol_vaddr"]
        [::std::mem::offset_of!(uprobe_task, xol_vaddr) - 40usize];
    ["Offset of field: uprobe_task::return_instances"]
        [::std::mem::offset_of!(uprobe_task, return_instances) - 48usize];
    ["Offset of field: uprobe_task::depth"][::std::mem::offset_of!(uprobe_task, depth) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct return_instance {
    pub uprobe: *mut uprobe,
    pub func: ::std::os::raw::c_ulong,
    pub stack: ::std::os::raw::c_ulong,
    pub orig_ret_vaddr: ::std::os::raw::c_ulong,
    pub chained: bool_,
    pub next: *mut return_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of return_instance"][::std::mem::size_of::<return_instance>() - 48usize];
    ["Alignment of return_instance"][::std::mem::align_of::<return_instance>() - 8usize];
    ["Offset of field: return_instance::uprobe"]
        [::std::mem::offset_of!(return_instance, uprobe) - 0usize];
    ["Offset of field: return_instance::func"]
        [::std::mem::offset_of!(return_instance, func) - 8usize];
    ["Offset of field: return_instance::stack"]
        [::std::mem::offset_of!(return_instance, stack) - 16usize];
    ["Offset of field: return_instance::orig_ret_vaddr"]
        [::std::mem::offset_of!(return_instance, orig_ret_vaddr) - 24usize];
    ["Offset of field: return_instance::chained"]
        [::std::mem::offset_of!(return_instance, chained) - 32usize];
    ["Offset of field: return_instance::next"]
        [::std::mem::offset_of!(return_instance, next) - 40usize];
};
pub const rp_check_RP_CHECK_CALL: rp_check = 0;
pub const rp_check_RP_CHECK_CHAIN_CALL: rp_check = 1;
pub const rp_check_RP_CHECK_RET: rp_check = 2;
pub type rp_check = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xol_area {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobes_state {
    pub xol_area: *mut xol_area,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobes_state"][::std::mem::size_of::<uprobes_state>() - 8usize];
    ["Alignment of uprobes_state"][::std::mem::align_of::<uprobes_state>() - 8usize];
    ["Offset of field: uprobes_state::xol_area"]
        [::std::mem::offset_of!(uprobes_state, xol_area) - 0usize];
};
extern "C" {
    pub fn uprobes_init();
}
extern "C" {
    pub fn set_swbp(
        aup: *mut arch_uprobe,
        mm: *mut mm_struct,
        vaddr: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_orig_insn(
        aup: *mut arch_uprobe,
        mm: *mut mm_struct,
        vaddr: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_swbp_insn(insn: *mut uprobe_opcode_t) -> bool_;
}
extern "C" {
    pub fn is_trap_insn(insn: *mut uprobe_opcode_t) -> bool_;
}
extern "C" {
    pub fn uprobe_get_swbp_addr(regs: *mut pt_regs) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn uprobe_get_trap_addr(regs: *mut pt_regs) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn uprobe_write_opcode(
        auprobe: *mut arch_uprobe,
        mm: *mut mm_struct,
        vaddr: ::std::os::raw::c_ulong,
        arg1: uprobe_opcode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprobe_register(
        inode: *mut inode,
        offset: loff_t,
        uc: *mut uprobe_consumer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprobe_register_refctr(
        inode: *mut inode,
        offset: loff_t,
        ref_ctr_offset: loff_t,
        uc: *mut uprobe_consumer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprobe_apply(
        inode: *mut inode,
        offset: loff_t,
        uc: *mut uprobe_consumer,
        arg1: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprobe_unregister(inode: *mut inode, offset: loff_t, uc: *mut uprobe_consumer);
}
extern "C" {
    pub fn uprobe_mmap(vma: *mut vm_area_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprobe_munmap(
        vma: *mut vm_area_struct,
        start: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn uprobe_start_dup_mmap();
}
extern "C" {
    pub fn uprobe_end_dup_mmap();
}
extern "C" {
    pub fn uprobe_dup_mmap(oldmm: *mut mm_struct, newmm: *mut mm_struct);
}
extern "C" {
    pub fn uprobe_free_utask(t: *mut task_struct);
}
extern "C" {
    pub fn uprobe_copy_process(t: *mut task_struct, flags: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn uprobe_post_sstep_notifier(regs: *mut pt_regs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprobe_pre_sstep_notifier(regs: *mut pt_regs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprobe_notify_resume(regs: *mut pt_regs);
}
extern "C" {
    pub fn uprobe_deny_signal() -> bool_;
}
extern "C" {
    pub fn arch_uprobe_skip_sstep(aup: *mut arch_uprobe, regs: *mut pt_regs) -> bool_;
}
extern "C" {
    pub fn uprobe_clear_state(mm: *mut mm_struct);
}
extern "C" {
    pub fn arch_uprobe_analyze_insn(
        aup: *mut arch_uprobe,
        mm: *mut mm_struct,
        addr: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_uprobe_pre_xol(aup: *mut arch_uprobe, regs: *mut pt_regs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_uprobe_post_xol(aup: *mut arch_uprobe, regs: *mut pt_regs)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_uprobe_xol_was_trapped(tsk: *mut task_struct) -> bool_;
}
extern "C" {
    pub fn arch_uprobe_exception_notify(
        self_: *mut notifier_block,
        val: ::std::os::raw::c_ulong,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_uprobe_abort_xol(aup: *mut arch_uprobe, regs: *mut pt_regs);
}
extern "C" {
    pub fn arch_uretprobe_hijack_return_addr(
        trampoline_vaddr: ::std::os::raw::c_ulong,
        regs: *mut pt_regs,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn arch_uretprobe_is_alive(
        ret: *mut return_instance,
        ctx: rp_check,
        regs: *mut pt_regs,
    ) -> bool_;
}
extern "C" {
    pub fn arch_uprobe_ignore(aup: *mut arch_uprobe, regs: *mut pt_regs) -> bool_;
}
extern "C" {
    pub fn arch_uprobe_copy_ixol(
        page: *mut page,
        vaddr: ::std::os::raw::c_ulong,
        src: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn uprobe_handle_trampoline(regs: *mut pt_regs);
}
extern "C" {
    pub fn arch_uprobe_trampoline(
        psize: *mut ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn uprobe_get_trampoline_vaddr() -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_counter {
    pub lock: raw_spinlock_t,
    pub count: s64,
    pub list: list_head,
    pub counters: *mut s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of percpu_counter"][::std::mem::size_of::<percpu_counter>() - 40usize];
    ["Alignment of percpu_counter"][::std::mem::align_of::<percpu_counter>() - 8usize];
    ["Offset of field: percpu_counter::lock"]
        [::std::mem::offset_of!(percpu_counter, lock) - 0usize];
    ["Offset of field: percpu_counter::count"]
        [::std::mem::offset_of!(percpu_counter, count) - 8usize];
    ["Offset of field: percpu_counter::list"]
        [::std::mem::offset_of!(percpu_counter, list) - 16usize];
    ["Offset of field: percpu_counter::counters"]
        [::std::mem::offset_of!(percpu_counter, counters) - 32usize];
};
extern "C" {
    pub static mut percpu_counter_batch: ::std::os::raw::c_int;
}
extern "C" {
    pub fn __percpu_counter_init_many(
        fbc: *mut percpu_counter,
        amount: s64,
        gfp: gfp_t,
        nr_counters: u32_,
        key: *mut lock_class_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn percpu_counter_destroy_many(fbc: *mut percpu_counter, nr_counters: u32_);
}
extern "C" {
    pub fn percpu_counter_set(fbc: *mut percpu_counter, amount: s64);
}
extern "C" {
    pub fn percpu_counter_add_batch(fbc: *mut percpu_counter, amount: s64, batch: s32);
}
extern "C" {
    pub fn __percpu_counter_sum(fbc: *mut percpu_counter) -> s64;
}
extern "C" {
    pub fn __percpu_counter_compare(
        fbc: *mut percpu_counter,
        rhs: s64,
        batch: s32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __percpu_counter_limited_add(
        fbc: *mut percpu_counter,
        limit: s64,
        amount: s64,
        batch: s32,
    ) -> bool_;
}
extern "C" {
    pub fn percpu_counter_sync(fbc: *mut percpu_counter);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mm_context_t {
    pub ctx_id: u64_,
    pub tlb_gen: atomic64_t,
    pub ldt_usr_sem: rw_semaphore,
    pub ldt: *mut ldt_struct,
    pub flags: ::std::os::raw::c_ulong,
    pub lam_cr3_mask: ::std::os::raw::c_ulong,
    pub untag_mask: u64_,
    pub lock: mutex,
    pub vdso: *mut ::std::os::raw::c_void,
    pub vdso_image: *const vdso_image,
    pub perf_rdpmc_allowed: atomic_t,
    pub pkey_allocation_map: u16_,
    pub execute_only_pkey: s16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_context_t"][::std::mem::size_of::<mm_context_t>() - 144usize];
    ["Alignment of mm_context_t"][::std::mem::align_of::<mm_context_t>() - 8usize];
    ["Offset of field: mm_context_t::ctx_id"]
        [::std::mem::offset_of!(mm_context_t, ctx_id) - 0usize];
    ["Offset of field: mm_context_t::tlb_gen"]
        [::std::mem::offset_of!(mm_context_t, tlb_gen) - 8usize];
    ["Offset of field: mm_context_t::ldt_usr_sem"]
        [::std::mem::offset_of!(mm_context_t, ldt_usr_sem) - 16usize];
    ["Offset of field: mm_context_t::ldt"][::std::mem::offset_of!(mm_context_t, ldt) - 56usize];
    ["Offset of field: mm_context_t::flags"][::std::mem::offset_of!(mm_context_t, flags) - 64usize];
    ["Offset of field: mm_context_t::lam_cr3_mask"]
        [::std::mem::offset_of!(mm_context_t, lam_cr3_mask) - 72usize];
    ["Offset of field: mm_context_t::untag_mask"]
        [::std::mem::offset_of!(mm_context_t, untag_mask) - 80usize];
    ["Offset of field: mm_context_t::lock"][::std::mem::offset_of!(mm_context_t, lock) - 88usize];
    ["Offset of field: mm_context_t::vdso"][::std::mem::offset_of!(mm_context_t, vdso) - 120usize];
    ["Offset of field: mm_context_t::vdso_image"]
        [::std::mem::offset_of!(mm_context_t, vdso_image) - 128usize];
    ["Offset of field: mm_context_t::perf_rdpmc_allowed"]
        [::std::mem::offset_of!(mm_context_t, perf_rdpmc_allowed) - 136usize];
    ["Offset of field: mm_context_t::pkey_allocation_map"]
        [::std::mem::offset_of!(mm_context_t, pkey_allocation_map) - 140usize];
    ["Offset of field: mm_context_t::execute_only_pkey"]
        [::std::mem::offset_of!(mm_context_t, execute_only_pkey) - 142usize];
};
extern "C" {
    pub fn leave_mm();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_cgroup {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct page {
    pub flags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: page__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_2,
    pub _refcount: atomic_t,
    pub memcg_data: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: page__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: page__bindgen_ty_1__bindgen_ty_4,
    #[doc = " @rcu_head: You can use this to free a page by RCU."]
    pub callback_head: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub __bindgen_anon_2: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    #[doc = " @private: Mapping-private opaque data.\n Usually used for buffer_heads if PagePrivate.\n Used for swp_entry_t if PageSwapCache.\n Indicates order in the buddy system if PageBuddy."]
    pub private: ::std::os::raw::c_ulong,
}
#[doc = " @lru: Pageout list, eg. active_list protected by\n lruvec->lru_lock.  Sometimes used as a generic list\n by the page owner."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub buddy_list: list_head,
    pub pcp_list: list_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut ::std::os::raw::c_void,
    pub mlock_count: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::__filler"][::std::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        __filler
    )
        - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::mlock_count"] [:: std :: mem :: offset_of ! (page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , mlock_count) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::lru"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, lru) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::buddy_list"][::std::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        buddy_list
    ) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::pcp_list"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, pcp_list) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub index: ::std::os::raw::c_ulong,
    pub share: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::index"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2, index) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::share"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2, share) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<page__bindgen_ty_1__bindgen_ty_1>() - 40usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<page__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1::mapping"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1, mapping) - 16usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1::private"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1, private) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_2 {
    #[doc = " @pp_magic: magic value to avoid recycling non\n page_pool allocated pages."]
    pub pp_magic: ::std::os::raw::c_ulong,
    pub pp: *mut page_pool,
    pub _pp_mapping_pad: ::std::os::raw::c_ulong,
    pub dma_addr: ::std::os::raw::c_ulong,
    pub pp_ref_count: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<page__bindgen_ty_1__bindgen_ty_2>() - 40usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<page__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::pp_magic"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, pp_magic) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::pp"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, pp) - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::_pp_mapping_pad"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, _pp_mapping_pad) - 16usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::dma_addr"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, dma_addr) - 24usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::pp_ref_count"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, pp_ref_count) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_3 {
    pub compound_head: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<page__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<page__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_3::compound_head"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_3, compound_head) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_4 {
    #[doc = " @pgmap: Points to the hosting device page map."]
    pub pgmap: *mut dev_pagemap,
    pub zone_device_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<page__bindgen_ty_1__bindgen_ty_4>() - 16usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<page__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_4::pgmap"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_4, pgmap) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_4::zone_device_data"]
        [::std::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_4, zone_device_data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1"][::std::mem::size_of::<page__bindgen_ty_1>() - 40usize];
    ["Alignment of page__bindgen_ty_1"][::std::mem::align_of::<page__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1::callback_head"]
        [::std::mem::offset_of!(page__bindgen_ty_1, callback_head) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_2 {
    pub page_type: ::std::os::raw::c_uint,
    pub _mapcount: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_2"][::std::mem::size_of::<page__bindgen_ty_2>() - 4usize];
    ["Alignment of page__bindgen_ty_2"][::std::mem::align_of::<page__bindgen_ty_2>() - 4usize];
    ["Offset of field: page__bindgen_ty_2::page_type"]
        [::std::mem::offset_of!(page__bindgen_ty_2, page_type) - 0usize];
    ["Offset of field: page__bindgen_ty_2::_mapcount"]
        [::std::mem::offset_of!(page__bindgen_ty_2, _mapcount) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page"][::std::mem::size_of::<page>() - 64usize];
    ["Alignment of page"][::std::mem::align_of::<page>() - 16usize];
    ["Offset of field: page::flags"][::std::mem::offset_of!(page, flags) - 0usize];
    ["Offset of field: page::_refcount"][::std::mem::offset_of!(page, _refcount) - 52usize];
    ["Offset of field: page::memcg_data"][::std::mem::offset_of!(page, memcg_data) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct encoded_page {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swp_entry_t {
    pub val: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of swp_entry_t"][::std::mem::size_of::<swp_entry_t>() - 8usize];
    ["Alignment of swp_entry_t"][::std::mem::align_of::<swp_entry_t>() - 8usize];
    ["Offset of field: swp_entry_t::val"][::std::mem::offset_of!(swp_entry_t, val) - 0usize];
};
#[doc = " struct folio - Represents a contiguous set of bytes.\n @flags: Identical to the page flags.\n @lru: Least Recently Used list; tracks how recently this folio was used.\n @mlock_count: Number of times this folio has been pinned by mlock().\n @mapping: The file this page belongs to, or refers to the anon_vma for\n    anonymous memory.\n @index: Offset within the file, in units of pages.  For anonymous memory,\n    this is the index from the beginning of the mmap.\n @private: Filesystem per-folio data (see folio_attach_private()).\n @swap: Used for swp_entry_t if folio_test_swapcache().\n @_mapcount: Do not access this member directly.  Use folio_mapcount() to\n    find out how many times this folio is mapped by userspace.\n @_refcount: Do not access this member directly.  Use folio_ref_count()\n    to find how many references there are to this folio.\n @memcg_data: Memory Control Group data.\n @virtual: Virtual address in the kernel direct map.\n @_last_cpupid: IDs of last CPU and last process that accessed the folio.\n @_entire_mapcount: Do not use directly, call folio_entire_mapcount().\n @_large_mapcount: Do not use directly, call folio_mapcount().\n @_nr_pages_mapped: Do not use outside of rmap and debug code.\n @_pincount: Do not use directly, call folio_maybe_dma_pinned().\n @_folio_nr_pages: Do not use directly, call folio_nr_pages().\n @_hugetlb_subpool: Do not use directly, use accessor in hugetlb.h.\n @_hugetlb_cgroup: Do not use directly, use accessor in hugetlb_cgroup.h.\n @_hugetlb_cgroup_rsvd: Do not use directly, use accessor in hugetlb_cgroup.h.\n @_hugetlb_hwpoison: Do not use directly, call raw_hwp_list_head().\n @_deferred_list: Folios to be split under memory pressure.\n @_unused_slab_obj_exts: Placeholder to match obj_exts in struct slab.\n\n A folio is a physically, virtually and logically contiguous set\n of bytes.  It is a power-of-two in size, and it is aligned to that\n same power-of-two.  It is at least as large as %PAGE_SIZE.  If it is\n in the page cache, it is at a file offset which is a multiple of that\n power-of-two.  It may be mapped into userspace at an address which is\n at an arbitrary page offset, but its kernel virtual address is aligned\n to its size."]
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct folio {
    pub __bindgen_anon_1: folio__bindgen_ty_1,
    pub __bindgen_anon_2: folio__bindgen_ty_2,
    pub __bindgen_anon_3: folio__bindgen_ty_3,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1 {
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1,
    pub page: page,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1 {
    pub flags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub index: ::std::os::raw::c_ulong,
    pub __bindgen_anon_2: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub _mapcount: atomic_t,
    pub _refcount: atomic_t,
    pub memcg_data: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut ::std::os::raw::c_void,
    pub mlock_count: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::__filler"][::std::mem::offset_of!(
        folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        __filler
    )
        - 0usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::mlock_count"] [:: std :: mem :: offset_of ! (folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , mlock_count) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::lru"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, lru) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub private: *mut ::std::os::raw::c_void,
    pub swap: swp_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::private"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2, private) - 0usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::swap"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2, swap) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<folio__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of folio__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<folio__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, flags) - 0usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::mapping"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, mapping) - 24usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::index"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, index) - 32usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::_mapcount"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, _mapcount) - 48usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::_refcount"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, _refcount) - 52usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::memcg_data"]
        [::std::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, memcg_data) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1"][::std::mem::size_of::<folio__bindgen_ty_1>() - 64usize];
    ["Alignment of folio__bindgen_ty_1"][::std::mem::align_of::<folio__bindgen_ty_1>() - 16usize];
    ["Offset of field: folio__bindgen_ty_1::page"]
        [::std::mem::offset_of!(folio__bindgen_ty_1, page) - 0usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_2 {
    pub __bindgen_anon_1: folio__bindgen_ty_2__bindgen_ty_1,
    pub __page_1: page,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct folio__bindgen_ty_2__bindgen_ty_1 {
    pub _flags_1: ::std::os::raw::c_ulong,
    pub _head_1: ::std::os::raw::c_ulong,
    pub _large_mapcount: atomic_t,
    pub _entire_mapcount: atomic_t,
    pub _nr_pages_mapped: atomic_t,
    pub _pincount: atomic_t,
    pub _folio_nr_pages: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<folio__bindgen_ty_2__bindgen_ty_1>() - 40usize];
    ["Alignment of folio__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<folio__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: folio__bindgen_ty_2__bindgen_ty_1::_flags_1"]
        [::std::mem::offset_of!(folio__bindgen_ty_2__bindgen_ty_1, _flags_1) - 0usize];
    ["Offset of field: folio__bindgen_ty_2__bindgen_ty_1::_head_1"]
        [::std::mem::offset_of!(folio__bindgen_ty_2__bindgen_ty_1, _head_1) - 8usize];
    ["Offset of field: folio__bindgen_ty_2__bindgen_ty_1::_large_mapcount"]
        [::std::mem::offset_of!(folio__bindgen_ty_2__bindgen_ty_1, _large_mapcount) - 16usize];
    ["Offset of field: folio__bindgen_ty_2__bindgen_ty_1::_entire_mapcount"]
        [::std::mem::offset_of!(folio__bindgen_ty_2__bindgen_ty_1, _entire_mapcount) - 20usize];
    ["Offset of field: folio__bindgen_ty_2__bindgen_ty_1::_nr_pages_mapped"]
        [::std::mem::offset_of!(folio__bindgen_ty_2__bindgen_ty_1, _nr_pages_mapped) - 24usize];
    ["Offset of field: folio__bindgen_ty_2__bindgen_ty_1::_pincount"]
        [::std::mem::offset_of!(folio__bindgen_ty_2__bindgen_ty_1, _pincount) - 28usize];
    ["Offset of field: folio__bindgen_ty_2__bindgen_ty_1::_folio_nr_pages"]
        [::std::mem::offset_of!(folio__bindgen_ty_2__bindgen_ty_1, _folio_nr_pages) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_2"][::std::mem::size_of::<folio__bindgen_ty_2>() - 64usize];
    ["Alignment of folio__bindgen_ty_2"][::std::mem::align_of::<folio__bindgen_ty_2>() - 16usize];
    ["Offset of field: folio__bindgen_ty_2::__page_1"]
        [::std::mem::offset_of!(folio__bindgen_ty_2, __page_1) - 0usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_3 {
    pub __bindgen_anon_1: folio__bindgen_ty_3__bindgen_ty_1,
    pub __bindgen_anon_2: folio__bindgen_ty_3__bindgen_ty_2,
    pub __page_2: page,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct folio__bindgen_ty_3__bindgen_ty_1 {
    pub _flags_2: ::std::os::raw::c_ulong,
    pub _head_2: ::std::os::raw::c_ulong,
    pub _hugetlb_subpool: *mut ::std::os::raw::c_void,
    pub _hugetlb_cgroup: *mut ::std::os::raw::c_void,
    pub _hugetlb_cgroup_rsvd: *mut ::std::os::raw::c_void,
    pub _hugetlb_hwpoison: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::size_of::<folio__bindgen_ty_3__bindgen_ty_1>() - 48usize];
    ["Alignment of folio__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<folio__bindgen_ty_3__bindgen_ty_1>() - 8usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_1::_flags_2"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_1, _flags_2) - 0usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_1::_head_2"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_1, _head_2) - 8usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_1::_hugetlb_subpool"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_1, _hugetlb_subpool) - 16usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_1::_hugetlb_cgroup"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_1, _hugetlb_cgroup) - 24usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_1::_hugetlb_cgroup_rsvd"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_1, _hugetlb_cgroup_rsvd) - 32usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_1::_hugetlb_hwpoison"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_1, _hugetlb_hwpoison) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct folio__bindgen_ty_3__bindgen_ty_2 {
    pub _flags_2a: ::std::os::raw::c_ulong,
    pub _head_2a: ::std::os::raw::c_ulong,
    pub _deferred_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_3__bindgen_ty_2"]
        [::std::mem::size_of::<folio__bindgen_ty_3__bindgen_ty_2>() - 32usize];
    ["Alignment of folio__bindgen_ty_3__bindgen_ty_2"]
        [::std::mem::align_of::<folio__bindgen_ty_3__bindgen_ty_2>() - 8usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_2::_flags_2a"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_2, _flags_2a) - 0usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_2::_head_2a"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_2, _head_2a) - 8usize];
    ["Offset of field: folio__bindgen_ty_3__bindgen_ty_2::_deferred_list"]
        [::std::mem::offset_of!(folio__bindgen_ty_3__bindgen_ty_2, _deferred_list) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_3"][::std::mem::size_of::<folio__bindgen_ty_3>() - 64usize];
    ["Alignment of folio__bindgen_ty_3"][::std::mem::align_of::<folio__bindgen_ty_3>() - 16usize];
    ["Offset of field: folio__bindgen_ty_3::__page_2"]
        [::std::mem::offset_of!(folio__bindgen_ty_3, __page_2) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio"][::std::mem::size_of::<folio>() - 192usize];
    ["Alignment of folio"][::std::mem::align_of::<folio>() - 16usize];
};
#[doc = " struct ptdesc -    Memory descriptor for page tables.\n @__page_flags:     Same as page flags. Powerpc only.\n @pt_rcu_head:      For freeing page table pages.\n @pt_list:          List of used page tables. Used for s390 and x86.\n @_pt_pad_1:        Padding that aliases with page's compound head.\n @pmd_huge_pte:     Protected by ptdesc->ptl, used for THPs.\n @__page_mapping:   Aliases with page->mapping. Unused for page tables.\n @pt_index:         Used for s390 gmap.\n @pt_mm:            Used for x86 pgds.\n @pt_frag_refcount: For fragmented page table tracking. Powerpc only.\n @_pt_pad_2:        Padding to ensure proper alignment.\n @ptl:              Lock for the page table.\n @__page_type:      Same as page->page_type. Unused for page tables.\n @__page_refcount:  Same as page refcount.\n @pt_memcg_data:    Memcg data. Tracked for page tables here.\n\n This struct overlays struct page for now. Do not modify without a good\n understanding of the issues."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ptdesc {
    pub __page_flags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: ptdesc__bindgen_ty_1,
    pub __page_mapping: ::std::os::raw::c_ulong,
    pub __bindgen_anon_2: ptdesc__bindgen_ty_2,
    pub __bindgen_anon_3: ptdesc__bindgen_ty_3,
    pub __page_type: ::std::os::raw::c_uint,
    pub __page_refcount: atomic_t,
    pub pt_memcg_data: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_1 {
    pub pt_rcu_head: callback_head,
    pub pt_list: list_head,
    pub __bindgen_anon_1: ptdesc__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptdesc__bindgen_ty_1__bindgen_ty_1 {
    pub _pt_pad_1: ::std::os::raw::c_ulong,
    pub pmd_huge_pte: pgtable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ptdesc__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ptdesc__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of ptdesc__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ptdesc__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ptdesc__bindgen_ty_1__bindgen_ty_1::_pt_pad_1"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_1__bindgen_ty_1, _pt_pad_1) - 0usize];
    ["Offset of field: ptdesc__bindgen_ty_1__bindgen_ty_1::pmd_huge_pte"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_1__bindgen_ty_1, pmd_huge_pte) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ptdesc__bindgen_ty_1"][::std::mem::size_of::<ptdesc__bindgen_ty_1>() - 16usize];
    ["Alignment of ptdesc__bindgen_ty_1"][::std::mem::align_of::<ptdesc__bindgen_ty_1>() - 8usize];
    ["Offset of field: ptdesc__bindgen_ty_1::pt_rcu_head"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_1, pt_rcu_head) - 0usize];
    ["Offset of field: ptdesc__bindgen_ty_1::pt_list"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_1, pt_list) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_2 {
    pub pt_index: ::std::os::raw::c_ulong,
    pub pt_mm: *mut mm_struct,
    pub pt_frag_refcount: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ptdesc__bindgen_ty_2"][::std::mem::size_of::<ptdesc__bindgen_ty_2>() - 8usize];
    ["Alignment of ptdesc__bindgen_ty_2"][::std::mem::align_of::<ptdesc__bindgen_ty_2>() - 8usize];
    ["Offset of field: ptdesc__bindgen_ty_2::pt_index"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_2, pt_index) - 0usize];
    ["Offset of field: ptdesc__bindgen_ty_2::pt_mm"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_2, pt_mm) - 0usize];
    ["Offset of field: ptdesc__bindgen_ty_2::pt_frag_refcount"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_2, pt_frag_refcount) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_3 {
    pub _pt_pad_2: ::std::os::raw::c_ulong,
    pub ptl: spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ptdesc__bindgen_ty_3"][::std::mem::size_of::<ptdesc__bindgen_ty_3>() - 8usize];
    ["Alignment of ptdesc__bindgen_ty_3"][::std::mem::align_of::<ptdesc__bindgen_ty_3>() - 8usize];
    ["Offset of field: ptdesc__bindgen_ty_3::_pt_pad_2"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_3, _pt_pad_2) - 0usize];
    ["Offset of field: ptdesc__bindgen_ty_3::ptl"]
        [::std::mem::offset_of!(ptdesc__bindgen_ty_3, ptl) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ptdesc"][::std::mem::size_of::<ptdesc>() - 64usize];
    ["Alignment of ptdesc"][::std::mem::align_of::<ptdesc>() - 8usize];
    ["Offset of field: ptdesc::__page_flags"]
        [::std::mem::offset_of!(ptdesc, __page_flags) - 0usize];
    ["Offset of field: ptdesc::__page_mapping"]
        [::std::mem::offset_of!(ptdesc, __page_mapping) - 24usize];
    ["Offset of field: ptdesc::__page_type"][::std::mem::offset_of!(ptdesc, __page_type) - 48usize];
    ["Offset of field: ptdesc::__page_refcount"]
        [::std::mem::offset_of!(ptdesc, __page_refcount) - 52usize];
    ["Offset of field: ptdesc::pt_memcg_data"]
        [::std::mem::offset_of!(ptdesc, pt_memcg_data) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_frag_cache {
    pub va: *mut ::std::os::raw::c_void,
    pub offset: __u16,
    pub size: __u16,
    pub pagecnt_bias: ::std::os::raw::c_uint,
    pub pfmemalloc: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page_frag_cache"][::std::mem::size_of::<page_frag_cache>() - 24usize];
    ["Alignment of page_frag_cache"][::std::mem::align_of::<page_frag_cache>() - 8usize];
    ["Offset of field: page_frag_cache::va"][::std::mem::offset_of!(page_frag_cache, va) - 0usize];
    ["Offset of field: page_frag_cache::offset"]
        [::std::mem::offset_of!(page_frag_cache, offset) - 8usize];
    ["Offset of field: page_frag_cache::size"]
        [::std::mem::offset_of!(page_frag_cache, size) - 10usize];
    ["Offset of field: page_frag_cache::pagecnt_bias"]
        [::std::mem::offset_of!(page_frag_cache, pagecnt_bias) - 12usize];
    ["Offset of field: page_frag_cache::pfmemalloc"]
        [::std::mem::offset_of!(page_frag_cache, pfmemalloc) - 16usize];
};
pub type vm_flags_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region {
    pub vm_rb: rb_node,
    pub vm_flags: vm_flags_t,
    pub vm_start: ::std::os::raw::c_ulong,
    pub vm_end: ::std::os::raw::c_ulong,
    pub vm_top: ::std::os::raw::c_ulong,
    pub vm_pgoff: ::std::os::raw::c_ulong,
    pub vm_file: *mut file,
    pub vm_usage: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_region"][::std::mem::size_of::<vm_region>() - 80usize];
    ["Alignment of vm_region"][::std::mem::align_of::<vm_region>() - 8usize];
    ["Offset of field: vm_region::vm_rb"][::std::mem::offset_of!(vm_region, vm_rb) - 0usize];
    ["Offset of field: vm_region::vm_flags"][::std::mem::offset_of!(vm_region, vm_flags) - 24usize];
    ["Offset of field: vm_region::vm_start"][::std::mem::offset_of!(vm_region, vm_start) - 32usize];
    ["Offset of field: vm_region::vm_end"][::std::mem::offset_of!(vm_region, vm_end) - 40usize];
    ["Offset of field: vm_region::vm_top"][::std::mem::offset_of!(vm_region, vm_top) - 48usize];
    ["Offset of field: vm_region::vm_pgoff"][::std::mem::offset_of!(vm_region, vm_pgoff) - 56usize];
    ["Offset of field: vm_region::vm_file"][::std::mem::offset_of!(vm_region, vm_file) - 64usize];
    ["Offset of field: vm_region::vm_usage"][::std::mem::offset_of!(vm_region, vm_usage) - 72usize];
};
impl vm_region {
    #[inline]
    pub fn vm_icache_flushed(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_vm_icache_flushed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(vm_icache_flushed: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vm_icache_flushed: u8 = unsafe { ::std::mem::transmute(vm_icache_flushed) };
            vm_icache_flushed as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_userfaultfd_ctx {
    pub ctx: *mut userfaultfd_ctx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_userfaultfd_ctx"][::std::mem::size_of::<vm_userfaultfd_ctx>() - 8usize];
    ["Alignment of vm_userfaultfd_ctx"][::std::mem::align_of::<vm_userfaultfd_ctx>() - 8usize];
    ["Offset of field: vm_userfaultfd_ctx::ctx"]
        [::std::mem::offset_of!(vm_userfaultfd_ctx, ctx) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct anon_vma_name {
    pub kref: kref,
    pub name: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of anon_vma_name"][::std::mem::size_of::<anon_vma_name>() - 4usize];
    ["Alignment of anon_vma_name"][::std::mem::align_of::<anon_vma_name>() - 4usize];
    ["Offset of field: anon_vma_name::kref"][::std::mem::offset_of!(anon_vma_name, kref) - 0usize];
    ["Offset of field: anon_vma_name::name"][::std::mem::offset_of!(anon_vma_name, name) - 4usize];
};
extern "C" {
    pub fn anon_vma_name(vma: *mut vm_area_struct) -> *mut anon_vma_name;
}
extern "C" {
    pub fn anon_vma_name_alloc(name: *const ::std::os::raw::c_char) -> *mut anon_vma_name;
}
extern "C" {
    pub fn anon_vma_name_free(kref: *mut kref);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vma_lock {
    pub lock: rw_semaphore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vma_lock"][::std::mem::size_of::<vma_lock>() - 40usize];
    ["Alignment of vma_lock"][::std::mem::align_of::<vma_lock>() - 8usize];
    ["Offset of field: vma_lock::lock"][::std::mem::offset_of!(vma_lock, lock) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vma_numab_state {
    pub next_scan: ::std::os::raw::c_ulong,
    pub pids_active_reset: ::std::os::raw::c_ulong,
    pub pids_active: [::std::os::raw::c_ulong; 2usize],
    pub start_scan_seq: ::std::os::raw::c_int,
    pub prev_scan_seq: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vma_numab_state"][::std::mem::size_of::<vma_numab_state>() - 40usize];
    ["Alignment of vma_numab_state"][::std::mem::align_of::<vma_numab_state>() - 8usize];
    ["Offset of field: vma_numab_state::next_scan"]
        [::std::mem::offset_of!(vma_numab_state, next_scan) - 0usize];
    ["Offset of field: vma_numab_state::pids_active_reset"]
        [::std::mem::offset_of!(vma_numab_state, pids_active_reset) - 8usize];
    ["Offset of field: vma_numab_state::pids_active"]
        [::std::mem::offset_of!(vma_numab_state, pids_active) - 16usize];
    ["Offset of field: vma_numab_state::start_scan_seq"]
        [::std::mem::offset_of!(vma_numab_state, start_scan_seq) - 32usize];
    ["Offset of field: vma_numab_state::prev_scan_seq"]
        [::std::mem::offset_of!(vma_numab_state, prev_scan_seq) - 36usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_area_struct {
    pub __bindgen_anon_1: vm_area_struct__bindgen_ty_1,
    pub vm_mm: *mut mm_struct,
    pub vm_page_prot: pgprot_t,
    pub __bindgen_anon_2: vm_area_struct__bindgen_ty_2,
    pub detached: bool_,
    pub vm_lock_seq: ::std::os::raw::c_int,
    pub vm_lock: *mut vma_lock,
    pub shared: vm_area_struct__bindgen_ty_3,
    pub anon_vma_chain: list_head,
    pub anon_vma: *mut anon_vma,
    pub vm_ops: *const vm_operations_struct,
    pub vm_pgoff: ::std::os::raw::c_ulong,
    pub vm_file: *mut file,
    pub vm_private_data: *mut ::std::os::raw::c_void,
    pub anon_name: *mut anon_vma_name,
    pub swap_readahead_info: atomic_long_t,
    pub vm_policy: *mut mempolicy,
    pub numab_state: *mut vma_numab_state,
    pub vm_userfaultfd_ctx: vm_userfaultfd_ctx,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_area_struct__bindgen_ty_1 {
    pub __bindgen_anon_1: vm_area_struct__bindgen_ty_1__bindgen_ty_1,
    pub vm_rcu: callback_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_area_struct__bindgen_ty_1__bindgen_ty_1 {
    pub vm_start: ::std::os::raw::c_ulong,
    pub vm_end: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<vm_area_struct__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of vm_area_struct__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<vm_area_struct__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_area_struct__bindgen_ty_1__bindgen_ty_1::vm_start"]
        [::std::mem::offset_of!(vm_area_struct__bindgen_ty_1__bindgen_ty_1, vm_start) - 0usize];
    ["Offset of field: vm_area_struct__bindgen_ty_1__bindgen_ty_1::vm_end"]
        [::std::mem::offset_of!(vm_area_struct__bindgen_ty_1__bindgen_ty_1, vm_end) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct__bindgen_ty_1"]
        [::std::mem::size_of::<vm_area_struct__bindgen_ty_1>() - 16usize];
    ["Alignment of vm_area_struct__bindgen_ty_1"]
        [::std::mem::align_of::<vm_area_struct__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_area_struct__bindgen_ty_1::vm_rcu"]
        [::std::mem::offset_of!(vm_area_struct__bindgen_ty_1, vm_rcu) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_area_struct__bindgen_ty_2 {
    pub vm_flags: vm_flags_t,
    pub __vm_flags: vm_flags_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct__bindgen_ty_2"]
        [::std::mem::size_of::<vm_area_struct__bindgen_ty_2>() - 8usize];
    ["Alignment of vm_area_struct__bindgen_ty_2"]
        [::std::mem::align_of::<vm_area_struct__bindgen_ty_2>() - 8usize];
    ["Offset of field: vm_area_struct__bindgen_ty_2::vm_flags"]
        [::std::mem::offset_of!(vm_area_struct__bindgen_ty_2, vm_flags) - 0usize];
    ["Offset of field: vm_area_struct__bindgen_ty_2::__vm_flags"]
        [::std::mem::offset_of!(vm_area_struct__bindgen_ty_2, __vm_flags) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_area_struct__bindgen_ty_3 {
    pub rb: rb_node,
    pub rb_subtree_last: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct__bindgen_ty_3"]
        [::std::mem::size_of::<vm_area_struct__bindgen_ty_3>() - 32usize];
    ["Alignment of vm_area_struct__bindgen_ty_3"]
        [::std::mem::align_of::<vm_area_struct__bindgen_ty_3>() - 8usize];
    ["Offset of field: vm_area_struct__bindgen_ty_3::rb"]
        [::std::mem::offset_of!(vm_area_struct__bindgen_ty_3, rb) - 0usize];
    ["Offset of field: vm_area_struct__bindgen_ty_3::rb_subtree_last"]
        [::std::mem::offset_of!(vm_area_struct__bindgen_ty_3, rb_subtree_last) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct"][::std::mem::size_of::<vm_area_struct>() - 184usize];
    ["Alignment of vm_area_struct"][::std::mem::align_of::<vm_area_struct>() - 8usize];
    ["Offset of field: vm_area_struct::vm_mm"]
        [::std::mem::offset_of!(vm_area_struct, vm_mm) - 16usize];
    ["Offset of field: vm_area_struct::vm_page_prot"]
        [::std::mem::offset_of!(vm_area_struct, vm_page_prot) - 24usize];
    ["Offset of field: vm_area_struct::detached"]
        [::std::mem::offset_of!(vm_area_struct, detached) - 40usize];
    ["Offset of field: vm_area_struct::vm_lock_seq"]
        [::std::mem::offset_of!(vm_area_struct, vm_lock_seq) - 44usize];
    ["Offset of field: vm_area_struct::vm_lock"]
        [::std::mem::offset_of!(vm_area_struct, vm_lock) - 48usize];
    ["Offset of field: vm_area_struct::shared"]
        [::std::mem::offset_of!(vm_area_struct, shared) - 56usize];
    ["Offset of field: vm_area_struct::anon_vma_chain"]
        [::std::mem::offset_of!(vm_area_struct, anon_vma_chain) - 88usize];
    ["Offset of field: vm_area_struct::anon_vma"]
        [::std::mem::offset_of!(vm_area_struct, anon_vma) - 104usize];
    ["Offset of field: vm_area_struct::vm_ops"]
        [::std::mem::offset_of!(vm_area_struct, vm_ops) - 112usize];
    ["Offset of field: vm_area_struct::vm_pgoff"]
        [::std::mem::offset_of!(vm_area_struct, vm_pgoff) - 120usize];
    ["Offset of field: vm_area_struct::vm_file"]
        [::std::mem::offset_of!(vm_area_struct, vm_file) - 128usize];
    ["Offset of field: vm_area_struct::vm_private_data"]
        [::std::mem::offset_of!(vm_area_struct, vm_private_data) - 136usize];
    ["Offset of field: vm_area_struct::anon_name"]
        [::std::mem::offset_of!(vm_area_struct, anon_name) - 144usize];
    ["Offset of field: vm_area_struct::swap_readahead_info"]
        [::std::mem::offset_of!(vm_area_struct, swap_readahead_info) - 152usize];
    ["Offset of field: vm_area_struct::vm_policy"]
        [::std::mem::offset_of!(vm_area_struct, vm_policy) - 160usize];
    ["Offset of field: vm_area_struct::numab_state"]
        [::std::mem::offset_of!(vm_area_struct, numab_state) - 168usize];
    ["Offset of field: vm_area_struct::vm_userfaultfd_ctx"]
        [::std::mem::offset_of!(vm_area_struct, vm_userfaultfd_ctx) - 176usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_cid {
    pub time: u64_,
    pub cid: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_cid"][::std::mem::size_of::<mm_cid>() - 16usize];
    ["Alignment of mm_cid"][::std::mem::align_of::<mm_cid>() - 8usize];
    ["Offset of field: mm_cid::time"][::std::mem::offset_of!(mm_cid, time) - 0usize];
    ["Offset of field: mm_cid::cid"][::std::mem::offset_of!(mm_cid, cid) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kioctx_table {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iommu_mm_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
pub struct mm_struct {
    pub __bindgen_anon_1: mm_struct__bindgen_ty_1,
    pub cpu_bitmap: __IncompleteArrayField<::std::os::raw::c_ulong>,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct mm_struct__bindgen_ty_1 {
    pub __bindgen_anon_1: mm_struct__bindgen_ty_1__bindgen_ty_1,
    pub mm_mt: maple_tree,
    pub mmap_base: ::std::os::raw::c_ulong,
    pub mmap_legacy_base: ::std::os::raw::c_ulong,
    pub mmap_compat_base: ::std::os::raw::c_ulong,
    pub mmap_compat_legacy_base: ::std::os::raw::c_ulong,
    pub task_size: ::std::os::raw::c_ulong,
    pub pgd: *mut pgd_t,
    #[doc = " @membarrier_state: Flags controlling membarrier behavior.\n\n This field is close to @pgd to hopefully fit in the same\n cache-line, which needs to be touched by switch_mm()."]
    pub membarrier_state: atomic_t,
    #[doc = " @mm_users: The number of users including userspace.\n\n Use mmget()/mmget_not_zero()/mmput() to modify. When this\n drops to 0 (i.e. when the task exits and there are no other\n temporary reference holders), we also release a reference on\n @mm_count (which may then free the &struct mm_struct if\n @mm_count also drops to 0)."]
    pub mm_users: atomic_t,
    #[doc = " @pcpu_cid: Per-cpu current cid.\n\n Keep track of the currently allocated mm_cid for each cpu.\n The per-cpu mm_cid values are serialized by their respective\n runqueue locks."]
    pub pcpu_cid: *mut mm_cid,
    pub mm_cid_next_scan: ::std::os::raw::c_ulong,
    pub pgtables_bytes: atomic_long_t,
    pub map_count: ::std::os::raw::c_int,
    pub page_table_lock: spinlock_t,
    pub mmap_lock: rw_semaphore,
    pub mmlist: list_head,
    pub mm_lock_seq: ::std::os::raw::c_int,
    pub hiwater_rss: ::std::os::raw::c_ulong,
    pub hiwater_vm: ::std::os::raw::c_ulong,
    pub total_vm: ::std::os::raw::c_ulong,
    pub locked_vm: ::std::os::raw::c_ulong,
    pub pinned_vm: atomic64_t,
    pub data_vm: ::std::os::raw::c_ulong,
    pub exec_vm: ::std::os::raw::c_ulong,
    pub stack_vm: ::std::os::raw::c_ulong,
    pub def_flags: ::std::os::raw::c_ulong,
    #[doc = " @write_protect_seq: Locked when any thread is write\n protecting pages mapped by this mm to enforce a later COW,\n for instance during page table copying for fork()."]
    pub write_protect_seq: seqcount_t,
    pub arg_lock: spinlock_t,
    pub start_code: ::std::os::raw::c_ulong,
    pub end_code: ::std::os::raw::c_ulong,
    pub start_data: ::std::os::raw::c_ulong,
    pub end_data: ::std::os::raw::c_ulong,
    pub start_brk: ::std::os::raw::c_ulong,
    pub brk: ::std::os::raw::c_ulong,
    pub start_stack: ::std::os::raw::c_ulong,
    pub arg_start: ::std::os::raw::c_ulong,
    pub arg_end: ::std::os::raw::c_ulong,
    pub env_start: ::std::os::raw::c_ulong,
    pub env_end: ::std::os::raw::c_ulong,
    pub saved_auxv: [::std::os::raw::c_ulong; 52usize],
    pub rss_stat: [percpu_counter; 4usize],
    pub binfmt: *mut linux_binfmt,
    pub context: mm_context_t,
    pub flags: ::std::os::raw::c_ulong,
    pub ioctx_lock: spinlock_t,
    pub ioctx_table: *mut kioctx_table,
    pub owner: *mut task_struct,
    pub user_ns: *mut user_namespace,
    pub exe_file: *mut file,
    pub notifier_subscriptions: *mut mmu_notifier_subscriptions,
    pub numa_next_scan: ::std::os::raw::c_ulong,
    pub numa_scan_offset: ::std::os::raw::c_ulong,
    pub numa_scan_seq: ::std::os::raw::c_int,
    pub tlb_flush_pending: atomic_t,
    pub tlb_flush_batched: atomic_t,
    pub uprobes_state: uprobes_state,
    pub hugetlb_usage: atomic_long_t,
    pub async_put_work: work_struct,
    pub iommu_mm: *mut iommu_mm_data,
    pub ksm_merging_pages: ::std::os::raw::c_ulong,
    pub ksm_rmap_items: ::std::os::raw::c_ulong,
    pub ksm_zero_pages: atomic_long_t,
    pub lru_gen: mm_struct__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct mm_struct__bindgen_ty_1__bindgen_ty_1 {
    #[doc = " @mm_count: The number of references to &struct\n mm_struct (@mm_users count as 1).\n\n Use mmgrab()/mmdrop() to modify. When this drops to\n 0, the &struct mm_struct is freed."]
    pub mm_count: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_struct__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<mm_struct__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of mm_struct__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<mm_struct__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Offset of field: mm_struct__bindgen_ty_1__bindgen_ty_1::mm_count"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1__bindgen_ty_1, mm_count) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_struct__bindgen_ty_1__bindgen_ty_2 {
    pub list: list_head,
    pub bitmap: ::std::os::raw::c_ulong,
    pub memcg: *mut mem_cgroup,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_struct__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<mm_struct__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of mm_struct__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<mm_struct__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: mm_struct__bindgen_ty_1__bindgen_ty_2::list"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1__bindgen_ty_2, list) - 0usize];
    ["Offset of field: mm_struct__bindgen_ty_1__bindgen_ty_2::bitmap"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1__bindgen_ty_2, bitmap) - 16usize];
    ["Offset of field: mm_struct__bindgen_ty_1__bindgen_ty_2::memcg"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1__bindgen_ty_2, memcg) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_struct__bindgen_ty_1"]
        [::std::mem::size_of::<mm_struct__bindgen_ty_1>() - 1344usize];
    ["Alignment of mm_struct__bindgen_ty_1"]
        [::std::mem::align_of::<mm_struct__bindgen_ty_1>() - 64usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mm_mt"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mm_mt) - 64usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_base"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_base) - 80usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_legacy_base"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_legacy_base) - 88usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_compat_base"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_compat_base) - 96usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_compat_legacy_base"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_compat_legacy_base) - 104usize];
    ["Offset of field: mm_struct__bindgen_ty_1::task_size"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, task_size) - 112usize];
    ["Offset of field: mm_struct__bindgen_ty_1::pgd"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, pgd) - 120usize];
    ["Offset of field: mm_struct__bindgen_ty_1::membarrier_state"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, membarrier_state) - 128usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mm_users"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mm_users) - 132usize];
    ["Offset of field: mm_struct__bindgen_ty_1::pcpu_cid"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, pcpu_cid) - 136usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mm_cid_next_scan"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mm_cid_next_scan) - 144usize];
    ["Offset of field: mm_struct__bindgen_ty_1::pgtables_bytes"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, pgtables_bytes) - 152usize];
    ["Offset of field: mm_struct__bindgen_ty_1::map_count"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, map_count) - 160usize];
    ["Offset of field: mm_struct__bindgen_ty_1::page_table_lock"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, page_table_lock) - 164usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_lock"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_lock) - 168usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmlist"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mmlist) - 208usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mm_lock_seq"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, mm_lock_seq) - 224usize];
    ["Offset of field: mm_struct__bindgen_ty_1::hiwater_rss"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, hiwater_rss) - 232usize];
    ["Offset of field: mm_struct__bindgen_ty_1::hiwater_vm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, hiwater_vm) - 240usize];
    ["Offset of field: mm_struct__bindgen_ty_1::total_vm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, total_vm) - 248usize];
    ["Offset of field: mm_struct__bindgen_ty_1::locked_vm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, locked_vm) - 256usize];
    ["Offset of field: mm_struct__bindgen_ty_1::pinned_vm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, pinned_vm) - 264usize];
    ["Offset of field: mm_struct__bindgen_ty_1::data_vm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, data_vm) - 272usize];
    ["Offset of field: mm_struct__bindgen_ty_1::exec_vm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, exec_vm) - 280usize];
    ["Offset of field: mm_struct__bindgen_ty_1::stack_vm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, stack_vm) - 288usize];
    ["Offset of field: mm_struct__bindgen_ty_1::def_flags"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, def_flags) - 296usize];
    ["Offset of field: mm_struct__bindgen_ty_1::write_protect_seq"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, write_protect_seq) - 304usize];
    ["Offset of field: mm_struct__bindgen_ty_1::arg_lock"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, arg_lock) - 308usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_code"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, start_code) - 312usize];
    ["Offset of field: mm_struct__bindgen_ty_1::end_code"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, end_code) - 320usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_data"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, start_data) - 328usize];
    ["Offset of field: mm_struct__bindgen_ty_1::end_data"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, end_data) - 336usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_brk"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, start_brk) - 344usize];
    ["Offset of field: mm_struct__bindgen_ty_1::brk"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, brk) - 352usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_stack"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, start_stack) - 360usize];
    ["Offset of field: mm_struct__bindgen_ty_1::arg_start"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, arg_start) - 368usize];
    ["Offset of field: mm_struct__bindgen_ty_1::arg_end"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, arg_end) - 376usize];
    ["Offset of field: mm_struct__bindgen_ty_1::env_start"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, env_start) - 384usize];
    ["Offset of field: mm_struct__bindgen_ty_1::env_end"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, env_end) - 392usize];
    ["Offset of field: mm_struct__bindgen_ty_1::saved_auxv"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, saved_auxv) - 400usize];
    ["Offset of field: mm_struct__bindgen_ty_1::rss_stat"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, rss_stat) - 816usize];
    ["Offset of field: mm_struct__bindgen_ty_1::binfmt"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, binfmt) - 976usize];
    ["Offset of field: mm_struct__bindgen_ty_1::context"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, context) - 984usize];
    ["Offset of field: mm_struct__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, flags) - 1128usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ioctx_lock"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, ioctx_lock) - 1136usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ioctx_table"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, ioctx_table) - 1144usize];
    ["Offset of field: mm_struct__bindgen_ty_1::owner"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, owner) - 1152usize];
    ["Offset of field: mm_struct__bindgen_ty_1::user_ns"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, user_ns) - 1160usize];
    ["Offset of field: mm_struct__bindgen_ty_1::exe_file"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, exe_file) - 1168usize];
    ["Offset of field: mm_struct__bindgen_ty_1::notifier_subscriptions"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, notifier_subscriptions) - 1176usize];
    ["Offset of field: mm_struct__bindgen_ty_1::numa_next_scan"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, numa_next_scan) - 1184usize];
    ["Offset of field: mm_struct__bindgen_ty_1::numa_scan_offset"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, numa_scan_offset) - 1192usize];
    ["Offset of field: mm_struct__bindgen_ty_1::numa_scan_seq"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, numa_scan_seq) - 1200usize];
    ["Offset of field: mm_struct__bindgen_ty_1::tlb_flush_pending"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, tlb_flush_pending) - 1204usize];
    ["Offset of field: mm_struct__bindgen_ty_1::tlb_flush_batched"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, tlb_flush_batched) - 1208usize];
    ["Offset of field: mm_struct__bindgen_ty_1::uprobes_state"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, uprobes_state) - 1216usize];
    ["Offset of field: mm_struct__bindgen_ty_1::hugetlb_usage"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, hugetlb_usage) - 1224usize];
    ["Offset of field: mm_struct__bindgen_ty_1::async_put_work"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, async_put_work) - 1232usize];
    ["Offset of field: mm_struct__bindgen_ty_1::iommu_mm"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, iommu_mm) - 1264usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ksm_merging_pages"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, ksm_merging_pages) - 1272usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ksm_rmap_items"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, ksm_rmap_items) - 1280usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ksm_zero_pages"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, ksm_zero_pages) - 1288usize];
    ["Offset of field: mm_struct__bindgen_ty_1::lru_gen"]
        [::std::mem::offset_of!(mm_struct__bindgen_ty_1, lru_gen) - 1296usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_struct"][::std::mem::size_of::<mm_struct>() - 1344usize];
    ["Alignment of mm_struct"][::std::mem::align_of::<mm_struct>() - 64usize];
    ["Offset of field: mm_struct::cpu_bitmap"]
        [::std::mem::offset_of!(mm_struct, cpu_bitmap) - 1344usize];
};
extern "C" {
    pub static mut init_mm: mm_struct;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lru_gen_mm_list {
    pub fifo: list_head,
    pub lock: spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lru_gen_mm_list"][::std::mem::size_of::<lru_gen_mm_list>() - 24usize];
    ["Alignment of lru_gen_mm_list"][::std::mem::align_of::<lru_gen_mm_list>() - 8usize];
    ["Offset of field: lru_gen_mm_list::fifo"]
        [::std::mem::offset_of!(lru_gen_mm_list, fifo) - 0usize];
    ["Offset of field: lru_gen_mm_list::lock"]
        [::std::mem::offset_of!(lru_gen_mm_list, lock) - 16usize];
};
extern "C" {
    pub fn lru_gen_add_mm(mm: *mut mm_struct);
}
extern "C" {
    pub fn lru_gen_del_mm(mm: *mut mm_struct);
}
extern "C" {
    pub fn lru_gen_migrate_mm(mm: *mut mm_struct);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vma_iterator {
    pub mas: ma_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vma_iterator"][::std::mem::size_of::<vma_iterator>() - 64usize];
    ["Alignment of vma_iterator"][::std::mem::align_of::<vma_iterator>() - 8usize];
    ["Offset of field: vma_iterator::mas"][::std::mem::offset_of!(vma_iterator, mas) - 0usize];
};
pub const mm_cid_state_MM_CID_UNSET: mm_cid_state = 4294967295;
pub const mm_cid_state_MM_CID_LAZY_PUT: mm_cid_state = 2147483648;
pub type mm_cid_state = ::std::os::raw::c_uint;
extern "C" {
    pub fn tlb_gather_mmu(tlb: *mut mmu_gather, mm: *mut mm_struct);
}
extern "C" {
    pub fn tlb_gather_mmu_fullmm(tlb: *mut mmu_gather, mm: *mut mm_struct);
}
extern "C" {
    pub fn tlb_finish_mmu(tlb: *mut mmu_gather);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_fault {
    _unused: [u8; 0],
}
#[doc = " typedef vm_fault_t - Return type for page fault handlers.\n\n Page fault handlers return a bitmask of %VM_FAULT values."]
pub type vm_fault_t = ::std::os::raw::c_uint;
pub const vm_fault_reason_VM_FAULT_OOM: vm_fault_reason = 1;
pub const vm_fault_reason_VM_FAULT_SIGBUS: vm_fault_reason = 2;
pub const vm_fault_reason_VM_FAULT_MAJOR: vm_fault_reason = 4;
pub const vm_fault_reason_VM_FAULT_HWPOISON: vm_fault_reason = 16;
pub const vm_fault_reason_VM_FAULT_HWPOISON_LARGE: vm_fault_reason = 32;
pub const vm_fault_reason_VM_FAULT_SIGSEGV: vm_fault_reason = 64;
pub const vm_fault_reason_VM_FAULT_NOPAGE: vm_fault_reason = 256;
pub const vm_fault_reason_VM_FAULT_LOCKED: vm_fault_reason = 512;
pub const vm_fault_reason_VM_FAULT_RETRY: vm_fault_reason = 1024;
pub const vm_fault_reason_VM_FAULT_FALLBACK: vm_fault_reason = 2048;
pub const vm_fault_reason_VM_FAULT_DONE_COW: vm_fault_reason = 4096;
pub const vm_fault_reason_VM_FAULT_NEEDDSYNC: vm_fault_reason = 8192;
pub const vm_fault_reason_VM_FAULT_COMPLETED: vm_fault_reason = 16384;
pub const vm_fault_reason_VM_FAULT_HINDEX_MASK: vm_fault_reason = 983040;
#[doc = " enum vm_fault_reason - Page fault handlers return a bitmask of\n these values to tell the core VM what happened when handling the\n fault. Used to decide whether a process gets delivered SIGBUS or\n just gets major/minor fault counters bumped up.\n\n @VM_FAULT_OOM:\t\tOut Of Memory\n @VM_FAULT_SIGBUS:\t\tBad access\n @VM_FAULT_MAJOR:\t\tPage read from storage\n @VM_FAULT_HWPOISON:\t\tHit poisoned small page\n @VM_FAULT_HWPOISON_LARGE:\tHit poisoned large page. Index encoded\n\t\t\t\tin upper bits\n @VM_FAULT_SIGSEGV:\t\tsegmentation fault\n @VM_FAULT_NOPAGE:\t\t->fault installed the pte, not return page\n @VM_FAULT_LOCKED:\t\t->fault locked the returned page\n @VM_FAULT_RETRY:\t\t->fault blocked, must retry\n @VM_FAULT_FALLBACK:\t\thuge page fault failed, fall back to small\n @VM_FAULT_DONE_COW:\t\t->fault has fully handled COW\n @VM_FAULT_NEEDDSYNC:\t\t->fault did not modify page tables and needs\n\t\t\t\tfsync() to complete (for synchronous page faults\n\t\t\t\tin DAX)\n @VM_FAULT_COMPLETED:\t\t->fault completed, meanwhile mmap lock released\n @VM_FAULT_HINDEX_MASK:\tmask HINDEX value\n"]
pub type vm_fault_reason = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_special_mapping {
    pub name: *const ::std::os::raw::c_char,
    pub pages: *mut *mut page,
    pub fault: ::std::option::Option<
        unsafe extern "C" fn(
            sm: *const vm_special_mapping,
            vma: *mut vm_area_struct,
            vmf: *mut vm_fault,
        ) -> vm_fault_t,
    >,
    pub mremap: ::std::option::Option<
        unsafe extern "C" fn(
            sm: *const vm_special_mapping,
            new_vma: *mut vm_area_struct,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_special_mapping"][::std::mem::size_of::<vm_special_mapping>() - 32usize];
    ["Alignment of vm_special_mapping"][::std::mem::align_of::<vm_special_mapping>() - 8usize];
    ["Offset of field: vm_special_mapping::name"]
        [::std::mem::offset_of!(vm_special_mapping, name) - 0usize];
    ["Offset of field: vm_special_mapping::pages"]
        [::std::mem::offset_of!(vm_special_mapping, pages) - 8usize];
    ["Offset of field: vm_special_mapping::fault"]
        [::std::mem::offset_of!(vm_special_mapping, fault) - 16usize];
    ["Offset of field: vm_special_mapping::mremap"]
        [::std::mem::offset_of!(vm_special_mapping, mremap) - 24usize];
};
pub const tlb_flush_reason_TLB_FLUSH_ON_TASK_SWITCH: tlb_flush_reason = 0;
pub const tlb_flush_reason_TLB_REMOTE_SHOOTDOWN: tlb_flush_reason = 1;
pub const tlb_flush_reason_TLB_LOCAL_SHOOTDOWN: tlb_flush_reason = 2;
pub const tlb_flush_reason_TLB_LOCAL_MM_SHOOTDOWN: tlb_flush_reason = 3;
pub const tlb_flush_reason_TLB_REMOTE_SEND_IPI: tlb_flush_reason = 4;
pub const tlb_flush_reason_NR_TLB_FLUSH_REASONS: tlb_flush_reason = 5;
pub type tlb_flush_reason = ::std::os::raw::c_uint;
pub const fault_flag_FAULT_FLAG_WRITE: fault_flag = 1;
pub const fault_flag_FAULT_FLAG_MKWRITE: fault_flag = 2;
pub const fault_flag_FAULT_FLAG_ALLOW_RETRY: fault_flag = 4;
pub const fault_flag_FAULT_FLAG_RETRY_NOWAIT: fault_flag = 8;
pub const fault_flag_FAULT_FLAG_KILLABLE: fault_flag = 16;
pub const fault_flag_FAULT_FLAG_TRIED: fault_flag = 32;
pub const fault_flag_FAULT_FLAG_USER: fault_flag = 64;
pub const fault_flag_FAULT_FLAG_REMOTE: fault_flag = 128;
pub const fault_flag_FAULT_FLAG_INSTRUCTION: fault_flag = 256;
pub const fault_flag_FAULT_FLAG_INTERRUPTIBLE: fault_flag = 512;
pub const fault_flag_FAULT_FLAG_UNSHARE: fault_flag = 1024;
pub const fault_flag_FAULT_FLAG_ORIG_PTE_VALID: fault_flag = 2048;
pub const fault_flag_FAULT_FLAG_VMA_LOCK: fault_flag = 4096;
#[doc = " enum fault_flag - Fault flag definitions.\n @FAULT_FLAG_WRITE: Fault was a write fault.\n @FAULT_FLAG_MKWRITE: Fault was mkwrite of existing PTE.\n @FAULT_FLAG_ALLOW_RETRY: Allow to retry the fault if blocked.\n @FAULT_FLAG_RETRY_NOWAIT: Don't drop mmap_lock and wait when retrying.\n @FAULT_FLAG_KILLABLE: The fault task is in SIGKILL killable region.\n @FAULT_FLAG_TRIED: The fault has been tried once.\n @FAULT_FLAG_USER: The fault originated in userspace.\n @FAULT_FLAG_REMOTE: The fault is not for current task/mm.\n @FAULT_FLAG_INSTRUCTION: The fault was during an instruction fetch.\n @FAULT_FLAG_INTERRUPTIBLE: The fault can be interrupted by non-fatal signals.\n @FAULT_FLAG_UNSHARE: The fault is an unsharing request to break COW in a\n                      COW mapping, making sure that an exclusive anon page is\n                      mapped after the fault.\n @FAULT_FLAG_ORIG_PTE_VALID: whether the fault has vmf->orig_pte cached.\n                        We should only access orig_pte if this flag set.\n @FAULT_FLAG_VMA_LOCK: The fault is handled under VMA lock.\n\n About @FAULT_FLAG_ALLOW_RETRY and @FAULT_FLAG_TRIED: we can specify\n whether we would allow page faults to retry by specifying these two\n fault flags correctly.  Currently there can be three legal combinations:\n\n (a) ALLOW_RETRY and !TRIED:  this means the page fault allows retry, and\n                              this is the first try\n\n (b) ALLOW_RETRY and TRIED:   this means the page fault allows retry, and\n                              we've already tried at least once\n\n (c) !ALLOW_RETRY and !TRIED: this means the page fault does not allow retry\n\n The unlisted combination (!ALLOW_RETRY && TRIED) is illegal and should never\n be used.  Note that page faults can be allowed to retry for multiple times,\n in which case we'll have an initial fault with flags (a) then later on\n continuous faults with flags (b).  We should always try to detect pending\n signals before a retry to make sure the continuous page faults can still be\n interrupted if necessary.\n\n The combination FAULT_FLAG_WRITE|FAULT_FLAG_UNSHARE is illegal.\n FAULT_FLAG_UNSHARE is ignored and treated like an ordinary read fault when\n applied to mappings that are not COW mappings."]
pub type fault_flag = ::std::os::raw::c_uint;
pub type zap_flags_t = ::std::os::raw::c_uint;
pub type cydp_t = ::std::os::raw::c_int;
pub const FOLL_WRITE: _bindgen_ty_16 = 1;
pub const FOLL_GET: _bindgen_ty_16 = 2;
pub const FOLL_DUMP: _bindgen_ty_16 = 4;
pub const FOLL_FORCE: _bindgen_ty_16 = 8;
pub const FOLL_NOWAIT: _bindgen_ty_16 = 16;
pub const FOLL_NOFAULT: _bindgen_ty_16 = 32;
pub const FOLL_HWPOISON: _bindgen_ty_16 = 64;
pub const FOLL_ANON: _bindgen_ty_16 = 128;
pub const FOLL_LONGTERM: _bindgen_ty_16 = 256;
pub const FOLL_SPLIT_PMD: _bindgen_ty_16 = 512;
pub const FOLL_PCI_P2PDMA: _bindgen_ty_16 = 1024;
pub const FOLL_INTERRUPTIBLE: _bindgen_ty_16 = 2048;
pub const FOLL_HONOR_NUMA_FAULT: _bindgen_ty_16 = 4096;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const pageflags_PG_locked: pageflags = 0;
pub const pageflags_PG_writeback: pageflags = 1;
pub const pageflags_PG_referenced: pageflags = 2;
pub const pageflags_PG_uptodate: pageflags = 3;
pub const pageflags_PG_dirty: pageflags = 4;
pub const pageflags_PG_lru: pageflags = 5;
pub const pageflags_PG_head: pageflags = 6;
pub const pageflags_PG_waiters: pageflags = 7;
pub const pageflags_PG_active: pageflags = 8;
pub const pageflags_PG_workingset: pageflags = 9;
pub const pageflags_PG_error: pageflags = 10;
pub const pageflags_PG_owner_priv_1: pageflags = 11;
pub const pageflags_PG_arch_1: pageflags = 12;
pub const pageflags_PG_reserved: pageflags = 13;
pub const pageflags_PG_private: pageflags = 14;
pub const pageflags_PG_private_2: pageflags = 15;
pub const pageflags_PG_mappedtodisk: pageflags = 16;
pub const pageflags_PG_reclaim: pageflags = 17;
pub const pageflags_PG_swapbacked: pageflags = 18;
pub const pageflags_PG_unevictable: pageflags = 19;
pub const pageflags_PG_mlocked: pageflags = 20;
pub const pageflags_PG_uncached: pageflags = 21;
pub const pageflags_PG_hwpoison: pageflags = 22;
pub const pageflags_PG_young: pageflags = 23;
pub const pageflags_PG_idle: pageflags = 24;
pub const pageflags___NR_PAGEFLAGS: pageflags = 25;
pub const pageflags_PG_readahead: pageflags = 17;
pub const pageflags_PG_anon_exclusive: pageflags = 16;
pub const pageflags_PG_checked: pageflags = 11;
pub const pageflags_PG_swapcache: pageflags = 11;
pub const pageflags_PG_fscache: pageflags = 15;
pub const pageflags_PG_pinned: pageflags = 11;
pub const pageflags_PG_savepinned: pageflags = 4;
pub const pageflags_PG_foreign: pageflags = 11;
pub const pageflags_PG_xen_remapped: pageflags = 11;
pub const pageflags_PG_isolated: pageflags = 17;
pub const pageflags_PG_reported: pageflags = 3;
pub const pageflags_PG_vmemmap_self_hosted: pageflags = 11;
pub const pageflags_PG_has_hwpoisoned: pageflags = 10;
pub const pageflags_PG_large_rmappable: pageflags = 9;
pub type pageflags = ::std::os::raw::c_uint;
extern "C" {
    pub static mut hugetlb_optimize_vmemmap_key: static_key_false;
}
extern "C" {
    pub fn stable_page_flags(page: *const page) -> u64_;
}
extern "C" {
    pub fn __folio_start_writeback(folio: *mut folio, keep_write: bool_);
}
extern "C" {
    pub fn set_page_writeback(page: *mut page);
}
pub const pagetype_PG_buddy: pagetype = 1073741824;
pub const pagetype_PG_offline: pagetype = 536870912;
pub const pagetype_PG_table: pagetype = 268435456;
pub const pagetype_PG_guard: pagetype = 134217728;
pub const pagetype_PG_hugetlb: pagetype = 67108864;
pub const pagetype_PG_slab: pagetype = 33554432;
pub const pagetype_PG_zsmalloc: pagetype = 16777216;
pub const pagetype_PAGE_TYPE_BASE: pagetype = 2147483648;
pub const pagetype_PAGE_MAPCOUNT_RESERVE: pagetype = -65536;
pub type pagetype = ::std::os::raw::c_long;
extern "C" {
    pub fn page_offline_freeze();
}
extern "C" {
    pub fn page_offline_thaw();
}
extern "C" {
    pub fn page_offline_begin();
}
extern "C" {
    pub fn page_offline_end();
}
extern "C" {
    pub fn is_free_buddy_page(page: *const page) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct local_lock_t {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of local_lock_t"][::std::mem::size_of::<local_lock_t>() - 0usize];
    ["Alignment of local_lock_t"][::std::mem::align_of::<local_lock_t>() - 1usize];
};
pub type class_local_lock_t = *mut local_lock_t;
pub type class_local_lock_irq_t = *mut local_lock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_local_lock_irqsave_t {
    pub lock: *mut local_lock_t,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_local_lock_irqsave_t"]
        [::std::mem::size_of::<class_local_lock_irqsave_t>() - 16usize];
    ["Alignment of class_local_lock_irqsave_t"]
        [::std::mem::align_of::<class_local_lock_irqsave_t>() - 8usize];
    ["Offset of field: class_local_lock_irqsave_t::lock"]
        [::std::mem::offset_of!(class_local_lock_irqsave_t, lock) - 0usize];
    ["Offset of field: class_local_lock_irqsave_t::flags"]
        [::std::mem::offset_of!(class_local_lock_irqsave_t, flags) - 8usize];
};
pub type class_local_lock_nested_bh_t = *mut local_lock_t;
extern "C" {
    pub static mut zswap_stored_pages: atomic_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zswap_lruvec_state {
    pub nr_zswap_protected: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zswap_lruvec_state"][::std::mem::size_of::<zswap_lruvec_state>() - 8usize];
    ["Alignment of zswap_lruvec_state"][::std::mem::align_of::<zswap_lruvec_state>() - 8usize];
    ["Offset of field: zswap_lruvec_state::nr_zswap_protected"]
        [::std::mem::offset_of!(zswap_lruvec_state, nr_zswap_protected) - 0usize];
};
extern "C" {
    pub fn zswap_total_pages() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn zswap_store(folio: *mut folio) -> bool_;
}
extern "C" {
    pub fn zswap_load(folio: *mut folio) -> bool_;
}
extern "C" {
    pub fn zswap_invalidate(swp: swp_entry_t);
}
extern "C" {
    pub fn zswap_swapon(
        type_: ::std::os::raw::c_int,
        nr_pages: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zswap_swapoff(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zswap_memcg_offline_cleanup(memcg: *mut mem_cgroup);
}
extern "C" {
    pub fn zswap_lruvec_state_init(lruvec: *mut lruvec);
}
extern "C" {
    pub fn zswap_folio_swapin(folio: *mut folio);
}
extern "C" {
    pub fn zswap_is_enabled() -> bool_;
}
extern "C" {
    pub fn zswap_never_enabled() -> bool_;
}
pub const migratetype_MIGRATE_UNMOVABLE: migratetype = 0;
pub const migratetype_MIGRATE_MOVABLE: migratetype = 1;
pub const migratetype_MIGRATE_RECLAIMABLE: migratetype = 2;
pub const migratetype_MIGRATE_PCPTYPES: migratetype = 3;
pub const migratetype_MIGRATE_HIGHATOMIC: migratetype = 3;
pub const migratetype_MIGRATE_ISOLATE: migratetype = 4;
pub const migratetype_MIGRATE_TYPES: migratetype = 5;
pub type migratetype = ::std::os::raw::c_uint;
extern "C" {
    pub static migratetype_names: [*const ::std::os::raw::c_char; 5usize];
}
extern "C" {
    pub static mut page_group_by_mobility_disabled: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct free_area {
    pub free_list: [list_head; 5usize],
    pub nr_free: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of free_area"][::std::mem::size_of::<free_area>() - 88usize];
    ["Alignment of free_area"][::std::mem::align_of::<free_area>() - 8usize];
    ["Offset of field: free_area::free_list"]
        [::std::mem::offset_of!(free_area, free_list) - 0usize];
    ["Offset of field: free_area::nr_free"][::std::mem::offset_of!(free_area, nr_free) - 80usize];
};
pub const numa_stat_item_NUMA_HIT: numa_stat_item = 0;
pub const numa_stat_item_NUMA_MISS: numa_stat_item = 1;
pub const numa_stat_item_NUMA_FOREIGN: numa_stat_item = 2;
pub const numa_stat_item_NUMA_INTERLEAVE_HIT: numa_stat_item = 3;
pub const numa_stat_item_NUMA_LOCAL: numa_stat_item = 4;
pub const numa_stat_item_NUMA_OTHER: numa_stat_item = 5;
pub const numa_stat_item_NR_VM_NUMA_EVENT_ITEMS: numa_stat_item = 6;
pub type numa_stat_item = ::std::os::raw::c_uint;
pub const zone_stat_item_NR_FREE_PAGES: zone_stat_item = 0;
pub const zone_stat_item_NR_ZONE_LRU_BASE: zone_stat_item = 1;
pub const zone_stat_item_NR_ZONE_INACTIVE_ANON: zone_stat_item = 1;
pub const zone_stat_item_NR_ZONE_ACTIVE_ANON: zone_stat_item = 2;
pub const zone_stat_item_NR_ZONE_INACTIVE_FILE: zone_stat_item = 3;
pub const zone_stat_item_NR_ZONE_ACTIVE_FILE: zone_stat_item = 4;
pub const zone_stat_item_NR_ZONE_UNEVICTABLE: zone_stat_item = 5;
pub const zone_stat_item_NR_ZONE_WRITE_PENDING: zone_stat_item = 6;
pub const zone_stat_item_NR_MLOCK: zone_stat_item = 7;
pub const zone_stat_item_NR_BOUNCE: zone_stat_item = 8;
pub const zone_stat_item_NR_ZSPAGES: zone_stat_item = 9;
pub const zone_stat_item_NR_FREE_CMA_PAGES: zone_stat_item = 10;
pub const zone_stat_item_NR_UNACCEPTED: zone_stat_item = 11;
pub const zone_stat_item_NR_VM_ZONE_STAT_ITEMS: zone_stat_item = 12;
pub type zone_stat_item = ::std::os::raw::c_uint;
pub const node_stat_item_NR_LRU_BASE: node_stat_item = 0;
pub const node_stat_item_NR_INACTIVE_ANON: node_stat_item = 0;
pub const node_stat_item_NR_ACTIVE_ANON: node_stat_item = 1;
pub const node_stat_item_NR_INACTIVE_FILE: node_stat_item = 2;
pub const node_stat_item_NR_ACTIVE_FILE: node_stat_item = 3;
pub const node_stat_item_NR_UNEVICTABLE: node_stat_item = 4;
pub const node_stat_item_NR_SLAB_RECLAIMABLE_B: node_stat_item = 5;
pub const node_stat_item_NR_SLAB_UNRECLAIMABLE_B: node_stat_item = 6;
pub const node_stat_item_NR_ISOLATED_ANON: node_stat_item = 7;
pub const node_stat_item_NR_ISOLATED_FILE: node_stat_item = 8;
pub const node_stat_item_WORKINGSET_NODES: node_stat_item = 9;
pub const node_stat_item_WORKINGSET_REFAULT_BASE: node_stat_item = 10;
pub const node_stat_item_WORKINGSET_REFAULT_ANON: node_stat_item = 10;
pub const node_stat_item_WORKINGSET_REFAULT_FILE: node_stat_item = 11;
pub const node_stat_item_WORKINGSET_ACTIVATE_BASE: node_stat_item = 12;
pub const node_stat_item_WORKINGSET_ACTIVATE_ANON: node_stat_item = 12;
pub const node_stat_item_WORKINGSET_ACTIVATE_FILE: node_stat_item = 13;
pub const node_stat_item_WORKINGSET_RESTORE_BASE: node_stat_item = 14;
pub const node_stat_item_WORKINGSET_RESTORE_ANON: node_stat_item = 14;
pub const node_stat_item_WORKINGSET_RESTORE_FILE: node_stat_item = 15;
pub const node_stat_item_WORKINGSET_NODERECLAIM: node_stat_item = 16;
pub const node_stat_item_NR_ANON_MAPPED: node_stat_item = 17;
pub const node_stat_item_NR_FILE_MAPPED: node_stat_item = 18;
pub const node_stat_item_NR_FILE_PAGES: node_stat_item = 19;
pub const node_stat_item_NR_FILE_DIRTY: node_stat_item = 20;
pub const node_stat_item_NR_WRITEBACK: node_stat_item = 21;
pub const node_stat_item_NR_WRITEBACK_TEMP: node_stat_item = 22;
pub const node_stat_item_NR_SHMEM: node_stat_item = 23;
pub const node_stat_item_NR_SHMEM_THPS: node_stat_item = 24;
pub const node_stat_item_NR_SHMEM_PMDMAPPED: node_stat_item = 25;
pub const node_stat_item_NR_FILE_THPS: node_stat_item = 26;
pub const node_stat_item_NR_FILE_PMDMAPPED: node_stat_item = 27;
pub const node_stat_item_NR_ANON_THPS: node_stat_item = 28;
pub const node_stat_item_NR_VMSCAN_WRITE: node_stat_item = 29;
pub const node_stat_item_NR_VMSCAN_IMMEDIATE: node_stat_item = 30;
pub const node_stat_item_NR_DIRTIED: node_stat_item = 31;
pub const node_stat_item_NR_WRITTEN: node_stat_item = 32;
pub const node_stat_item_NR_THROTTLED_WRITTEN: node_stat_item = 33;
pub const node_stat_item_NR_KERNEL_MISC_RECLAIMABLE: node_stat_item = 34;
pub const node_stat_item_NR_FOLL_PIN_ACQUIRED: node_stat_item = 35;
pub const node_stat_item_NR_FOLL_PIN_RELEASED: node_stat_item = 36;
pub const node_stat_item_NR_KERNEL_STACK_KB: node_stat_item = 37;
pub const node_stat_item_NR_PAGETABLE: node_stat_item = 38;
pub const node_stat_item_NR_SECONDARY_PAGETABLE: node_stat_item = 39;
pub const node_stat_item_NR_IOMMU_PAGES: node_stat_item = 40;
pub const node_stat_item_NR_SWAPCACHE: node_stat_item = 41;
pub const node_stat_item_PGPROMOTE_SUCCESS: node_stat_item = 42;
pub const node_stat_item_PGPROMOTE_CANDIDATE: node_stat_item = 43;
pub const node_stat_item_PGDEMOTE_KSWAPD: node_stat_item = 44;
pub const node_stat_item_PGDEMOTE_DIRECT: node_stat_item = 45;
pub const node_stat_item_PGDEMOTE_KHUGEPAGED: node_stat_item = 46;
pub const node_stat_item_NR_VM_NODE_STAT_ITEMS: node_stat_item = 47;
pub type node_stat_item = ::std::os::raw::c_uint;
pub const lru_list_LRU_INACTIVE_ANON: lru_list = 0;
pub const lru_list_LRU_ACTIVE_ANON: lru_list = 1;
pub const lru_list_LRU_INACTIVE_FILE: lru_list = 2;
pub const lru_list_LRU_ACTIVE_FILE: lru_list = 3;
pub const lru_list_LRU_UNEVICTABLE: lru_list = 4;
pub const lru_list_NR_LRU_LISTS: lru_list = 5;
pub type lru_list = ::std::os::raw::c_uint;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_WRITEBACK: vmscan_throttle_state = 0;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_ISOLATED: vmscan_throttle_state = 1;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_NOPROGRESS: vmscan_throttle_state = 2;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_CONGESTED: vmscan_throttle_state = 3;
pub const vmscan_throttle_state_NR_VMSCAN_THROTTLE: vmscan_throttle_state = 4;
pub type vmscan_throttle_state = ::std::os::raw::c_uint;
pub const lruvec_flags_LRUVEC_CGROUP_CONGESTED: lruvec_flags = 0;
pub const lruvec_flags_LRUVEC_NODE_CONGESTED: lruvec_flags = 1;
pub type lruvec_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_vma_mapped_walk {
    _unused: [u8; 0],
}
pub const LRU_GEN_ANON: _bindgen_ty_17 = 0;
pub const LRU_GEN_FILE: _bindgen_ty_17 = 1;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const LRU_GEN_CORE: _bindgen_ty_18 = 0;
pub const LRU_GEN_MM_WALK: _bindgen_ty_18 = 1;
pub const LRU_GEN_NONLEAF_YOUNG: _bindgen_ty_18 = 2;
pub const NR_LRU_GEN_CAPS: _bindgen_ty_18 = 3;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lru_gen_folio {
    pub max_seq: ::std::os::raw::c_ulong,
    pub min_seq: [::std::os::raw::c_ulong; 2usize],
    pub timestamps: [::std::os::raw::c_ulong; 4usize],
    pub folios: [[[list_head; 5usize]; 2usize]; 4usize],
    pub nr_pages: [[[::std::os::raw::c_long; 5usize]; 2usize]; 4usize],
    pub avg_refaulted: [[::std::os::raw::c_ulong; 4usize]; 2usize],
    pub avg_total: [[::std::os::raw::c_ulong; 4usize]; 2usize],
    pub protected: [[[::std::os::raw::c_ulong; 3usize]; 2usize]; 1usize],
    pub evicted: [[[atomic_long_t; 4usize]; 2usize]; 1usize],
    pub refaulted: [[[atomic_long_t; 4usize]; 2usize]; 1usize],
    pub enabled: bool_,
    pub gen: u8_,
    pub seg: u8_,
    pub list: hlist_nulls_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lru_gen_folio"][::std::mem::size_of::<lru_gen_folio>() - 1344usize];
    ["Alignment of lru_gen_folio"][::std::mem::align_of::<lru_gen_folio>() - 8usize];
    ["Offset of field: lru_gen_folio::max_seq"]
        [::std::mem::offset_of!(lru_gen_folio, max_seq) - 0usize];
    ["Offset of field: lru_gen_folio::min_seq"]
        [::std::mem::offset_of!(lru_gen_folio, min_seq) - 8usize];
    ["Offset of field: lru_gen_folio::timestamps"]
        [::std::mem::offset_of!(lru_gen_folio, timestamps) - 24usize];
    ["Offset of field: lru_gen_folio::folios"]
        [::std::mem::offset_of!(lru_gen_folio, folios) - 56usize];
    ["Offset of field: lru_gen_folio::nr_pages"]
        [::std::mem::offset_of!(lru_gen_folio, nr_pages) - 696usize];
    ["Offset of field: lru_gen_folio::avg_refaulted"]
        [::std::mem::offset_of!(lru_gen_folio, avg_refaulted) - 1016usize];
    ["Offset of field: lru_gen_folio::avg_total"]
        [::std::mem::offset_of!(lru_gen_folio, avg_total) - 1080usize];
    ["Offset of field: lru_gen_folio::protected"]
        [::std::mem::offset_of!(lru_gen_folio, protected) - 1144usize];
    ["Offset of field: lru_gen_folio::evicted"]
        [::std::mem::offset_of!(lru_gen_folio, evicted) - 1192usize];
    ["Offset of field: lru_gen_folio::refaulted"]
        [::std::mem::offset_of!(lru_gen_folio, refaulted) - 1256usize];
    ["Offset of field: lru_gen_folio::enabled"]
        [::std::mem::offset_of!(lru_gen_folio, enabled) - 1320usize];
    ["Offset of field: lru_gen_folio::gen"][::std::mem::offset_of!(lru_gen_folio, gen) - 1321usize];
    ["Offset of field: lru_gen_folio::seg"][::std::mem::offset_of!(lru_gen_folio, seg) - 1322usize];
    ["Offset of field: lru_gen_folio::list"]
        [::std::mem::offset_of!(lru_gen_folio, list) - 1328usize];
};
pub const MM_LEAF_TOTAL: _bindgen_ty_19 = 0;
pub const MM_LEAF_OLD: _bindgen_ty_19 = 1;
pub const MM_LEAF_YOUNG: _bindgen_ty_19 = 2;
pub const MM_NONLEAF_TOTAL: _bindgen_ty_19 = 3;
pub const MM_NONLEAF_FOUND: _bindgen_ty_19 = 4;
pub const MM_NONLEAF_ADDED: _bindgen_ty_19 = 5;
pub const NR_MM_STATS: _bindgen_ty_19 = 6;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lru_gen_mm_state {
    pub seq: ::std::os::raw::c_ulong,
    pub head: *mut list_head,
    pub tail: *mut list_head,
    pub filters: [*mut ::std::os::raw::c_ulong; 2usize],
    pub stats: [[::std::os::raw::c_ulong; 6usize]; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lru_gen_mm_state"][::std::mem::size_of::<lru_gen_mm_state>() - 88usize];
    ["Alignment of lru_gen_mm_state"][::std::mem::align_of::<lru_gen_mm_state>() - 8usize];
    ["Offset of field: lru_gen_mm_state::seq"]
        [::std::mem::offset_of!(lru_gen_mm_state, seq) - 0usize];
    ["Offset of field: lru_gen_mm_state::head"]
        [::std::mem::offset_of!(lru_gen_mm_state, head) - 8usize];
    ["Offset of field: lru_gen_mm_state::tail"]
        [::std::mem::offset_of!(lru_gen_mm_state, tail) - 16usize];
    ["Offset of field: lru_gen_mm_state::filters"]
        [::std::mem::offset_of!(lru_gen_mm_state, filters) - 24usize];
    ["Offset of field: lru_gen_mm_state::stats"]
        [::std::mem::offset_of!(lru_gen_mm_state, stats) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lru_gen_mm_walk {
    pub lruvec: *mut lruvec,
    pub seq: ::std::os::raw::c_ulong,
    pub next_addr: ::std::os::raw::c_ulong,
    pub nr_pages: [[[::std::os::raw::c_int; 5usize]; 2usize]; 4usize],
    pub mm_stats: [::std::os::raw::c_int; 6usize],
    pub batched: ::std::os::raw::c_int,
    pub can_swap: bool_,
    pub force_scan: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lru_gen_mm_walk"][::std::mem::size_of::<lru_gen_mm_walk>() - 216usize];
    ["Alignment of lru_gen_mm_walk"][::std::mem::align_of::<lru_gen_mm_walk>() - 8usize];
    ["Offset of field: lru_gen_mm_walk::lruvec"]
        [::std::mem::offset_of!(lru_gen_mm_walk, lruvec) - 0usize];
    ["Offset of field: lru_gen_mm_walk::seq"]
        [::std::mem::offset_of!(lru_gen_mm_walk, seq) - 8usize];
    ["Offset of field: lru_gen_mm_walk::next_addr"]
        [::std::mem::offset_of!(lru_gen_mm_walk, next_addr) - 16usize];
    ["Offset of field: lru_gen_mm_walk::nr_pages"]
        [::std::mem::offset_of!(lru_gen_mm_walk, nr_pages) - 24usize];
    ["Offset of field: lru_gen_mm_walk::mm_stats"]
        [::std::mem::offset_of!(lru_gen_mm_walk, mm_stats) - 184usize];
    ["Offset of field: lru_gen_mm_walk::batched"]
        [::std::mem::offset_of!(lru_gen_mm_walk, batched) - 208usize];
    ["Offset of field: lru_gen_mm_walk::can_swap"]
        [::std::mem::offset_of!(lru_gen_mm_walk, can_swap) - 212usize];
    ["Offset of field: lru_gen_mm_walk::force_scan"]
        [::std::mem::offset_of!(lru_gen_mm_walk, force_scan) - 213usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lru_gen_memcg {
    pub seq: ::std::os::raw::c_ulong,
    pub nr_memcgs: [::std::os::raw::c_ulong; 3usize],
    pub fifo: [[hlist_nulls_head; 8usize]; 3usize],
    pub lock: spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lru_gen_memcg"][::std::mem::size_of::<lru_gen_memcg>() - 232usize];
    ["Alignment of lru_gen_memcg"][::std::mem::align_of::<lru_gen_memcg>() - 8usize];
    ["Offset of field: lru_gen_memcg::seq"][::std::mem::offset_of!(lru_gen_memcg, seq) - 0usize];
    ["Offset of field: lru_gen_memcg::nr_memcgs"]
        [::std::mem::offset_of!(lru_gen_memcg, nr_memcgs) - 8usize];
    ["Offset of field: lru_gen_memcg::fifo"][::std::mem::offset_of!(lru_gen_memcg, fifo) - 32usize];
    ["Offset of field: lru_gen_memcg::lock"]
        [::std::mem::offset_of!(lru_gen_memcg, lock) - 224usize];
};
extern "C" {
    pub fn lru_gen_init_pgdat(pgdat: *mut pglist_data);
}
extern "C" {
    pub fn lru_gen_init_lruvec(lruvec: *mut lruvec);
}
extern "C" {
    pub fn lru_gen_look_around(pvmw: *mut page_vma_mapped_walk);
}
extern "C" {
    pub fn lru_gen_init_memcg(memcg: *mut mem_cgroup);
}
extern "C" {
    pub fn lru_gen_exit_memcg(memcg: *mut mem_cgroup);
}
extern "C" {
    pub fn lru_gen_online_memcg(memcg: *mut mem_cgroup);
}
extern "C" {
    pub fn lru_gen_offline_memcg(memcg: *mut mem_cgroup);
}
extern "C" {
    pub fn lru_gen_release_memcg(memcg: *mut mem_cgroup);
}
extern "C" {
    pub fn lru_gen_soft_reclaim(memcg: *mut mem_cgroup, nid: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lruvec {
    pub lists: [list_head; 5usize],
    pub lru_lock: spinlock_t,
    pub anon_cost: ::std::os::raw::c_ulong,
    pub file_cost: ::std::os::raw::c_ulong,
    pub nonresident_age: atomic_long_t,
    pub refaults: [::std::os::raw::c_ulong; 2usize],
    pub flags: ::std::os::raw::c_ulong,
    pub lrugen: lru_gen_folio,
    pub mm_state: lru_gen_mm_state,
    pub pgdat: *mut pglist_data,
    pub zswap_lruvec_state: zswap_lruvec_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lruvec"][::std::mem::size_of::<lruvec>() - 1584usize];
    ["Alignment of lruvec"][::std::mem::align_of::<lruvec>() - 8usize];
    ["Offset of field: lruvec::lists"][::std::mem::offset_of!(lruvec, lists) - 0usize];
    ["Offset of field: lruvec::lru_lock"][::std::mem::offset_of!(lruvec, lru_lock) - 80usize];
    ["Offset of field: lruvec::anon_cost"][::std::mem::offset_of!(lruvec, anon_cost) - 88usize];
    ["Offset of field: lruvec::file_cost"][::std::mem::offset_of!(lruvec, file_cost) - 96usize];
    ["Offset of field: lruvec::nonresident_age"]
        [::std::mem::offset_of!(lruvec, nonresident_age) - 104usize];
    ["Offset of field: lruvec::refaults"][::std::mem::offset_of!(lruvec, refaults) - 112usize];
    ["Offset of field: lruvec::flags"][::std::mem::offset_of!(lruvec, flags) - 128usize];
    ["Offset of field: lruvec::lrugen"][::std::mem::offset_of!(lruvec, lrugen) - 136usize];
    ["Offset of field: lruvec::mm_state"][::std::mem::offset_of!(lruvec, mm_state) - 1480usize];
    ["Offset of field: lruvec::pgdat"][::std::mem::offset_of!(lruvec, pgdat) - 1568usize];
    ["Offset of field: lruvec::zswap_lruvec_state"]
        [::std::mem::offset_of!(lruvec, zswap_lruvec_state) - 1576usize];
};
pub type isolate_mode_t = ::std::os::raw::c_uint;
pub const zone_watermarks_WMARK_MIN: zone_watermarks = 0;
pub const zone_watermarks_WMARK_LOW: zone_watermarks = 1;
pub const zone_watermarks_WMARK_HIGH: zone_watermarks = 2;
pub const zone_watermarks_WMARK_PROMO: zone_watermarks = 3;
pub const zone_watermarks_NR_WMARK: zone_watermarks = 4;
pub type zone_watermarks = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct per_cpu_pages {
    pub lock: spinlock_t,
    pub count: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
    pub high_min: ::std::os::raw::c_int,
    pub high_max: ::std::os::raw::c_int,
    pub batch: ::std::os::raw::c_int,
    pub flags: u8_,
    pub alloc_factor: u8_,
    pub expire: u8_,
    pub free_count: ::std::os::raw::c_short,
    pub lists: [list_head; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of per_cpu_pages"][::std::mem::size_of::<per_cpu_pages>() - 256usize];
    ["Alignment of per_cpu_pages"][::std::mem::align_of::<per_cpu_pages>() - 64usize];
    ["Offset of field: per_cpu_pages::lock"][::std::mem::offset_of!(per_cpu_pages, lock) - 0usize];
    ["Offset of field: per_cpu_pages::count"]
        [::std::mem::offset_of!(per_cpu_pages, count) - 4usize];
    ["Offset of field: per_cpu_pages::high"][::std::mem::offset_of!(per_cpu_pages, high) - 8usize];
    ["Offset of field: per_cpu_pages::high_min"]
        [::std::mem::offset_of!(per_cpu_pages, high_min) - 12usize];
    ["Offset of field: per_cpu_pages::high_max"]
        [::std::mem::offset_of!(per_cpu_pages, high_max) - 16usize];
    ["Offset of field: per_cpu_pages::batch"]
        [::std::mem::offset_of!(per_cpu_pages, batch) - 20usize];
    ["Offset of field: per_cpu_pages::flags"]
        [::std::mem::offset_of!(per_cpu_pages, flags) - 24usize];
    ["Offset of field: per_cpu_pages::alloc_factor"]
        [::std::mem::offset_of!(per_cpu_pages, alloc_factor) - 25usize];
    ["Offset of field: per_cpu_pages::expire"]
        [::std::mem::offset_of!(per_cpu_pages, expire) - 26usize];
    ["Offset of field: per_cpu_pages::free_count"]
        [::std::mem::offset_of!(per_cpu_pages, free_count) - 28usize];
    ["Offset of field: per_cpu_pages::lists"]
        [::std::mem::offset_of!(per_cpu_pages, lists) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct per_cpu_zonestat {
    pub vm_stat_diff: [s8; 12usize],
    pub stat_threshold: s8,
    pub vm_numa_event: [::std::os::raw::c_ulong; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of per_cpu_zonestat"][::std::mem::size_of::<per_cpu_zonestat>() - 64usize];
    ["Alignment of per_cpu_zonestat"][::std::mem::align_of::<per_cpu_zonestat>() - 8usize];
    ["Offset of field: per_cpu_zonestat::vm_stat_diff"]
        [::std::mem::offset_of!(per_cpu_zonestat, vm_stat_diff) - 0usize];
    ["Offset of field: per_cpu_zonestat::stat_threshold"]
        [::std::mem::offset_of!(per_cpu_zonestat, stat_threshold) - 12usize];
    ["Offset of field: per_cpu_zonestat::vm_numa_event"]
        [::std::mem::offset_of!(per_cpu_zonestat, vm_numa_event) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct per_cpu_nodestat {
    pub stat_threshold: s8,
    pub vm_node_stat_diff: [s8; 47usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of per_cpu_nodestat"][::std::mem::size_of::<per_cpu_nodestat>() - 48usize];
    ["Alignment of per_cpu_nodestat"][::std::mem::align_of::<per_cpu_nodestat>() - 1usize];
    ["Offset of field: per_cpu_nodestat::stat_threshold"]
        [::std::mem::offset_of!(per_cpu_nodestat, stat_threshold) - 0usize];
    ["Offset of field: per_cpu_nodestat::vm_node_stat_diff"]
        [::std::mem::offset_of!(per_cpu_nodestat, vm_node_stat_diff) - 1usize];
};
pub const zone_type_ZONE_DMA: zone_type = 0;
pub const zone_type_ZONE_DMA32: zone_type = 1;
pub const zone_type_ZONE_NORMAL: zone_type = 2;
pub const zone_type_ZONE_MOVABLE: zone_type = 3;
pub const zone_type_ZONE_DEVICE: zone_type = 4;
pub const zone_type___MAX_NR_ZONES: zone_type = 5;
pub type zone_type = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(64))]
pub struct zone {
    pub _watermark: [::std::os::raw::c_ulong; 4usize],
    pub watermark_boost: ::std::os::raw::c_ulong,
    pub nr_reserved_highatomic: ::std::os::raw::c_ulong,
    pub lowmem_reserve: [::std::os::raw::c_long; 5usize],
    pub node: ::std::os::raw::c_int,
    pub zone_pgdat: *mut pglist_data,
    pub per_cpu_pageset: *mut per_cpu_pages,
    pub per_cpu_zonestats: *mut per_cpu_zonestat,
    pub pageset_high_min: ::std::os::raw::c_int,
    pub pageset_high_max: ::std::os::raw::c_int,
    pub pageset_batch: ::std::os::raw::c_int,
    pub zone_start_pfn: ::std::os::raw::c_ulong,
    pub managed_pages: atomic_long_t,
    pub spanned_pages: ::std::os::raw::c_ulong,
    pub present_pages: ::std::os::raw::c_ulong,
    pub present_early_pages: ::std::os::raw::c_ulong,
    pub name: *const ::std::os::raw::c_char,
    pub nr_isolate_pageblock: ::std::os::raw::c_ulong,
    pub span_seqlock: seqlock_t,
    pub initialized: ::std::os::raw::c_int,
    pub __bindgen_padding_0: [u64; 6usize],
    pub _pad1_: cacheline_padding,
    pub free_area: [free_area; 11usize],
    pub unaccepted_pages: list_head,
    pub flags: ::std::os::raw::c_ulong,
    pub lock: spinlock_t,
    pub __bindgen_padding_1: [u64; 3usize],
    pub _pad2_: cacheline_padding,
    pub percpu_drift_mark: ::std::os::raw::c_ulong,
    pub compact_cached_free_pfn: ::std::os::raw::c_ulong,
    pub compact_cached_migrate_pfn: [::std::os::raw::c_ulong; 2usize],
    pub compact_init_migrate_pfn: ::std::os::raw::c_ulong,
    pub compact_init_free_pfn: ::std::os::raw::c_ulong,
    pub compact_considered: ::std::os::raw::c_uint,
    pub compact_defer_shift: ::std::os::raw::c_uint,
    pub compact_order_failed: ::std::os::raw::c_int,
    pub compact_blockskip_flush: bool_,
    pub contiguous: bool_,
    pub __bindgen_padding_2: [u64; 0usize],
    pub _pad3_: cacheline_padding,
    pub vm_stat: [atomic_long_t; 12usize],
    pub vm_numa_event: [atomic_long_t; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zone"][::std::mem::size_of::<zone>() - 1536usize];
    ["Alignment of zone"][::std::mem::align_of::<zone>() - 64usize];
    ["Offset of field: zone::_watermark"][::std::mem::offset_of!(zone, _watermark) - 0usize];
    ["Offset of field: zone::watermark_boost"]
        [::std::mem::offset_of!(zone, watermark_boost) - 32usize];
    ["Offset of field: zone::nr_reserved_highatomic"]
        [::std::mem::offset_of!(zone, nr_reserved_highatomic) - 40usize];
    ["Offset of field: zone::lowmem_reserve"]
        [::std::mem::offset_of!(zone, lowmem_reserve) - 48usize];
    ["Offset of field: zone::node"][::std::mem::offset_of!(zone, node) - 88usize];
    ["Offset of field: zone::zone_pgdat"][::std::mem::offset_of!(zone, zone_pgdat) - 96usize];
    ["Offset of field: zone::per_cpu_pageset"]
        [::std::mem::offset_of!(zone, per_cpu_pageset) - 104usize];
    ["Offset of field: zone::per_cpu_zonestats"]
        [::std::mem::offset_of!(zone, per_cpu_zonestats) - 112usize];
    ["Offset of field: zone::pageset_high_min"]
        [::std::mem::offset_of!(zone, pageset_high_min) - 120usize];
    ["Offset of field: zone::pageset_high_max"]
        [::std::mem::offset_of!(zone, pageset_high_max) - 124usize];
    ["Offset of field: zone::pageset_batch"]
        [::std::mem::offset_of!(zone, pageset_batch) - 128usize];
    ["Offset of field: zone::zone_start_pfn"]
        [::std::mem::offset_of!(zone, zone_start_pfn) - 136usize];
    ["Offset of field: zone::managed_pages"]
        [::std::mem::offset_of!(zone, managed_pages) - 144usize];
    ["Offset of field: zone::spanned_pages"]
        [::std::mem::offset_of!(zone, spanned_pages) - 152usize];
    ["Offset of field: zone::present_pages"]
        [::std::mem::offset_of!(zone, present_pages) - 160usize];
    ["Offset of field: zone::present_early_pages"]
        [::std::mem::offset_of!(zone, present_early_pages) - 168usize];
    ["Offset of field: zone::name"][::std::mem::offset_of!(zone, name) - 176usize];
    ["Offset of field: zone::nr_isolate_pageblock"]
        [::std::mem::offset_of!(zone, nr_isolate_pageblock) - 184usize];
    ["Offset of field: zone::span_seqlock"][::std::mem::offset_of!(zone, span_seqlock) - 192usize];
    ["Offset of field: zone::initialized"][::std::mem::offset_of!(zone, initialized) - 200usize];
    ["Offset of field: zone::_pad1_"][::std::mem::offset_of!(zone, _pad1_) - 256usize];
    ["Offset of field: zone::free_area"][::std::mem::offset_of!(zone, free_area) - 256usize];
    ["Offset of field: zone::unaccepted_pages"]
        [::std::mem::offset_of!(zone, unaccepted_pages) - 1224usize];
    ["Offset of field: zone::flags"][::std::mem::offset_of!(zone, flags) - 1240usize];
    ["Offset of field: zone::lock"][::std::mem::offset_of!(zone, lock) - 1248usize];
    ["Offset of field: zone::_pad2_"][::std::mem::offset_of!(zone, _pad2_) - 1280usize];
    ["Offset of field: zone::percpu_drift_mark"]
        [::std::mem::offset_of!(zone, percpu_drift_mark) - 1280usize];
    ["Offset of field: zone::compact_cached_free_pfn"]
        [::std::mem::offset_of!(zone, compact_cached_free_pfn) - 1288usize];
    ["Offset of field: zone::compact_cached_migrate_pfn"]
        [::std::mem::offset_of!(zone, compact_cached_migrate_pfn) - 1296usize];
    ["Offset of field: zone::compact_init_migrate_pfn"]
        [::std::mem::offset_of!(zone, compact_init_migrate_pfn) - 1312usize];
    ["Offset of field: zone::compact_init_free_pfn"]
        [::std::mem::offset_of!(zone, compact_init_free_pfn) - 1320usize];
    ["Offset of field: zone::compact_considered"]
        [::std::mem::offset_of!(zone, compact_considered) - 1328usize];
    ["Offset of field: zone::compact_defer_shift"]
        [::std::mem::offset_of!(zone, compact_defer_shift) - 1332usize];
    ["Offset of field: zone::compact_order_failed"]
        [::std::mem::offset_of!(zone, compact_order_failed) - 1336usize];
    ["Offset of field: zone::compact_blockskip_flush"]
        [::std::mem::offset_of!(zone, compact_blockskip_flush) - 1340usize];
    ["Offset of field: zone::contiguous"][::std::mem::offset_of!(zone, contiguous) - 1341usize];
    ["Offset of field: zone::_pad3_"][::std::mem::offset_of!(zone, _pad3_) - 1344usize];
    ["Offset of field: zone::vm_stat"][::std::mem::offset_of!(zone, vm_stat) - 1344usize];
    ["Offset of field: zone::vm_numa_event"]
        [::std::mem::offset_of!(zone, vm_numa_event) - 1440usize];
};
pub const pgdat_flags_PGDAT_DIRTY: pgdat_flags = 0;
pub const pgdat_flags_PGDAT_WRITEBACK: pgdat_flags = 1;
pub const pgdat_flags_PGDAT_RECLAIM_LOCKED: pgdat_flags = 2;
pub type pgdat_flags = ::std::os::raw::c_uint;
pub const zone_flags_ZONE_BOOSTED_WATERMARK: zone_flags = 0;
pub const zone_flags_ZONE_RECLAIM_ACTIVE: zone_flags = 1;
pub const zone_flags_ZONE_BELOW_HIGH: zone_flags = 2;
pub type zone_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn memmap_init_zone_device(
        arg1: *mut zone,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut dev_pagemap,
    );
}
pub const ZONELIST_FALLBACK: _bindgen_ty_20 = 0;
pub const ZONELIST_NOFALLBACK: _bindgen_ty_20 = 1;
pub const MAX_ZONELISTS: _bindgen_ty_20 = 2;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zoneref {
    pub zone: *mut zone,
    pub zone_idx: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zoneref"][::std::mem::size_of::<zoneref>() - 16usize];
    ["Alignment of zoneref"][::std::mem::align_of::<zoneref>() - 8usize];
    ["Offset of field: zoneref::zone"][::std::mem::offset_of!(zoneref, zone) - 0usize];
    ["Offset of field: zoneref::zone_idx"][::std::mem::offset_of!(zoneref, zone_idx) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zonelist {
    pub _zonerefs: [zoneref; 5121usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zonelist"][::std::mem::size_of::<zonelist>() - 81936usize];
    ["Alignment of zonelist"][::std::mem::align_of::<zonelist>() - 8usize];
    ["Offset of field: zonelist::_zonerefs"][::std::mem::offset_of!(zonelist, _zonerefs) - 0usize];
};
extern "C" {
    pub static mut mem_map: *mut page;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct deferred_split {
    pub split_queue_lock: spinlock_t,
    pub split_queue: list_head,
    pub split_queue_len: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of deferred_split"][::std::mem::size_of::<deferred_split>() - 32usize];
    ["Alignment of deferred_split"][::std::mem::align_of::<deferred_split>() - 8usize];
    ["Offset of field: deferred_split::split_queue_lock"]
        [::std::mem::offset_of!(deferred_split, split_queue_lock) - 0usize];
    ["Offset of field: deferred_split::split_queue"]
        [::std::mem::offset_of!(deferred_split, split_queue) - 8usize];
    ["Offset of field: deferred_split::split_queue_len"]
        [::std::mem::offset_of!(deferred_split, split_queue_len) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_failure_stats {
    pub total: ::std::os::raw::c_ulong,
    pub ignored: ::std::os::raw::c_ulong,
    pub failed: ::std::os::raw::c_ulong,
    pub delayed: ::std::os::raw::c_ulong,
    pub recovered: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memory_failure_stats"][::std::mem::size_of::<memory_failure_stats>() - 40usize];
    ["Alignment of memory_failure_stats"][::std::mem::align_of::<memory_failure_stats>() - 8usize];
    ["Offset of field: memory_failure_stats::total"]
        [::std::mem::offset_of!(memory_failure_stats, total) - 0usize];
    ["Offset of field: memory_failure_stats::ignored"]
        [::std::mem::offset_of!(memory_failure_stats, ignored) - 8usize];
    ["Offset of field: memory_failure_stats::failed"]
        [::std::mem::offset_of!(memory_failure_stats, failed) - 16usize];
    ["Offset of field: memory_failure_stats::delayed"]
        [::std::mem::offset_of!(memory_failure_stats, delayed) - 24usize];
    ["Offset of field: memory_failure_stats::recovered"]
        [::std::mem::offset_of!(memory_failure_stats, recovered) - 32usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct pglist_data {
    pub node_zones: [zone; 5usize],
    pub node_zonelists: [zonelist; 2usize],
    pub nr_zones: ::std::os::raw::c_int,
    pub node_size_lock: spinlock_t,
    pub node_start_pfn: ::std::os::raw::c_ulong,
    pub node_present_pages: ::std::os::raw::c_ulong,
    pub node_spanned_pages: ::std::os::raw::c_ulong,
    pub node_id: ::std::os::raw::c_int,
    pub kswapd_wait: wait_queue_head_t,
    pub pfmemalloc_wait: wait_queue_head_t,
    pub reclaim_wait: [wait_queue_head_t; 4usize],
    pub nr_writeback_throttled: atomic_t,
    pub nr_reclaim_start: ::std::os::raw::c_ulong,
    pub kswapd_lock: mutex,
    pub kswapd: *mut task_struct,
    pub kswapd_order: ::std::os::raw::c_int,
    pub kswapd_highest_zoneidx: zone_type,
    pub kswapd_failures: ::std::os::raw::c_int,
    pub kcompactd_max_order: ::std::os::raw::c_int,
    pub kcompactd_highest_zoneidx: zone_type,
    pub kcompactd_wait: wait_queue_head_t,
    pub kcompactd: *mut task_struct,
    pub proactive_compact_trigger: bool_,
    pub totalreserve_pages: ::std::os::raw::c_ulong,
    pub min_unmapped_pages: ::std::os::raw::c_ulong,
    pub min_slab_pages: ::std::os::raw::c_ulong,
    pub __bindgen_padding_0: [u64; 3usize],
    pub _pad1_: cacheline_padding,
    pub deferred_split_queue: deferred_split,
    pub nbp_rl_start: ::std::os::raw::c_uint,
    pub nbp_rl_nr_cand: ::std::os::raw::c_ulong,
    pub nbp_threshold: ::std::os::raw::c_uint,
    pub nbp_th_start: ::std::os::raw::c_uint,
    pub nbp_th_nr_cand: ::std::os::raw::c_ulong,
    pub __lruvec: lruvec,
    pub flags: ::std::os::raw::c_ulong,
    pub mm_walk: lru_gen_mm_walk,
    pub memcg_lru: lru_gen_memcg,
    pub __bindgen_padding_1: u64,
    pub _pad2_: cacheline_padding,
    pub per_cpu_nodestats: *mut per_cpu_nodestat,
    pub vm_stat: [atomic_long_t; 47usize],
    pub memtier: *mut memory_tier,
    pub mf_stats: memory_failure_stats,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pglist_data"][::std::mem::size_of::<pglist_data>() - 174464usize];
    ["Alignment of pglist_data"][::std::mem::align_of::<pglist_data>() - 64usize];
    ["Offset of field: pglist_data::node_zones"]
        [::std::mem::offset_of!(pglist_data, node_zones) - 0usize];
    ["Offset of field: pglist_data::node_zonelists"]
        [::std::mem::offset_of!(pglist_data, node_zonelists) - 7680usize];
    ["Offset of field: pglist_data::nr_zones"]
        [::std::mem::offset_of!(pglist_data, nr_zones) - 171552usize];
    ["Offset of field: pglist_data::node_size_lock"]
        [::std::mem::offset_of!(pglist_data, node_size_lock) - 171556usize];
    ["Offset of field: pglist_data::node_start_pfn"]
        [::std::mem::offset_of!(pglist_data, node_start_pfn) - 171560usize];
    ["Offset of field: pglist_data::node_present_pages"]
        [::std::mem::offset_of!(pglist_data, node_present_pages) - 171568usize];
    ["Offset of field: pglist_data::node_spanned_pages"]
        [::std::mem::offset_of!(pglist_data, node_spanned_pages) - 171576usize];
    ["Offset of field: pglist_data::node_id"]
        [::std::mem::offset_of!(pglist_data, node_id) - 171584usize];
    ["Offset of field: pglist_data::kswapd_wait"]
        [::std::mem::offset_of!(pglist_data, kswapd_wait) - 171592usize];
    ["Offset of field: pglist_data::pfmemalloc_wait"]
        [::std::mem::offset_of!(pglist_data, pfmemalloc_wait) - 171616usize];
    ["Offset of field: pglist_data::reclaim_wait"]
        [::std::mem::offset_of!(pglist_data, reclaim_wait) - 171640usize];
    ["Offset of field: pglist_data::nr_writeback_throttled"]
        [::std::mem::offset_of!(pglist_data, nr_writeback_throttled) - 171736usize];
    ["Offset of field: pglist_data::nr_reclaim_start"]
        [::std::mem::offset_of!(pglist_data, nr_reclaim_start) - 171744usize];
    ["Offset of field: pglist_data::kswapd_lock"]
        [::std::mem::offset_of!(pglist_data, kswapd_lock) - 171752usize];
    ["Offset of field: pglist_data::kswapd"]
        [::std::mem::offset_of!(pglist_data, kswapd) - 171784usize];
    ["Offset of field: pglist_data::kswapd_order"]
        [::std::mem::offset_of!(pglist_data, kswapd_order) - 171792usize];
    ["Offset of field: pglist_data::kswapd_highest_zoneidx"]
        [::std::mem::offset_of!(pglist_data, kswapd_highest_zoneidx) - 171796usize];
    ["Offset of field: pglist_data::kswapd_failures"]
        [::std::mem::offset_of!(pglist_data, kswapd_failures) - 171800usize];
    ["Offset of field: pglist_data::kcompactd_max_order"]
        [::std::mem::offset_of!(pglist_data, kcompactd_max_order) - 171804usize];
    ["Offset of field: pglist_data::kcompactd_highest_zoneidx"]
        [::std::mem::offset_of!(pglist_data, kcompactd_highest_zoneidx) - 171808usize];
    ["Offset of field: pglist_data::kcompactd_wait"]
        [::std::mem::offset_of!(pglist_data, kcompactd_wait) - 171816usize];
    ["Offset of field: pglist_data::kcompactd"]
        [::std::mem::offset_of!(pglist_data, kcompactd) - 171840usize];
    ["Offset of field: pglist_data::proactive_compact_trigger"]
        [::std::mem::offset_of!(pglist_data, proactive_compact_trigger) - 171848usize];
    ["Offset of field: pglist_data::totalreserve_pages"]
        [::std::mem::offset_of!(pglist_data, totalreserve_pages) - 171856usize];
    ["Offset of field: pglist_data::min_unmapped_pages"]
        [::std::mem::offset_of!(pglist_data, min_unmapped_pages) - 171864usize];
    ["Offset of field: pglist_data::min_slab_pages"]
        [::std::mem::offset_of!(pglist_data, min_slab_pages) - 171872usize];
    ["Offset of field: pglist_data::_pad1_"]
        [::std::mem::offset_of!(pglist_data, _pad1_) - 171904usize];
    ["Offset of field: pglist_data::deferred_split_queue"]
        [::std::mem::offset_of!(pglist_data, deferred_split_queue) - 171904usize];
    ["Offset of field: pglist_data::nbp_rl_start"]
        [::std::mem::offset_of!(pglist_data, nbp_rl_start) - 171936usize];
    ["Offset of field: pglist_data::nbp_rl_nr_cand"]
        [::std::mem::offset_of!(pglist_data, nbp_rl_nr_cand) - 171944usize];
    ["Offset of field: pglist_data::nbp_threshold"]
        [::std::mem::offset_of!(pglist_data, nbp_threshold) - 171952usize];
    ["Offset of field: pglist_data::nbp_th_start"]
        [::std::mem::offset_of!(pglist_data, nbp_th_start) - 171956usize];
    ["Offset of field: pglist_data::nbp_th_nr_cand"]
        [::std::mem::offset_of!(pglist_data, nbp_th_nr_cand) - 171960usize];
    ["Offset of field: pglist_data::__lruvec"]
        [::std::mem::offset_of!(pglist_data, __lruvec) - 171968usize];
    ["Offset of field: pglist_data::flags"]
        [::std::mem::offset_of!(pglist_data, flags) - 173552usize];
    ["Offset of field: pglist_data::mm_walk"]
        [::std::mem::offset_of!(pglist_data, mm_walk) - 173560usize];
    ["Offset of field: pglist_data::memcg_lru"]
        [::std::mem::offset_of!(pglist_data, memcg_lru) - 173776usize];
    ["Offset of field: pglist_data::_pad2_"]
        [::std::mem::offset_of!(pglist_data, _pad2_) - 174016usize];
    ["Offset of field: pglist_data::per_cpu_nodestats"]
        [::std::mem::offset_of!(pglist_data, per_cpu_nodestats) - 174016usize];
    ["Offset of field: pglist_data::vm_stat"]
        [::std::mem::offset_of!(pglist_data, vm_stat) - 174024usize];
    ["Offset of field: pglist_data::memtier"]
        [::std::mem::offset_of!(pglist_data, memtier) - 174400usize];
    ["Offset of field: pglist_data::mf_stats"]
        [::std::mem::offset_of!(pglist_data, mf_stats) - 174408usize];
};
pub type pg_data_t = pglist_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vmem_altmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pagemap {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut node_data: [*mut pg_data_t; 0usize];
}
extern "C" {
    pub fn pfn_to_online_page(pfn: ::std::os::raw::c_ulong) -> *mut page;
}
pub const MMOP_OFFLINE: _bindgen_ty_21 = 0;
pub const MMOP_ONLINE: _bindgen_ty_21 = 1;
pub const MMOP_ONLINE_KERNEL: _bindgen_ty_21 = 2;
pub const MMOP_ONLINE_MOVABLE: _bindgen_ty_21 = 3;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub type mhp_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mhp_params {
    pub altmap: *mut vmem_altmap,
    pub pgprot: pgprot_t,
    pub pgmap: *mut dev_pagemap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mhp_params"][::std::mem::size_of::<mhp_params>() - 24usize];
    ["Alignment of mhp_params"][::std::mem::align_of::<mhp_params>() - 8usize];
    ["Offset of field: mhp_params::altmap"][::std::mem::offset_of!(mhp_params, altmap) - 0usize];
    ["Offset of field: mhp_params::pgprot"][::std::mem::offset_of!(mhp_params, pgprot) - 8usize];
    ["Offset of field: mhp_params::pgmap"][::std::mem::offset_of!(mhp_params, pgmap) - 16usize];
};
extern "C" {
    pub fn mhp_range_allowed(start: u64_, size: u64_, need_mapping: bool_) -> bool_;
}
extern "C" {
    pub fn mhp_get_pluggable_range(need_mapping: bool_) -> range;
}
extern "C" {
    pub fn mhp_supports_memmap_on_memory() -> bool_;
}
extern "C" {
    pub fn adjust_present_page_count(
        page: *mut page,
        group: *mut memory_group,
        nr_pages: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn mhp_init_memmap_on_memory(
        pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        zone: *mut zone,
        mhp_off_inaccessible: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mhp_deinit_memmap_on_memory(
        pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn online_pages(
        pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        zone: *mut zone,
        group: *mut memory_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __offline_isolated_pages(
        start_pfn: ::std::os::raw::c_ulong,
        end_pfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
pub type online_page_callback_t =
    ::std::option::Option<unsafe extern "C" fn(page: *mut page, order: ::std::os::raw::c_uint)>;
extern "C" {
    pub fn generic_online_page(page: *mut page, order: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn set_online_page_callback(callback: online_page_callback_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restore_online_page_callback(callback: online_page_callback_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn try_online_node(nid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_add_memory(
        nid: ::std::os::raw::c_int,
        start: u64_,
        size: u64_,
        params: *mut mhp_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut max_mem_size: u64_;
}
extern "C" {
    pub fn mhp_online_type_from_str(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mhp_default_online_type: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut movable_node_enabled: bool_;
}
extern "C" {
    pub fn arch_remove_memory(start: u64_, size: u64_, altmap: *mut vmem_altmap);
}
extern "C" {
    pub fn __remove_pages(
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        altmap: *mut vmem_altmap,
    );
}
extern "C" {
    pub fn __add_pages(
        nid: ::std::os::raw::c_int,
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        params: *mut mhp_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_pages(
        nid: ::std::os::raw::c_int,
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        params: *mut mhp_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_online_mems();
}
extern "C" {
    pub fn put_online_mems();
}
extern "C" {
    pub fn mem_hotplug_begin();
}
extern "C" {
    pub fn mem_hotplug_done();
}
extern "C" {
    pub fn arch_get_mappable_range() -> range;
}
extern "C" {
    pub fn try_offline_node(nid: ::std::os::raw::c_int);
}
extern "C" {
    pub fn offline_pages(
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        zone: *mut zone,
        group: *mut memory_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove_memory(start: u64_, size: u64_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __remove_memory(start: u64_, size: u64_);
}
extern "C" {
    pub fn offline_and_remove_memory(start: u64_, size: u64_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_area_init_core_hotplug(pgdat: *mut pglist_data);
}
extern "C" {
    pub fn __add_memory(
        nid: ::std::os::raw::c_int,
        start: u64_,
        size: u64_,
        mhp_flags: mhp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_memory(
        nid: ::std::os::raw::c_int,
        start: u64_,
        size: u64_,
        mhp_flags: mhp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_memory_resource(
        nid: ::std::os::raw::c_int,
        resource: *mut resource,
        mhp_flags: mhp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_memory_driver_managed(
        nid: ::std::os::raw::c_int,
        start: u64_,
        size: u64_,
        resource_name: *const ::std::os::raw::c_char,
        mhp_flags: mhp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn move_pfn_range_to_zone(
        zone: *mut zone,
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        altmap: *mut vmem_altmap,
        migratetype: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn remove_pfn_range_from_zone(
        zone: *mut zone,
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn sparse_add_section(
        nid: ::std::os::raw::c_int,
        pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        altmap: *mut vmem_altmap,
        pgmap: *mut dev_pagemap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sparse_remove_section(
        pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        altmap: *mut vmem_altmap,
    );
}
extern "C" {
    pub fn sparse_decode_mem_map(
        coded_mem_map: ::std::os::raw::c_ulong,
        pnum: ::std::os::raw::c_ulong,
    ) -> *mut page;
}
extern "C" {
    pub fn zone_for_pfn_range(
        online_type: ::std::os::raw::c_int,
        nid: ::std::os::raw::c_int,
        group: *mut memory_group,
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
    ) -> *mut zone;
}
extern "C" {
    pub fn arch_create_linear_mapping(
        nid: ::std::os::raw::c_int,
        start: u64_,
        size: u64_,
        params: *mut mhp_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_remove_linear_mapping(start: u64_, size: u64_);
}
extern "C" {
    pub fn build_all_zonelists(pgdat: *mut pg_data_t);
}
extern "C" {
    pub fn wakeup_kswapd(
        zone: *mut zone,
        gfp_mask: gfp_t,
        order: ::std::os::raw::c_int,
        highest_zoneidx: zone_type,
    );
}
extern "C" {
    pub fn __zone_watermark_ok(
        z: *mut zone,
        order: ::std::os::raw::c_uint,
        mark: ::std::os::raw::c_ulong,
        highest_zoneidx: ::std::os::raw::c_int,
        alloc_flags: ::std::os::raw::c_uint,
        free_pages: ::std::os::raw::c_long,
    ) -> bool_;
}
extern "C" {
    pub fn zone_watermark_ok(
        z: *mut zone,
        order: ::std::os::raw::c_uint,
        mark: ::std::os::raw::c_ulong,
        highest_zoneidx: ::std::os::raw::c_int,
        alloc_flags: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn zone_watermark_ok_safe(
        z: *mut zone,
        order: ::std::os::raw::c_uint,
        mark: ::std::os::raw::c_ulong,
        highest_zoneidx: ::std::os::raw::c_int,
    ) -> bool_;
}
pub const meminit_context_MEMINIT_EARLY: meminit_context = 0;
pub const meminit_context_MEMINIT_HOTPLUG: meminit_context = 1;
pub type meminit_context = ::std::os::raw::c_uint;
extern "C" {
    pub fn init_currently_empty_zone(
        zone: *mut zone,
        start_pfn: ::std::os::raw::c_ulong,
        size: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn lruvec_init(lruvec: *mut lruvec);
}
extern "C" {
    pub static mut movable_zone: ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_managed_dma() -> bool_;
}
extern "C" {
    pub fn first_online_pgdat() -> *mut pglist_data;
}
extern "C" {
    pub fn next_online_pgdat(pgdat: *mut pglist_data) -> *mut pglist_data;
}
extern "C" {
    pub fn next_zone(zone: *mut zone) -> *mut zone;
}
extern "C" {
    pub fn __next_zones_zonelist(
        z: *mut zoneref,
        highest_zoneidx: zone_type,
        nodes: *mut nodemask_t,
    ) -> *mut zoneref;
}
#[repr(C)]
#[derive(Debug)]
pub struct mem_section_usage {
    pub rcu: callback_head,
    pub subsection_map: [::std::os::raw::c_ulong; 1usize],
    pub pageblock_flags: __IncompleteArrayField<::std::os::raw::c_ulong>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_section_usage"][::std::mem::size_of::<mem_section_usage>() - 24usize];
    ["Alignment of mem_section_usage"][::std::mem::align_of::<mem_section_usage>() - 8usize];
    ["Offset of field: mem_section_usage::rcu"]
        [::std::mem::offset_of!(mem_section_usage, rcu) - 0usize];
    ["Offset of field: mem_section_usage::subsection_map"]
        [::std::mem::offset_of!(mem_section_usage, subsection_map) - 16usize];
    ["Offset of field: mem_section_usage::pageblock_flags"]
        [::std::mem::offset_of!(mem_section_usage, pageblock_flags) - 24usize];
};
extern "C" {
    pub fn subsection_map_init(pfn: ::std::os::raw::c_ulong, nr_pages: ::std::os::raw::c_ulong);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_ext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_section {
    pub section_mem_map: ::std::os::raw::c_ulong,
    pub usage: *mut mem_section_usage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_section"][::std::mem::size_of::<mem_section>() - 16usize];
    ["Alignment of mem_section"][::std::mem::align_of::<mem_section>() - 8usize];
    ["Offset of field: mem_section::section_mem_map"]
        [::std::mem::offset_of!(mem_section, section_mem_map) - 0usize];
    ["Offset of field: mem_section::usage"][::std::mem::offset_of!(mem_section, usage) - 8usize];
};
extern "C" {
    pub static mut mem_section: *mut *mut mem_section;
}
extern "C" {
    pub fn mem_section_usage_size() -> usize;
}
pub const SECTION_MARKED_PRESENT_BIT: _bindgen_ty_22 = 0;
pub const SECTION_HAS_MEM_MAP_BIT: _bindgen_ty_22 = 1;
pub const SECTION_IS_ONLINE_BIT: _bindgen_ty_22 = 2;
pub const SECTION_IS_EARLY_BIT: _bindgen_ty_22 = 3;
pub const SECTION_TAINT_ZONE_DEVICE_BIT: _bindgen_ty_22 = 4;
pub const SECTION_MAP_LAST_BIT: _bindgen_ty_22 = 5;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
extern "C" {
    pub fn online_mem_sections(
        start_pfn: ::std::os::raw::c_ulong,
        end_pfn: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn offline_mem_sections(
        start_pfn: ::std::os::raw::c_ulong,
        end_pfn: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub static mut __highest_present_section_nr: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn sparse_init();
}
extern "C" {
    pub fn topology_normalize_cpu_scale();
}
extern "C" {
    pub fn topology_update_cpu_topology() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn topology_init_cpu_capacity_cppc();
}
extern "C" {
    pub fn topology_parse_cpu_capacity(
        cpu_node: *mut device_node,
        cpu: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub static mut cpu_scale: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn topology_set_cpu_scale(cpu: ::std::os::raw::c_uint, capacity: ::std::os::raw::c_ulong);
}
extern "C" {
    pub static mut capacity_freq_ref: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut arch_freq_scale: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn topology_set_freq_scale(
        cpus: *const cpumask,
        cur_freq: ::std::os::raw::c_ulong,
        max_freq: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn topology_scale_freq_invariant() -> bool_;
}
pub const scale_freq_source_SCALE_FREQ_SOURCE_CPUFREQ: scale_freq_source = 0;
pub const scale_freq_source_SCALE_FREQ_SOURCE_ARCH: scale_freq_source = 1;
pub const scale_freq_source_SCALE_FREQ_SOURCE_CPPC: scale_freq_source = 2;
pub type scale_freq_source = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct scale_freq_data {
    pub source: scale_freq_source,
    pub set_freq_scale: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of scale_freq_data"][::std::mem::size_of::<scale_freq_data>() - 16usize];
    ["Alignment of scale_freq_data"][::std::mem::align_of::<scale_freq_data>() - 8usize];
    ["Offset of field: scale_freq_data::source"]
        [::std::mem::offset_of!(scale_freq_data, source) - 0usize];
    ["Offset of field: scale_freq_data::set_freq_scale"]
        [::std::mem::offset_of!(scale_freq_data, set_freq_scale) - 8usize];
};
extern "C" {
    pub fn topology_scale_freq_tick();
}
extern "C" {
    pub fn topology_set_scale_freq_source(data: *mut scale_freq_data, cpus: *const cpumask);
}
extern "C" {
    pub fn topology_clear_scale_freq_source(source: scale_freq_source, cpus: *const cpumask);
}
extern "C" {
    pub static mut hw_pressure: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn topology_update_hw_pressure(cpus: *const cpumask, capped_freq: ::std::os::raw::c_ulong);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_topology {
    pub thread_id: ::std::os::raw::c_int,
    pub core_id: ::std::os::raw::c_int,
    pub cluster_id: ::std::os::raw::c_int,
    pub package_id: ::std::os::raw::c_int,
    pub thread_sibling: cpumask_t,
    pub core_sibling: cpumask_t,
    pub cluster_sibling: cpumask_t,
    pub llc_sibling: cpumask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_topology"][::std::mem::size_of::<cpu_topology>() - 4112usize];
    ["Alignment of cpu_topology"][::std::mem::align_of::<cpu_topology>() - 8usize];
    ["Offset of field: cpu_topology::thread_id"]
        [::std::mem::offset_of!(cpu_topology, thread_id) - 0usize];
    ["Offset of field: cpu_topology::core_id"]
        [::std::mem::offset_of!(cpu_topology, core_id) - 4usize];
    ["Offset of field: cpu_topology::cluster_id"]
        [::std::mem::offset_of!(cpu_topology, cluster_id) - 8usize];
    ["Offset of field: cpu_topology::package_id"]
        [::std::mem::offset_of!(cpu_topology, package_id) - 12usize];
    ["Offset of field: cpu_topology::thread_sibling"]
        [::std::mem::offset_of!(cpu_topology, thread_sibling) - 16usize];
    ["Offset of field: cpu_topology::core_sibling"]
        [::std::mem::offset_of!(cpu_topology, core_sibling) - 1040usize];
    ["Offset of field: cpu_topology::cluster_sibling"]
        [::std::mem::offset_of!(cpu_topology, cluster_sibling) - 2064usize];
    ["Offset of field: cpu_topology::llc_sibling"]
        [::std::mem::offset_of!(cpu_topology, llc_sibling) - 3088usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpf_intel {
    pub signature: [::std::os::raw::c_char; 4usize],
    pub physptr: ::std::os::raw::c_uint,
    pub length: ::std::os::raw::c_uchar,
    pub specification: ::std::os::raw::c_uchar,
    pub checksum: ::std::os::raw::c_uchar,
    pub feature1: ::std::os::raw::c_uchar,
    pub feature2: ::std::os::raw::c_uchar,
    pub feature3: ::std::os::raw::c_uchar,
    pub feature4: ::std::os::raw::c_uchar,
    pub feature5: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpf_intel"][::std::mem::size_of::<mpf_intel>() - 16usize];
    ["Alignment of mpf_intel"][::std::mem::align_of::<mpf_intel>() - 4usize];
    ["Offset of field: mpf_intel::signature"]
        [::std::mem::offset_of!(mpf_intel, signature) - 0usize];
    ["Offset of field: mpf_intel::physptr"][::std::mem::offset_of!(mpf_intel, physptr) - 4usize];
    ["Offset of field: mpf_intel::length"][::std::mem::offset_of!(mpf_intel, length) - 8usize];
    ["Offset of field: mpf_intel::specification"]
        [::std::mem::offset_of!(mpf_intel, specification) - 9usize];
    ["Offset of field: mpf_intel::checksum"][::std::mem::offset_of!(mpf_intel, checksum) - 10usize];
    ["Offset of field: mpf_intel::feature1"][::std::mem::offset_of!(mpf_intel, feature1) - 11usize];
    ["Offset of field: mpf_intel::feature2"][::std::mem::offset_of!(mpf_intel, feature2) - 12usize];
    ["Offset of field: mpf_intel::feature3"][::std::mem::offset_of!(mpf_intel, feature3) - 13usize];
    ["Offset of field: mpf_intel::feature4"][::std::mem::offset_of!(mpf_intel, feature4) - 14usize];
    ["Offset of field: mpf_intel::feature5"][::std::mem::offset_of!(mpf_intel, feature5) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpc_table {
    pub signature: [::std::os::raw::c_char; 4usize],
    pub length: ::std::os::raw::c_ushort,
    pub spec: ::std::os::raw::c_char,
    pub checksum: ::std::os::raw::c_char,
    pub oem: [::std::os::raw::c_char; 8usize],
    pub productid: [::std::os::raw::c_char; 12usize],
    pub oemptr: ::std::os::raw::c_uint,
    pub oemsize: ::std::os::raw::c_ushort,
    pub oemcount: ::std::os::raw::c_ushort,
    pub lapic: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpc_table"][::std::mem::size_of::<mpc_table>() - 44usize];
    ["Alignment of mpc_table"][::std::mem::align_of::<mpc_table>() - 4usize];
    ["Offset of field: mpc_table::signature"]
        [::std::mem::offset_of!(mpc_table, signature) - 0usize];
    ["Offset of field: mpc_table::length"][::std::mem::offset_of!(mpc_table, length) - 4usize];
    ["Offset of field: mpc_table::spec"][::std::mem::offset_of!(mpc_table, spec) - 6usize];
    ["Offset of field: mpc_table::checksum"][::std::mem::offset_of!(mpc_table, checksum) - 7usize];
    ["Offset of field: mpc_table::oem"][::std::mem::offset_of!(mpc_table, oem) - 8usize];
    ["Offset of field: mpc_table::productid"]
        [::std::mem::offset_of!(mpc_table, productid) - 16usize];
    ["Offset of field: mpc_table::oemptr"][::std::mem::offset_of!(mpc_table, oemptr) - 28usize];
    ["Offset of field: mpc_table::oemsize"][::std::mem::offset_of!(mpc_table, oemsize) - 32usize];
    ["Offset of field: mpc_table::oemcount"][::std::mem::offset_of!(mpc_table, oemcount) - 34usize];
    ["Offset of field: mpc_table::lapic"][::std::mem::offset_of!(mpc_table, lapic) - 36usize];
    ["Offset of field: mpc_table::reserved"][::std::mem::offset_of!(mpc_table, reserved) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpc_cpu {
    pub type_: ::std::os::raw::c_uchar,
    pub apicid: ::std::os::raw::c_uchar,
    pub apicver: ::std::os::raw::c_uchar,
    pub cpuflag: ::std::os::raw::c_uchar,
    pub cpufeature: ::std::os::raw::c_uint,
    pub featureflag: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpc_cpu"][::std::mem::size_of::<mpc_cpu>() - 20usize];
    ["Alignment of mpc_cpu"][::std::mem::align_of::<mpc_cpu>() - 4usize];
    ["Offset of field: mpc_cpu::type_"][::std::mem::offset_of!(mpc_cpu, type_) - 0usize];
    ["Offset of field: mpc_cpu::apicid"][::std::mem::offset_of!(mpc_cpu, apicid) - 1usize];
    ["Offset of field: mpc_cpu::apicver"][::std::mem::offset_of!(mpc_cpu, apicver) - 2usize];
    ["Offset of field: mpc_cpu::cpuflag"][::std::mem::offset_of!(mpc_cpu, cpuflag) - 3usize];
    ["Offset of field: mpc_cpu::cpufeature"][::std::mem::offset_of!(mpc_cpu, cpufeature) - 4usize];
    ["Offset of field: mpc_cpu::featureflag"]
        [::std::mem::offset_of!(mpc_cpu, featureflag) - 8usize];
    ["Offset of field: mpc_cpu::reserved"][::std::mem::offset_of!(mpc_cpu, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpc_bus {
    pub type_: ::std::os::raw::c_uchar,
    pub busid: ::std::os::raw::c_uchar,
    pub bustype: [::std::os::raw::c_uchar; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpc_bus"][::std::mem::size_of::<mpc_bus>() - 8usize];
    ["Alignment of mpc_bus"][::std::mem::align_of::<mpc_bus>() - 1usize];
    ["Offset of field: mpc_bus::type_"][::std::mem::offset_of!(mpc_bus, type_) - 0usize];
    ["Offset of field: mpc_bus::busid"][::std::mem::offset_of!(mpc_bus, busid) - 1usize];
    ["Offset of field: mpc_bus::bustype"][::std::mem::offset_of!(mpc_bus, bustype) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpc_ioapic {
    pub type_: ::std::os::raw::c_uchar,
    pub apicid: ::std::os::raw::c_uchar,
    pub apicver: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub apicaddr: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpc_ioapic"][::std::mem::size_of::<mpc_ioapic>() - 8usize];
    ["Alignment of mpc_ioapic"][::std::mem::align_of::<mpc_ioapic>() - 4usize];
    ["Offset of field: mpc_ioapic::type_"][::std::mem::offset_of!(mpc_ioapic, type_) - 0usize];
    ["Offset of field: mpc_ioapic::apicid"][::std::mem::offset_of!(mpc_ioapic, apicid) - 1usize];
    ["Offset of field: mpc_ioapic::apicver"][::std::mem::offset_of!(mpc_ioapic, apicver) - 2usize];
    ["Offset of field: mpc_ioapic::flags"][::std::mem::offset_of!(mpc_ioapic, flags) - 3usize];
    ["Offset of field: mpc_ioapic::apicaddr"]
        [::std::mem::offset_of!(mpc_ioapic, apicaddr) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpc_intsrc {
    pub type_: ::std::os::raw::c_uchar,
    pub irqtype: ::std::os::raw::c_uchar,
    pub irqflag: ::std::os::raw::c_ushort,
    pub srcbus: ::std::os::raw::c_uchar,
    pub srcbusirq: ::std::os::raw::c_uchar,
    pub dstapic: ::std::os::raw::c_uchar,
    pub dstirq: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpc_intsrc"][::std::mem::size_of::<mpc_intsrc>() - 8usize];
    ["Alignment of mpc_intsrc"][::std::mem::align_of::<mpc_intsrc>() - 2usize];
    ["Offset of field: mpc_intsrc::type_"][::std::mem::offset_of!(mpc_intsrc, type_) - 0usize];
    ["Offset of field: mpc_intsrc::irqtype"][::std::mem::offset_of!(mpc_intsrc, irqtype) - 1usize];
    ["Offset of field: mpc_intsrc::irqflag"][::std::mem::offset_of!(mpc_intsrc, irqflag) - 2usize];
    ["Offset of field: mpc_intsrc::srcbus"][::std::mem::offset_of!(mpc_intsrc, srcbus) - 4usize];
    ["Offset of field: mpc_intsrc::srcbusirq"]
        [::std::mem::offset_of!(mpc_intsrc, srcbusirq) - 5usize];
    ["Offset of field: mpc_intsrc::dstapic"][::std::mem::offset_of!(mpc_intsrc, dstapic) - 6usize];
    ["Offset of field: mpc_intsrc::dstirq"][::std::mem::offset_of!(mpc_intsrc, dstirq) - 7usize];
};
pub const mp_irq_source_types_mp_INT: mp_irq_source_types = 0;
pub const mp_irq_source_types_mp_NMI: mp_irq_source_types = 1;
pub const mp_irq_source_types_mp_SMI: mp_irq_source_types = 2;
pub const mp_irq_source_types_mp_ExtINT: mp_irq_source_types = 3;
pub type mp_irq_source_types = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpc_lintsrc {
    pub type_: ::std::os::raw::c_uchar,
    pub irqtype: ::std::os::raw::c_uchar,
    pub irqflag: ::std::os::raw::c_ushort,
    pub srcbusid: ::std::os::raw::c_uchar,
    pub srcbusirq: ::std::os::raw::c_uchar,
    pub destapic: ::std::os::raw::c_uchar,
    pub destapiclint: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpc_lintsrc"][::std::mem::size_of::<mpc_lintsrc>() - 8usize];
    ["Alignment of mpc_lintsrc"][::std::mem::align_of::<mpc_lintsrc>() - 2usize];
    ["Offset of field: mpc_lintsrc::type_"][::std::mem::offset_of!(mpc_lintsrc, type_) - 0usize];
    ["Offset of field: mpc_lintsrc::irqtype"]
        [::std::mem::offset_of!(mpc_lintsrc, irqtype) - 1usize];
    ["Offset of field: mpc_lintsrc::irqflag"]
        [::std::mem::offset_of!(mpc_lintsrc, irqflag) - 2usize];
    ["Offset of field: mpc_lintsrc::srcbusid"]
        [::std::mem::offset_of!(mpc_lintsrc, srcbusid) - 4usize];
    ["Offset of field: mpc_lintsrc::srcbusirq"]
        [::std::mem::offset_of!(mpc_lintsrc, srcbusirq) - 5usize];
    ["Offset of field: mpc_lintsrc::destapic"]
        [::std::mem::offset_of!(mpc_lintsrc, destapic) - 6usize];
    ["Offset of field: mpc_lintsrc::destapiclint"]
        [::std::mem::offset_of!(mpc_lintsrc, destapiclint) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpc_oemtable {
    pub signature: [::std::os::raw::c_char; 4usize],
    pub length: ::std::os::raw::c_ushort,
    pub rev: ::std::os::raw::c_char,
    pub checksum: ::std::os::raw::c_char,
    pub mpc: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpc_oemtable"][::std::mem::size_of::<mpc_oemtable>() - 16usize];
    ["Alignment of mpc_oemtable"][::std::mem::align_of::<mpc_oemtable>() - 2usize];
    ["Offset of field: mpc_oemtable::signature"]
        [::std::mem::offset_of!(mpc_oemtable, signature) - 0usize];
    ["Offset of field: mpc_oemtable::length"]
        [::std::mem::offset_of!(mpc_oemtable, length) - 4usize];
    ["Offset of field: mpc_oemtable::rev"][::std::mem::offset_of!(mpc_oemtable, rev) - 6usize];
    ["Offset of field: mpc_oemtable::checksum"]
        [::std::mem::offset_of!(mpc_oemtable, checksum) - 7usize];
    ["Offset of field: mpc_oemtable::mpc"][::std::mem::offset_of!(mpc_oemtable, mpc) - 8usize];
};
pub const mp_bustype_MP_BUS_ISA: mp_bustype = 1;
pub const mp_bustype_MP_BUS_EISA: mp_bustype = 2;
pub const mp_bustype_MP_BUS_PCI: mp_bustype = 3;
pub type mp_bustype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ghcb {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irq_domain {
    _unused: [u8; 0],
}
#[doc = " struct x86_init_mpparse - platform specific mpparse ops\n @setup_ioapic_ids:\t\tplatform specific ioapic id override\n @find_mptable:\t\tFind MPTABLE early to reserve the memory region\n @early_parse_smp_cfg:\tParse the SMP configuration data early before initmem_init()\n @parse_smp_cfg:\t\tParse the SMP configuration data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_mpparse {
    pub setup_ioapic_ids: ::std::option::Option<unsafe extern "C" fn()>,
    pub find_mptable: ::std::option::Option<unsafe extern "C" fn()>,
    pub early_parse_smp_cfg: ::std::option::Option<unsafe extern "C" fn()>,
    pub parse_smp_cfg: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_mpparse"][::std::mem::size_of::<x86_init_mpparse>() - 32usize];
    ["Alignment of x86_init_mpparse"][::std::mem::align_of::<x86_init_mpparse>() - 8usize];
    ["Offset of field: x86_init_mpparse::setup_ioapic_ids"]
        [::std::mem::offset_of!(x86_init_mpparse, setup_ioapic_ids) - 0usize];
    ["Offset of field: x86_init_mpparse::find_mptable"]
        [::std::mem::offset_of!(x86_init_mpparse, find_mptable) - 8usize];
    ["Offset of field: x86_init_mpparse::early_parse_smp_cfg"]
        [::std::mem::offset_of!(x86_init_mpparse, early_parse_smp_cfg) - 16usize];
    ["Offset of field: x86_init_mpparse::parse_smp_cfg"]
        [::std::mem::offset_of!(x86_init_mpparse, parse_smp_cfg) - 24usize];
};
#[doc = " struct x86_init_resources - platform specific resource related ops\n @probe_roms:\t\t\tprobe BIOS roms\n @reserve_resources:\t\treserve the standard resources for the\n\t\t\t\tplatform\n @memory_setup:\t\tplatform specific memory setup\n @dmi_setup:\t\t\tplatform specific DMI setup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_resources {
    pub probe_roms: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserve_resources: ::std::option::Option<unsafe extern "C" fn()>,
    pub memory_setup: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
    pub dmi_setup: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_resources"][::std::mem::size_of::<x86_init_resources>() - 32usize];
    ["Alignment of x86_init_resources"][::std::mem::align_of::<x86_init_resources>() - 8usize];
    ["Offset of field: x86_init_resources::probe_roms"]
        [::std::mem::offset_of!(x86_init_resources, probe_roms) - 0usize];
    ["Offset of field: x86_init_resources::reserve_resources"]
        [::std::mem::offset_of!(x86_init_resources, reserve_resources) - 8usize];
    ["Offset of field: x86_init_resources::memory_setup"]
        [::std::mem::offset_of!(x86_init_resources, memory_setup) - 16usize];
    ["Offset of field: x86_init_resources::dmi_setup"]
        [::std::mem::offset_of!(x86_init_resources, dmi_setup) - 24usize];
};
#[doc = " struct x86_init_irqs - platform specific interrupt setup\n @pre_vector_init:\t\tinit code to run before interrupt vectors\n\t\t\t\tare set up.\n @intr_init:\t\t\tinterrupt init code\n @intr_mode_select:\t\tinterrupt delivery mode selection\n @intr_mode_init:\t\tinterrupt delivery mode setup\n @create_pci_msi_domain:\tCreate the PCI/MSI interrupt domain"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_irqs {
    pub pre_vector_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub intr_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub intr_mode_select: ::std::option::Option<unsafe extern "C" fn()>,
    pub intr_mode_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub create_pci_msi_domain: ::std::option::Option<unsafe extern "C" fn() -> *mut irq_domain>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_irqs"][::std::mem::size_of::<x86_init_irqs>() - 40usize];
    ["Alignment of x86_init_irqs"][::std::mem::align_of::<x86_init_irqs>() - 8usize];
    ["Offset of field: x86_init_irqs::pre_vector_init"]
        [::std::mem::offset_of!(x86_init_irqs, pre_vector_init) - 0usize];
    ["Offset of field: x86_init_irqs::intr_init"]
        [::std::mem::offset_of!(x86_init_irqs, intr_init) - 8usize];
    ["Offset of field: x86_init_irqs::intr_mode_select"]
        [::std::mem::offset_of!(x86_init_irqs, intr_mode_select) - 16usize];
    ["Offset of field: x86_init_irqs::intr_mode_init"]
        [::std::mem::offset_of!(x86_init_irqs, intr_mode_init) - 24usize];
    ["Offset of field: x86_init_irqs::create_pci_msi_domain"]
        [::std::mem::offset_of!(x86_init_irqs, create_pci_msi_domain) - 32usize];
};
#[doc = " struct x86_init_oem - oem platform specific customizing functions\n @arch_setup:\t\t\tplatform specific architecture setup\n @banner:\t\t\tprint a platform specific banner"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_oem {
    pub arch_setup: ::std::option::Option<unsafe extern "C" fn()>,
    pub banner: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_oem"][::std::mem::size_of::<x86_init_oem>() - 16usize];
    ["Alignment of x86_init_oem"][::std::mem::align_of::<x86_init_oem>() - 8usize];
    ["Offset of field: x86_init_oem::arch_setup"]
        [::std::mem::offset_of!(x86_init_oem, arch_setup) - 0usize];
    ["Offset of field: x86_init_oem::banner"]
        [::std::mem::offset_of!(x86_init_oem, banner) - 8usize];
};
#[doc = " struct x86_init_paging - platform specific paging functions\n @pagetable_init:\tplatform specific paging initialization call to setup\n\t\t\tthe kernel pagetables and prepare accessors functions.\n\t\t\tCallback must call paging_init(). Called once after the\n\t\t\tdirect mapping for phys memory is available."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_paging {
    pub pagetable_init: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_paging"][::std::mem::size_of::<x86_init_paging>() - 8usize];
    ["Alignment of x86_init_paging"][::std::mem::align_of::<x86_init_paging>() - 8usize];
    ["Offset of field: x86_init_paging::pagetable_init"]
        [::std::mem::offset_of!(x86_init_paging, pagetable_init) - 0usize];
};
#[doc = " struct x86_init_timers - platform specific timer setup\n @setup_perpcu_clockev:\tset up the per cpu clock event device for the\n\t\t\t\tboot cpu\n @timer_init:\t\t\tinitialize the platform timer (default PIT/HPET)\n @wallclock_init:\t\tinit the wallclock device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_timers {
    pub setup_percpu_clockev: ::std::option::Option<unsafe extern "C" fn()>,
    pub timer_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub wallclock_init: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_timers"][::std::mem::size_of::<x86_init_timers>() - 24usize];
    ["Alignment of x86_init_timers"][::std::mem::align_of::<x86_init_timers>() - 8usize];
    ["Offset of field: x86_init_timers::setup_percpu_clockev"]
        [::std::mem::offset_of!(x86_init_timers, setup_percpu_clockev) - 0usize];
    ["Offset of field: x86_init_timers::timer_init"]
        [::std::mem::offset_of!(x86_init_timers, timer_init) - 8usize];
    ["Offset of field: x86_init_timers::wallclock_init"]
        [::std::mem::offset_of!(x86_init_timers, wallclock_init) - 16usize];
};
#[doc = " struct x86_init_iommu - platform specific iommu setup\n @iommu_init:\t\t\tplatform specific iommu setup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_iommu {
    pub iommu_init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_iommu"][::std::mem::size_of::<x86_init_iommu>() - 8usize];
    ["Alignment of x86_init_iommu"][::std::mem::align_of::<x86_init_iommu>() - 8usize];
    ["Offset of field: x86_init_iommu::iommu_init"]
        [::std::mem::offset_of!(x86_init_iommu, iommu_init) - 0usize];
};
#[doc = " struct x86_init_pci - platform specific pci init functions\n @arch_init:\t\t\tplatform specific pci arch init call\n @init:\t\t\tplatform specific pci subsystem init\n @init_irq:\t\t\tplatform specific pci irq init\n @fixup_irqs:\t\t\tplatform specific pci irq fixup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_pci {
    pub arch_init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub init_irq: ::std::option::Option<unsafe extern "C" fn()>,
    pub fixup_irqs: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_pci"][::std::mem::size_of::<x86_init_pci>() - 32usize];
    ["Alignment of x86_init_pci"][::std::mem::align_of::<x86_init_pci>() - 8usize];
    ["Offset of field: x86_init_pci::arch_init"]
        [::std::mem::offset_of!(x86_init_pci, arch_init) - 0usize];
    ["Offset of field: x86_init_pci::init"][::std::mem::offset_of!(x86_init_pci, init) - 8usize];
    ["Offset of field: x86_init_pci::init_irq"]
        [::std::mem::offset_of!(x86_init_pci, init_irq) - 16usize];
    ["Offset of field: x86_init_pci::fixup_irqs"]
        [::std::mem::offset_of!(x86_init_pci, fixup_irqs) - 24usize];
};
#[doc = " struct x86_hyper_init - x86 hypervisor init functions\n @init_platform:\t\tplatform setup\n @guest_late_init:\t\tguest late init\n @x2apic_available:\t\tX2APIC detection\n @msi_ext_dest_id:\t\tMSI supports 15-bit APIC IDs\n @init_mem_mapping:\t\tsetup early mappings during init_mem_mapping()\n @init_after_bootmem:\t\tguest init after boot allocator is finished"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_hyper_init {
    pub init_platform: ::std::option::Option<unsafe extern "C" fn()>,
    pub guest_late_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub x2apic_available: ::std::option::Option<unsafe extern "C" fn() -> bool_>,
    pub msi_ext_dest_id: ::std::option::Option<unsafe extern "C" fn() -> bool_>,
    pub init_mem_mapping: ::std::option::Option<unsafe extern "C" fn()>,
    pub init_after_bootmem: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_hyper_init"][::std::mem::size_of::<x86_hyper_init>() - 48usize];
    ["Alignment of x86_hyper_init"][::std::mem::align_of::<x86_hyper_init>() - 8usize];
    ["Offset of field: x86_hyper_init::init_platform"]
        [::std::mem::offset_of!(x86_hyper_init, init_platform) - 0usize];
    ["Offset of field: x86_hyper_init::guest_late_init"]
        [::std::mem::offset_of!(x86_hyper_init, guest_late_init) - 8usize];
    ["Offset of field: x86_hyper_init::x2apic_available"]
        [::std::mem::offset_of!(x86_hyper_init, x2apic_available) - 16usize];
    ["Offset of field: x86_hyper_init::msi_ext_dest_id"]
        [::std::mem::offset_of!(x86_hyper_init, msi_ext_dest_id) - 24usize];
    ["Offset of field: x86_hyper_init::init_mem_mapping"]
        [::std::mem::offset_of!(x86_hyper_init, init_mem_mapping) - 32usize];
    ["Offset of field: x86_hyper_init::init_after_bootmem"]
        [::std::mem::offset_of!(x86_hyper_init, init_after_bootmem) - 40usize];
};
#[doc = " struct x86_init_acpi - x86 ACPI init functions\n @set_root_poitner:\t\tset RSDP address\n @get_root_pointer:\t\tget RSDP address\n @reduced_hw_early_init:\thardware reduced platform early init"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_acpi {
    pub set_root_pointer: ::std::option::Option<unsafe extern "C" fn(addr: u64_)>,
    pub get_root_pointer: ::std::option::Option<unsafe extern "C" fn() -> u64_>,
    pub reduced_hw_early_init: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_acpi"][::std::mem::size_of::<x86_init_acpi>() - 24usize];
    ["Alignment of x86_init_acpi"][::std::mem::align_of::<x86_init_acpi>() - 8usize];
    ["Offset of field: x86_init_acpi::set_root_pointer"]
        [::std::mem::offset_of!(x86_init_acpi, set_root_pointer) - 0usize];
    ["Offset of field: x86_init_acpi::get_root_pointer"]
        [::std::mem::offset_of!(x86_init_acpi, get_root_pointer) - 8usize];
    ["Offset of field: x86_init_acpi::reduced_hw_early_init"]
        [::std::mem::offset_of!(x86_init_acpi, reduced_hw_early_init) - 16usize];
};
#[doc = " struct x86_guest - Functions used by misc guest incarnations like SEV, TDX, etc.\n\n @enc_status_change_prepare\tNotify HV before the encryption status of a range is changed\n @enc_status_change_finish\tNotify HV after the encryption status of a range is changed\n @enc_tlb_flush_required\tReturns true if a TLB flush is needed before changing page encryption status\n @enc_cache_flush_required\tReturns true if a cache flush is needed before changing page encryption status\n @enc_kexec_begin\t\tBegin the two-step process of converting shared memory back\n\t\t\t\tto private. It stops the new conversions from being started\n\t\t\t\tand waits in-flight conversions to finish, if possible.\n @enc_kexec_finish\t\tFinish the two-step process of converting shared memory to\n\t\t\t\tprivate. All memory is private after the call when\n\t\t\t\tthe function returns.\n\t\t\t\tIt is called on only one CPU while the others are shut down\n\t\t\t\tand with interrupts disabled."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_guest {
    pub enc_status_change_prepare: ::std::option::Option<
        unsafe extern "C" fn(
            vaddr: ::std::os::raw::c_ulong,
            npages: ::std::os::raw::c_int,
            enc: bool_,
        ) -> ::std::os::raw::c_int,
    >,
    pub enc_status_change_finish: ::std::option::Option<
        unsafe extern "C" fn(
            vaddr: ::std::os::raw::c_ulong,
            npages: ::std::os::raw::c_int,
            enc: bool_,
        ) -> ::std::os::raw::c_int,
    >,
    pub enc_tlb_flush_required: ::std::option::Option<unsafe extern "C" fn(enc: bool_) -> bool_>,
    pub enc_cache_flush_required: ::std::option::Option<unsafe extern "C" fn() -> bool_>,
    pub enc_kexec_begin: ::std::option::Option<unsafe extern "C" fn()>,
    pub enc_kexec_finish: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_guest"][::std::mem::size_of::<x86_guest>() - 48usize];
    ["Alignment of x86_guest"][::std::mem::align_of::<x86_guest>() - 8usize];
    ["Offset of field: x86_guest::enc_status_change_prepare"]
        [::std::mem::offset_of!(x86_guest, enc_status_change_prepare) - 0usize];
    ["Offset of field: x86_guest::enc_status_change_finish"]
        [::std::mem::offset_of!(x86_guest, enc_status_change_finish) - 8usize];
    ["Offset of field: x86_guest::enc_tlb_flush_required"]
        [::std::mem::offset_of!(x86_guest, enc_tlb_flush_required) - 16usize];
    ["Offset of field: x86_guest::enc_cache_flush_required"]
        [::std::mem::offset_of!(x86_guest, enc_cache_flush_required) - 24usize];
    ["Offset of field: x86_guest::enc_kexec_begin"]
        [::std::mem::offset_of!(x86_guest, enc_kexec_begin) - 32usize];
    ["Offset of field: x86_guest::enc_kexec_finish"]
        [::std::mem::offset_of!(x86_guest, enc_kexec_finish) - 40usize];
};
#[doc = " struct x86_init_ops - functions for platform specific setup\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_init_ops {
    pub resources: x86_init_resources,
    pub mpparse: x86_init_mpparse,
    pub irqs: x86_init_irqs,
    pub oem: x86_init_oem,
    pub paging: x86_init_paging,
    pub timers: x86_init_timers,
    pub iommu: x86_init_iommu,
    pub pci: x86_init_pci,
    pub hyper: x86_hyper_init,
    pub acpi: x86_init_acpi,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_init_ops"][::std::mem::size_of::<x86_init_ops>() - 264usize];
    ["Alignment of x86_init_ops"][::std::mem::align_of::<x86_init_ops>() - 8usize];
    ["Offset of field: x86_init_ops::resources"]
        [::std::mem::offset_of!(x86_init_ops, resources) - 0usize];
    ["Offset of field: x86_init_ops::mpparse"]
        [::std::mem::offset_of!(x86_init_ops, mpparse) - 32usize];
    ["Offset of field: x86_init_ops::irqs"][::std::mem::offset_of!(x86_init_ops, irqs) - 64usize];
    ["Offset of field: x86_init_ops::oem"][::std::mem::offset_of!(x86_init_ops, oem) - 104usize];
    ["Offset of field: x86_init_ops::paging"]
        [::std::mem::offset_of!(x86_init_ops, paging) - 120usize];
    ["Offset of field: x86_init_ops::timers"]
        [::std::mem::offset_of!(x86_init_ops, timers) - 128usize];
    ["Offset of field: x86_init_ops::iommu"]
        [::std::mem::offset_of!(x86_init_ops, iommu) - 152usize];
    ["Offset of field: x86_init_ops::pci"][::std::mem::offset_of!(x86_init_ops, pci) - 160usize];
    ["Offset of field: x86_init_ops::hyper"]
        [::std::mem::offset_of!(x86_init_ops, hyper) - 192usize];
    ["Offset of field: x86_init_ops::acpi"][::std::mem::offset_of!(x86_init_ops, acpi) - 240usize];
};
#[doc = " struct x86_cpuinit_ops - platform specific cpu hotplug setups\n @setup_percpu_clockev:\tset up the per cpu clock event device\n @early_percpu_clock_init:\tearly init of the per cpu clock event device\n @fixup_cpu_id:\t\tfixup function for cpuinfo_x86::topo.pkg_id\n @parallel_bringup:\t\tParallel bringup control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_cpuinit_ops {
    pub setup_percpu_clockev: ::std::option::Option<unsafe extern "C" fn()>,
    pub early_percpu_clock_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub fixup_cpu_id: ::std::option::Option<
        unsafe extern "C" fn(c: *mut cpuinfo_x86, node: ::std::os::raw::c_int),
    >,
    pub parallel_bringup: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_cpuinit_ops"][::std::mem::size_of::<x86_cpuinit_ops>() - 32usize];
    ["Alignment of x86_cpuinit_ops"][::std::mem::align_of::<x86_cpuinit_ops>() - 8usize];
    ["Offset of field: x86_cpuinit_ops::setup_percpu_clockev"]
        [::std::mem::offset_of!(x86_cpuinit_ops, setup_percpu_clockev) - 0usize];
    ["Offset of field: x86_cpuinit_ops::early_percpu_clock_init"]
        [::std::mem::offset_of!(x86_cpuinit_ops, early_percpu_clock_init) - 8usize];
    ["Offset of field: x86_cpuinit_ops::fixup_cpu_id"]
        [::std::mem::offset_of!(x86_cpuinit_ops, fixup_cpu_id) - 16usize];
    ["Offset of field: x86_cpuinit_ops::parallel_bringup"]
        [::std::mem::offset_of!(x86_cpuinit_ops, parallel_bringup) - 24usize];
};
#[doc = " struct x86_legacy_devices - legacy x86 devices\n\n @pnpbios: this platform can have a PNPBIOS. If this is disabled the platform\n \tis known to never have a PNPBIOS.\n\n These are devices known to require LPC or ISA bus. The definition of legacy\n devices adheres to the ACPI 5.2.9.3 IA-PC Boot Architecture flag\n ACPI_FADT_LEGACY_DEVICES. These devices consist of user visible devices on\n the LPC or ISA bus. User visible devices are devices that have end-user\n accessible connectors (for example, LPT parallel port). Legacy devices on\n the LPC bus consist for example of serial and parallel ports, PS/2 keyboard\n / mouse, and the floppy disk controller. A system that lacks all known\n legacy devices can assume all devices can be detected exclusively via\n standard device enumeration mechanisms including the ACPI namespace.\n\n A system which has does not have ACPI_FADT_LEGACY_DEVICES enabled must not\n have any of the legacy devices enumerated below present."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_legacy_devices {
    pub pnpbios: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_legacy_devices"][::std::mem::size_of::<x86_legacy_devices>() - 4usize];
    ["Alignment of x86_legacy_devices"][::std::mem::align_of::<x86_legacy_devices>() - 4usize];
    ["Offset of field: x86_legacy_devices::pnpbios"]
        [::std::mem::offset_of!(x86_legacy_devices, pnpbios) - 0usize];
};
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_PLATFORM_ABSENT: x86_legacy_i8042_state = 0;
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_FIRMWARE_ABSENT: x86_legacy_i8042_state = 1;
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_EXPECTED_PRESENT: x86_legacy_i8042_state = 2;
#[doc = " enum x86_legacy_i8042_state - i8042 keyboard controller state\n @X86_LEGACY_I8042_PLATFORM_ABSENT: the controller is always absent on\n\tgiven platform/subarch.\n @X86_LEGACY_I8042_FIRMWARE_ABSENT: firmware reports that the controller\n\tis absent.\n @X86_LEGACY_i8042_EXPECTED_PRESENT: the controller is likely to be\n\tpresent, the i8042 driver should probe for controller existence."]
pub type x86_legacy_i8042_state = ::std::os::raw::c_uint;
#[doc = " struct x86_legacy_features - legacy x86 features\n\n @i8042: indicated if we expect the device to have i8042 controller\n\tpresent.\n @rtc: this device has a CMOS real-time clock present\n @reserve_bios_regions: boot code will search for the EBDA address and the\n \tstart of the 640k - 1M BIOS region.  If false, the platform must\n \tensure that its memory map correctly reserves sub-1MB regions as needed.\n @devices: legacy x86 devices, refer to struct x86_legacy_devices\n \tdocumentation for further details."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_legacy_features {
    pub i8042: x86_legacy_i8042_state,
    pub rtc: ::std::os::raw::c_int,
    pub warm_reset: ::std::os::raw::c_int,
    pub no_vga: ::std::os::raw::c_int,
    pub reserve_bios_regions: ::std::os::raw::c_int,
    pub devices: x86_legacy_devices,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_legacy_features"][::std::mem::size_of::<x86_legacy_features>() - 24usize];
    ["Alignment of x86_legacy_features"][::std::mem::align_of::<x86_legacy_features>() - 4usize];
    ["Offset of field: x86_legacy_features::i8042"]
        [::std::mem::offset_of!(x86_legacy_features, i8042) - 0usize];
    ["Offset of field: x86_legacy_features::rtc"]
        [::std::mem::offset_of!(x86_legacy_features, rtc) - 4usize];
    ["Offset of field: x86_legacy_features::warm_reset"]
        [::std::mem::offset_of!(x86_legacy_features, warm_reset) - 8usize];
    ["Offset of field: x86_legacy_features::no_vga"]
        [::std::mem::offset_of!(x86_legacy_features, no_vga) - 12usize];
    ["Offset of field: x86_legacy_features::reserve_bios_regions"]
        [::std::mem::offset_of!(x86_legacy_features, reserve_bios_regions) - 16usize];
    ["Offset of field: x86_legacy_features::devices"]
        [::std::mem::offset_of!(x86_legacy_features, devices) - 20usize];
};
#[doc = " struct x86_hyper_runtime - x86 hypervisor specific runtime callbacks\n\n @pin_vcpu:\t\t\tpin current vcpu to specified physical\n\t\t\t\tcpu (run rarely)\n @sev_es_hcall_prepare:\tLoad additional hypervisor-specific\n\t\t\t\tstate into the GHCB when doing a VMMCALL under\n\t\t\t\tSEV-ES. Called from the #VC exception handler.\n @sev_es_hcall_finish:\tCopies state from the GHCB back into the\n\t\t\t\tprocessor (or pt_regs). Also runs checks on the\n\t\t\t\tstate returned from the hypervisor after a\n\t\t\t\tVMMCALL under SEV-ES.  Needs to return 'false'\n\t\t\t\tif the checks fail.  Called from the #VC\n\t\t\t\texception handler.\n @is_private_mmio:\t\tFor CoCo VMs, must map MMIO address as private.\n\t\t\t\tUsed when device is emulated by a paravisor\n\t\t\t\tlayer in the VM context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_hyper_runtime {
    pub pin_vcpu: ::std::option::Option<unsafe extern "C" fn(cpu: ::std::os::raw::c_int)>,
    pub sev_es_hcall_prepare:
        ::std::option::Option<unsafe extern "C" fn(ghcb: *mut ghcb, regs: *mut pt_regs)>,
    pub sev_es_hcall_finish:
        ::std::option::Option<unsafe extern "C" fn(ghcb: *mut ghcb, regs: *mut pt_regs) -> bool_>,
    pub is_private_mmio: ::std::option::Option<unsafe extern "C" fn(addr: u64_) -> bool_>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_hyper_runtime"][::std::mem::size_of::<x86_hyper_runtime>() - 32usize];
    ["Alignment of x86_hyper_runtime"][::std::mem::align_of::<x86_hyper_runtime>() - 8usize];
    ["Offset of field: x86_hyper_runtime::pin_vcpu"]
        [::std::mem::offset_of!(x86_hyper_runtime, pin_vcpu) - 0usize];
    ["Offset of field: x86_hyper_runtime::sev_es_hcall_prepare"]
        [::std::mem::offset_of!(x86_hyper_runtime, sev_es_hcall_prepare) - 8usize];
    ["Offset of field: x86_hyper_runtime::sev_es_hcall_finish"]
        [::std::mem::offset_of!(x86_hyper_runtime, sev_es_hcall_finish) - 16usize];
    ["Offset of field: x86_hyper_runtime::is_private_mmio"]
        [::std::mem::offset_of!(x86_hyper_runtime, is_private_mmio) - 24usize];
};
#[doc = " struct x86_platform_ops - platform specific runtime functions\n @calibrate_cpu:\t\tcalibrate CPU\n @calibrate_tsc:\t\tcalibrate TSC, if different from CPU\n @get_wallclock:\t\tget time from HW clock like RTC etc.\n @set_wallclock:\t\tset time back to HW clock\n @is_untracked_pat_range\texclude from PAT logic\n @nmi_init\t\t\tenable NMI on cpus\n @save_sched_clock_state:\tsave state for sched_clock() on suspend\n @restore_sched_clock_state:\trestore state for sched_clock() on resume\n @apic_post_init:\t\tadjust apic if needed\n @legacy:\t\t\tlegacy features\n @set_legacy_features:\toverride legacy features. Use of this callback\n \t\t\t\tis highly discouraged. You should only need\n \t\t\t\tthis if your hardware platform requires further\n \t\t\t\tcustom fine tuning far beyond what may be\n \t\t\t\tpossible in x86_early_init_platform_quirks() by\n \t\t\t\tonly using the current x86_hardware_subarch\n \t\t\t\tsemantics.\n @realmode_reserve:\t\treserve memory for realmode trampoline\n @realmode_init:\t\tinitialize realmode trampoline\n @hyper:\t\t\tx86 hypervisor specific runtime callbacks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_platform_ops {
    pub calibrate_cpu: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    pub calibrate_tsc: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_ulong>,
    pub get_wallclock: ::std::option::Option<unsafe extern "C" fn(ts: *mut timespec64)>,
    pub set_wallclock:
        ::std::option::Option<unsafe extern "C" fn(ts: *const timespec64) -> ::std::os::raw::c_int>,
    pub iommu_shutdown: ::std::option::Option<unsafe extern "C" fn()>,
    pub is_untracked_pat_range:
        ::std::option::Option<unsafe extern "C" fn(start: u64_, end: u64_) -> bool_>,
    pub nmi_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub get_nmi_reason: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uchar>,
    pub save_sched_clock_state: ::std::option::Option<unsafe extern "C" fn()>,
    pub restore_sched_clock_state: ::std::option::Option<unsafe extern "C" fn()>,
    pub apic_post_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub legacy: x86_legacy_features,
    pub set_legacy_features: ::std::option::Option<unsafe extern "C" fn()>,
    pub realmode_reserve: ::std::option::Option<unsafe extern "C" fn()>,
    pub realmode_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub hyper: x86_hyper_runtime,
    pub guest: x86_guest,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_platform_ops"][::std::mem::size_of::<x86_platform_ops>() - 216usize];
    ["Alignment of x86_platform_ops"][::std::mem::align_of::<x86_platform_ops>() - 8usize];
    ["Offset of field: x86_platform_ops::calibrate_cpu"]
        [::std::mem::offset_of!(x86_platform_ops, calibrate_cpu) - 0usize];
    ["Offset of field: x86_platform_ops::calibrate_tsc"]
        [::std::mem::offset_of!(x86_platform_ops, calibrate_tsc) - 8usize];
    ["Offset of field: x86_platform_ops::get_wallclock"]
        [::std::mem::offset_of!(x86_platform_ops, get_wallclock) - 16usize];
    ["Offset of field: x86_platform_ops::set_wallclock"]
        [::std::mem::offset_of!(x86_platform_ops, set_wallclock) - 24usize];
    ["Offset of field: x86_platform_ops::iommu_shutdown"]
        [::std::mem::offset_of!(x86_platform_ops, iommu_shutdown) - 32usize];
    ["Offset of field: x86_platform_ops::is_untracked_pat_range"]
        [::std::mem::offset_of!(x86_platform_ops, is_untracked_pat_range) - 40usize];
    ["Offset of field: x86_platform_ops::nmi_init"]
        [::std::mem::offset_of!(x86_platform_ops, nmi_init) - 48usize];
    ["Offset of field: x86_platform_ops::get_nmi_reason"]
        [::std::mem::offset_of!(x86_platform_ops, get_nmi_reason) - 56usize];
    ["Offset of field: x86_platform_ops::save_sched_clock_state"]
        [::std::mem::offset_of!(x86_platform_ops, save_sched_clock_state) - 64usize];
    ["Offset of field: x86_platform_ops::restore_sched_clock_state"]
        [::std::mem::offset_of!(x86_platform_ops, restore_sched_clock_state) - 72usize];
    ["Offset of field: x86_platform_ops::apic_post_init"]
        [::std::mem::offset_of!(x86_platform_ops, apic_post_init) - 80usize];
    ["Offset of field: x86_platform_ops::legacy"]
        [::std::mem::offset_of!(x86_platform_ops, legacy) - 88usize];
    ["Offset of field: x86_platform_ops::set_legacy_features"]
        [::std::mem::offset_of!(x86_platform_ops, set_legacy_features) - 112usize];
    ["Offset of field: x86_platform_ops::realmode_reserve"]
        [::std::mem::offset_of!(x86_platform_ops, realmode_reserve) - 120usize];
    ["Offset of field: x86_platform_ops::realmode_init"]
        [::std::mem::offset_of!(x86_platform_ops, realmode_init) - 128usize];
    ["Offset of field: x86_platform_ops::hyper"]
        [::std::mem::offset_of!(x86_platform_ops, hyper) - 136usize];
    ["Offset of field: x86_platform_ops::guest"]
        [::std::mem::offset_of!(x86_platform_ops, guest) - 168usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_apic_ops {
    pub io_apic_read: ::std::option::Option<
        unsafe extern "C" fn(
            apic: ::std::os::raw::c_uint,
            reg: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub restore: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_apic_ops"][::std::mem::size_of::<x86_apic_ops>() - 16usize];
    ["Alignment of x86_apic_ops"][::std::mem::align_of::<x86_apic_ops>() - 8usize];
    ["Offset of field: x86_apic_ops::io_apic_read"]
        [::std::mem::offset_of!(x86_apic_ops, io_apic_read) - 0usize];
    ["Offset of field: x86_apic_ops::restore"]
        [::std::mem::offset_of!(x86_apic_ops, restore) - 8usize];
};
extern "C" {
    pub static mut x86_init: x86_init_ops;
}
extern "C" {
    pub static mut x86_cpuinit: x86_cpuinit_ops;
}
extern "C" {
    pub static mut x86_platform: x86_platform_ops;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_msi_ops {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut x86_msi: x86_msi_ops;
}
extern "C" {
    pub static mut x86_apic_ops: x86_apic_ops;
}
extern "C" {
    pub fn x86_early_init_platform_quirks();
}
extern "C" {
    pub fn x86_init_noop();
}
extern "C" {
    pub fn x86_init_uint_noop(unused: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn bool_x86_init_noop() -> bool_;
}
extern "C" {
    pub fn x86_op_int_noop(cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn x86_pnpbios_disabled() -> bool_;
}
extern "C" {
    pub fn set_rtc_noop(now: *const timespec64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_rtc_noop(now: *mut timespec64);
}
extern "C" {
    pub static mut pic_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mp_bus_id_to_type: [::std::os::raw::c_int; 256usize];
}
extern "C" {
    pub static mut mp_bus_not_pci: [::std::os::raw::c_ulong; 4usize];
}
extern "C" {
    pub static mut boot_cpu_physical_apicid: u32_;
}
extern "C" {
    pub static mut boot_cpu_apic_version: u8_;
}
extern "C" {
    pub static mut smp_found_config: ::std::os::raw::c_int;
}
extern "C" {
    pub fn e820__memblock_alloc_reserved_mpc_new();
}
extern "C" {
    pub static mut enable_update_mptable: ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpparse_find_mptable();
}
extern "C" {
    pub fn mpparse_parse_early_smp_config();
}
extern "C" {
    pub fn mpparse_parse_smp_config();
}
extern "C" {
    pub static mut phys_cpu_present_map: [::std::os::raw::c_ulong; 512usize];
}
extern "C" {
    pub static mut x86_cpu_to_node_map: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut x86_cpu_to_node_map_early_ptr: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut x86_cpu_to_node_map_early_map: [::std::os::raw::c_int; 0usize];
}
extern "C" {
    pub static mut node_to_cpumask_map: [cpumask_var_t; 1024usize];
}
extern "C" {
    pub fn setup_node_to_cpumask_map();
}
extern "C" {
    pub fn __node_distance(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const x86_topology_domains_TOPO_SMT_DOMAIN: x86_topology_domains = 0;
pub const x86_topology_domains_TOPO_CORE_DOMAIN: x86_topology_domains = 1;
pub const x86_topology_domains_TOPO_MODULE_DOMAIN: x86_topology_domains = 2;
pub const x86_topology_domains_TOPO_TILE_DOMAIN: x86_topology_domains = 3;
pub const x86_topology_domains_TOPO_DIE_DOMAIN: x86_topology_domains = 4;
pub const x86_topology_domains_TOPO_DIEGRP_DOMAIN: x86_topology_domains = 5;
pub const x86_topology_domains_TOPO_PKG_DOMAIN: x86_topology_domains = 6;
pub const x86_topology_domains_TOPO_MAX_DOMAIN: x86_topology_domains = 7;
pub type x86_topology_domains = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_topology_system {
    pub dom_shifts: [::std::os::raw::c_uint; 7usize],
    pub dom_size: [::std::os::raw::c_uint; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_topology_system"][::std::mem::size_of::<x86_topology_system>() - 56usize];
    ["Alignment of x86_topology_system"][::std::mem::align_of::<x86_topology_system>() - 4usize];
    ["Offset of field: x86_topology_system::dom_shifts"]
        [::std::mem::offset_of!(x86_topology_system, dom_shifts) - 0usize];
    ["Offset of field: x86_topology_system::dom_size"]
        [::std::mem::offset_of!(x86_topology_system, dom_size) - 28usize];
};
extern "C" {
    pub static mut x86_topo_system: x86_topology_system;
}
extern "C" {
    pub fn cpu_coregroup_mask(cpu: ::std::os::raw::c_int) -> *const cpumask;
}
extern "C" {
    pub fn cpu_clustergroup_mask(cpu: ::std::os::raw::c_int) -> *const cpumask;
}
extern "C" {
    pub static mut __max_dies_per_package: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __max_logical_packages: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __max_threads_per_core: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __num_threads_per_package: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __num_cores_per_package: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn topology_get_logical_id(
        apicid: u32_,
        at_level: x86_topology_domains,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __max_smt_threads: ::std::os::raw::c_int;
}
pub const cpuhp_smt_control_CPU_SMT_ENABLED: cpuhp_smt_control = 0;
pub const cpuhp_smt_control_CPU_SMT_DISABLED: cpuhp_smt_control = 1;
pub const cpuhp_smt_control_CPU_SMT_FORCE_DISABLED: cpuhp_smt_control = 2;
pub const cpuhp_smt_control_CPU_SMT_NOT_SUPPORTED: cpuhp_smt_control = 3;
pub const cpuhp_smt_control_CPU_SMT_NOT_IMPLEMENTED: cpuhp_smt_control = 4;
pub type cpuhp_smt_control = ::std::os::raw::c_uint;
extern "C" {
    pub static mut cpu_smt_control: cpuhp_smt_control;
}
extern "C" {
    pub static mut cpu_smt_num_threads: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn cpu_smt_disable(force: bool_);
}
extern "C" {
    pub fn cpu_smt_set_num_threads(
        num_threads: ::std::os::raw::c_uint,
        max_threads: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn cpu_smt_possible() -> bool_;
}
extern "C" {
    pub fn cpuhp_smt_enable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cpuhp_smt_disable(ctrlval: cpuhp_smt_control) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __amd_nodes_per_pkg: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __cpu_primary_thread_mask: cpumask;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_bus {
    _unused: [u8; 0],
}
extern "C" {
    pub fn x86_pci_root_bus_node(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn x86_pci_root_bus_resources(bus: ::std::os::raw::c_int, resources: *mut list_head);
}
extern "C" {
    pub static mut x86_topology_update: bool_;
}
extern "C" {
    pub static mut sched_core_priority: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sysctl_sched_itmt_enabled: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sched_set_itmt_core_prio(prio: ::std::os::raw::c_int, core_cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sched_set_itmt_support() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_clear_itmt_support();
}
extern "C" {
    pub static mut arch_scale_freq_key: static_key_false;
}
extern "C" {
    pub fn arch_set_max_freq_ratio(turbo_disabled: bool_);
}
extern "C" {
    pub fn freq_invariance_set_perf_ratio(ratio: u64_, turbo_disabled: bool_);
}
extern "C" {
    pub fn arch_scale_freq_tick();
}
extern "C" {
    pub fn init_freq_invariance_cppc();
}
extern "C" {
    pub fn arch_update_cpu_topology() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut node_reclaim_distance: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut numa_node: ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_numa_find_nth_cpu(
        cpus: *const cpumask,
        cpu: ::std::os::raw::c_int,
        node: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_numa_hop_mask(
        node: ::std::os::raw::c_uint,
        hops: ::std::os::raw::c_uint,
    ) -> *const cpumask;
}
extern "C" {
    pub fn __alloc_pages_noprof(
        gfp: gfp_t,
        order: ::std::os::raw::c_uint,
        preferred_nid: ::std::os::raw::c_int,
        nodemask: *mut nodemask_t,
    ) -> *mut page;
}
extern "C" {
    pub fn __folio_alloc_noprof(
        gfp: gfp_t,
        order: ::std::os::raw::c_uint,
        preferred_nid: ::std::os::raw::c_int,
        nodemask: *mut nodemask_t,
    ) -> *mut folio;
}
extern "C" {
    pub fn alloc_pages_bulk_noprof(
        gfp: gfp_t,
        preferred_nid: ::std::os::raw::c_int,
        nodemask: *mut nodemask_t,
        nr_pages: ::std::os::raw::c_int,
        page_list: *mut list_head,
        page_array: *mut *mut page,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn alloc_pages_bulk_array_mempolicy_noprof(
        gfp: gfp_t,
        nr_pages: ::std::os::raw::c_ulong,
        page_array: *mut *mut page,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn alloc_pages_noprof(gfp: gfp_t, order: ::std::os::raw::c_uint) -> *mut page;
}
extern "C" {
    pub fn alloc_pages_mpol_noprof(
        gfp: gfp_t,
        order: ::std::os::raw::c_uint,
        mpol: *mut mempolicy,
        ilx: ::std::os::raw::c_ulong,
        nid: ::std::os::raw::c_int,
    ) -> *mut page;
}
extern "C" {
    pub fn folio_alloc_noprof(gfp: gfp_t, order: ::std::os::raw::c_uint) -> *mut folio;
}
extern "C" {
    pub fn folio_alloc_mpol_noprof(
        gfp: gfp_t,
        order: ::std::os::raw::c_uint,
        mpol: *mut mempolicy,
        ilx: ::std::os::raw::c_ulong,
        nid: ::std::os::raw::c_int,
    ) -> *mut folio;
}
extern "C" {
    pub fn vma_alloc_folio_noprof(
        gfp: gfp_t,
        order: ::std::os::raw::c_int,
        vma: *mut vm_area_struct,
        addr: ::std::os::raw::c_ulong,
        hugepage: bool_,
    ) -> *mut folio;
}
extern "C" {
    pub fn get_free_pages_noprof(
        gfp_mask: gfp_t,
        order: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_zeroed_page_noprof(gfp_mask: gfp_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn alloc_pages_exact_noprof(size: usize, gfp_mask: gfp_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free_pages_exact(virt: *mut ::std::os::raw::c_void, size: usize);
}
extern "C" {
    pub fn alloc_pages_exact_nid_noprof(
        nid: ::std::os::raw::c_int,
        size: usize,
        gfp_mask: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __free_pages(page: *mut page, order: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn free_pages(addr: ::std::os::raw::c_ulong, order: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn page_frag_cache_drain(nc: *mut page_frag_cache);
}
extern "C" {
    pub fn __page_frag_cache_drain(page: *mut page, count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn __page_frag_alloc_align(
        nc: *mut page_frag_cache,
        fragsz: ::std::os::raw::c_uint,
        gfp_mask: gfp_t,
        align_mask: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn page_frag_free(addr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn page_alloc_init_cpuhp();
}
extern "C" {
    pub fn decay_pcp_high(zone: *mut zone, pcp: *mut per_cpu_pages) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drain_zone_pages(zone: *mut zone, pcp: *mut per_cpu_pages);
}
extern "C" {
    pub fn drain_all_pages(zone: *mut zone);
}
extern "C" {
    pub fn drain_local_pages(zone: *mut zone);
}
extern "C" {
    pub fn page_alloc_init_late();
}
extern "C" {
    pub fn setup_pcp_cacheinfo(cpu: ::std::os::raw::c_uint);
}
extern "C" {
    pub static mut gfp_allowed_mask: gfp_t;
}
extern "C" {
    pub fn gfp_pfmemalloc_allowed(gfp_mask: gfp_t) -> bool_;
}
extern "C" {
    pub fn vma_thp_gfp_mask(vma: *mut vm_area_struct) -> gfp_t;
}
extern "C" {
    pub fn alloc_contig_range_noprof(
        start: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
        migratetype: ::std::os::raw::c_uint,
        gfp_mask: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloc_contig_pages_noprof(
        nr_pages: ::std::os::raw::c_ulong,
        gfp_mask: gfp_t,
        nid: ::std::os::raw::c_int,
        nodemask: *mut nodemask_t,
    ) -> *mut page;
}
extern "C" {
    pub fn free_contig_range(pfn: ::std::os::raw::c_ulong, nr_pages: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn set_dumpable(mm: *mut mm_struct, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mm_alloc() -> *mut mm_struct;
}
extern "C" {
    pub fn __mmdrop(mm: *mut mm_struct);
}
extern "C" {
    pub fn mmput(arg1: *mut mm_struct);
}
extern "C" {
    pub fn mmput_async(arg1: *mut mm_struct);
}
extern "C" {
    pub fn get_task_mm(task: *mut task_struct) -> *mut mm_struct;
}
extern "C" {
    pub fn mm_access(task: *mut task_struct, mode: ::std::os::raw::c_uint) -> *mut mm_struct;
}
extern "C" {
    pub fn exit_mm_release(arg1: *mut task_struct, arg2: *mut mm_struct);
}
extern "C" {
    pub fn exec_mm_release(arg1: *mut task_struct, arg2: *mut mm_struct);
}
extern "C" {
    pub fn mm_update_next_owner(mm: *mut mm_struct);
}
extern "C" {
    pub fn arch_pick_mmap_layout(mm: *mut mm_struct, rlim_stack: *mut rlimit);
}
extern "C" {
    pub fn arch_get_unmapped_area(
        arg1: *mut file,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_topdown(
        filp: *mut file,
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
        pgoff: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mm_get_unmapped_area(
        mm: *mut mm_struct,
        filp: *mut file,
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
        pgoff: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_vmflags(
        filp: *mut file,
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
        pgoff: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
        vm_flags: vm_flags_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_topdown_vmflags(
        filp: *mut file,
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
        pgoff: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
        arg1: vm_flags_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mm_get_unmapped_area_vmflags(
        mm: *mut mm_struct,
        filp: *mut file,
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
        pgoff: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
        vm_flags: vm_flags_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn generic_get_unmapped_area(
        filp: *mut file,
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
        pgoff: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn generic_get_unmapped_area_topdown(
        filp: *mut file,
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
        pgoff: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut int_active_memcg: *mut mem_cgroup;
}
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY: _bindgen_ty_23 = 1;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED: _bindgen_ty_23 = 2;
pub const MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY: _bindgen_ty_23 = 4;
pub const MEMBARRIER_STATE_GLOBAL_EXPEDITED: _bindgen_ty_23 = 8;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY: _bindgen_ty_23 = 16;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE: _bindgen_ty_23 = 32;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY: _bindgen_ty_23 = 64;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ: _bindgen_ty_23 = 128;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const MEMBARRIER_FLAG_SYNC_CORE: _bindgen_ty_24 = 1;
pub const MEMBARRIER_FLAG_RSEQ: _bindgen_ty_24 = 2;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
extern "C" {
    pub fn membarrier_exec_mmap(mm: *mut mm_struct);
}
extern "C" {
    pub fn membarrier_update_current_mm(next_mm: *mut mm_struct);
}
#[doc = " struct xa_limit - Represents a range of IDs.\n @min: The lowest ID to allocate (inclusive).\n @max: The maximum ID to allocate (inclusive).\n\n This structure is used either directly or via the XA_LIMIT() macro\n to communicate the range of IDs that are valid for allocation.\n Three common ranges are predefined for you:\n * xa_limit_32b\t- [0 - UINT_MAX]\n * xa_limit_31b\t- [0 - INT_MAX]\n * xa_limit_16b\t- [0 - USHRT_MAX]"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xa_limit {
    pub max: u32_,
    pub min: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xa_limit"][::std::mem::size_of::<xa_limit>() - 8usize];
    ["Alignment of xa_limit"][::std::mem::align_of::<xa_limit>() - 4usize];
    ["Offset of field: xa_limit::max"][::std::mem::offset_of!(xa_limit, max) - 0usize];
    ["Offset of field: xa_limit::min"][::std::mem::offset_of!(xa_limit, min) - 4usize];
};
pub type xa_mark_t = ::std::os::raw::c_uint;
pub const xa_lock_type_XA_LOCK_IRQ: xa_lock_type = 1;
pub const xa_lock_type_XA_LOCK_BH: xa_lock_type = 2;
pub type xa_lock_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xarray {
    pub xa_lock: spinlock_t,
    pub xa_flags: gfp_t,
    pub xa_head: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xarray"][::std::mem::size_of::<xarray>() - 16usize];
    ["Alignment of xarray"][::std::mem::align_of::<xarray>() - 8usize];
    ["Offset of field: xarray::xa_lock"][::std::mem::offset_of!(xarray, xa_lock) - 0usize];
    ["Offset of field: xarray::xa_flags"][::std::mem::offset_of!(xarray, xa_flags) - 4usize];
    ["Offset of field: xarray::xa_head"][::std::mem::offset_of!(xarray, xa_head) - 8usize];
};
extern "C" {
    pub fn xa_load(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xa_store(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        arg2: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xa_erase(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xa_store_range(
        arg1: *mut xarray,
        first: ::std::os::raw::c_ulong,
        last: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        arg2: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xa_get_mark(arg1: *mut xarray, index: ::std::os::raw::c_ulong, arg2: xa_mark_t)
        -> bool_;
}
extern "C" {
    pub fn xa_set_mark(arg1: *mut xarray, index: ::std::os::raw::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn xa_clear_mark(arg1: *mut xarray, index: ::std::os::raw::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn xa_find(
        xa: *mut xarray,
        index: *mut ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
        arg1: xa_mark_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xa_find_after(
        xa: *mut xarray,
        index: *mut ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
        arg1: xa_mark_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xa_extract(
        arg1: *mut xarray,
        dst: *mut *mut ::std::os::raw::c_void,
        start: ::std::os::raw::c_ulong,
        max: ::std::os::raw::c_ulong,
        n: ::std::os::raw::c_uint,
        arg2: xa_mark_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn xa_destroy(arg1: *mut xarray);
}
extern "C" {
    pub fn __xa_erase(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __xa_store(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        arg2: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __xa_cmpxchg(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
        old: *mut ::std::os::raw::c_void,
        entry: *mut ::std::os::raw::c_void,
        arg2: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __xa_insert(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
        entry: *mut ::std::os::raw::c_void,
        arg2: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xa_alloc(
        arg1: *mut xarray,
        id: *mut u32_,
        entry: *mut ::std::os::raw::c_void,
        arg2: xa_limit,
        arg3: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xa_alloc_cyclic(
        arg1: *mut xarray,
        id: *mut u32_,
        entry: *mut ::std::os::raw::c_void,
        arg2: xa_limit,
        next: *mut u32_,
        arg3: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xa_set_mark(arg1: *mut xarray, index: ::std::os::raw::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn __xa_clear_mark(arg1: *mut xarray, index: ::std::os::raw::c_ulong, arg2: xa_mark_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xa_node {
    pub shift: ::std::os::raw::c_uchar,
    pub offset: ::std::os::raw::c_uchar,
    pub count: ::std::os::raw::c_uchar,
    pub nr_values: ::std::os::raw::c_uchar,
    pub parent: *mut xa_node,
    pub array: *mut xarray,
    pub __bindgen_anon_1: xa_node__bindgen_ty_1,
    pub slots: [*mut ::std::os::raw::c_void; 64usize],
    pub __bindgen_anon_2: xa_node__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xa_node__bindgen_ty_1 {
    pub private_list: list_head,
    pub callback_head: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xa_node__bindgen_ty_1"][::std::mem::size_of::<xa_node__bindgen_ty_1>() - 16usize];
    ["Alignment of xa_node__bindgen_ty_1"]
        [::std::mem::align_of::<xa_node__bindgen_ty_1>() - 8usize];
    ["Offset of field: xa_node__bindgen_ty_1::private_list"]
        [::std::mem::offset_of!(xa_node__bindgen_ty_1, private_list) - 0usize];
    ["Offset of field: xa_node__bindgen_ty_1::callback_head"]
        [::std::mem::offset_of!(xa_node__bindgen_ty_1, callback_head) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xa_node__bindgen_ty_2 {
    pub tags: [[::std::os::raw::c_ulong; 1usize]; 3usize],
    pub marks: [[::std::os::raw::c_ulong; 1usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xa_node__bindgen_ty_2"][::std::mem::size_of::<xa_node__bindgen_ty_2>() - 24usize];
    ["Alignment of xa_node__bindgen_ty_2"]
        [::std::mem::align_of::<xa_node__bindgen_ty_2>() - 8usize];
    ["Offset of field: xa_node__bindgen_ty_2::tags"]
        [::std::mem::offset_of!(xa_node__bindgen_ty_2, tags) - 0usize];
    ["Offset of field: xa_node__bindgen_ty_2::marks"]
        [::std::mem::offset_of!(xa_node__bindgen_ty_2, marks) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xa_node"][::std::mem::size_of::<xa_node>() - 576usize];
    ["Alignment of xa_node"][::std::mem::align_of::<xa_node>() - 8usize];
    ["Offset of field: xa_node::shift"][::std::mem::offset_of!(xa_node, shift) - 0usize];
    ["Offset of field: xa_node::offset"][::std::mem::offset_of!(xa_node, offset) - 1usize];
    ["Offset of field: xa_node::count"][::std::mem::offset_of!(xa_node, count) - 2usize];
    ["Offset of field: xa_node::nr_values"][::std::mem::offset_of!(xa_node, nr_values) - 3usize];
    ["Offset of field: xa_node::parent"][::std::mem::offset_of!(xa_node, parent) - 8usize];
    ["Offset of field: xa_node::array"][::std::mem::offset_of!(xa_node, array) - 16usize];
    ["Offset of field: xa_node::slots"][::std::mem::offset_of!(xa_node, slots) - 40usize];
};
extern "C" {
    pub fn xa_dump(arg1: *const xarray);
}
extern "C" {
    pub fn xa_dump_node(arg1: *const xa_node);
}
#[doc = " typedef xa_update_node_t - A callback function from the XArray.\n @node: The node which is being processed\n\n This function is called every time the XArray updates the count of\n present and value entries in a node.  It allows advanced users to\n maintain the private_list in the node.\n\n Context: The xa_lock is held and interrupts may be disabled.\n\t    Implementations should not drop the xa_lock, nor re-enable\n\t    interrupts."]
pub type xa_update_node_t = ::std::option::Option<unsafe extern "C" fn(node: *mut xa_node)>;
extern "C" {
    pub fn xa_delete_node(arg1: *mut xa_node, arg2: xa_update_node_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xa_state {
    pub xa: *mut xarray,
    pub xa_index: ::std::os::raw::c_ulong,
    pub xa_shift: ::std::os::raw::c_uchar,
    pub xa_sibs: ::std::os::raw::c_uchar,
    pub xa_offset: ::std::os::raw::c_uchar,
    pub xa_pad: ::std::os::raw::c_uchar,
    pub xa_node: *mut xa_node,
    pub xa_alloc: *mut xa_node,
    pub xa_update: xa_update_node_t,
    pub xa_lru: *mut list_lru,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xa_state"][::std::mem::size_of::<xa_state>() - 56usize];
    ["Alignment of xa_state"][::std::mem::align_of::<xa_state>() - 8usize];
    ["Offset of field: xa_state::xa"][::std::mem::offset_of!(xa_state, xa) - 0usize];
    ["Offset of field: xa_state::xa_index"][::std::mem::offset_of!(xa_state, xa_index) - 8usize];
    ["Offset of field: xa_state::xa_shift"][::std::mem::offset_of!(xa_state, xa_shift) - 16usize];
    ["Offset of field: xa_state::xa_sibs"][::std::mem::offset_of!(xa_state, xa_sibs) - 17usize];
    ["Offset of field: xa_state::xa_offset"][::std::mem::offset_of!(xa_state, xa_offset) - 18usize];
    ["Offset of field: xa_state::xa_pad"][::std::mem::offset_of!(xa_state, xa_pad) - 19usize];
    ["Offset of field: xa_state::xa_node"][::std::mem::offset_of!(xa_state, xa_node) - 24usize];
    ["Offset of field: xa_state::xa_alloc"][::std::mem::offset_of!(xa_state, xa_alloc) - 32usize];
    ["Offset of field: xa_state::xa_update"][::std::mem::offset_of!(xa_state, xa_update) - 40usize];
    ["Offset of field: xa_state::xa_lru"][::std::mem::offset_of!(xa_state, xa_lru) - 48usize];
};
extern "C" {
    pub fn xas_load(arg1: *mut xa_state) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xas_store(
        arg1: *mut xa_state,
        entry: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xas_find(
        arg1: *mut xa_state,
        max: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xas_find_conflict(arg1: *mut xa_state) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xas_get_mark(arg1: *const xa_state, arg2: xa_mark_t) -> bool_;
}
extern "C" {
    pub fn xas_set_mark(arg1: *const xa_state, arg2: xa_mark_t);
}
extern "C" {
    pub fn xas_clear_mark(arg1: *const xa_state, arg2: xa_mark_t);
}
extern "C" {
    pub fn xas_find_marked(
        arg1: *mut xa_state,
        max: ::std::os::raw::c_ulong,
        arg2: xa_mark_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xas_init_marks(arg1: *const xa_state);
}
extern "C" {
    pub fn xas_nomem(arg1: *mut xa_state, arg2: gfp_t) -> bool_;
}
extern "C" {
    pub fn xas_destroy(arg1: *mut xa_state);
}
extern "C" {
    pub fn xas_pause(arg1: *mut xa_state);
}
extern "C" {
    pub fn xas_create_range(arg1: *mut xa_state);
}
extern "C" {
    pub fn xa_get_order(arg1: *mut xarray, index: ::std::os::raw::c_ulong)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xas_get_order(xas: *mut xa_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xas_split(
        arg1: *mut xa_state,
        entry: *mut ::std::os::raw::c_void,
        order: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn xas_split_alloc(
        arg1: *mut xa_state,
        entry: *mut ::std::os::raw::c_void,
        order: ::std::os::raw::c_uint,
        arg2: gfp_t,
    );
}
pub const XA_CHECK_SCHED: _bindgen_ty_25 = 4096;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __xas_next(arg1: *mut xa_state) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __xas_prev(arg1: *mut xa_state) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radix_tree_preload {
    pub lock: local_lock_t,
    pub nr: ::std::os::raw::c_uint,
    pub nodes: *mut xa_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of radix_tree_preload"][::std::mem::size_of::<radix_tree_preload>() - 16usize];
    ["Alignment of radix_tree_preload"][::std::mem::align_of::<radix_tree_preload>() - 8usize];
    ["Offset of field: radix_tree_preload::lock"]
        [::std::mem::offset_of!(radix_tree_preload, lock) - 0usize];
    ["Offset of field: radix_tree_preload::nr"]
        [::std::mem::offset_of!(radix_tree_preload, nr) - 0usize];
    ["Offset of field: radix_tree_preload::nodes"]
        [::std::mem::offset_of!(radix_tree_preload, nodes) - 8usize];
};
extern "C" {
    pub static mut radix_tree_preloads: radix_tree_preload;
}
#[doc = " struct radix_tree_iter - radix tree iterator state\n\n @index:\tindex of current slot\n @next_index:\tone beyond the last index for this chunk\n @tags:\tbit-mask for tag-iterating\n @node:\tnode that contains current slot\n\n This radix tree iterator works in terms of \"chunks\" of slots.  A chunk is a\n subinterval of slots contained within one radix tree leaf node.  It is\n described by a pointer to its first slot and a struct radix_tree_iter\n which holds the chunk's position in the tree and its size.  For tagged\n iteration radix_tree_iter also holds the slots' bit-mask for one chosen\n radix tree tag."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radix_tree_iter {
    pub index: ::std::os::raw::c_ulong,
    pub next_index: ::std::os::raw::c_ulong,
    pub tags: ::std::os::raw::c_ulong,
    pub node: *mut xa_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of radix_tree_iter"][::std::mem::size_of::<radix_tree_iter>() - 32usize];
    ["Alignment of radix_tree_iter"][::std::mem::align_of::<radix_tree_iter>() - 8usize];
    ["Offset of field: radix_tree_iter::index"]
        [::std::mem::offset_of!(radix_tree_iter, index) - 0usize];
    ["Offset of field: radix_tree_iter::next_index"]
        [::std::mem::offset_of!(radix_tree_iter, next_index) - 8usize];
    ["Offset of field: radix_tree_iter::tags"]
        [::std::mem::offset_of!(radix_tree_iter, tags) - 16usize];
    ["Offset of field: radix_tree_iter::node"]
        [::std::mem::offset_of!(radix_tree_iter, node) - 24usize];
};
extern "C" {
    pub fn radix_tree_insert(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __radix_tree_lookup(
        arg1: *const xarray,
        index: ::std::os::raw::c_ulong,
        nodep: *mut *mut xa_node,
        slotp: *mut *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn radix_tree_lookup(
        arg1: *const xarray,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn radix_tree_lookup_slot(
        arg1: *const xarray,
        index: ::std::os::raw::c_ulong,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __radix_tree_replace(
        arg1: *mut xarray,
        arg2: *mut xa_node,
        slot: *mut *mut ::std::os::raw::c_void,
        entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn radix_tree_iter_replace(
        arg1: *mut xarray,
        arg2: *const radix_tree_iter,
        slot: *mut *mut ::std::os::raw::c_void,
        entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn radix_tree_replace_slot(
        arg1: *mut xarray,
        slot: *mut *mut ::std::os::raw::c_void,
        entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn radix_tree_iter_delete(
        arg1: *mut xarray,
        iter: *mut radix_tree_iter,
        slot: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn radix_tree_delete_item(
        arg1: *mut xarray,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn radix_tree_delete(
        arg1: *mut xarray,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn radix_tree_gang_lookup(
        arg1: *const xarray,
        results: *mut *mut ::std::os::raw::c_void,
        first_index: ::std::os::raw::c_ulong,
        max_items: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn radix_tree_preload(gfp_mask: gfp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radix_tree_maybe_preload(gfp_mask: gfp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radix_tree_init();
}
extern "C" {
    pub fn radix_tree_tag_set(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
        tag: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn radix_tree_tag_clear(
        arg1: *mut xarray,
        index: ::std::os::raw::c_ulong,
        tag: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn radix_tree_tag_get(
        arg1: *const xarray,
        index: ::std::os::raw::c_ulong,
        tag: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radix_tree_iter_tag_clear(
        arg1: *mut xarray,
        iter: *const radix_tree_iter,
        tag: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn radix_tree_gang_lookup_tag(
        arg1: *const xarray,
        results: *mut *mut ::std::os::raw::c_void,
        first_index: ::std::os::raw::c_ulong,
        max_items: ::std::os::raw::c_uint,
        tag: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn radix_tree_gang_lookup_tag_slot(
        arg1: *const xarray,
        results: *mut *mut *mut ::std::os::raw::c_void,
        first_index: ::std::os::raw::c_ulong,
        max_items: ::std::os::raw::c_uint,
        tag: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn radix_tree_tagged(
        arg1: *const xarray,
        tag: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idr_get_free(
        root: *mut xarray,
        iter: *mut radix_tree_iter,
        gfp: gfp_t,
        max: ::std::os::raw::c_ulong,
    ) -> *mut *mut ::std::os::raw::c_void;
}
pub const RADIX_TREE_ITER_TAG_MASK: _bindgen_ty_26 = 15;
pub const RADIX_TREE_ITER_TAGGED: _bindgen_ty_26 = 16;
pub const RADIX_TREE_ITER_CONTIG: _bindgen_ty_26 = 32;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " radix_tree_next_chunk - find next chunk of slots for iteration\n\n @root:\tradix tree root\n @iter:\titerator state\n @flags:\tRADIX_TREE_ITER_* flags and tag index\n Returns:\tpointer to chunk first slot, or NULL if there no more left\n\n This function looks up the next chunk in the radix tree starting from\n @iter->next_index.  It returns a pointer to the chunk's first slot.\n Also it fills @iter with data about chunk: position in the tree (index),\n its end (next_index), and constructs a bit mask for tagged iterating (tags)."]
    pub fn radix_tree_next_chunk(
        arg1: *const xarray,
        iter: *mut radix_tree_iter,
        flags: ::std::os::raw::c_uint,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " radix_tree_iter_resume - resume iterating when the chunk may be invalid\n @slot: pointer to current slot\n @iter: iterator state\n Returns: New slot pointer\n\n If the iterator needs to release then reacquire a lock, the chunk may\n have been invalidated by an insertion or deletion.  Call this function\n before releasing the lock to continue the iteration from the next index."]
    pub fn radix_tree_iter_resume(
        slot: *mut *mut ::std::os::raw::c_void,
        iter: *mut radix_tree_iter,
    ) -> *mut *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idr {
    pub idr_rt: xarray,
    pub idr_base: ::std::os::raw::c_uint,
    pub idr_next: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idr"][::std::mem::size_of::<idr>() - 24usize];
    ["Alignment of idr"][::std::mem::align_of::<idr>() - 8usize];
    ["Offset of field: idr::idr_rt"][::std::mem::offset_of!(idr, idr_rt) - 0usize];
    ["Offset of field: idr::idr_base"][::std::mem::offset_of!(idr, idr_base) - 16usize];
    ["Offset of field: idr::idr_next"][::std::mem::offset_of!(idr, idr_next) - 20usize];
};
extern "C" {
    pub fn idr_preload(gfp_mask: gfp_t);
}
extern "C" {
    pub fn idr_alloc(
        arg1: *mut idr,
        ptr: *mut ::std::os::raw::c_void,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        arg2: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idr_alloc_u32(
        arg1: *mut idr,
        ptr: *mut ::std::os::raw::c_void,
        id: *mut u32_,
        max: ::std::os::raw::c_ulong,
        arg2: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idr_alloc_cyclic(
        arg1: *mut idr,
        ptr: *mut ::std::os::raw::c_void,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        arg2: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idr_remove(arg1: *mut idr, id: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn idr_find(arg1: *const idr, id: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn idr_for_each(
        arg1: *const idr,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                id: ::std::os::raw::c_int,
                p: *mut ::std::os::raw::c_void,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idr_get_next(
        arg1: *mut idr,
        nextid: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn idr_get_next_ul(
        arg1: *mut idr,
        nextid: *mut ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn idr_replace(
        arg1: *mut idr,
        arg2: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn idr_destroy(arg1: *mut idr);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ida_bitmap {
    pub bitmap: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ida_bitmap"][::std::mem::size_of::<ida_bitmap>() - 128usize];
    ["Alignment of ida_bitmap"][::std::mem::align_of::<ida_bitmap>() - 8usize];
    ["Offset of field: ida_bitmap::bitmap"][::std::mem::offset_of!(ida_bitmap, bitmap) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ida {
    pub xa: xarray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ida"][::std::mem::size_of::<ida>() - 16usize];
    ["Alignment of ida"][::std::mem::align_of::<ida>() - 8usize];
    ["Offset of field: ida::xa"][::std::mem::offset_of!(ida, xa) - 0usize];
};
extern "C" {
    pub fn ida_alloc_range(
        arg1: *mut ida,
        min: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_uint,
        arg2: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ida_free(arg1: *mut ida, id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ida_destroy(ida: *mut ida);
}
extern "C" {
    pub static mut overflowuid: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut overflowgid: ::std::os::raw::c_int;
}
extern "C" {
    pub fn __bad_uid();
}
extern "C" {
    pub fn __bad_gid();
}
extern "C" {
    pub static mut fs_overflowuid: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fs_overflowgid: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_namespace {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut init_user_ns: user_namespace;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uid_gid_map {
    _unused: [u8; 0],
}
extern "C" {
    pub fn make_kuid(from: *mut user_namespace, uid: uid_t) -> kuid_t;
}
extern "C" {
    pub fn make_kgid(from: *mut user_namespace, gid: gid_t) -> kgid_t;
}
extern "C" {
    pub fn from_kuid(to: *mut user_namespace, uid: kuid_t) -> uid_t;
}
extern "C" {
    pub fn from_kgid(to: *mut user_namespace, gid: kgid_t) -> gid_t;
}
extern "C" {
    pub fn from_kuid_munged(to: *mut user_namespace, uid: kuid_t) -> uid_t;
}
extern "C" {
    pub fn from_kgid_munged(to: *mut user_namespace, gid: kgid_t) -> gid_t;
}
extern "C" {
    pub fn map_id_down(map: *mut uid_gid_map, id: u32_) -> u32_;
}
extern "C" {
    pub fn map_id_up(map: *mut uid_gid_map, id: u32_) -> u32_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_operations_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_open_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_iattrs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_global_locks {
    pub open_file_mutex: [mutex; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_global_locks"][::std::mem::size_of::<kernfs_global_locks>() - 32768usize];
    ["Alignment of kernfs_global_locks"][::std::mem::align_of::<kernfs_global_locks>() - 8usize];
    ["Offset of field: kernfs_global_locks::open_file_mutex"]
        [::std::mem::offset_of!(kernfs_global_locks, open_file_mutex) - 0usize];
};
pub const kernfs_node_type_KERNFS_DIR: kernfs_node_type = 1;
pub const kernfs_node_type_KERNFS_FILE: kernfs_node_type = 2;
pub const kernfs_node_type_KERNFS_LINK: kernfs_node_type = 4;
pub type kernfs_node_type = ::std::os::raw::c_uint;
pub const kernfs_node_flag_KERNFS_ACTIVATED: kernfs_node_flag = 16;
pub const kernfs_node_flag_KERNFS_NS: kernfs_node_flag = 32;
pub const kernfs_node_flag_KERNFS_HAS_SEQ_SHOW: kernfs_node_flag = 64;
pub const kernfs_node_flag_KERNFS_HAS_MMAP: kernfs_node_flag = 128;
pub const kernfs_node_flag_KERNFS_LOCKDEP: kernfs_node_flag = 256;
pub const kernfs_node_flag_KERNFS_HIDDEN: kernfs_node_flag = 512;
pub const kernfs_node_flag_KERNFS_SUICIDAL: kernfs_node_flag = 1024;
pub const kernfs_node_flag_KERNFS_SUICIDED: kernfs_node_flag = 2048;
pub const kernfs_node_flag_KERNFS_EMPTY_DIR: kernfs_node_flag = 4096;
pub const kernfs_node_flag_KERNFS_HAS_RELEASE: kernfs_node_flag = 8192;
pub const kernfs_node_flag_KERNFS_REMOVING: kernfs_node_flag = 16384;
pub type kernfs_node_flag = ::std::os::raw::c_uint;
pub const kernfs_root_flag_KERNFS_ROOT_CREATE_DEACTIVATED: kernfs_root_flag = 1;
pub const kernfs_root_flag_KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK: kernfs_root_flag = 2;
pub const kernfs_root_flag_KERNFS_ROOT_SUPPORT_EXPORTOP: kernfs_root_flag = 4;
pub const kernfs_root_flag_KERNFS_ROOT_SUPPORT_USER_XATTR: kernfs_root_flag = 8;
pub type kernfs_root_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_elem_dir {
    pub subdirs: ::std::os::raw::c_ulong,
    pub children: rb_root,
    pub root: *mut kernfs_root,
    pub rev: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_elem_dir"][::std::mem::size_of::<kernfs_elem_dir>() - 32usize];
    ["Alignment of kernfs_elem_dir"][::std::mem::align_of::<kernfs_elem_dir>() - 8usize];
    ["Offset of field: kernfs_elem_dir::subdirs"]
        [::std::mem::offset_of!(kernfs_elem_dir, subdirs) - 0usize];
    ["Offset of field: kernfs_elem_dir::children"]
        [::std::mem::offset_of!(kernfs_elem_dir, children) - 8usize];
    ["Offset of field: kernfs_elem_dir::root"]
        [::std::mem::offset_of!(kernfs_elem_dir, root) - 16usize];
    ["Offset of field: kernfs_elem_dir::rev"]
        [::std::mem::offset_of!(kernfs_elem_dir, rev) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_elem_symlink {
    pub target_kn: *mut kernfs_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_elem_symlink"][::std::mem::size_of::<kernfs_elem_symlink>() - 8usize];
    ["Alignment of kernfs_elem_symlink"][::std::mem::align_of::<kernfs_elem_symlink>() - 8usize];
    ["Offset of field: kernfs_elem_symlink::target_kn"]
        [::std::mem::offset_of!(kernfs_elem_symlink, target_kn) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_elem_attr {
    pub ops: *const kernfs_ops,
    pub open: *mut kernfs_open_node,
    pub size: loff_t,
    pub notify_next: *mut kernfs_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_elem_attr"][::std::mem::size_of::<kernfs_elem_attr>() - 32usize];
    ["Alignment of kernfs_elem_attr"][::std::mem::align_of::<kernfs_elem_attr>() - 8usize];
    ["Offset of field: kernfs_elem_attr::ops"]
        [::std::mem::offset_of!(kernfs_elem_attr, ops) - 0usize];
    ["Offset of field: kernfs_elem_attr::open"]
        [::std::mem::offset_of!(kernfs_elem_attr, open) - 8usize];
    ["Offset of field: kernfs_elem_attr::size"]
        [::std::mem::offset_of!(kernfs_elem_attr, size) - 16usize];
    ["Offset of field: kernfs_elem_attr::notify_next"]
        [::std::mem::offset_of!(kernfs_elem_attr, notify_next) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_node {
    pub count: atomic_t,
    pub active: atomic_t,
    pub parent: *mut kernfs_node,
    pub name: *const ::std::os::raw::c_char,
    pub rb: rb_node,
    pub ns: *const ::std::os::raw::c_void,
    pub hash: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_ushort,
    pub mode: umode_t,
    pub __bindgen_anon_1: kernfs_node__bindgen_ty_1,
    pub id: u64_,
    pub priv_: *mut ::std::os::raw::c_void,
    pub iattr: *mut kernfs_iattrs,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernfs_node__bindgen_ty_1 {
    pub dir: kernfs_elem_dir,
    pub symlink: kernfs_elem_symlink,
    pub attr: kernfs_elem_attr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_node__bindgen_ty_1"]
        [::std::mem::size_of::<kernfs_node__bindgen_ty_1>() - 32usize];
    ["Alignment of kernfs_node__bindgen_ty_1"]
        [::std::mem::align_of::<kernfs_node__bindgen_ty_1>() - 8usize];
    ["Offset of field: kernfs_node__bindgen_ty_1::dir"]
        [::std::mem::offset_of!(kernfs_node__bindgen_ty_1, dir) - 0usize];
    ["Offset of field: kernfs_node__bindgen_ty_1::symlink"]
        [::std::mem::offset_of!(kernfs_node__bindgen_ty_1, symlink) - 0usize];
    ["Offset of field: kernfs_node__bindgen_ty_1::attr"]
        [::std::mem::offset_of!(kernfs_node__bindgen_ty_1, attr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_node"][::std::mem::size_of::<kernfs_node>() - 136usize];
    ["Alignment of kernfs_node"][::std::mem::align_of::<kernfs_node>() - 8usize];
    ["Offset of field: kernfs_node::count"][::std::mem::offset_of!(kernfs_node, count) - 0usize];
    ["Offset of field: kernfs_node::active"][::std::mem::offset_of!(kernfs_node, active) - 4usize];
    ["Offset of field: kernfs_node::parent"][::std::mem::offset_of!(kernfs_node, parent) - 8usize];
    ["Offset of field: kernfs_node::name"][::std::mem::offset_of!(kernfs_node, name) - 16usize];
    ["Offset of field: kernfs_node::rb"][::std::mem::offset_of!(kernfs_node, rb) - 24usize];
    ["Offset of field: kernfs_node::ns"][::std::mem::offset_of!(kernfs_node, ns) - 48usize];
    ["Offset of field: kernfs_node::hash"][::std::mem::offset_of!(kernfs_node, hash) - 56usize];
    ["Offset of field: kernfs_node::flags"][::std::mem::offset_of!(kernfs_node, flags) - 60usize];
    ["Offset of field: kernfs_node::mode"][::std::mem::offset_of!(kernfs_node, mode) - 62usize];
    ["Offset of field: kernfs_node::id"][::std::mem::offset_of!(kernfs_node, id) - 96usize];
    ["Offset of field: kernfs_node::priv_"][::std::mem::offset_of!(kernfs_node, priv_) - 104usize];
    ["Offset of field: kernfs_node::iattr"][::std::mem::offset_of!(kernfs_node, iattr) - 112usize];
    ["Offset of field: kernfs_node::rcu"][::std::mem::offset_of!(kernfs_node, rcu) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_syscall_ops {
    pub show_options: ::std::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, root: *mut kernfs_root) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            parent: *mut kernfs_node,
            name: *const ::std::os::raw::c_char,
            mode: umode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub rmdir:
        ::std::option::Option<unsafe extern "C" fn(kn: *mut kernfs_node) -> ::std::os::raw::c_int>,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            kn: *mut kernfs_node,
            new_parent: *mut kernfs_node,
            new_name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub show_path: ::std::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            kn: *mut kernfs_node,
            root: *mut kernfs_root,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_syscall_ops"][::std::mem::size_of::<kernfs_syscall_ops>() - 40usize];
    ["Alignment of kernfs_syscall_ops"][::std::mem::align_of::<kernfs_syscall_ops>() - 8usize];
    ["Offset of field: kernfs_syscall_ops::show_options"]
        [::std::mem::offset_of!(kernfs_syscall_ops, show_options) - 0usize];
    ["Offset of field: kernfs_syscall_ops::mkdir"]
        [::std::mem::offset_of!(kernfs_syscall_ops, mkdir) - 8usize];
    ["Offset of field: kernfs_syscall_ops::rmdir"]
        [::std::mem::offset_of!(kernfs_syscall_ops, rmdir) - 16usize];
    ["Offset of field: kernfs_syscall_ops::rename"]
        [::std::mem::offset_of!(kernfs_syscall_ops, rename) - 24usize];
    ["Offset of field: kernfs_syscall_ops::show_path"]
        [::std::mem::offset_of!(kernfs_syscall_ops, show_path) - 32usize];
};
extern "C" {
    pub fn kernfs_root_to_node(root: *mut kernfs_root) -> *mut kernfs_node;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_open_file {
    pub kn: *mut kernfs_node,
    pub file: *mut file,
    pub seq_file: *mut seq_file,
    pub priv_: *mut ::std::os::raw::c_void,
    pub mutex: mutex,
    pub prealloc_mutex: mutex,
    pub event: ::std::os::raw::c_int,
    pub list: list_head,
    pub prealloc_buf: *mut ::std::os::raw::c_char,
    pub atomic_write_len: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub vm_ops: *const vm_operations_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_open_file"][::std::mem::size_of::<kernfs_open_file>() - 152usize];
    ["Alignment of kernfs_open_file"][::std::mem::align_of::<kernfs_open_file>() - 8usize];
    ["Offset of field: kernfs_open_file::kn"]
        [::std::mem::offset_of!(kernfs_open_file, kn) - 0usize];
    ["Offset of field: kernfs_open_file::file"]
        [::std::mem::offset_of!(kernfs_open_file, file) - 8usize];
    ["Offset of field: kernfs_open_file::seq_file"]
        [::std::mem::offset_of!(kernfs_open_file, seq_file) - 16usize];
    ["Offset of field: kernfs_open_file::priv_"]
        [::std::mem::offset_of!(kernfs_open_file, priv_) - 24usize];
    ["Offset of field: kernfs_open_file::mutex"]
        [::std::mem::offset_of!(kernfs_open_file, mutex) - 32usize];
    ["Offset of field: kernfs_open_file::prealloc_mutex"]
        [::std::mem::offset_of!(kernfs_open_file, prealloc_mutex) - 64usize];
    ["Offset of field: kernfs_open_file::event"]
        [::std::mem::offset_of!(kernfs_open_file, event) - 96usize];
    ["Offset of field: kernfs_open_file::list"]
        [::std::mem::offset_of!(kernfs_open_file, list) - 104usize];
    ["Offset of field: kernfs_open_file::prealloc_buf"]
        [::std::mem::offset_of!(kernfs_open_file, prealloc_buf) - 120usize];
    ["Offset of field: kernfs_open_file::atomic_write_len"]
        [::std::mem::offset_of!(kernfs_open_file, atomic_write_len) - 128usize];
    ["Offset of field: kernfs_open_file::vm_ops"]
        [::std::mem::offset_of!(kernfs_open_file, vm_ops) - 144usize];
};
impl kernfs_open_file {
    #[inline]
    pub fn mmapped(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mmapped(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn released(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_released(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(mmapped: bool_, released: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mmapped: u8 = unsafe { ::std::mem::transmute(mmapped) };
            mmapped as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let released: u8 = unsafe { ::std::mem::transmute(released) };
            released as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_ops {
    pub open: ::std::option::Option<
        unsafe extern "C" fn(of: *mut kernfs_open_file) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file)>,
    pub seq_show: ::std::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            v: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub seq_start: ::std::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, ppos: *mut loff_t) -> *mut ::std::os::raw::c_void,
    >,
    pub seq_next: ::std::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            v: *mut ::std::os::raw::c_void,
            ppos: *mut loff_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub seq_stop: ::std::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, v: *mut ::std::os::raw::c_void),
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut ::std::os::raw::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub atomic_write_len: usize,
    pub prealloc: bool_,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut ::std::os::raw::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub poll: ::std::option::Option<
        unsafe extern "C" fn(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t,
    >,
    pub mmap: ::std::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            vma: *mut vm_area_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub llseek: ::std::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            offset: loff_t,
            whence: ::std::os::raw::c_int,
        ) -> loff_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_ops"][::std::mem::size_of::<kernfs_ops>() - 104usize];
    ["Alignment of kernfs_ops"][::std::mem::align_of::<kernfs_ops>() - 8usize];
    ["Offset of field: kernfs_ops::open"][::std::mem::offset_of!(kernfs_ops, open) - 0usize];
    ["Offset of field: kernfs_ops::release"][::std::mem::offset_of!(kernfs_ops, release) - 8usize];
    ["Offset of field: kernfs_ops::seq_show"]
        [::std::mem::offset_of!(kernfs_ops, seq_show) - 16usize];
    ["Offset of field: kernfs_ops::seq_start"]
        [::std::mem::offset_of!(kernfs_ops, seq_start) - 24usize];
    ["Offset of field: kernfs_ops::seq_next"]
        [::std::mem::offset_of!(kernfs_ops, seq_next) - 32usize];
    ["Offset of field: kernfs_ops::seq_stop"]
        [::std::mem::offset_of!(kernfs_ops, seq_stop) - 40usize];
    ["Offset of field: kernfs_ops::read"][::std::mem::offset_of!(kernfs_ops, read) - 48usize];
    ["Offset of field: kernfs_ops::atomic_write_len"]
        [::std::mem::offset_of!(kernfs_ops, atomic_write_len) - 56usize];
    ["Offset of field: kernfs_ops::prealloc"]
        [::std::mem::offset_of!(kernfs_ops, prealloc) - 64usize];
    ["Offset of field: kernfs_ops::write"][::std::mem::offset_of!(kernfs_ops, write) - 72usize];
    ["Offset of field: kernfs_ops::poll"][::std::mem::offset_of!(kernfs_ops, poll) - 80usize];
    ["Offset of field: kernfs_ops::mmap"][::std::mem::offset_of!(kernfs_ops, mmap) - 88usize];
    ["Offset of field: kernfs_ops::llseek"][::std::mem::offset_of!(kernfs_ops, llseek) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_fs_context {
    pub root: *mut kernfs_root,
    pub ns_tag: *mut ::std::os::raw::c_void,
    pub magic: ::std::os::raw::c_ulong,
    pub new_sb_created: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_fs_context"][::std::mem::size_of::<kernfs_fs_context>() - 32usize];
    ["Alignment of kernfs_fs_context"][::std::mem::align_of::<kernfs_fs_context>() - 8usize];
    ["Offset of field: kernfs_fs_context::root"]
        [::std::mem::offset_of!(kernfs_fs_context, root) - 0usize];
    ["Offset of field: kernfs_fs_context::ns_tag"]
        [::std::mem::offset_of!(kernfs_fs_context, ns_tag) - 8usize];
    ["Offset of field: kernfs_fs_context::magic"]
        [::std::mem::offset_of!(kernfs_fs_context, magic) - 16usize];
    ["Offset of field: kernfs_fs_context::new_sb_created"]
        [::std::mem::offset_of!(kernfs_fs_context, new_sb_created) - 24usize];
};
extern "C" {
    pub fn kernfs_name(
        kn: *mut kernfs_node,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernfs_path_from_node(
        root_kn: *mut kernfs_node,
        kn: *mut kernfs_node,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pr_cont_kernfs_name(kn: *mut kernfs_node);
}
extern "C" {
    pub fn pr_cont_kernfs_path(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_get_parent(kn: *mut kernfs_node) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_find_and_get_ns(
        parent: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_walk_and_get_ns(
        parent: *mut kernfs_node,
        path: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_get(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_put(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_node_from_dentry(dentry: *mut dentry) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_root_from_sb(sb: *mut super_block) -> *mut kernfs_root;
}
extern "C" {
    pub fn kernfs_get_inode(sb: *mut super_block, kn: *mut kernfs_node) -> *mut inode;
}
extern "C" {
    pub fn kernfs_node_dentry(kn: *mut kernfs_node, sb: *mut super_block) -> *mut dentry;
}
extern "C" {
    pub fn kernfs_create_root(
        scops: *mut kernfs_syscall_ops,
        flags: ::std::os::raw::c_uint,
        priv_: *mut ::std::os::raw::c_void,
    ) -> *mut kernfs_root;
}
extern "C" {
    pub fn kernfs_destroy_root(root: *mut kernfs_root);
}
extern "C" {
    pub fn kernfs_create_dir_ns(
        parent: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
        mode: umode_t,
        uid: kuid_t,
        gid: kgid_t,
        priv_: *mut ::std::os::raw::c_void,
        ns: *const ::std::os::raw::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_create_empty_dir(
        parent: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn __kernfs_create_file(
        parent: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
        mode: umode_t,
        uid: kuid_t,
        gid: kgid_t,
        size: loff_t,
        ops: *const kernfs_ops,
        priv_: *mut ::std::os::raw::c_void,
        ns: *const ::std::os::raw::c_void,
        key: *mut lock_class_key,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_create_link(
        parent: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
        target: *mut kernfs_node,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_activate(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_show(kn: *mut kernfs_node, show: bool_);
}
extern "C" {
    pub fn kernfs_remove(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_break_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_unbreak_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_remove_self(kn: *mut kernfs_node) -> bool_;
}
extern "C" {
    pub fn kernfs_remove_by_name_ns(
        parent: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernfs_rename_ns(
        kn: *mut kernfs_node,
        new_parent: *mut kernfs_node,
        new_name: *const ::std::os::raw::c_char,
        new_ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernfs_setattr(kn: *mut kernfs_node, iattr: *const iattr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernfs_generic_poll(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t;
}
extern "C" {
    pub fn kernfs_notify(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_xattr_get(
        kn: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernfs_xattr_set(
        kn: *mut kernfs_node,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernfs_super_ns(sb: *mut super_block) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn kernfs_get_tree(fc: *mut fs_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernfs_free_fs_context(fc: *mut fs_context);
}
extern "C" {
    pub fn kernfs_kill_sb(sb: *mut super_block);
}
extern "C" {
    pub fn kernfs_init();
}
extern "C" {
    pub fn kernfs_find_and_get_node_by_id(root: *mut kernfs_root, id: u64_) -> *mut kernfs_node;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock {
    _unused: [u8; 0],
}
pub const kobj_ns_type_KOBJ_NS_TYPE_NONE: kobj_ns_type = 0;
pub const kobj_ns_type_KOBJ_NS_TYPE_NET: kobj_ns_type = 1;
pub const kobj_ns_type_KOBJ_NS_TYPES: kobj_ns_type = 2;
pub type kobj_ns_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_ns_type_operations {
    pub type_: kobj_ns_type,
    pub current_may_mount: ::std::option::Option<unsafe extern "C" fn() -> bool_>,
    pub grab_current_ns:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub netlink_ns:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut sock) -> *const ::std::os::raw::c_void>,
    pub initial_ns: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub drop_ns: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobj_ns_type_operations"][::std::mem::size_of::<kobj_ns_type_operations>() - 48usize];
    ["Alignment of kobj_ns_type_operations"]
        [::std::mem::align_of::<kobj_ns_type_operations>() - 8usize];
    ["Offset of field: kobj_ns_type_operations::type_"]
        [::std::mem::offset_of!(kobj_ns_type_operations, type_) - 0usize];
    ["Offset of field: kobj_ns_type_operations::current_may_mount"]
        [::std::mem::offset_of!(kobj_ns_type_operations, current_may_mount) - 8usize];
    ["Offset of field: kobj_ns_type_operations::grab_current_ns"]
        [::std::mem::offset_of!(kobj_ns_type_operations, grab_current_ns) - 16usize];
    ["Offset of field: kobj_ns_type_operations::netlink_ns"]
        [::std::mem::offset_of!(kobj_ns_type_operations, netlink_ns) - 24usize];
    ["Offset of field: kobj_ns_type_operations::initial_ns"]
        [::std::mem::offset_of!(kobj_ns_type_operations, initial_ns) - 32usize];
    ["Offset of field: kobj_ns_type_operations::drop_ns"]
        [::std::mem::offset_of!(kobj_ns_type_operations, drop_ns) - 40usize];
};
extern "C" {
    pub fn kobj_ns_type_register(ops: *const kobj_ns_type_operations) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobj_ns_type_registered(type_: kobj_ns_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobj_child_ns_ops(parent: *const kobject) -> *const kobj_ns_type_operations;
}
extern "C" {
    pub fn kobj_ns_ops(kobj: *const kobject) -> *const kobj_ns_type_operations;
}
extern "C" {
    pub fn kobj_ns_current_may_mount(type_: kobj_ns_type) -> bool_;
}
extern "C" {
    pub fn kobj_ns_grab_current(type_: kobj_ns_type) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kobj_ns_netlink(type_: kobj_ns_type, sk: *mut sock) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn kobj_ns_initial(type_: kobj_ns_type) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn kobj_ns_drop(type_: kobj_ns_type, ns: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __kernel_ulong_t,
    pub st_ino: __kernel_ulong_t,
    pub st_nlink: __kernel_ulong_t,
    pub st_mode: ::std::os::raw::c_uint,
    pub st_uid: ::std::os::raw::c_uint,
    pub st_gid: ::std::os::raw::c_uint,
    pub __pad0: ::std::os::raw::c_uint,
    pub st_rdev: __kernel_ulong_t,
    pub st_size: __kernel_long_t,
    pub st_blksize: __kernel_long_t,
    pub st_blocks: __kernel_long_t,
    pub st_atime: __kernel_ulong_t,
    pub st_atime_nsec: __kernel_ulong_t,
    pub st_mtime: __kernel_ulong_t,
    pub st_mtime_nsec: __kernel_ulong_t,
    pub st_ctime: __kernel_ulong_t,
    pub st_ctime_nsec: __kernel_ulong_t,
    pub __unused: [__kernel_long_t; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat"][::std::mem::size_of::<stat>() - 144usize];
    ["Alignment of stat"][::std::mem::align_of::<stat>() - 8usize];
    ["Offset of field: stat::st_dev"][::std::mem::offset_of!(stat, st_dev) - 0usize];
    ["Offset of field: stat::st_ino"][::std::mem::offset_of!(stat, st_ino) - 8usize];
    ["Offset of field: stat::st_nlink"][::std::mem::offset_of!(stat, st_nlink) - 16usize];
    ["Offset of field: stat::st_mode"][::std::mem::offset_of!(stat, st_mode) - 24usize];
    ["Offset of field: stat::st_uid"][::std::mem::offset_of!(stat, st_uid) - 28usize];
    ["Offset of field: stat::st_gid"][::std::mem::offset_of!(stat, st_gid) - 32usize];
    ["Offset of field: stat::__pad0"][::std::mem::offset_of!(stat, __pad0) - 36usize];
    ["Offset of field: stat::st_rdev"][::std::mem::offset_of!(stat, st_rdev) - 40usize];
    ["Offset of field: stat::st_size"][::std::mem::offset_of!(stat, st_size) - 48usize];
    ["Offset of field: stat::st_blksize"][::std::mem::offset_of!(stat, st_blksize) - 56usize];
    ["Offset of field: stat::st_blocks"][::std::mem::offset_of!(stat, st_blocks) - 64usize];
    ["Offset of field: stat::st_atime"][::std::mem::offset_of!(stat, st_atime) - 72usize];
    ["Offset of field: stat::st_atime_nsec"][::std::mem::offset_of!(stat, st_atime_nsec) - 80usize];
    ["Offset of field: stat::st_mtime"][::std::mem::offset_of!(stat, st_mtime) - 88usize];
    ["Offset of field: stat::st_mtime_nsec"][::std::mem::offset_of!(stat, st_mtime_nsec) - 96usize];
    ["Offset of field: stat::st_ctime"][::std::mem::offset_of!(stat, st_ctime) - 104usize];
    ["Offset of field: stat::st_ctime_nsec"]
        [::std::mem::offset_of!(stat, st_ctime_nsec) - 112usize];
    ["Offset of field: stat::__unused"][::std::mem::offset_of!(stat, __unused) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __old_kernel_stat {
    pub st_dev: ::std::os::raw::c_ushort,
    pub st_ino: ::std::os::raw::c_ushort,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_ushort,
    pub st_uid: ::std::os::raw::c_ushort,
    pub st_gid: ::std::os::raw::c_ushort,
    pub st_rdev: ::std::os::raw::c_ushort,
    pub st_size: ::std::os::raw::c_uint,
    pub st_atime: ::std::os::raw::c_uint,
    pub st_mtime: ::std::os::raw::c_uint,
    pub st_ctime: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __old_kernel_stat"][::std::mem::size_of::<__old_kernel_stat>() - 32usize];
    ["Alignment of __old_kernel_stat"][::std::mem::align_of::<__old_kernel_stat>() - 4usize];
    ["Offset of field: __old_kernel_stat::st_dev"]
        [::std::mem::offset_of!(__old_kernel_stat, st_dev) - 0usize];
    ["Offset of field: __old_kernel_stat::st_ino"]
        [::std::mem::offset_of!(__old_kernel_stat, st_ino) - 2usize];
    ["Offset of field: __old_kernel_stat::st_mode"]
        [::std::mem::offset_of!(__old_kernel_stat, st_mode) - 4usize];
    ["Offset of field: __old_kernel_stat::st_nlink"]
        [::std::mem::offset_of!(__old_kernel_stat, st_nlink) - 6usize];
    ["Offset of field: __old_kernel_stat::st_uid"]
        [::std::mem::offset_of!(__old_kernel_stat, st_uid) - 8usize];
    ["Offset of field: __old_kernel_stat::st_gid"]
        [::std::mem::offset_of!(__old_kernel_stat, st_gid) - 10usize];
    ["Offset of field: __old_kernel_stat::st_rdev"]
        [::std::mem::offset_of!(__old_kernel_stat, st_rdev) - 12usize];
    ["Offset of field: __old_kernel_stat::st_size"]
        [::std::mem::offset_of!(__old_kernel_stat, st_size) - 16usize];
    ["Offset of field: __old_kernel_stat::st_atime"]
        [::std::mem::offset_of!(__old_kernel_stat, st_atime) - 20usize];
    ["Offset of field: __old_kernel_stat::st_mtime"]
        [::std::mem::offset_of!(__old_kernel_stat, st_mtime) - 24usize];
    ["Offset of field: __old_kernel_stat::st_ctime"]
        [::std::mem::offset_of!(__old_kernel_stat, st_ctime) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx_timestamp {
    pub tv_sec: __s64,
    pub tv_nsec: __u32,
    pub __reserved: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of statx_timestamp"][::std::mem::size_of::<statx_timestamp>() - 16usize];
    ["Alignment of statx_timestamp"][::std::mem::align_of::<statx_timestamp>() - 8usize];
    ["Offset of field: statx_timestamp::tv_sec"]
        [::std::mem::offset_of!(statx_timestamp, tv_sec) - 0usize];
    ["Offset of field: statx_timestamp::tv_nsec"]
        [::std::mem::offset_of!(statx_timestamp, tv_nsec) - 8usize];
    ["Offset of field: statx_timestamp::__reserved"]
        [::std::mem::offset_of!(statx_timestamp, __reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx {
    pub stx_mask: __u32,
    pub stx_blksize: __u32,
    pub stx_attributes: __u64,
    pub stx_nlink: __u32,
    pub stx_uid: __u32,
    pub stx_gid: __u32,
    pub stx_mode: __u16,
    pub __spare0: [__u16; 1usize],
    pub stx_ino: __u64,
    pub stx_size: __u64,
    pub stx_blocks: __u64,
    pub stx_attributes_mask: __u64,
    pub stx_atime: statx_timestamp,
    pub stx_btime: statx_timestamp,
    pub stx_ctime: statx_timestamp,
    pub stx_mtime: statx_timestamp,
    pub stx_rdev_major: __u32,
    pub stx_rdev_minor: __u32,
    pub stx_dev_major: __u32,
    pub stx_dev_minor: __u32,
    pub stx_mnt_id: __u64,
    pub stx_dio_mem_align: __u32,
    pub stx_dio_offset_align: __u32,
    pub stx_subvol: __u64,
    pub stx_atomic_write_unit_min: __u32,
    pub stx_atomic_write_unit_max: __u32,
    pub stx_atomic_write_segments_max: __u32,
    pub __spare1: [__u32; 1usize],
    pub __spare3: [__u64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of statx"][::std::mem::size_of::<statx>() - 256usize];
    ["Alignment of statx"][::std::mem::align_of::<statx>() - 8usize];
    ["Offset of field: statx::stx_mask"][::std::mem::offset_of!(statx, stx_mask) - 0usize];
    ["Offset of field: statx::stx_blksize"][::std::mem::offset_of!(statx, stx_blksize) - 4usize];
    ["Offset of field: statx::stx_attributes"]
        [::std::mem::offset_of!(statx, stx_attributes) - 8usize];
    ["Offset of field: statx::stx_nlink"][::std::mem::offset_of!(statx, stx_nlink) - 16usize];
    ["Offset of field: statx::stx_uid"][::std::mem::offset_of!(statx, stx_uid) - 20usize];
    ["Offset of field: statx::stx_gid"][::std::mem::offset_of!(statx, stx_gid) - 24usize];
    ["Offset of field: statx::stx_mode"][::std::mem::offset_of!(statx, stx_mode) - 28usize];
    ["Offset of field: statx::__spare0"][::std::mem::offset_of!(statx, __spare0) - 30usize];
    ["Offset of field: statx::stx_ino"][::std::mem::offset_of!(statx, stx_ino) - 32usize];
    ["Offset of field: statx::stx_size"][::std::mem::offset_of!(statx, stx_size) - 40usize];
    ["Offset of field: statx::stx_blocks"][::std::mem::offset_of!(statx, stx_blocks) - 48usize];
    ["Offset of field: statx::stx_attributes_mask"]
        [::std::mem::offset_of!(statx, stx_attributes_mask) - 56usize];
    ["Offset of field: statx::stx_atime"][::std::mem::offset_of!(statx, stx_atime) - 64usize];
    ["Offset of field: statx::stx_btime"][::std::mem::offset_of!(statx, stx_btime) - 80usize];
    ["Offset of field: statx::stx_ctime"][::std::mem::offset_of!(statx, stx_ctime) - 96usize];
    ["Offset of field: statx::stx_mtime"][::std::mem::offset_of!(statx, stx_mtime) - 112usize];
    ["Offset of field: statx::stx_rdev_major"]
        [::std::mem::offset_of!(statx, stx_rdev_major) - 128usize];
    ["Offset of field: statx::stx_rdev_minor"]
        [::std::mem::offset_of!(statx, stx_rdev_minor) - 132usize];
    ["Offset of field: statx::stx_dev_major"]
        [::std::mem::offset_of!(statx, stx_dev_major) - 136usize];
    ["Offset of field: statx::stx_dev_minor"]
        [::std::mem::offset_of!(statx, stx_dev_minor) - 140usize];
    ["Offset of field: statx::stx_mnt_id"][::std::mem::offset_of!(statx, stx_mnt_id) - 144usize];
    ["Offset of field: statx::stx_dio_mem_align"]
        [::std::mem::offset_of!(statx, stx_dio_mem_align) - 152usize];
    ["Offset of field: statx::stx_dio_offset_align"]
        [::std::mem::offset_of!(statx, stx_dio_offset_align) - 156usize];
    ["Offset of field: statx::stx_subvol"][::std::mem::offset_of!(statx, stx_subvol) - 160usize];
    ["Offset of field: statx::stx_atomic_write_unit_min"]
        [::std::mem::offset_of!(statx, stx_atomic_write_unit_min) - 168usize];
    ["Offset of field: statx::stx_atomic_write_unit_max"]
        [::std::mem::offset_of!(statx, stx_atomic_write_unit_max) - 172usize];
    ["Offset of field: statx::stx_atomic_write_segments_max"]
        [::std::mem::offset_of!(statx, stx_atomic_write_segments_max) - 176usize];
    ["Offset of field: statx::__spare1"][::std::mem::offset_of!(statx, __spare1) - 180usize];
    ["Offset of field: statx::__spare3"][::std::mem::offset_of!(statx, __spare3) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kstat {
    pub result_mask: u32_,
    pub mode: umode_t,
    pub nlink: ::std::os::raw::c_uint,
    pub blksize: u32,
    pub attributes: u64_,
    pub attributes_mask: u64_,
    pub ino: u64_,
    pub dev: dev_t,
    pub rdev: dev_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub size: loff_t,
    pub atime: timespec64,
    pub mtime: timespec64,
    pub ctime: timespec64,
    pub btime: timespec64,
    pub blocks: u64_,
    pub mnt_id: u64_,
    pub dio_mem_align: u32_,
    pub dio_offset_align: u32_,
    pub change_cookie: u64_,
    pub subvol: u64_,
    pub atomic_write_unit_min: u32_,
    pub atomic_write_unit_max: u32_,
    pub atomic_write_segments_max: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kstat"][::std::mem::size_of::<kstat>() - 184usize];
    ["Alignment of kstat"][::std::mem::align_of::<kstat>() - 8usize];
    ["Offset of field: kstat::result_mask"][::std::mem::offset_of!(kstat, result_mask) - 0usize];
    ["Offset of field: kstat::mode"][::std::mem::offset_of!(kstat, mode) - 4usize];
    ["Offset of field: kstat::nlink"][::std::mem::offset_of!(kstat, nlink) - 8usize];
    ["Offset of field: kstat::blksize"][::std::mem::offset_of!(kstat, blksize) - 12usize];
    ["Offset of field: kstat::attributes"][::std::mem::offset_of!(kstat, attributes) - 16usize];
    ["Offset of field: kstat::attributes_mask"]
        [::std::mem::offset_of!(kstat, attributes_mask) - 24usize];
    ["Offset of field: kstat::ino"][::std::mem::offset_of!(kstat, ino) - 32usize];
    ["Offset of field: kstat::dev"][::std::mem::offset_of!(kstat, dev) - 40usize];
    ["Offset of field: kstat::rdev"][::std::mem::offset_of!(kstat, rdev) - 44usize];
    ["Offset of field: kstat::uid"][::std::mem::offset_of!(kstat, uid) - 48usize];
    ["Offset of field: kstat::gid"][::std::mem::offset_of!(kstat, gid) - 52usize];
    ["Offset of field: kstat::size"][::std::mem::offset_of!(kstat, size) - 56usize];
    ["Offset of field: kstat::atime"][::std::mem::offset_of!(kstat, atime) - 64usize];
    ["Offset of field: kstat::mtime"][::std::mem::offset_of!(kstat, mtime) - 80usize];
    ["Offset of field: kstat::ctime"][::std::mem::offset_of!(kstat, ctime) - 96usize];
    ["Offset of field: kstat::btime"][::std::mem::offset_of!(kstat, btime) - 112usize];
    ["Offset of field: kstat::blocks"][::std::mem::offset_of!(kstat, blocks) - 128usize];
    ["Offset of field: kstat::mnt_id"][::std::mem::offset_of!(kstat, mnt_id) - 136usize];
    ["Offset of field: kstat::dio_mem_align"]
        [::std::mem::offset_of!(kstat, dio_mem_align) - 144usize];
    ["Offset of field: kstat::dio_offset_align"]
        [::std::mem::offset_of!(kstat, dio_offset_align) - 148usize];
    ["Offset of field: kstat::change_cookie"]
        [::std::mem::offset_of!(kstat, change_cookie) - 152usize];
    ["Offset of field: kstat::subvol"][::std::mem::offset_of!(kstat, subvol) - 160usize];
    ["Offset of field: kstat::atomic_write_unit_min"]
        [::std::mem::offset_of!(kstat, atomic_write_unit_min) - 168usize];
    ["Offset of field: kstat::atomic_write_unit_max"]
        [::std::mem::offset_of!(kstat, atomic_write_unit_max) - 172usize];
    ["Offset of field: kstat::atomic_write_segments_max"]
        [::std::mem::offset_of!(kstat, atomic_write_segments_max) - 176usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute {
    pub name: *const ::std::os::raw::c_char,
    pub mode: umode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of attribute"][::std::mem::size_of::<attribute>() - 16usize];
    ["Alignment of attribute"][::std::mem::align_of::<attribute>() - 8usize];
    ["Offset of field: attribute::name"][::std::mem::offset_of!(attribute, name) - 0usize];
    ["Offset of field: attribute::mode"][::std::mem::offset_of!(attribute, mode) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bin_attribute {
    pub attr: attribute,
    pub size: usize,
    pub private: *mut ::std::os::raw::c_void,
    pub f_mapping: ::std::option::Option<unsafe extern "C" fn() -> *mut address_space>,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut ::std::os::raw::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut ::std::os::raw::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub llseek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: loff_t,
            arg5: ::std::os::raw::c_int,
        ) -> loff_t,
    >,
    pub mmap: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            attr: *mut bin_attribute,
            vma: *mut vm_area_struct,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bin_attribute"][::std::mem::size_of::<bin_attribute>() - 72usize];
    ["Alignment of bin_attribute"][::std::mem::align_of::<bin_attribute>() - 8usize];
    ["Offset of field: bin_attribute::attr"][::std::mem::offset_of!(bin_attribute, attr) - 0usize];
    ["Offset of field: bin_attribute::size"][::std::mem::offset_of!(bin_attribute, size) - 16usize];
    ["Offset of field: bin_attribute::private"]
        [::std::mem::offset_of!(bin_attribute, private) - 24usize];
    ["Offset of field: bin_attribute::f_mapping"]
        [::std::mem::offset_of!(bin_attribute, f_mapping) - 32usize];
    ["Offset of field: bin_attribute::read"][::std::mem::offset_of!(bin_attribute, read) - 40usize];
    ["Offset of field: bin_attribute::write"]
        [::std::mem::offset_of!(bin_attribute, write) - 48usize];
    ["Offset of field: bin_attribute::llseek"]
        [::std::mem::offset_of!(bin_attribute, llseek) - 56usize];
    ["Offset of field: bin_attribute::mmap"][::std::mem::offset_of!(bin_attribute, mmap) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysfs_ops {
    pub show: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *mut ::std::os::raw::c_char,
        ) -> isize,
    >,
    pub store: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
        ) -> isize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysfs_ops"][::std::mem::size_of::<sysfs_ops>() - 16usize];
    ["Alignment of sysfs_ops"][::std::mem::align_of::<sysfs_ops>() - 8usize];
    ["Offset of field: sysfs_ops::show"][::std::mem::offset_of!(sysfs_ops, show) - 0usize];
    ["Offset of field: sysfs_ops::store"][::std::mem::offset_of!(sysfs_ops, store) - 8usize];
};
extern "C" {
    pub fn sysfs_create_dir_ns(
        kobj: *mut kobject,
        ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_remove_dir(kobj: *mut kobject);
}
extern "C" {
    pub fn sysfs_rename_dir_ns(
        kobj: *mut kobject,
        new_name: *const ::std::os::raw::c_char,
        new_ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_move_dir_ns(
        kobj: *mut kobject,
        new_parent_kobj: *mut kobject,
        new_ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_create_mount_point(
        parent_kobj: *mut kobject,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_remove_mount_point(parent_kobj: *mut kobject, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sysfs_create_file_ns(
        kobj: *mut kobject,
        attr: *const attribute,
        ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_create_files(
        kobj: *mut kobject,
        attr: *const *const attribute,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_chmod_file(
        kobj: *mut kobject,
        attr: *const attribute,
        mode: umode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_break_active_protection(
        kobj: *mut kobject,
        attr: *const attribute,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn sysfs_unbreak_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn sysfs_remove_file_ns(
        kobj: *mut kobject,
        attr: *const attribute,
        ns: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn sysfs_remove_file_self(kobj: *mut kobject, attr: *const attribute) -> bool_;
}
extern "C" {
    pub fn sysfs_remove_files(kobj: *mut kobject, attr: *const *const attribute);
}
extern "C" {
    pub fn sysfs_create_bin_file(
        kobj: *mut kobject,
        attr: *const bin_attribute,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_remove_bin_file(kobj: *mut kobject, attr: *const bin_attribute);
}
extern "C" {
    pub fn sysfs_create_link(
        kobj: *mut kobject,
        target: *mut kobject,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_create_link_nowarn(
        kobj: *mut kobject,
        target: *mut kobject,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_remove_link(kobj: *mut kobject, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sysfs_rename_link_ns(
        kobj: *mut kobject,
        target: *mut kobject,
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
        new_ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_delete_link(
        dir: *mut kobject,
        targ: *mut kobject,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sysfs_create_group(
        kobj: *mut kobject,
        grp: *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_create_groups(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_update_groups(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_update_group(
        kobj: *mut kobject,
        grp: *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_remove_group(kobj: *mut kobject, grp: *const attribute_group);
}
extern "C" {
    pub fn sysfs_remove_groups(kobj: *mut kobject, groups: *mut *const attribute_group);
}
extern "C" {
    pub fn sysfs_add_file_to_group(
        kobj: *mut kobject,
        attr: *const attribute,
        group: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_remove_file_from_group(
        kobj: *mut kobject,
        attr: *const attribute,
        group: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sysfs_merge_group(
        kobj: *mut kobject,
        grp: *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_unmerge_group(kobj: *mut kobject, grp: *const attribute_group);
}
extern "C" {
    pub fn sysfs_add_link_to_group(
        kobj: *mut kobject,
        group_name: *const ::std::os::raw::c_char,
        target: *mut kobject,
        link_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_remove_link_from_group(
        kobj: *mut kobject,
        group_name: *const ::std::os::raw::c_char,
        link_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn compat_only_sysfs_link_entry_to_kobj(
        kobj: *mut kobject,
        target_kobj: *mut kobject,
        target_name: *const ::std::os::raw::c_char,
        symlink_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_notify(
        kobj: *mut kobject,
        dir: *const ::std::os::raw::c_char,
        attr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sysfs_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_file_change_owner(
        kobj: *mut kobject,
        name: *const ::std::os::raw::c_char,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_change_owner(
        kobj: *mut kobject,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_link_change_owner(
        kobj: *mut kobject,
        targ: *mut kobject,
        name: *const ::std::os::raw::c_char,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_groups_change_owner(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_group_change_owner(
        kobj: *mut kobject,
        groups: *const attribute_group,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_emit(
        buf: *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_emit_at(
        buf: *mut ::std::os::raw::c_char,
        at: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysfs_bin_attr_simple_read(
        file: *mut file,
        kobj: *mut kobject,
        attr: *mut bin_attribute,
        buf: *mut ::std::os::raw::c_char,
        off: loff_t,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub static mut uevent_helper: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut uevent_seqnum: atomic64_t;
}
pub const kobject_action_KOBJ_ADD: kobject_action = 0;
pub const kobject_action_KOBJ_REMOVE: kobject_action = 1;
pub const kobject_action_KOBJ_CHANGE: kobject_action = 2;
pub const kobject_action_KOBJ_MOVE: kobject_action = 3;
pub const kobject_action_KOBJ_ONLINE: kobject_action = 4;
pub const kobject_action_KOBJ_OFFLINE: kobject_action = 5;
pub const kobject_action_KOBJ_BIND: kobject_action = 6;
pub const kobject_action_KOBJ_UNBIND: kobject_action = 7;
pub type kobject_action = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobject {
    pub name: *const ::std::os::raw::c_char,
    pub entry: list_head,
    pub parent: *mut kobject,
    pub kset: *mut kset,
    pub ktype: *const kobj_type,
    pub sd: *mut kernfs_node,
    pub kref: kref,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobject"][::std::mem::size_of::<kobject>() - 64usize];
    ["Alignment of kobject"][::std::mem::align_of::<kobject>() - 8usize];
    ["Offset of field: kobject::name"][::std::mem::offset_of!(kobject, name) - 0usize];
    ["Offset of field: kobject::entry"][::std::mem::offset_of!(kobject, entry) - 8usize];
    ["Offset of field: kobject::parent"][::std::mem::offset_of!(kobject, parent) - 24usize];
    ["Offset of field: kobject::kset"][::std::mem::offset_of!(kobject, kset) - 32usize];
    ["Offset of field: kobject::ktype"][::std::mem::offset_of!(kobject, ktype) - 40usize];
    ["Offset of field: kobject::sd"][::std::mem::offset_of!(kobject, sd) - 48usize];
    ["Offset of field: kobject::kref"][::std::mem::offset_of!(kobject, kref) - 56usize];
};
impl kobject {
    #[inline]
    pub fn state_initialized(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_initialized(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_in_sysfs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_in_sysfs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_add_uevent_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_add_uevent_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_remove_uevent_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_remove_uevent_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uevent_suppress(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uevent_suppress(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state_initialized: ::std::os::raw::c_uint,
        state_in_sysfs: ::std::os::raw::c_uint,
        state_add_uevent_sent: ::std::os::raw::c_uint,
        state_remove_uevent_sent: ::std::os::raw::c_uint,
        uevent_suppress: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let state_initialized: u32 = unsafe { ::std::mem::transmute(state_initialized) };
            state_initialized as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let state_in_sysfs: u32 = unsafe { ::std::mem::transmute(state_in_sysfs) };
            state_in_sysfs as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let state_add_uevent_sent: u32 =
                unsafe { ::std::mem::transmute(state_add_uevent_sent) };
            state_add_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_remove_uevent_sent: u32 =
                unsafe { ::std::mem::transmute(state_remove_uevent_sent) };
            state_remove_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let uevent_suppress: u32 = unsafe { ::std::mem::transmute(uevent_suppress) };
            uevent_suppress as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn kobject_set_name(
        kobj: *mut kobject,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_set_name_vargs(
        kobj: *mut kobject,
        fmt: *const ::std::os::raw::c_char,
        vargs: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_init(kobj: *mut kobject, ktype: *const kobj_type);
}
extern "C" {
    pub fn kobject_add(
        kobj: *mut kobject,
        parent: *mut kobject,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_init_and_add(
        kobj: *mut kobject,
        ktype: *const kobj_type,
        parent: *mut kobject,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_del(kobj: *mut kobject);
}
extern "C" {
    pub fn kobject_create_and_add(
        name: *const ::std::os::raw::c_char,
        parent: *mut kobject,
    ) -> *mut kobject;
}
extern "C" {
    pub fn kobject_rename(
        arg1: *mut kobject,
        new_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_move(arg1: *mut kobject, arg2: *mut kobject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_get(kobj: *mut kobject) -> *mut kobject;
}
extern "C" {
    pub fn kobject_get_unless_zero(kobj: *mut kobject) -> *mut kobject;
}
extern "C" {
    pub fn kobject_put(kobj: *mut kobject);
}
extern "C" {
    pub fn kobject_namespace(kobj: *const kobject) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn kobject_get_ownership(kobj: *const kobject, uid: *mut kuid_t, gid: *mut kgid_t);
}
extern "C" {
    pub fn kobject_get_path(kobj: *const kobject, flag: gfp_t) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_type {
    pub release: ::std::option::Option<unsafe extern "C" fn(kobj: *mut kobject)>,
    pub sysfs_ops: *const sysfs_ops,
    pub default_groups: *mut *const attribute_group,
    pub child_ns_type: ::std::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const kobj_ns_type_operations,
    >,
    pub namespace: ::std::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const ::std::os::raw::c_void,
    >,
    pub get_ownership: ::std::option::Option<
        unsafe extern "C" fn(kobj: *const kobject, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobj_type"][::std::mem::size_of::<kobj_type>() - 48usize];
    ["Alignment of kobj_type"][::std::mem::align_of::<kobj_type>() - 8usize];
    ["Offset of field: kobj_type::release"][::std::mem::offset_of!(kobj_type, release) - 0usize];
    ["Offset of field: kobj_type::sysfs_ops"]
        [::std::mem::offset_of!(kobj_type, sysfs_ops) - 8usize];
    ["Offset of field: kobj_type::default_groups"]
        [::std::mem::offset_of!(kobj_type, default_groups) - 16usize];
    ["Offset of field: kobj_type::child_ns_type"]
        [::std::mem::offset_of!(kobj_type, child_ns_type) - 24usize];
    ["Offset of field: kobj_type::namespace"]
        [::std::mem::offset_of!(kobj_type, namespace) - 32usize];
    ["Offset of field: kobj_type::get_ownership"]
        [::std::mem::offset_of!(kobj_type, get_ownership) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_uevent_env {
    pub argv: [*mut ::std::os::raw::c_char; 3usize],
    pub envp: [*mut ::std::os::raw::c_char; 64usize],
    pub envp_idx: ::std::os::raw::c_int,
    pub buf: [::std::os::raw::c_char; 2048usize],
    pub buflen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobj_uevent_env"][::std::mem::size_of::<kobj_uevent_env>() - 2592usize];
    ["Alignment of kobj_uevent_env"][::std::mem::align_of::<kobj_uevent_env>() - 8usize];
    ["Offset of field: kobj_uevent_env::argv"]
        [::std::mem::offset_of!(kobj_uevent_env, argv) - 0usize];
    ["Offset of field: kobj_uevent_env::envp"]
        [::std::mem::offset_of!(kobj_uevent_env, envp) - 24usize];
    ["Offset of field: kobj_uevent_env::envp_idx"]
        [::std::mem::offset_of!(kobj_uevent_env, envp_idx) - 536usize];
    ["Offset of field: kobj_uevent_env::buf"]
        [::std::mem::offset_of!(kobj_uevent_env, buf) - 540usize];
    ["Offset of field: kobj_uevent_env::buflen"]
        [::std::mem::offset_of!(kobj_uevent_env, buflen) - 2588usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kset_uevent_ops {
    pub filter:
        ::std::option::Option<unsafe extern "C" fn(kobj: *const kobject) -> ::std::os::raw::c_int>,
    pub name: ::std::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const ::std::os::raw::c_char,
    >,
    pub uevent: ::std::option::Option<
        unsafe extern "C" fn(
            kobj: *const kobject,
            env: *mut kobj_uevent_env,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kset_uevent_ops"][::std::mem::size_of::<kset_uevent_ops>() - 24usize];
    ["Alignment of kset_uevent_ops"][::std::mem::align_of::<kset_uevent_ops>() - 8usize];
    ["Offset of field: kset_uevent_ops::filter"]
        [::std::mem::offset_of!(kset_uevent_ops, filter) - 0usize];
    ["Offset of field: kset_uevent_ops::name"]
        [::std::mem::offset_of!(kset_uevent_ops, name) - 8usize];
    ["Offset of field: kset_uevent_ops::uevent"]
        [::std::mem::offset_of!(kset_uevent_ops, uevent) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_attribute {
    pub attr: attribute,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(
            kobj: *mut kobject,
            attr: *mut kobj_attribute,
            buf: *mut ::std::os::raw::c_char,
        ) -> isize,
    >,
    pub store: ::std::option::Option<
        unsafe extern "C" fn(
            kobj: *mut kobject,
            attr: *mut kobj_attribute,
            buf: *const ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobj_attribute"][::std::mem::size_of::<kobj_attribute>() - 32usize];
    ["Alignment of kobj_attribute"][::std::mem::align_of::<kobj_attribute>() - 8usize];
    ["Offset of field: kobj_attribute::attr"]
        [::std::mem::offset_of!(kobj_attribute, attr) - 0usize];
    ["Offset of field: kobj_attribute::show"]
        [::std::mem::offset_of!(kobj_attribute, show) - 16usize];
    ["Offset of field: kobj_attribute::store"]
        [::std::mem::offset_of!(kobj_attribute, store) - 24usize];
};
extern "C" {
    pub static kobj_sysfs_ops: sysfs_ops;
}
#[doc = " struct kset - a set of kobjects of a specific type, belonging to a specific subsystem.\n\n A kset defines a group of kobjects.  They can be individually\n different \"types\" but overall these kobjects all want to be grouped\n together and operated on in the same manner.  ksets are used to\n define the attribute callbacks and other common events that happen to\n a kobject.\n\n @list: the list of all kobjects for this kset\n @list_lock: a lock for iterating over the kobjects\n @kobj: the embedded kobject for this kset (recursion, isn't it fun...)\n @uevent_ops: the set of uevent operations for this kset.  These are\n called whenever a kobject has something happen to it so that the kset\n can add new environment variables, or filter out the uevents if so\n desired."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kset {
    pub list: list_head,
    pub list_lock: spinlock_t,
    pub kobj: kobject,
    pub uevent_ops: *const kset_uevent_ops,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kset"][::std::mem::size_of::<kset>() - 96usize];
    ["Alignment of kset"][::std::mem::align_of::<kset>() - 8usize];
    ["Offset of field: kset::list"][::std::mem::offset_of!(kset, list) - 0usize];
    ["Offset of field: kset::list_lock"][::std::mem::offset_of!(kset, list_lock) - 16usize];
    ["Offset of field: kset::kobj"][::std::mem::offset_of!(kset, kobj) - 24usize];
    ["Offset of field: kset::uevent_ops"][::std::mem::offset_of!(kset, uevent_ops) - 88usize];
};
extern "C" {
    pub fn kset_init(kset: *mut kset);
}
extern "C" {
    pub fn kset_register(kset: *mut kset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kset_unregister(kset: *mut kset);
}
extern "C" {
    pub fn kset_create_and_add(
        name: *const ::std::os::raw::c_char,
        u: *const kset_uevent_ops,
        parent_kobj: *mut kobject,
    ) -> *mut kset;
}
extern "C" {
    pub fn kset_find_obj(arg1: *mut kset, arg2: *const ::std::os::raw::c_char) -> *mut kobject;
}
extern "C" {
    pub static mut kernel_kobj: *mut kobject;
}
extern "C" {
    pub static mut mm_kobj: *mut kobject;
}
extern "C" {
    pub static mut hypervisor_kobj: *mut kobject;
}
extern "C" {
    pub static mut power_kobj: *mut kobject;
}
extern "C" {
    pub static mut firmware_kobj: *mut kobject;
}
extern "C" {
    pub fn kobject_uevent(kobj: *mut kobject, action: kobject_action) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_uevent_env(
        kobj: *mut kobject,
        action: kobject_action,
        envp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kobject_synth_uevent(
        kobj: *mut kobject,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_uevent_var(
        env: *mut kobj_uevent_env,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpufreq_policy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct update_util_data {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut update_util_data,
            time: u64_,
            flags: ::std::os::raw::c_uint,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of update_util_data"][::std::mem::size_of::<update_util_data>() - 8usize];
    ["Alignment of update_util_data"][::std::mem::align_of::<update_util_data>() - 8usize];
    ["Offset of field: update_util_data::func"]
        [::std::mem::offset_of!(update_util_data, func) - 0usize];
};
extern "C" {
    pub fn cpufreq_add_update_util_hook(
        cpu: ::std::os::raw::c_int,
        data: *mut update_util_data,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut update_util_data,
                time: u64_,
                flags: ::std::os::raw::c_uint,
            ),
        >,
    );
}
extern "C" {
    pub fn cpufreq_remove_update_util_hook(cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cpufreq_this_cpu_can_update(policy: *mut cpufreq_policy) -> bool_;
}
pub const cpu_idle_type___CPU_NOT_IDLE: cpu_idle_type = 0;
pub const cpu_idle_type_CPU_IDLE: cpu_idle_type = 1;
pub const cpu_idle_type_CPU_NEWLY_IDLE: cpu_idle_type = 2;
pub const cpu_idle_type_CPU_MAX_IDLE_TYPES: cpu_idle_type = 3;
pub type cpu_idle_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn wake_up_if_idle(cpu: ::std::os::raw::c_int);
}
pub const __SD_BALANCE_NEWIDLE: _bindgen_ty_27 = 0;
pub const __SD_BALANCE_EXEC: _bindgen_ty_27 = 1;
pub const __SD_BALANCE_FORK: _bindgen_ty_27 = 2;
pub const __SD_BALANCE_WAKE: _bindgen_ty_27 = 3;
pub const __SD_WAKE_AFFINE: _bindgen_ty_27 = 4;
pub const __SD_ASYM_CPUCAPACITY: _bindgen_ty_27 = 5;
pub const __SD_ASYM_CPUCAPACITY_FULL: _bindgen_ty_27 = 6;
pub const __SD_SHARE_CPUCAPACITY: _bindgen_ty_27 = 7;
pub const __SD_CLUSTER: _bindgen_ty_27 = 8;
pub const __SD_SHARE_LLC: _bindgen_ty_27 = 9;
pub const __SD_SERIALIZE: _bindgen_ty_27 = 10;
pub const __SD_ASYM_PACKING: _bindgen_ty_27 = 11;
pub const __SD_PREFER_SIBLING: _bindgen_ty_27 = 12;
pub const __SD_OVERLAP: _bindgen_ty_27 = 13;
pub const __SD_NUMA: _bindgen_ty_27 = 14;
pub const __SD_FLAG_CNT: _bindgen_ty_27 = 15;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub const SD_BALANCE_NEWIDLE: _bindgen_ty_28 = 1;
pub const SD_BALANCE_EXEC: _bindgen_ty_28 = 2;
pub const SD_BALANCE_FORK: _bindgen_ty_28 = 4;
pub const SD_BALANCE_WAKE: _bindgen_ty_28 = 8;
pub const SD_WAKE_AFFINE: _bindgen_ty_28 = 16;
pub const SD_ASYM_CPUCAPACITY: _bindgen_ty_28 = 32;
pub const SD_ASYM_CPUCAPACITY_FULL: _bindgen_ty_28 = 64;
pub const SD_SHARE_CPUCAPACITY: _bindgen_ty_28 = 128;
pub const SD_CLUSTER: _bindgen_ty_28 = 256;
pub const SD_SHARE_LLC: _bindgen_ty_28 = 512;
pub const SD_SERIALIZE: _bindgen_ty_28 = 1024;
pub const SD_ASYM_PACKING: _bindgen_ty_28 = 2048;
pub const SD_PREFER_SIBLING: _bindgen_ty_28 = 4096;
pub const SD_OVERLAP: _bindgen_ty_28 = 8192;
pub const SD_NUMA: _bindgen_ty_28 = 16384;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_flag_debug {
    pub meta_flags: ::std::os::raw::c_uint,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sd_flag_debug"][::std::mem::size_of::<sd_flag_debug>() - 16usize];
    ["Alignment of sd_flag_debug"][::std::mem::align_of::<sd_flag_debug>() - 8usize];
    ["Offset of field: sd_flag_debug::meta_flags"]
        [::std::mem::offset_of!(sd_flag_debug, meta_flags) - 0usize];
    ["Offset of field: sd_flag_debug::name"][::std::mem::offset_of!(sd_flag_debug, name) - 8usize];
};
extern "C" {
    pub static sd_flag_debug: [sd_flag_debug; 0usize];
}
extern "C" {
    pub fn arch_asym_cpu_priority(cpu: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_domain_attr {
    pub relax_domain_level: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_domain_attr"][::std::mem::size_of::<sched_domain_attr>() - 4usize];
    ["Alignment of sched_domain_attr"][::std::mem::align_of::<sched_domain_attr>() - 4usize];
    ["Offset of field: sched_domain_attr::relax_domain_level"]
        [::std::mem::offset_of!(sched_domain_attr, relax_domain_level) - 0usize];
};
extern "C" {
    pub static mut sched_domain_level_max: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_domain_shared {
    pub ref_: atomic_t,
    pub nr_busy_cpus: atomic_t,
    pub has_idle_cores: ::std::os::raw::c_int,
    pub nr_idle_scan: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_domain_shared"][::std::mem::size_of::<sched_domain_shared>() - 16usize];
    ["Alignment of sched_domain_shared"][::std::mem::align_of::<sched_domain_shared>() - 4usize];
    ["Offset of field: sched_domain_shared::ref_"]
        [::std::mem::offset_of!(sched_domain_shared, ref_) - 0usize];
    ["Offset of field: sched_domain_shared::nr_busy_cpus"]
        [::std::mem::offset_of!(sched_domain_shared, nr_busy_cpus) - 4usize];
    ["Offset of field: sched_domain_shared::has_idle_cores"]
        [::std::mem::offset_of!(sched_domain_shared, has_idle_cores) - 8usize];
    ["Offset of field: sched_domain_shared::nr_idle_scan"]
        [::std::mem::offset_of!(sched_domain_shared, nr_idle_scan) - 12usize];
};
#[repr(C)]
pub struct sched_domain {
    pub parent: *mut sched_domain,
    pub child: *mut sched_domain,
    pub groups: *mut sched_group,
    pub min_interval: ::std::os::raw::c_ulong,
    pub max_interval: ::std::os::raw::c_ulong,
    pub busy_factor: ::std::os::raw::c_uint,
    pub imbalance_pct: ::std::os::raw::c_uint,
    pub cache_nice_tries: ::std::os::raw::c_uint,
    pub imb_numa_nr: ::std::os::raw::c_uint,
    pub nohz_idle: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub last_balance: ::std::os::raw::c_ulong,
    pub balance_interval: ::std::os::raw::c_uint,
    pub nr_balance_failed: ::std::os::raw::c_uint,
    pub max_newidle_lb_cost: u64_,
    pub last_decay_max_lb_cost: ::std::os::raw::c_ulong,
    pub lb_count: [::std::os::raw::c_uint; 3usize],
    pub lb_failed: [::std::os::raw::c_uint; 3usize],
    pub lb_balanced: [::std::os::raw::c_uint; 3usize],
    pub lb_imbalance: [::std::os::raw::c_uint; 3usize],
    pub lb_gained: [::std::os::raw::c_uint; 3usize],
    pub lb_hot_gained: [::std::os::raw::c_uint; 3usize],
    pub lb_nobusyg: [::std::os::raw::c_uint; 3usize],
    pub lb_nobusyq: [::std::os::raw::c_uint; 3usize],
    pub alb_count: ::std::os::raw::c_uint,
    pub alb_failed: ::std::os::raw::c_uint,
    pub alb_pushed: ::std::os::raw::c_uint,
    pub sbe_count: ::std::os::raw::c_uint,
    pub sbe_balanced: ::std::os::raw::c_uint,
    pub sbe_pushed: ::std::os::raw::c_uint,
    pub sbf_count: ::std::os::raw::c_uint,
    pub sbf_balanced: ::std::os::raw::c_uint,
    pub sbf_pushed: ::std::os::raw::c_uint,
    pub ttwu_wake_remote: ::std::os::raw::c_uint,
    pub ttwu_move_affine: ::std::os::raw::c_uint,
    pub ttwu_move_balance: ::std::os::raw::c_uint,
    pub name: *mut ::std::os::raw::c_char,
    pub __bindgen_anon_1: sched_domain__bindgen_ty_1,
    pub shared: *mut sched_domain_shared,
    pub span_weight: ::std::os::raw::c_uint,
    pub span: __IncompleteArrayField<::std::os::raw::c_ulong>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sched_domain__bindgen_ty_1 {
    pub private: *mut ::std::os::raw::c_void,
    pub rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_domain__bindgen_ty_1"]
        [::std::mem::size_of::<sched_domain__bindgen_ty_1>() - 16usize];
    ["Alignment of sched_domain__bindgen_ty_1"]
        [::std::mem::align_of::<sched_domain__bindgen_ty_1>() - 8usize];
    ["Offset of field: sched_domain__bindgen_ty_1::private"]
        [::std::mem::offset_of!(sched_domain__bindgen_ty_1, private) - 0usize];
    ["Offset of field: sched_domain__bindgen_ty_1::rcu"]
        [::std::mem::offset_of!(sched_domain__bindgen_ty_1, rcu) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_domain"][::std::mem::size_of::<sched_domain>() - 288usize];
    ["Alignment of sched_domain"][::std::mem::align_of::<sched_domain>() - 8usize];
    ["Offset of field: sched_domain::parent"]
        [::std::mem::offset_of!(sched_domain, parent) - 0usize];
    ["Offset of field: sched_domain::child"][::std::mem::offset_of!(sched_domain, child) - 8usize];
    ["Offset of field: sched_domain::groups"]
        [::std::mem::offset_of!(sched_domain, groups) - 16usize];
    ["Offset of field: sched_domain::min_interval"]
        [::std::mem::offset_of!(sched_domain, min_interval) - 24usize];
    ["Offset of field: sched_domain::max_interval"]
        [::std::mem::offset_of!(sched_domain, max_interval) - 32usize];
    ["Offset of field: sched_domain::busy_factor"]
        [::std::mem::offset_of!(sched_domain, busy_factor) - 40usize];
    ["Offset of field: sched_domain::imbalance_pct"]
        [::std::mem::offset_of!(sched_domain, imbalance_pct) - 44usize];
    ["Offset of field: sched_domain::cache_nice_tries"]
        [::std::mem::offset_of!(sched_domain, cache_nice_tries) - 48usize];
    ["Offset of field: sched_domain::imb_numa_nr"]
        [::std::mem::offset_of!(sched_domain, imb_numa_nr) - 52usize];
    ["Offset of field: sched_domain::nohz_idle"]
        [::std::mem::offset_of!(sched_domain, nohz_idle) - 56usize];
    ["Offset of field: sched_domain::flags"][::std::mem::offset_of!(sched_domain, flags) - 60usize];
    ["Offset of field: sched_domain::level"][::std::mem::offset_of!(sched_domain, level) - 64usize];
    ["Offset of field: sched_domain::last_balance"]
        [::std::mem::offset_of!(sched_domain, last_balance) - 72usize];
    ["Offset of field: sched_domain::balance_interval"]
        [::std::mem::offset_of!(sched_domain, balance_interval) - 80usize];
    ["Offset of field: sched_domain::nr_balance_failed"]
        [::std::mem::offset_of!(sched_domain, nr_balance_failed) - 84usize];
    ["Offset of field: sched_domain::max_newidle_lb_cost"]
        [::std::mem::offset_of!(sched_domain, max_newidle_lb_cost) - 88usize];
    ["Offset of field: sched_domain::last_decay_max_lb_cost"]
        [::std::mem::offset_of!(sched_domain, last_decay_max_lb_cost) - 96usize];
    ["Offset of field: sched_domain::lb_count"]
        [::std::mem::offset_of!(sched_domain, lb_count) - 104usize];
    ["Offset of field: sched_domain::lb_failed"]
        [::std::mem::offset_of!(sched_domain, lb_failed) - 116usize];
    ["Offset of field: sched_domain::lb_balanced"]
        [::std::mem::offset_of!(sched_domain, lb_balanced) - 128usize];
    ["Offset of field: sched_domain::lb_imbalance"]
        [::std::mem::offset_of!(sched_domain, lb_imbalance) - 140usize];
    ["Offset of field: sched_domain::lb_gained"]
        [::std::mem::offset_of!(sched_domain, lb_gained) - 152usize];
    ["Offset of field: sched_domain::lb_hot_gained"]
        [::std::mem::offset_of!(sched_domain, lb_hot_gained) - 164usize];
    ["Offset of field: sched_domain::lb_nobusyg"]
        [::std::mem::offset_of!(sched_domain, lb_nobusyg) - 176usize];
    ["Offset of field: sched_domain::lb_nobusyq"]
        [::std::mem::offset_of!(sched_domain, lb_nobusyq) - 188usize];
    ["Offset of field: sched_domain::alb_count"]
        [::std::mem::offset_of!(sched_domain, alb_count) - 200usize];
    ["Offset of field: sched_domain::alb_failed"]
        [::std::mem::offset_of!(sched_domain, alb_failed) - 204usize];
    ["Offset of field: sched_domain::alb_pushed"]
        [::std::mem::offset_of!(sched_domain, alb_pushed) - 208usize];
    ["Offset of field: sched_domain::sbe_count"]
        [::std::mem::offset_of!(sched_domain, sbe_count) - 212usize];
    ["Offset of field: sched_domain::sbe_balanced"]
        [::std::mem::offset_of!(sched_domain, sbe_balanced) - 216usize];
    ["Offset of field: sched_domain::sbe_pushed"]
        [::std::mem::offset_of!(sched_domain, sbe_pushed) - 220usize];
    ["Offset of field: sched_domain::sbf_count"]
        [::std::mem::offset_of!(sched_domain, sbf_count) - 224usize];
    ["Offset of field: sched_domain::sbf_balanced"]
        [::std::mem::offset_of!(sched_domain, sbf_balanced) - 228usize];
    ["Offset of field: sched_domain::sbf_pushed"]
        [::std::mem::offset_of!(sched_domain, sbf_pushed) - 232usize];
    ["Offset of field: sched_domain::ttwu_wake_remote"]
        [::std::mem::offset_of!(sched_domain, ttwu_wake_remote) - 236usize];
    ["Offset of field: sched_domain::ttwu_move_affine"]
        [::std::mem::offset_of!(sched_domain, ttwu_move_affine) - 240usize];
    ["Offset of field: sched_domain::ttwu_move_balance"]
        [::std::mem::offset_of!(sched_domain, ttwu_move_balance) - 244usize];
    ["Offset of field: sched_domain::name"][::std::mem::offset_of!(sched_domain, name) - 248usize];
    ["Offset of field: sched_domain::shared"]
        [::std::mem::offset_of!(sched_domain, shared) - 272usize];
    ["Offset of field: sched_domain::span_weight"]
        [::std::mem::offset_of!(sched_domain, span_weight) - 280usize];
    ["Offset of field: sched_domain::span"][::std::mem::offset_of!(sched_domain, span) - 288usize];
};
extern "C" {
    pub fn partition_sched_domains_locked(
        ndoms_new: ::std::os::raw::c_int,
        doms_new: *mut cpumask_var_t,
        dattr_new: *mut sched_domain_attr,
    );
}
extern "C" {
    pub fn partition_sched_domains(
        ndoms_new: ::std::os::raw::c_int,
        doms_new: *mut cpumask_var_t,
        dattr_new: *mut sched_domain_attr,
    );
}
extern "C" {
    pub fn alloc_sched_domains(ndoms: ::std::os::raw::c_uint) -> *mut cpumask_var_t;
}
extern "C" {
    pub fn free_sched_domains(doms: *mut cpumask_var_t, ndoms: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn cpus_equal_capacity(
        this_cpu: ::std::os::raw::c_int,
        that_cpu: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn cpus_share_cache(
        this_cpu: ::std::os::raw::c_int,
        that_cpu: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn cpus_share_resources(
        this_cpu: ::std::os::raw::c_int,
        that_cpu: ::std::os::raw::c_int,
    ) -> bool_;
}
pub type sched_domain_mask_f =
    ::std::option::Option<unsafe extern "C" fn(cpu: ::std::os::raw::c_int) -> *const cpumask>;
pub type sched_domain_flags_f =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_data {
    pub sd: *mut *mut sched_domain,
    pub sds: *mut *mut sched_domain_shared,
    pub sg: *mut *mut sched_group,
    pub sgc: *mut *mut sched_group_capacity,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sd_data"][::std::mem::size_of::<sd_data>() - 32usize];
    ["Alignment of sd_data"][::std::mem::align_of::<sd_data>() - 8usize];
    ["Offset of field: sd_data::sd"][::std::mem::offset_of!(sd_data, sd) - 0usize];
    ["Offset of field: sd_data::sds"][::std::mem::offset_of!(sd_data, sds) - 8usize];
    ["Offset of field: sd_data::sg"][::std::mem::offset_of!(sd_data, sg) - 16usize];
    ["Offset of field: sd_data::sgc"][::std::mem::offset_of!(sd_data, sgc) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_domain_topology_level {
    pub mask: sched_domain_mask_f,
    pub sd_flags: sched_domain_flags_f,
    pub flags: ::std::os::raw::c_int,
    pub numa_level: ::std::os::raw::c_int,
    pub data: sd_data,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_domain_topology_level"]
        [::std::mem::size_of::<sched_domain_topology_level>() - 64usize];
    ["Alignment of sched_domain_topology_level"]
        [::std::mem::align_of::<sched_domain_topology_level>() - 8usize];
    ["Offset of field: sched_domain_topology_level::mask"]
        [::std::mem::offset_of!(sched_domain_topology_level, mask) - 0usize];
    ["Offset of field: sched_domain_topology_level::sd_flags"]
        [::std::mem::offset_of!(sched_domain_topology_level, sd_flags) - 8usize];
    ["Offset of field: sched_domain_topology_level::flags"]
        [::std::mem::offset_of!(sched_domain_topology_level, flags) - 16usize];
    ["Offset of field: sched_domain_topology_level::numa_level"]
        [::std::mem::offset_of!(sched_domain_topology_level, numa_level) - 20usize];
    ["Offset of field: sched_domain_topology_level::data"]
        [::std::mem::offset_of!(sched_domain_topology_level, data) - 24usize];
    ["Offset of field: sched_domain_topology_level::name"]
        [::std::mem::offset_of!(sched_domain_topology_level, name) - 56usize];
};
extern "C" {
    pub fn set_sched_topology(tl: *mut sched_domain_topology_level);
}
extern "C" {
    pub fn rebuild_sched_domains_energy();
}
#[doc = " struct em_perf_state - Performance state of a performance domain\n @performance:\tCPU performance (capacity) at a given frequency\n @frequency:\tThe frequency in KHz, for consistency with CPUFreq\n @power:\tThe power consumed at this level (by 1 CPU or by a registered\n\t\tdevice). It can be a total power: static and dynamic.\n @cost:\tThe cost coefficient associated with this level, used during\n\t\tenergy calculation. Equal to: power * max_frequency / frequency\n @flags:\tsee \"em_perf_state flags\" description below."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct em_perf_state {
    pub performance: ::std::os::raw::c_ulong,
    pub frequency: ::std::os::raw::c_ulong,
    pub power: ::std::os::raw::c_ulong,
    pub cost: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of em_perf_state"][::std::mem::size_of::<em_perf_state>() - 40usize];
    ["Alignment of em_perf_state"][::std::mem::align_of::<em_perf_state>() - 8usize];
    ["Offset of field: em_perf_state::performance"]
        [::std::mem::offset_of!(em_perf_state, performance) - 0usize];
    ["Offset of field: em_perf_state::frequency"]
        [::std::mem::offset_of!(em_perf_state, frequency) - 8usize];
    ["Offset of field: em_perf_state::power"]
        [::std::mem::offset_of!(em_perf_state, power) - 16usize];
    ["Offset of field: em_perf_state::cost"][::std::mem::offset_of!(em_perf_state, cost) - 24usize];
    ["Offset of field: em_perf_state::flags"]
        [::std::mem::offset_of!(em_perf_state, flags) - 32usize];
};
#[doc = " struct em_perf_table - Performance states table\n @rcu:\tRCU used for safe access and destruction\n @kref:\tReference counter to track the users\n @state:\tList of performance states, in ascending order"]
#[repr(C)]
#[derive(Debug)]
pub struct em_perf_table {
    pub rcu: callback_head,
    pub kref: kref,
    pub state: __IncompleteArrayField<em_perf_state>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of em_perf_table"][::std::mem::size_of::<em_perf_table>() - 24usize];
    ["Alignment of em_perf_table"][::std::mem::align_of::<em_perf_table>() - 8usize];
    ["Offset of field: em_perf_table::rcu"][::std::mem::offset_of!(em_perf_table, rcu) - 0usize];
    ["Offset of field: em_perf_table::kref"][::std::mem::offset_of!(em_perf_table, kref) - 16usize];
    ["Offset of field: em_perf_table::state"]
        [::std::mem::offset_of!(em_perf_table, state) - 24usize];
};
#[doc = " struct em_perf_domain - Performance domain\n @em_table:\t\tPointer to the runtime modifiable em_perf_table\n @nr_perf_states:\tNumber of performance states\n @flags:\t\tSee \"em_perf_domain flags\"\n @cpus:\t\tCpumask covering the CPUs of the domain. It's here\n\t\t\tfor performance reasons to avoid potential cache\n\t\t\tmisses during energy calculations in the scheduler\n\t\t\tand simplifies allocating/freeing that memory region.\n\n In case of CPU device, a \"performance domain\" represents a group of CPUs\n whose performance is scaled together. All CPUs of a performance domain\n must have the same micro-architecture. Performance domains often have\n a 1-to-1 mapping with CPUFreq policies. In case of other devices the @cpus\n field is unused."]
#[repr(C)]
#[derive(Debug)]
pub struct em_perf_domain {
    pub em_table: *mut em_perf_table,
    pub nr_perf_states: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_ulong,
    pub cpus: __IncompleteArrayField<::std::os::raw::c_ulong>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of em_perf_domain"][::std::mem::size_of::<em_perf_domain>() - 24usize];
    ["Alignment of em_perf_domain"][::std::mem::align_of::<em_perf_domain>() - 8usize];
    ["Offset of field: em_perf_domain::em_table"]
        [::std::mem::offset_of!(em_perf_domain, em_table) - 0usize];
    ["Offset of field: em_perf_domain::nr_perf_states"]
        [::std::mem::offset_of!(em_perf_domain, nr_perf_states) - 8usize];
    ["Offset of field: em_perf_domain::flags"]
        [::std::mem::offset_of!(em_perf_domain, flags) - 16usize];
    ["Offset of field: em_perf_domain::cpus"]
        [::std::mem::offset_of!(em_perf_domain, cpus) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct em_data_callback {
    #[doc = " active_power() - Provide power at the next performance state of\n\t\ta device\n @dev\t\t: Device for which we do this operation (can be a CPU)\n @power\t: Active power at the performance state\n\t\t(modified)\n @freq\t: Frequency at the performance state in kHz\n\t\t(modified)\n\n active_power() must find the lowest performance state of 'dev' above\n 'freq' and update 'power' and 'freq' to the matching active power\n and frequency.\n\n In case of CPUs, the power is the one of a single CPU in the domain,\n expressed in micro-Watts or an abstract scale. It is expected to\n fit in the [0, EM_MAX_POWER] range.\n\n Return 0 on success."]
    pub active_power: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *mut device,
            power: *mut ::std::os::raw::c_ulong,
            freq: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " get_cost() - Provide the cost at the given performance state of\n\t\ta device\n @dev\t\t: Device for which we do this operation (can be a CPU)\n @freq\t: Frequency at the performance state in kHz\n @cost\t: The cost value for the performance state\n\t\t(modified)\n\n In case of CPUs, the cost is the one of a single CPU in the domain.\n It is expected to fit in the [0, EM_MAX_POWER] range due to internal\n usage in EAS calculation.\n\n Return 0 on success, or appropriate error value in case of failure."]
    pub get_cost: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *mut device,
            freq: ::std::os::raw::c_ulong,
            cost: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of em_data_callback"][::std::mem::size_of::<em_data_callback>() - 16usize];
    ["Alignment of em_data_callback"][::std::mem::align_of::<em_data_callback>() - 8usize];
    ["Offset of field: em_data_callback::active_power"]
        [::std::mem::offset_of!(em_data_callback, active_power) - 0usize];
    ["Offset of field: em_data_callback::get_cost"]
        [::std::mem::offset_of!(em_data_callback, get_cost) - 8usize];
};
extern "C" {
    pub fn em_cpu_get(cpu: ::std::os::raw::c_int) -> *mut em_perf_domain;
}
extern "C" {
    pub fn em_pd_get(dev: *mut device) -> *mut em_perf_domain;
}
extern "C" {
    pub fn em_dev_update_perf_domain(
        dev: *mut device,
        new_table: *mut em_perf_table,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn em_dev_register_perf_domain(
        dev: *mut device,
        nr_states: ::std::os::raw::c_uint,
        cb: *mut em_data_callback,
        span: *mut cpumask_t,
        microwatts: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn em_dev_unregister_perf_domain(dev: *mut device);
}
extern "C" {
    pub fn em_table_alloc(pd: *mut em_perf_domain) -> *mut em_perf_table;
}
extern "C" {
    pub fn em_table_free(table: *mut em_perf_table);
}
extern "C" {
    pub fn em_dev_compute_costs(
        dev: *mut device,
        table: *mut em_perf_state,
        nr_states: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn em_dev_update_chip_binning(dev: *mut device) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resource {
    pub start: resource_size_t,
    pub end: resource_size_t,
    pub name: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_ulong,
    pub desc: ::std::os::raw::c_ulong,
    pub parent: *mut resource,
    pub sibling: *mut resource,
    pub child: *mut resource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of resource"][::std::mem::size_of::<resource>() - 64usize];
    ["Alignment of resource"][::std::mem::align_of::<resource>() - 8usize];
    ["Offset of field: resource::start"][::std::mem::offset_of!(resource, start) - 0usize];
    ["Offset of field: resource::end"][::std::mem::offset_of!(resource, end) - 8usize];
    ["Offset of field: resource::name"][::std::mem::offset_of!(resource, name) - 16usize];
    ["Offset of field: resource::flags"][::std::mem::offset_of!(resource, flags) - 24usize];
    ["Offset of field: resource::desc"][::std::mem::offset_of!(resource, desc) - 32usize];
    ["Offset of field: resource::parent"][::std::mem::offset_of!(resource, parent) - 40usize];
    ["Offset of field: resource::sibling"][::std::mem::offset_of!(resource, sibling) - 48usize];
    ["Offset of field: resource::child"][::std::mem::offset_of!(resource, child) - 56usize];
};
pub const IORES_DESC_NONE: _bindgen_ty_29 = 0;
pub const IORES_DESC_CRASH_KERNEL: _bindgen_ty_29 = 1;
pub const IORES_DESC_ACPI_TABLES: _bindgen_ty_29 = 2;
pub const IORES_DESC_ACPI_NV_STORAGE: _bindgen_ty_29 = 3;
pub const IORES_DESC_PERSISTENT_MEMORY: _bindgen_ty_29 = 4;
pub const IORES_DESC_PERSISTENT_MEMORY_LEGACY: _bindgen_ty_29 = 5;
pub const IORES_DESC_DEVICE_PRIVATE_MEMORY: _bindgen_ty_29 = 6;
pub const IORES_DESC_RESERVED: _bindgen_ty_29 = 7;
pub const IORES_DESC_SOFT_RESERVED: _bindgen_ty_29 = 8;
pub const IORES_DESC_CXL: _bindgen_ty_29 = 9;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const IORES_MAP_SYSTEM_RAM: _bindgen_ty_30 = 1;
pub const IORES_MAP_ENCRYPTED: _bindgen_ty_30 = 2;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
#[doc = " typedef resource_alignf - Resource alignment callback\n @data:\tPrivate data used by the callback\n @res:\tResource candidate range (an empty resource space)\n @size:\tThe minimum size of the empty space\n @align:\tAlignment from the constraints\n\n Callback allows calculating resource placement and alignment beyond min,\n max, and align fields in the struct resource_constraint.\n\n Return: Start address for the resource."]
pub type resource_alignf = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        res: *const resource,
        size: resource_size_t,
        align: resource_size_t,
    ) -> resource_size_t,
>;
#[doc = " struct resource_constraint - constraints to be met while searching empty\n\t\t\t\tresource space\n @min:\t\tThe minimum address for the memory range\n @max:\t\tThe maximum address for the memory range\n @align:\t\tAlignment for the start address of the empty space\n @alignf:\t\tAdditional alignment constraints callback\n @alignf_data:\tData provided for @alignf callback\n\n Contains the range and alignment constraints that have to be met during\n find_resource_space(). @alignf can be NULL indicating no alignment beyond\n @align is necessary."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resource_constraint {
    pub min: resource_size_t,
    pub max: resource_size_t,
    pub align: resource_size_t,
    pub alignf: resource_alignf,
    pub alignf_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of resource_constraint"][::std::mem::size_of::<resource_constraint>() - 40usize];
    ["Alignment of resource_constraint"][::std::mem::align_of::<resource_constraint>() - 8usize];
    ["Offset of field: resource_constraint::min"]
        [::std::mem::offset_of!(resource_constraint, min) - 0usize];
    ["Offset of field: resource_constraint::max"]
        [::std::mem::offset_of!(resource_constraint, max) - 8usize];
    ["Offset of field: resource_constraint::align"]
        [::std::mem::offset_of!(resource_constraint, align) - 16usize];
    ["Offset of field: resource_constraint::alignf"]
        [::std::mem::offset_of!(resource_constraint, alignf) - 24usize];
    ["Offset of field: resource_constraint::alignf_data"]
        [::std::mem::offset_of!(resource_constraint, alignf_data) - 32usize];
};
extern "C" {
    pub static mut ioport_resource: resource;
}
extern "C" {
    pub static mut iomem_resource: resource;
}
extern "C" {
    pub fn request_resource_conflict(root: *mut resource, new: *mut resource) -> *mut resource;
}
extern "C" {
    pub fn request_resource(root: *mut resource, new: *mut resource) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn release_resource(new: *mut resource) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn release_child_resources(new: *mut resource);
}
extern "C" {
    pub fn reserve_region_with_split(
        root: *mut resource,
        start: resource_size_t,
        end: resource_size_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn insert_resource_conflict(parent: *mut resource, new: *mut resource) -> *mut resource;
}
extern "C" {
    pub fn insert_resource(parent: *mut resource, new: *mut resource) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insert_resource_expand_to_fit(root: *mut resource, new: *mut resource);
}
extern "C" {
    pub fn remove_resource(old: *mut resource) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_remove_reservations(avail: *mut resource);
}
extern "C" {
    pub fn allocate_resource(
        root: *mut resource,
        new: *mut resource,
        size: resource_size_t,
        min: resource_size_t,
        max: resource_size_t,
        align: resource_size_t,
        alignf: resource_alignf,
        alignf_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lookup_resource(root: *mut resource, start: resource_size_t) -> *mut resource;
}
extern "C" {
    pub fn adjust_resource(
        res: *mut resource,
        start: resource_size_t,
        size: resource_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resource_alignment(res: *mut resource) -> resource_size_t;
}
extern "C" {
    pub fn find_resource_space(
        root: *mut resource,
        new: *mut resource,
        size: resource_size_t,
        constraint: *mut resource_constraint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __request_region(
        arg1: *mut resource,
        start: resource_size_t,
        n: resource_size_t,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut resource;
}
extern "C" {
    pub fn __release_region(arg1: *mut resource, arg2: resource_size_t, arg3: resource_size_t);
}
extern "C" {
    pub fn release_mem_region_adjustable(arg1: resource_size_t, arg2: resource_size_t);
}
extern "C" {
    pub fn merge_system_ram_resource(res: *mut resource);
}
extern "C" {
    pub fn devm_request_resource(
        dev: *mut device,
        root: *mut resource,
        new: *mut resource,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devm_release_resource(dev: *mut device, new: *mut resource);
}
extern "C" {
    pub fn __devm_request_region(
        dev: *mut device,
        parent: *mut resource,
        start: resource_size_t,
        n: resource_size_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut resource;
}
extern "C" {
    pub fn __devm_release_region(
        dev: *mut device,
        parent: *mut resource,
        start: resource_size_t,
        n: resource_size_t,
    );
}
extern "C" {
    pub fn iomem_map_sanity_check(
        addr: resource_size_t,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iomem_is_exclusive(addr: u64_) -> bool_;
}
extern "C" {
    pub fn resource_is_exclusive(
        resource: *mut resource,
        addr: u64_,
        size: resource_size_t,
    ) -> bool_;
}
extern "C" {
    pub fn walk_system_ram_range(
        start_pfn: ::std::os::raw::c_ulong,
        nr_pages: ::std::os::raw::c_ulong,
        arg: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_ulong,
                arg2: ::std::os::raw::c_ulong,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn walk_mem_res(
        start: u64_,
        end: u64_,
        arg: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn walk_system_ram_res(
        start: u64_,
        end: u64_,
        arg: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn walk_system_ram_res_rev(
        start: u64_,
        end: u64_,
        arg: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn walk_iomem_res_desc(
        desc: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_ulong,
        start: u64_,
        end: u64_,
        arg: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut resource,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devm_request_free_mem_region(
        dev: *mut device,
        base: *mut resource,
        size: ::std::os::raw::c_ulong,
    ) -> *mut resource;
}
extern "C" {
    pub fn request_free_mem_region(
        base: *mut resource,
        size: ::std::os::raw::c_ulong,
        name: *const ::std::os::raw::c_char,
    ) -> *mut resource;
}
extern "C" {
    pub fn alloc_free_mem_region(
        base: *mut resource,
        size: ::std::os::raw::c_ulong,
        align: ::std::os::raw::c_ulong,
        name: *const ::std::os::raw::c_char,
    ) -> *mut resource;
}
extern "C" {
    pub fn iomem_get_mapping() -> *mut address_space;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct klist {
    pub k_lock: spinlock_t,
    pub k_list: list_head,
    pub get: ::std::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
    pub put: ::std::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of klist"][::std::mem::size_of::<klist>() - 40usize];
    ["Alignment of klist"][::std::mem::align_of::<klist>() - 8usize];
    ["Offset of field: klist::k_lock"][::std::mem::offset_of!(klist, k_lock) - 0usize];
    ["Offset of field: klist::k_list"][::std::mem::offset_of!(klist, k_list) - 8usize];
    ["Offset of field: klist::get"][::std::mem::offset_of!(klist, get) - 24usize];
    ["Offset of field: klist::put"][::std::mem::offset_of!(klist, put) - 32usize];
};
extern "C" {
    pub fn klist_init(
        k: *mut klist,
        get: ::std::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
        put: ::std::option::Option<unsafe extern "C" fn(arg1: *mut klist_node)>,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist_node {
    pub n_klist: *mut ::std::os::raw::c_void,
    pub n_node: list_head,
    pub n_ref: kref,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of klist_node"][::std::mem::size_of::<klist_node>() - 32usize];
    ["Alignment of klist_node"][::std::mem::align_of::<klist_node>() - 8usize];
    ["Offset of field: klist_node::n_klist"][::std::mem::offset_of!(klist_node, n_klist) - 0usize];
    ["Offset of field: klist_node::n_node"][::std::mem::offset_of!(klist_node, n_node) - 8usize];
    ["Offset of field: klist_node::n_ref"][::std::mem::offset_of!(klist_node, n_ref) - 24usize];
};
extern "C" {
    pub fn klist_add_tail(n: *mut klist_node, k: *mut klist);
}
extern "C" {
    pub fn klist_add_head(n: *mut klist_node, k: *mut klist);
}
extern "C" {
    pub fn klist_add_behind(n: *mut klist_node, pos: *mut klist_node);
}
extern "C" {
    pub fn klist_add_before(n: *mut klist_node, pos: *mut klist_node);
}
extern "C" {
    pub fn klist_del(n: *mut klist_node);
}
extern "C" {
    pub fn klist_remove(n: *mut klist_node);
}
extern "C" {
    pub fn klist_node_attached(n: *mut klist_node) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist_iter {
    pub i_klist: *mut klist,
    pub i_cur: *mut klist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of klist_iter"][::std::mem::size_of::<klist_iter>() - 16usize];
    ["Alignment of klist_iter"][::std::mem::align_of::<klist_iter>() - 8usize];
    ["Offset of field: klist_iter::i_klist"][::std::mem::offset_of!(klist_iter, i_klist) - 0usize];
    ["Offset of field: klist_iter::i_cur"][::std::mem::offset_of!(klist_iter, i_cur) - 8usize];
};
extern "C" {
    pub fn klist_iter_init(k: *mut klist, i: *mut klist_iter);
}
extern "C" {
    pub fn klist_iter_init_node(k: *mut klist, i: *mut klist_iter, n: *mut klist_node);
}
extern "C" {
    pub fn klist_iter_exit(i: *mut klist_iter);
}
extern "C" {
    pub fn klist_prev(i: *mut klist_iter) -> *mut klist_node;
}
extern "C" {
    pub fn klist_next(i: *mut klist_iter) -> *mut klist_node;
}
extern "C" {
    pub static mut pm_power_off: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn pm_vt_switch_required(dev: *mut device, required: bool_);
}
extern "C" {
    pub fn pm_vt_switch_unregister(dev: *mut device);
}
extern "C" {
    pub fn cxl_mem_active() -> bool_;
}
extern "C" {
    pub static power_group_name: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_message {
    pub event: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pm_message"][::std::mem::size_of::<pm_message>() - 4usize];
    ["Alignment of pm_message"][::std::mem::align_of::<pm_message>() - 4usize];
    ["Offset of field: pm_message::event"][::std::mem::offset_of!(pm_message, event) - 0usize];
};
pub type pm_message_t = pm_message;
#[doc = " struct dev_pm_ops - device PM callbacks.\n\n @prepare: The principal role of this callback is to prevent new children of\n\tthe device from being registered after it has returned (the driver's\n\tsubsystem and generally the rest of the kernel is supposed to prevent\n\tnew calls to the probe method from being made too once @prepare() has\n\tsucceeded).  If @prepare() detects a situation it cannot handle (e.g.\n\tregistration of a child already in progress), it may return -EAGAIN, so\n\tthat the PM core can execute it once again (e.g. after a new child has\n\tbeen registered) to recover from the race condition.\n\tThis method is executed for all kinds of suspend transitions and is\n\tfollowed by one of the suspend callbacks: @suspend(), @freeze(), or\n\t@poweroff().  If the transition is a suspend to memory or standby (that\n\tis, not related to hibernation), the return value of @prepare() may be\n\tused to indicate to the PM core to leave the device in runtime suspend\n\tif applicable.  Namely, if @prepare() returns a positive number, the PM\n\tcore will understand that as a declaration that the device appears to be\n\truntime-suspended and it may be left in that state during the entire\n\ttransition and during the subsequent resume if all of its descendants\n\tare left in runtime suspend too.  If that happens, @complete() will be\n\texecuted directly after @prepare() and it must ensure the proper\n\tfunctioning of the device after the system resume.\n\tThe PM core executes subsystem-level @prepare() for all devices before\n\tstarting to invoke suspend callbacks for any of them, so generally\n\tdevices may be assumed to be functional or to respond to runtime resume\n\trequests while @prepare() is being executed.  However, device drivers\n\tmay NOT assume anything about the availability of user space at that\n\ttime and it is NOT valid to request firmware from within @prepare()\n\t(it's too late to do that).  It also is NOT valid to allocate\n\tsubstantial amounts of memory from @prepare() in the GFP_KERNEL mode.\n\t[To work around these limitations, drivers may register suspend and\n\thibernation notifiers to be executed before the freezing of tasks.]\n\n @complete: Undo the changes made by @prepare().  This method is executed for\n\tall kinds of resume transitions, following one of the resume callbacks:\n\t@resume(), @thaw(), @restore().  Also called if the state transition\n\tfails before the driver's suspend callback: @suspend(), @freeze() or\n\t@poweroff(), can be executed (e.g. if the suspend callback fails for one\n\tof the other devices that the PM core has unsuccessfully attempted to\n\tsuspend earlier).\n\tThe PM core executes subsystem-level @complete() after it has executed\n\tthe appropriate resume callbacks for all devices.  If the corresponding\n\t@prepare() at the beginning of the suspend transition returned a\n\tpositive number and the device was left in runtime suspend (without\n\texecuting any suspend and resume callbacks for it), @complete() will be\n\tthe only callback executed for the device during resume.  In that case,\n\t@complete() must be prepared to do whatever is necessary to ensure the\n\tproper functioning of the device after the system resume.  To this end,\n\t@complete() can check the power.direct_complete flag of the device to\n\tlearn whether (unset) or not (set) the previous suspend and resume\n\tcallbacks have been executed for it.\n\n @suspend: Executed before putting the system into a sleep state in which the\n\tcontents of main memory are preserved.  The exact action to perform\n\tdepends on the device's subsystem (PM domain, device type, class or bus\n\ttype), but generally the device must be quiescent after subsystem-level\n\t@suspend() has returned, so that it doesn't do any I/O or DMA.\n\tSubsystem-level @suspend() is executed for all devices after invoking\n\tsubsystem-level @prepare() for all of them.\n\n @suspend_late: Continue operations started by @suspend().  For a number of\n\tdevices @suspend_late() may point to the same callback routine as the\n\truntime suspend callback.\n\n @resume: Executed after waking the system up from a sleep state in which the\n\tcontents of main memory were preserved.  The exact action to perform\n\tdepends on the device's subsystem, but generally the driver is expected\n\tto start working again, responding to hardware events and software\n\trequests (the device itself may be left in a low-power state, waiting\n\tfor a runtime resume to occur).  The state of the device at the time its\n\tdriver's @resume() callback is run depends on the platform and subsystem\n\tthe device belongs to.  On most platforms, there are no restrictions on\n\tavailability of resources like clocks during @resume().\n\tSubsystem-level @resume() is executed for all devices after invoking\n\tsubsystem-level @resume_noirq() for all of them.\n\n @resume_early: Prepare to execute @resume().  For a number of devices\n\t@resume_early() may point to the same callback routine as the runtime\n\tresume callback.\n\n @freeze: Hibernation-specific, executed before creating a hibernation image.\n\tAnalogous to @suspend(), but it should not enable the device to signal\n\twakeup events or change its power state.  The majority of subsystems\n\t(with the notable exception of the PCI bus type) expect the driver-level\n\t@freeze() to save the device settings in memory to be used by @restore()\n\tduring the subsequent resume from hibernation.\n\tSubsystem-level @freeze() is executed for all devices after invoking\n\tsubsystem-level @prepare() for all of them.\n\n @freeze_late: Continue operations started by @freeze().  Analogous to\n\t@suspend_late(), but it should not enable the device to signal wakeup\n\tevents or change its power state.\n\n @thaw: Hibernation-specific, executed after creating a hibernation image OR\n\tif the creation of an image has failed.  Also executed after a failing\n\tattempt to restore the contents of main memory from such an image.\n\tUndo the changes made by the preceding @freeze(), so the device can be\n\toperated in the same way as immediately before the call to @freeze().\n\tSubsystem-level @thaw() is executed for all devices after invoking\n\tsubsystem-level @thaw_noirq() for all of them.  It also may be executed\n\tdirectly after @freeze() in case of a transition error.\n\n @thaw_early: Prepare to execute @thaw().  Undo the changes made by the\n\tpreceding @freeze_late().\n\n @poweroff: Hibernation-specific, executed after saving a hibernation image.\n\tAnalogous to @suspend(), but it need not save the device's settings in\n\tmemory.\n\tSubsystem-level @poweroff() is executed for all devices after invoking\n\tsubsystem-level @prepare() for all of them.\n\n @poweroff_late: Continue operations started by @poweroff().  Analogous to\n\t@suspend_late(), but it need not save the device's settings in memory.\n\n @restore: Hibernation-specific, executed after restoring the contents of main\n\tmemory from a hibernation image, analogous to @resume().\n\n @restore_early: Prepare to execute @restore(), analogous to @resume_early().\n\n @suspend_noirq: Complete the actions started by @suspend().  Carry out any\n\tadditional operations required for suspending the device that might be\n\tracing with its driver's interrupt handler, which is guaranteed not to\n\trun while @suspend_noirq() is being executed.\n\tIt generally is expected that the device will be in a low-power state\n\t(appropriate for the target system sleep state) after subsystem-level\n\t@suspend_noirq() has returned successfully.  If the device can generate\n\tsystem wakeup signals and is enabled to wake up the system, it should be\n\tconfigured to do so at that time.  However, depending on the platform\n\tand device's subsystem, @suspend() or @suspend_late() may be allowed to\n\tput the device into the low-power state and configure it to generate\n\twakeup signals, in which case it generally is not necessary to define\n\t@suspend_noirq().\n\n @resume_noirq: Prepare for the execution of @resume() by carrying out any\n\toperations required for resuming the device that might be racing with\n\tits driver's interrupt handler, which is guaranteed not to run while\n\t@resume_noirq() is being executed.\n\n @freeze_noirq: Complete the actions started by @freeze().  Carry out any\n\tadditional operations required for freezing the device that might be\n\tracing with its driver's interrupt handler, which is guaranteed not to\n\trun while @freeze_noirq() is being executed.\n\tThe power state of the device should not be changed by either @freeze(),\n\tor @freeze_late(), or @freeze_noirq() and it should not be configured to\n\tsignal system wakeup by any of these callbacks.\n\n @thaw_noirq: Prepare for the execution of @thaw() by carrying out any\n\toperations required for thawing the device that might be racing with its\n\tdriver's interrupt handler, which is guaranteed not to run while\n\t@thaw_noirq() is being executed.\n\n @poweroff_noirq: Complete the actions started by @poweroff().  Analogous to\n\t@suspend_noirq(), but it need not save the device's settings in memory.\n\n @restore_noirq: Prepare for the execution of @restore() by carrying out any\n\toperations required for thawing the device that might be racing with its\n\tdriver's interrupt handler, which is guaranteed not to run while\n\t@restore_noirq() is being executed.  Analogous to @resume_noirq().\n\n @runtime_suspend: Prepare the device for a condition in which it won't be\n\table to communicate with the CPU(s) and RAM due to power management.\n\tThis need not mean that the device should be put into a low-power state.\n\tFor example, if the device is behind a link which is about to be turned\n\toff, the device may remain at full power.  If the device does go to low\n\tpower and is capable of generating runtime wakeup events, remote wakeup\n\t(i.e., a hardware mechanism allowing the device to request a change of\n\tits power state via an interrupt) should be enabled for it.\n\n @runtime_resume: Put the device into the fully active state in response to a\n\twakeup event generated by hardware or at the request of software.  If\n\tnecessary, put the device into the full-power state and restore its\n\tregisters, so that it is fully operational.\n\n @runtime_idle: Device appears to be inactive and it might be put into a\n\tlow-power state if all of the necessary conditions are satisfied.\n\tCheck these conditions, and return 0 if it's appropriate to let the PM\n\tcore queue a suspend request for the device.\n\n Several device power state transitions are externally visible, affecting\n the state of pending I/O queues and (for drivers that touch hardware)\n interrupts, wakeups, DMA, and other hardware state.  There may also be\n internal transitions to various low-power modes which are transparent\n to the rest of the driver stack (such as a driver that's ON gating off\n clocks which are not in active use).\n\n The externally visible transitions are handled with the help of callbacks\n included in this structure in such a way that, typically, two levels of\n callbacks are involved.  First, the PM core executes callbacks provided by PM\n domains, device types, classes and bus types.  They are the subsystem-level\n callbacks expected to execute callbacks provided by device drivers, although\n they may choose not to do that.  If the driver callbacks are executed, they\n have to collaborate with the subsystem-level callbacks to achieve the goals\n appropriate for the given system transition, given transition phase and the\n subsystem the device belongs to.\n\n All of the above callbacks, except for @complete(), return error codes.\n However, the error codes returned by @resume(), @thaw(), @restore(),\n @resume_noirq(), @thaw_noirq(), and @restore_noirq(), do not cause the PM\n core to abort the resume transition during which they are returned.  The\n error codes returned in those cases are only printed to the system logs for\n debugging purposes.  Still, it is recommended that drivers only return error\n codes from their resume methods in case of an unrecoverable failure (i.e.\n when the device being handled refuses to resume and becomes unusable) to\n allow the PM core to be modified in the future, so that it can avoid\n attempting to handle devices that failed to resume and their children.\n\n It is allowed to unregister devices while the above callbacks are being\n executed.  However, a callback routine MUST NOT try to unregister the device\n it was called for, although it may unregister children of that device (for\n example, if it detects that a child was unplugged while the system was\n asleep).\n\n There also are callbacks related to runtime power management of devices.\n Again, as a rule these callbacks are executed by the PM core for subsystems\n (PM domains, device types, classes and bus types) and the subsystem-level\n callbacks are expected to invoke the driver callbacks.  Moreover, the exact\n actions to be performed by a device driver's callbacks generally depend on\n the platform and subsystem the device belongs to.\n\n Refer to Documentation/power/runtime_pm.rst for more information about the\n role of the @runtime_suspend(), @runtime_resume() and @runtime_idle()\n callbacks in device runtime power management."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pm_ops {
    pub prepare:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub complete: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub suspend:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub freeze:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub thaw:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub poweroff:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub restore:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub suspend_late:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub resume_early:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub freeze_late:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub thaw_early:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub poweroff_late:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub restore_early:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub suspend_noirq:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub resume_noirq:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub freeze_noirq:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub thaw_noirq:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub poweroff_noirq:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub restore_noirq:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub runtime_suspend:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub runtime_resume:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub runtime_idle:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_pm_ops"][::std::mem::size_of::<dev_pm_ops>() - 184usize];
    ["Alignment of dev_pm_ops"][::std::mem::align_of::<dev_pm_ops>() - 8usize];
    ["Offset of field: dev_pm_ops::prepare"][::std::mem::offset_of!(dev_pm_ops, prepare) - 0usize];
    ["Offset of field: dev_pm_ops::complete"]
        [::std::mem::offset_of!(dev_pm_ops, complete) - 8usize];
    ["Offset of field: dev_pm_ops::suspend"][::std::mem::offset_of!(dev_pm_ops, suspend) - 16usize];
    ["Offset of field: dev_pm_ops::resume"][::std::mem::offset_of!(dev_pm_ops, resume) - 24usize];
    ["Offset of field: dev_pm_ops::freeze"][::std::mem::offset_of!(dev_pm_ops, freeze) - 32usize];
    ["Offset of field: dev_pm_ops::thaw"][::std::mem::offset_of!(dev_pm_ops, thaw) - 40usize];
    ["Offset of field: dev_pm_ops::poweroff"]
        [::std::mem::offset_of!(dev_pm_ops, poweroff) - 48usize];
    ["Offset of field: dev_pm_ops::restore"][::std::mem::offset_of!(dev_pm_ops, restore) - 56usize];
    ["Offset of field: dev_pm_ops::suspend_late"]
        [::std::mem::offset_of!(dev_pm_ops, suspend_late) - 64usize];
    ["Offset of field: dev_pm_ops::resume_early"]
        [::std::mem::offset_of!(dev_pm_ops, resume_early) - 72usize];
    ["Offset of field: dev_pm_ops::freeze_late"]
        [::std::mem::offset_of!(dev_pm_ops, freeze_late) - 80usize];
    ["Offset of field: dev_pm_ops::thaw_early"]
        [::std::mem::offset_of!(dev_pm_ops, thaw_early) - 88usize];
    ["Offset of field: dev_pm_ops::poweroff_late"]
        [::std::mem::offset_of!(dev_pm_ops, poweroff_late) - 96usize];
    ["Offset of field: dev_pm_ops::restore_early"]
        [::std::mem::offset_of!(dev_pm_ops, restore_early) - 104usize];
    ["Offset of field: dev_pm_ops::suspend_noirq"]
        [::std::mem::offset_of!(dev_pm_ops, suspend_noirq) - 112usize];
    ["Offset of field: dev_pm_ops::resume_noirq"]
        [::std::mem::offset_of!(dev_pm_ops, resume_noirq) - 120usize];
    ["Offset of field: dev_pm_ops::freeze_noirq"]
        [::std::mem::offset_of!(dev_pm_ops, freeze_noirq) - 128usize];
    ["Offset of field: dev_pm_ops::thaw_noirq"]
        [::std::mem::offset_of!(dev_pm_ops, thaw_noirq) - 136usize];
    ["Offset of field: dev_pm_ops::poweroff_noirq"]
        [::std::mem::offset_of!(dev_pm_ops, poweroff_noirq) - 144usize];
    ["Offset of field: dev_pm_ops::restore_noirq"]
        [::std::mem::offset_of!(dev_pm_ops, restore_noirq) - 152usize];
    ["Offset of field: dev_pm_ops::runtime_suspend"]
        [::std::mem::offset_of!(dev_pm_ops, runtime_suspend) - 160usize];
    ["Offset of field: dev_pm_ops::runtime_resume"]
        [::std::mem::offset_of!(dev_pm_ops, runtime_resume) - 168usize];
    ["Offset of field: dev_pm_ops::runtime_idle"]
        [::std::mem::offset_of!(dev_pm_ops, runtime_idle) - 176usize];
};
pub const rpm_status_RPM_INVALID: rpm_status = -1;
pub const rpm_status_RPM_ACTIVE: rpm_status = 0;
pub const rpm_status_RPM_RESUMING: rpm_status = 1;
pub const rpm_status_RPM_SUSPENDED: rpm_status = 2;
pub const rpm_status_RPM_SUSPENDING: rpm_status = 3;
pub type rpm_status = ::std::os::raw::c_int;
pub const rpm_request_RPM_REQ_NONE: rpm_request = 0;
pub const rpm_request_RPM_REQ_IDLE: rpm_request = 1;
pub const rpm_request_RPM_REQ_SUSPEND: rpm_request = 2;
pub const rpm_request_RPM_REQ_AUTOSUSPEND: rpm_request = 3;
pub const rpm_request_RPM_REQ_RESUME: rpm_request = 4;
pub type rpm_request = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wake_irq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_domain_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pm_subsys_data {
    pub lock: spinlock_t,
    pub refcount: ::std::os::raw::c_uint,
    pub clock_op_might_sleep: ::std::os::raw::c_uint,
    pub clock_mutex: mutex,
    pub clock_list: list_head,
    pub domain_data: *mut pm_domain_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pm_subsys_data"][::std::mem::size_of::<pm_subsys_data>() - 72usize];
    ["Alignment of pm_subsys_data"][::std::mem::align_of::<pm_subsys_data>() - 8usize];
    ["Offset of field: pm_subsys_data::lock"]
        [::std::mem::offset_of!(pm_subsys_data, lock) - 0usize];
    ["Offset of field: pm_subsys_data::refcount"]
        [::std::mem::offset_of!(pm_subsys_data, refcount) - 4usize];
    ["Offset of field: pm_subsys_data::clock_op_might_sleep"]
        [::std::mem::offset_of!(pm_subsys_data, clock_op_might_sleep) - 8usize];
    ["Offset of field: pm_subsys_data::clock_mutex"]
        [::std::mem::offset_of!(pm_subsys_data, clock_mutex) - 16usize];
    ["Offset of field: pm_subsys_data::clock_list"]
        [::std::mem::offset_of!(pm_subsys_data, clock_list) - 48usize];
    ["Offset of field: pm_subsys_data::domain_data"]
        [::std::mem::offset_of!(pm_subsys_data, domain_data) - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_pm_info {
    pub power_state: pm_message_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub driver_flags: u32_,
    pub lock: spinlock_t,
    pub entry: list_head,
    pub completion: completion,
    pub wakeup: *mut wakeup_source,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub suspend_timer: hrtimer,
    pub timer_expires: u64_,
    pub work: work_struct,
    pub wait_queue: wait_queue_head_t,
    pub wakeirq: *mut wake_irq,
    pub usage_count: atomic_t,
    pub child_count: atomic_t,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub links_count: ::std::os::raw::c_uint,
    pub request: rpm_request,
    pub runtime_status: rpm_status,
    pub last_status: rpm_status,
    pub runtime_error: ::std::os::raw::c_int,
    pub autosuspend_delay: ::std::os::raw::c_int,
    pub last_busy: u64_,
    pub active_time: u64_,
    pub suspended_time: u64_,
    pub accounting_timestamp: u64_,
    pub subsys_data: *mut pm_subsys_data,
    pub set_latency_tolerance:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut device, arg2: s32)>,
    pub qos: *mut dev_pm_qos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_pm_info"][::std::mem::size_of::<dev_pm_info>() - 312usize];
    ["Alignment of dev_pm_info"][::std::mem::align_of::<dev_pm_info>() - 8usize];
    ["Offset of field: dev_pm_info::power_state"]
        [::std::mem::offset_of!(dev_pm_info, power_state) - 0usize];
    ["Offset of field: dev_pm_info::driver_flags"]
        [::std::mem::offset_of!(dev_pm_info, driver_flags) - 8usize];
    ["Offset of field: dev_pm_info::lock"][::std::mem::offset_of!(dev_pm_info, lock) - 12usize];
    ["Offset of field: dev_pm_info::entry"][::std::mem::offset_of!(dev_pm_info, entry) - 16usize];
    ["Offset of field: dev_pm_info::completion"]
        [::std::mem::offset_of!(dev_pm_info, completion) - 32usize];
    ["Offset of field: dev_pm_info::wakeup"][::std::mem::offset_of!(dev_pm_info, wakeup) - 64usize];
    ["Offset of field: dev_pm_info::suspend_timer"]
        [::std::mem::offset_of!(dev_pm_info, suspend_timer) - 80usize];
    ["Offset of field: dev_pm_info::timer_expires"]
        [::std::mem::offset_of!(dev_pm_info, timer_expires) - 144usize];
    ["Offset of field: dev_pm_info::work"][::std::mem::offset_of!(dev_pm_info, work) - 152usize];
    ["Offset of field: dev_pm_info::wait_queue"]
        [::std::mem::offset_of!(dev_pm_info, wait_queue) - 184usize];
    ["Offset of field: dev_pm_info::wakeirq"]
        [::std::mem::offset_of!(dev_pm_info, wakeirq) - 208usize];
    ["Offset of field: dev_pm_info::usage_count"]
        [::std::mem::offset_of!(dev_pm_info, usage_count) - 216usize];
    ["Offset of field: dev_pm_info::child_count"]
        [::std::mem::offset_of!(dev_pm_info, child_count) - 220usize];
    ["Offset of field: dev_pm_info::links_count"]
        [::std::mem::offset_of!(dev_pm_info, links_count) - 228usize];
    ["Offset of field: dev_pm_info::request"]
        [::std::mem::offset_of!(dev_pm_info, request) - 232usize];
    ["Offset of field: dev_pm_info::runtime_status"]
        [::std::mem::offset_of!(dev_pm_info, runtime_status) - 236usize];
    ["Offset of field: dev_pm_info::last_status"]
        [::std::mem::offset_of!(dev_pm_info, last_status) - 240usize];
    ["Offset of field: dev_pm_info::runtime_error"]
        [::std::mem::offset_of!(dev_pm_info, runtime_error) - 244usize];
    ["Offset of field: dev_pm_info::autosuspend_delay"]
        [::std::mem::offset_of!(dev_pm_info, autosuspend_delay) - 248usize];
    ["Offset of field: dev_pm_info::last_busy"]
        [::std::mem::offset_of!(dev_pm_info, last_busy) - 256usize];
    ["Offset of field: dev_pm_info::active_time"]
        [::std::mem::offset_of!(dev_pm_info, active_time) - 264usize];
    ["Offset of field: dev_pm_info::suspended_time"]
        [::std::mem::offset_of!(dev_pm_info, suspended_time) - 272usize];
    ["Offset of field: dev_pm_info::accounting_timestamp"]
        [::std::mem::offset_of!(dev_pm_info, accounting_timestamp) - 280usize];
    ["Offset of field: dev_pm_info::subsys_data"]
        [::std::mem::offset_of!(dev_pm_info, subsys_data) - 288usize];
    ["Offset of field: dev_pm_info::set_latency_tolerance"]
        [::std::mem::offset_of!(dev_pm_info, set_latency_tolerance) - 296usize];
    ["Offset of field: dev_pm_info::qos"][::std::mem::offset_of!(dev_pm_info, qos) - 304usize];
};
impl dev_pm_info {
    #[inline]
    pub fn can_wakeup(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_can_wakeup(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn async_suspend(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_async_suspend(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_dpm_list(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_in_dpm_list(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_prepared(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_prepared(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_suspended(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_noirq_suspended(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_noirq_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_late_suspended(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_late_suspended(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_pm(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_pm(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn early_init(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_early_init(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_complete(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_direct_complete(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        can_wakeup: bool_,
        async_suspend: bool_,
        in_dpm_list: bool_,
        is_prepared: bool_,
        is_suspended: bool_,
        is_noirq_suspended: bool_,
        is_late_suspended: bool_,
        no_pm: bool_,
        early_init: bool_,
        direct_complete: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let can_wakeup: u8 = unsafe { ::std::mem::transmute(can_wakeup) };
            can_wakeup as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let async_suspend: u8 = unsafe { ::std::mem::transmute(async_suspend) };
            async_suspend as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let in_dpm_list: u8 = unsafe { ::std::mem::transmute(in_dpm_list) };
            in_dpm_list as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_prepared: u8 = unsafe { ::std::mem::transmute(is_prepared) };
            is_prepared as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_suspended: u8 = unsafe { ::std::mem::transmute(is_suspended) };
            is_suspended as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_noirq_suspended: u8 = unsafe { ::std::mem::transmute(is_noirq_suspended) };
            is_noirq_suspended as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let is_late_suspended: u8 = unsafe { ::std::mem::transmute(is_late_suspended) };
            is_late_suspended as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let no_pm: u8 = unsafe { ::std::mem::transmute(no_pm) };
            no_pm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let early_init: u8 = unsafe { ::std::mem::transmute(early_init) };
            early_init as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let direct_complete: u8 = unsafe { ::std::mem::transmute(direct_complete) };
            direct_complete as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn wakeup_path(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wakeup_path(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn syscore(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_syscore(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_pm_callbacks(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_pm_callbacks(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn async_in_progress(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_async_in_progress(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn must_resume(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_must_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn may_skip_resume(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_may_skip_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        wakeup_path: bool_,
        syscore: bool_,
        no_pm_callbacks: bool_,
        async_in_progress: bool_,
        must_resume: bool_,
        may_skip_resume: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wakeup_path: u8 = unsafe { ::std::mem::transmute(wakeup_path) };
            wakeup_path as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let syscore: u8 = unsafe { ::std::mem::transmute(syscore) };
            syscore as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_pm_callbacks: u8 = unsafe { ::std::mem::transmute(no_pm_callbacks) };
            no_pm_callbacks as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let async_in_progress: u8 = unsafe { ::std::mem::transmute(async_in_progress) };
            async_in_progress as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let must_resume: u8 = unsafe { ::std::mem::transmute(must_resume) };
            must_resume as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let may_skip_resume: u8 = unsafe { ::std::mem::transmute(may_skip_resume) };
            may_skip_resume as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn disable_depth(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_disable_depth(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn idle_notification(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_idle_notification(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_pending(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_request_pending(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deferred_resume(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_deferred_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn needs_force_resume(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_needs_force_resume(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn runtime_auto(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_runtime_auto(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_children(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore_children(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_callbacks(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_callbacks(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn irq_safe(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_irq_safe(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_autosuspend(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_use_autosuspend(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_autosuspends(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_timer_autosuspends(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn memalloc_noio(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_memalloc_noio(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        disable_depth: ::std::os::raw::c_uint,
        idle_notification: bool_,
        request_pending: bool_,
        deferred_resume: bool_,
        needs_force_resume: bool_,
        runtime_auto: bool_,
        ignore_children: bool_,
        no_callbacks: bool_,
        irq_safe: bool_,
        use_autosuspend: bool_,
        timer_autosuspends: bool_,
        memalloc_noio: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let disable_depth: u32 = unsafe { ::std::mem::transmute(disable_depth) };
            disable_depth as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let idle_notification: u8 = unsafe { ::std::mem::transmute(idle_notification) };
            idle_notification as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let request_pending: u8 = unsafe { ::std::mem::transmute(request_pending) };
            request_pending as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let deferred_resume: u8 = unsafe { ::std::mem::transmute(deferred_resume) };
            deferred_resume as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let needs_force_resume: u8 = unsafe { ::std::mem::transmute(needs_force_resume) };
            needs_force_resume as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let runtime_auto: u8 = unsafe { ::std::mem::transmute(runtime_auto) };
            runtime_auto as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ignore_children: u8 = unsafe { ::std::mem::transmute(ignore_children) };
            ignore_children as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let no_callbacks: u8 = unsafe { ::std::mem::transmute(no_callbacks) };
            no_callbacks as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let irq_safe: u8 = unsafe { ::std::mem::transmute(irq_safe) };
            irq_safe as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let use_autosuspend: u8 = unsafe { ::std::mem::transmute(use_autosuspend) };
            use_autosuspend as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let timer_autosuspends: u8 = unsafe { ::std::mem::transmute(timer_autosuspends) };
            timer_autosuspends as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let memalloc_noio: u8 = unsafe { ::std::mem::transmute(memalloc_noio) };
            memalloc_noio as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn dev_pm_get_subsys_data(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dev_pm_put_subsys_data(dev: *mut device);
}
#[doc = " struct dev_pm_domain - power management domain representation.\n\n @ops: Power management operations associated with this domain.\n @start: Called when a user needs to start the device via the domain.\n @detach: Called when removing a device from the domain.\n @activate: Called before executing probe routines for bus types and drivers.\n @sync: Called after successful driver probe.\n @dismiss: Called after unsuccessful driver probe and after driver removal.\n @set_performance_state: Called to request a new performance state.\n\n Power domains provide callbacks that are executed during system suspend,\n hibernation, system resume and during runtime PM transitions instead of\n subsystem-level and driver-level callbacks."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pm_domain {
    pub ops: dev_pm_ops,
    pub start:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub detach: ::std::option::Option<unsafe extern "C" fn(dev: *mut device, power_off: bool_)>,
    pub activate:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub sync: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub dismiss: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub set_performance_state: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *mut device,
            state: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_pm_domain"][::std::mem::size_of::<dev_pm_domain>() - 232usize];
    ["Alignment of dev_pm_domain"][::std::mem::align_of::<dev_pm_domain>() - 8usize];
    ["Offset of field: dev_pm_domain::ops"][::std::mem::offset_of!(dev_pm_domain, ops) - 0usize];
    ["Offset of field: dev_pm_domain::start"]
        [::std::mem::offset_of!(dev_pm_domain, start) - 184usize];
    ["Offset of field: dev_pm_domain::detach"]
        [::std::mem::offset_of!(dev_pm_domain, detach) - 192usize];
    ["Offset of field: dev_pm_domain::activate"]
        [::std::mem::offset_of!(dev_pm_domain, activate) - 200usize];
    ["Offset of field: dev_pm_domain::sync"]
        [::std::mem::offset_of!(dev_pm_domain, sync) - 208usize];
    ["Offset of field: dev_pm_domain::dismiss"]
        [::std::mem::offset_of!(dev_pm_domain, dismiss) - 216usize];
    ["Offset of field: dev_pm_domain::set_performance_state"]
        [::std::mem::offset_of!(dev_pm_domain, set_performance_state) - 224usize];
};
extern "C" {
    pub fn device_pm_lock();
}
extern "C" {
    pub fn dpm_resume_start(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume_end(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume_noirq(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume_early(state: pm_message_t);
}
extern "C" {
    pub fn dpm_resume(state: pm_message_t);
}
extern "C" {
    pub fn dpm_complete(state: pm_message_t);
}
extern "C" {
    pub fn device_pm_unlock();
}
extern "C" {
    pub fn dpm_suspend_end(state: pm_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpm_suspend_start(state: pm_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpm_suspend_noirq(state: pm_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpm_suspend_late(state: pm_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpm_suspend(state: pm_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpm_prepare(state: pm_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __suspend_report_result(
        function: *const ::std::os::raw::c_char,
        dev: *mut device,
        fn_: *mut ::std::os::raw::c_void,
        ret: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn device_pm_wait_for_dev(sub: *mut device, dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpm_for_each_dev(
        data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut device, arg2: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn pm_generic_prepare(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_suspend_late(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_suspend_noirq(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_suspend(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_resume_early(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_resume_noirq(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_resume(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_freeze_noirq(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_freeze_late(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_freeze(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_thaw_noirq(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_thaw_early(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_thaw(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_restore_noirq(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_restore_early(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_restore(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_poweroff_noirq(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_poweroff_late(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_poweroff(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_generic_complete(dev: *mut device);
}
extern "C" {
    pub fn dev_pm_skip_resume(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn dev_pm_skip_suspend(dev: *mut device) -> bool_;
}
pub const dpm_order_DPM_ORDER_NONE: dpm_order = 0;
pub const dpm_order_DPM_ORDER_DEV_AFTER_PARENT: dpm_order = 1;
pub const dpm_order_DPM_ORDER_PARENT_BEFORE_DEV: dpm_order = 2;
pub const dpm_order_DPM_ORDER_DEV_LAST: dpm_order = 3;
pub type dpm_order = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fwnode_handle {
    _unused: [u8; 0],
}
#[doc = " struct bus_type - The bus type of the device\n\n @name:\tThe name of the bus.\n @dev_name:\tUsed for subsystems to enumerate devices like (\"foo%u\", dev->id).\n @bus_groups:\tDefault attributes of the bus.\n @dev_groups:\tDefault attributes of the devices on the bus.\n @drv_groups: Default attributes of the device drivers on the bus.\n @match:\tCalled, perhaps multiple times, whenever a new device or driver\n\t\tis added for this bus. It should return a positive value if the\n\t\tgiven device can be handled by the given driver and zero\n\t\totherwise. It may also return error code if determining that\n\t\tthe driver supports the device is not possible. In case of\n\t\t-EPROBE_DEFER it will queue the device for deferred probing.\n @uevent:\tCalled when a device is added, removed, or a few other things\n\t\tthat generate uevents to add the environment variables.\n @probe:\tCalled when a new device or driver add to this bus, and callback\n\t\tthe specific driver's probe to initial the matched device.\n @sync_state:\tCalled to sync device state to software state after all the\n\t\tstate tracking consumers linked to this device (present at\n\t\tthe time of late_initcall) have successfully bound to a\n\t\tdriver. If the device has no consumers, this function will\n\t\tbe called at late_initcall_sync level. If the device has\n\t\tconsumers that are never bound to a driver, this function\n\t\twill never get called until they do.\n @remove:\tCalled when a device removed from this bus.\n @shutdown:\tCalled at shut-down time to quiesce the device.\n\n @online:\tCalled to put the device back online (after offlining it).\n @offline:\tCalled to put the device offline for hot-removal. May fail.\n\n @suspend:\tCalled when a device on this bus wants to go to sleep mode.\n @resume:\tCalled to bring a device on this bus out of sleep mode.\n @num_vf:\tCalled to find out how many virtual functions a device on this\n\t\tbus supports.\n @dma_configure:\tCalled to setup DMA configuration on a device on\n\t\t\tthis bus.\n @dma_cleanup:\tCalled to cleanup DMA configuration on a device on\n\t\t\tthis bus.\n @pm:\t\tPower management operations of this bus, callback the specific\n\t\tdevice driver's pm-ops.\n @need_parent_lock:\tWhen probing or removing a device on this bus, the\n\t\t\tdevice core should lock the device's parent.\n\n A bus is a channel between the processor and one or more devices. For the\n purposes of the device model, all devices are connected via a bus, even if\n it is an internal, virtual, \"platform\" bus. Buses can plug into each other.\n A USB controller is usually a PCI device, for example. The device model\n represents the actual connections between buses and the devices they control.\n A bus is represented by the bus_type structure. It contains the name, the\n default attributes, the bus' methods, PM operations, and the driver core's\n private data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bus_type {
    pub name: *const ::std::os::raw::c_char,
    pub dev_name: *const ::std::os::raw::c_char,
    pub bus_groups: *mut *const attribute_group,
    pub dev_groups: *mut *const attribute_group,
    pub drv_groups: *mut *const attribute_group,
    pub match_: ::std::option::Option<
        unsafe extern "C" fn(dev: *mut device, drv: *const device_driver) -> ::std::os::raw::c_int,
    >,
    pub uevent: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *const device,
            env: *mut kobj_uevent_env,
        ) -> ::std::os::raw::c_int,
    >,
    pub probe:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub sync_state: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub remove: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub online:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub offline:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub suspend: ::std::option::Option<
        unsafe extern "C" fn(dev: *mut device, state: pm_message_t) -> ::std::os::raw::c_int,
    >,
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub num_vf:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub dma_configure:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub dma_cleanup: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub pm: *const dev_pm_ops,
    pub need_parent_lock: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bus_type"][::std::mem::size_of::<bus_type>() - 160usize];
    ["Alignment of bus_type"][::std::mem::align_of::<bus_type>() - 8usize];
    ["Offset of field: bus_type::name"][::std::mem::offset_of!(bus_type, name) - 0usize];
    ["Offset of field: bus_type::dev_name"][::std::mem::offset_of!(bus_type, dev_name) - 8usize];
    ["Offset of field: bus_type::bus_groups"]
        [::std::mem::offset_of!(bus_type, bus_groups) - 16usize];
    ["Offset of field: bus_type::dev_groups"]
        [::std::mem::offset_of!(bus_type, dev_groups) - 24usize];
    ["Offset of field: bus_type::drv_groups"]
        [::std::mem::offset_of!(bus_type, drv_groups) - 32usize];
    ["Offset of field: bus_type::match_"][::std::mem::offset_of!(bus_type, match_) - 40usize];
    ["Offset of field: bus_type::uevent"][::std::mem::offset_of!(bus_type, uevent) - 48usize];
    ["Offset of field: bus_type::probe"][::std::mem::offset_of!(bus_type, probe) - 56usize];
    ["Offset of field: bus_type::sync_state"]
        [::std::mem::offset_of!(bus_type, sync_state) - 64usize];
    ["Offset of field: bus_type::remove"][::std::mem::offset_of!(bus_type, remove) - 72usize];
    ["Offset of field: bus_type::shutdown"][::std::mem::offset_of!(bus_type, shutdown) - 80usize];
    ["Offset of field: bus_type::online"][::std::mem::offset_of!(bus_type, online) - 88usize];
    ["Offset of field: bus_type::offline"][::std::mem::offset_of!(bus_type, offline) - 96usize];
    ["Offset of field: bus_type::suspend"][::std::mem::offset_of!(bus_type, suspend) - 104usize];
    ["Offset of field: bus_type::resume"][::std::mem::offset_of!(bus_type, resume) - 112usize];
    ["Offset of field: bus_type::num_vf"][::std::mem::offset_of!(bus_type, num_vf) - 120usize];
    ["Offset of field: bus_type::dma_configure"]
        [::std::mem::offset_of!(bus_type, dma_configure) - 128usize];
    ["Offset of field: bus_type::dma_cleanup"]
        [::std::mem::offset_of!(bus_type, dma_cleanup) - 136usize];
    ["Offset of field: bus_type::pm"][::std::mem::offset_of!(bus_type, pm) - 144usize];
    ["Offset of field: bus_type::need_parent_lock"]
        [::std::mem::offset_of!(bus_type, need_parent_lock) - 152usize];
};
extern "C" {
    pub fn bus_register(bus: *const bus_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bus_unregister(bus: *const bus_type);
}
extern "C" {
    pub fn bus_rescan_devices(bus: *const bus_type) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bus_attribute {
    pub attr: attribute,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(bus: *const bus_type, buf: *mut ::std::os::raw::c_char) -> isize,
    >,
    pub store: ::std::option::Option<
        unsafe extern "C" fn(
            bus: *const bus_type,
            buf: *const ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bus_attribute"][::std::mem::size_of::<bus_attribute>() - 32usize];
    ["Alignment of bus_attribute"][::std::mem::align_of::<bus_attribute>() - 8usize];
    ["Offset of field: bus_attribute::attr"][::std::mem::offset_of!(bus_attribute, attr) - 0usize];
    ["Offset of field: bus_attribute::show"][::std::mem::offset_of!(bus_attribute, show) - 16usize];
    ["Offset of field: bus_attribute::store"]
        [::std::mem::offset_of!(bus_attribute, store) - 24usize];
};
extern "C" {
    pub fn bus_create_file(bus: *const bus_type, attr: *mut bus_attribute)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bus_remove_file(bus: *const bus_type, attr: *mut bus_attribute);
}
extern "C" {
    pub fn device_match_name(
        dev: *mut device,
        name: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_match_of_node(
        dev: *mut device,
        np: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_match_fwnode(
        dev: *mut device,
        fwnode: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_match_devt(
        dev: *mut device,
        pdevt: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_match_acpi_dev(
        dev: *mut device,
        adev: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_match_acpi_handle(
        dev: *mut device,
        handle: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_match_any(
        dev: *mut device,
        unused: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bus_for_each_dev(
        bus: *const bus_type,
        start: *mut device,
        data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bus_find_device(
        bus: *const bus_type,
        start: *mut device,
        data: *const ::std::os::raw::c_void,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut device;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bus_for_each_drv(
        bus: *const bus_type,
        start: *mut device_driver,
        data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut device_driver,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bus_sort_breadthfirst(
        bus: *const bus_type,
        compare: ::std::option::Option<
            unsafe extern "C" fn(a: *const device, b: *const device) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn bus_register_notifier(
        bus: *const bus_type,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bus_unregister_notifier(
        bus: *const bus_type,
        nb: *mut notifier_block,
    ) -> ::std::os::raw::c_int;
}
pub const bus_notifier_event_BUS_NOTIFY_ADD_DEVICE: bus_notifier_event = 0;
pub const bus_notifier_event_BUS_NOTIFY_DEL_DEVICE: bus_notifier_event = 1;
pub const bus_notifier_event_BUS_NOTIFY_REMOVED_DEVICE: bus_notifier_event = 2;
pub const bus_notifier_event_BUS_NOTIFY_BIND_DRIVER: bus_notifier_event = 3;
pub const bus_notifier_event_BUS_NOTIFY_BOUND_DRIVER: bus_notifier_event = 4;
pub const bus_notifier_event_BUS_NOTIFY_UNBIND_DRIVER: bus_notifier_event = 5;
pub const bus_notifier_event_BUS_NOTIFY_UNBOUND_DRIVER: bus_notifier_event = 6;
pub const bus_notifier_event_BUS_NOTIFY_DRIVER_NOT_BOUND: bus_notifier_event = 7;
#[doc = " enum bus_notifier_event - Bus Notifier events that have happened\n @BUS_NOTIFY_ADD_DEVICE: device is added to this bus\n @BUS_NOTIFY_DEL_DEVICE: device is about to be removed from this bus\n @BUS_NOTIFY_REMOVED_DEVICE: device is successfully removed from this bus\n @BUS_NOTIFY_BIND_DRIVER: a driver is about to be bound to this device on this bus\n @BUS_NOTIFY_BOUND_DRIVER: a driver is successfully bound to this device on this bus\n @BUS_NOTIFY_UNBIND_DRIVER: a driver is about to be unbound from this device on this bus\n @BUS_NOTIFY_UNBOUND_DRIVER: a driver is successfully unbound from this device on this bus\n @BUS_NOTIFY_DRIVER_NOT_BOUND: a driver failed to be bound to this device on this bus\n\n These are the value passed to a bus notifier when a specific event happens.\n\n Note that bus notifiers are likely to be called with the device lock already\n held by the driver core, so be careful in any notifier callback as to what\n you do with the device structure.\n\n All bus notifiers are called with the target struct device * as an argument."]
pub type bus_notifier_event = ::std::os::raw::c_uint;
extern "C" {
    pub fn bus_get_kset(bus: *const bus_type) -> *mut kset;
}
extern "C" {
    pub fn bus_get_dev_root(bus: *const bus_type) -> *mut device;
}
#[doc = " struct class - device classes\n @name:\tName of the class.\n @class_groups: Default attributes of this class.\n @dev_groups:\tDefault attributes of the devices that belong to the class.\n @dev_uevent:\tCalled when a device is added, removed from this class, or a\n\t\tfew other things that generate uevents to add the environment\n\t\tvariables.\n @devnode:\tCallback to provide the devtmpfs.\n @class_release: Called to release this class.\n @dev_release: Called to release the device.\n @shutdown_pre: Called at shut-down time before driver shutdown.\n @ns_type:\tCallbacks so sysfs can detemine namespaces.\n @namespace:\tNamespace of the device belongs to this class.\n @get_ownership: Allows class to specify uid/gid of the sysfs directories\n\t\tfor the devices belonging to the class. Usually tied to\n\t\tdevice's namespace.\n @pm:\t\tThe default device power management operations of this class.\n\n A class is a higher-level view of a device that abstracts out low-level\n implementation details. Drivers may see a SCSI disk or an ATA disk, but,\n at the class level, they are all simply disks. Classes allow user space\n to work with devices based on what they do, rather than how they are\n connected or how they work."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class {
    pub name: *const ::std::os::raw::c_char,
    pub class_groups: *mut *const attribute_group,
    pub dev_groups: *mut *const attribute_group,
    pub dev_uevent: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *const device,
            env: *mut kobj_uevent_env,
        ) -> ::std::os::raw::c_int,
    >,
    pub devnode: ::std::option::Option<
        unsafe extern "C" fn(dev: *const device, mode: *mut umode_t) -> *mut ::std::os::raw::c_char,
    >,
    pub class_release: ::std::option::Option<unsafe extern "C" fn(class: *const class)>,
    pub dev_release: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub shutdown_pre:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub ns_type: *const kobj_ns_type_operations,
    pub namespace: ::std::option::Option<
        unsafe extern "C" fn(dev: *const device) -> *const ::std::os::raw::c_void,
    >,
    pub get_ownership: ::std::option::Option<
        unsafe extern "C" fn(dev: *const device, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
    pub pm: *const dev_pm_ops,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class"][::std::mem::size_of::<class>() - 96usize];
    ["Alignment of class"][::std::mem::align_of::<class>() - 8usize];
    ["Offset of field: class::name"][::std::mem::offset_of!(class, name) - 0usize];
    ["Offset of field: class::class_groups"][::std::mem::offset_of!(class, class_groups) - 8usize];
    ["Offset of field: class::dev_groups"][::std::mem::offset_of!(class, dev_groups) - 16usize];
    ["Offset of field: class::dev_uevent"][::std::mem::offset_of!(class, dev_uevent) - 24usize];
    ["Offset of field: class::devnode"][::std::mem::offset_of!(class, devnode) - 32usize];
    ["Offset of field: class::class_release"]
        [::std::mem::offset_of!(class, class_release) - 40usize];
    ["Offset of field: class::dev_release"][::std::mem::offset_of!(class, dev_release) - 48usize];
    ["Offset of field: class::shutdown_pre"][::std::mem::offset_of!(class, shutdown_pre) - 56usize];
    ["Offset of field: class::ns_type"][::std::mem::offset_of!(class, ns_type) - 64usize];
    ["Offset of field: class::namespace"][::std::mem::offset_of!(class, namespace) - 72usize];
    ["Offset of field: class::get_ownership"]
        [::std::mem::offset_of!(class, get_ownership) - 80usize];
    ["Offset of field: class::pm"][::std::mem::offset_of!(class, pm) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_dev_iter {
    pub ki: klist_iter,
    pub type_: *const device_type,
    pub sp: *mut subsys_private,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_dev_iter"][::std::mem::size_of::<class_dev_iter>() - 32usize];
    ["Alignment of class_dev_iter"][::std::mem::align_of::<class_dev_iter>() - 8usize];
    ["Offset of field: class_dev_iter::ki"][::std::mem::offset_of!(class_dev_iter, ki) - 0usize];
    ["Offset of field: class_dev_iter::type_"]
        [::std::mem::offset_of!(class_dev_iter, type_) - 16usize];
    ["Offset of field: class_dev_iter::sp"][::std::mem::offset_of!(class_dev_iter, sp) - 24usize];
};
extern "C" {
    pub fn class_register(class: *const class) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_unregister(class: *const class);
}
extern "C" {
    pub fn class_is_registered(class: *const class) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_compat {
    _unused: [u8; 0],
}
extern "C" {
    pub fn class_compat_register(name: *const ::std::os::raw::c_char) -> *mut class_compat;
}
extern "C" {
    pub fn class_compat_unregister(cls: *mut class_compat);
}
extern "C" {
    pub fn class_compat_create_link(
        cls: *mut class_compat,
        dev: *mut device,
        device_link: *mut device,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_compat_remove_link(
        cls: *mut class_compat,
        dev: *mut device,
        device_link: *mut device,
    );
}
extern "C" {
    pub fn class_dev_iter_init(
        iter: *mut class_dev_iter,
        class: *const class,
        start: *const device,
        type_: *const device_type,
    );
}
extern "C" {
    pub fn class_dev_iter_next(iter: *mut class_dev_iter) -> *mut device;
}
extern "C" {
    pub fn class_dev_iter_exit(iter: *mut class_dev_iter);
}
extern "C" {
    pub fn class_for_each_device(
        class: *const class,
        start: *const device,
        data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_find_device(
        class: *const class,
        start: *const device,
        data: *const ::std::os::raw::c_void,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut device,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut device;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_attribute {
    pub attr: attribute,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(
            class: *const class,
            attr: *const class_attribute,
            buf: *mut ::std::os::raw::c_char,
        ) -> isize,
    >,
    pub store: ::std::option::Option<
        unsafe extern "C" fn(
            class: *const class,
            attr: *const class_attribute,
            buf: *const ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_attribute"][::std::mem::size_of::<class_attribute>() - 32usize];
    ["Alignment of class_attribute"][::std::mem::align_of::<class_attribute>() - 8usize];
    ["Offset of field: class_attribute::attr"]
        [::std::mem::offset_of!(class_attribute, attr) - 0usize];
    ["Offset of field: class_attribute::show"]
        [::std::mem::offset_of!(class_attribute, show) - 16usize];
    ["Offset of field: class_attribute::store"]
        [::std::mem::offset_of!(class_attribute, store) - 24usize];
};
extern "C" {
    pub fn class_create_file_ns(
        class: *const class,
        attr: *const class_attribute,
        ns: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_remove_file_ns(
        class: *const class,
        attr: *const class_attribute,
        ns: *const ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_attribute_string {
    pub attr: class_attribute,
    pub str_: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_attribute_string"][::std::mem::size_of::<class_attribute_string>() - 40usize];
    ["Alignment of class_attribute_string"]
        [::std::mem::align_of::<class_attribute_string>() - 8usize];
    ["Offset of field: class_attribute_string::attr"]
        [::std::mem::offset_of!(class_attribute_string, attr) - 0usize];
    ["Offset of field: class_attribute_string::str_"]
        [::std::mem::offset_of!(class_attribute_string, str_) - 32usize];
};
extern "C" {
    pub fn show_class_attr_string(
        class: *const class,
        attr: *const class_attribute,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_interface {
    pub node: list_head,
    pub class: *const class,
    pub add_dev:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub remove_dev: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of class_interface"][::std::mem::size_of::<class_interface>() - 40usize];
    ["Alignment of class_interface"][::std::mem::align_of::<class_interface>() - 8usize];
    ["Offset of field: class_interface::node"]
        [::std::mem::offset_of!(class_interface, node) - 0usize];
    ["Offset of field: class_interface::class"]
        [::std::mem::offset_of!(class_interface, class) - 16usize];
    ["Offset of field: class_interface::add_dev"]
        [::std::mem::offset_of!(class_interface, add_dev) - 24usize];
    ["Offset of field: class_interface::remove_dev"]
        [::std::mem::offset_of!(class_interface, remove_dev) - 32usize];
};
extern "C" {
    pub fn class_interface_register(arg1: *mut class_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_interface_unregister(arg1: *mut class_interface);
}
extern "C" {
    pub fn class_create(name: *const ::std::os::raw::c_char) -> *mut class;
}
extern "C" {
    pub fn class_destroy(cls: *const class);
}
extern "C" {
    pub fn build_id_parse(
        vma: *mut vm_area_struct,
        build_id: *mut ::std::os::raw::c_uchar,
        size: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_id_parse_buf(
        buf: *const ::std::os::raw::c_void,
        build_id: *mut ::std::os::raw::c_uchar,
        buf_size: u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vmlinux_build_id: [::std::os::raw::c_uchar; 20usize];
}
extern "C" {
    pub fn init_vmlinux_build_id();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sysctl_args {
    pub name: *mut ::std::os::raw::c_int,
    pub nlen: ::std::os::raw::c_int,
    pub oldval: *mut ::std::os::raw::c_void,
    pub oldlenp: *mut usize,
    pub newval: *mut ::std::os::raw::c_void,
    pub newlen: usize,
    pub __unused: [::std::os::raw::c_ulong; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sysctl_args"][::std::mem::size_of::<__sysctl_args>() - 80usize];
    ["Alignment of __sysctl_args"][::std::mem::align_of::<__sysctl_args>() - 8usize];
    ["Offset of field: __sysctl_args::name"][::std::mem::offset_of!(__sysctl_args, name) - 0usize];
    ["Offset of field: __sysctl_args::nlen"][::std::mem::offset_of!(__sysctl_args, nlen) - 8usize];
    ["Offset of field: __sysctl_args::oldval"]
        [::std::mem::offset_of!(__sysctl_args, oldval) - 16usize];
    ["Offset of field: __sysctl_args::oldlenp"]
        [::std::mem::offset_of!(__sysctl_args, oldlenp) - 24usize];
    ["Offset of field: __sysctl_args::newval"]
        [::std::mem::offset_of!(__sysctl_args, newval) - 32usize];
    ["Offset of field: __sysctl_args::newlen"]
        [::std::mem::offset_of!(__sysctl_args, newlen) - 40usize];
    ["Offset of field: __sysctl_args::__unused"]
        [::std::mem::offset_of!(__sysctl_args, __unused) - 48usize];
};
pub const CTL_KERN: _bindgen_ty_31 = 1;
pub const CTL_VM: _bindgen_ty_31 = 2;
pub const CTL_NET: _bindgen_ty_31 = 3;
pub const CTL_PROC: _bindgen_ty_31 = 4;
pub const CTL_FS: _bindgen_ty_31 = 5;
pub const CTL_DEBUG: _bindgen_ty_31 = 6;
pub const CTL_DEV: _bindgen_ty_31 = 7;
pub const CTL_BUS: _bindgen_ty_31 = 8;
pub const CTL_ABI: _bindgen_ty_31 = 9;
pub const CTL_CPU: _bindgen_ty_31 = 10;
pub const CTL_ARLAN: _bindgen_ty_31 = 254;
pub const CTL_S390DBF: _bindgen_ty_31 = 5677;
pub const CTL_SUNRPC: _bindgen_ty_31 = 7249;
pub const CTL_PM: _bindgen_ty_31 = 9899;
pub const CTL_FRV: _bindgen_ty_31 = 9898;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const CTL_BUS_ISA: _bindgen_ty_32 = 1;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
pub const INOTIFY_MAX_USER_INSTANCES: _bindgen_ty_33 = 1;
pub const INOTIFY_MAX_USER_WATCHES: _bindgen_ty_33 = 2;
pub const INOTIFY_MAX_QUEUED_EVENTS: _bindgen_ty_33 = 3;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub const KERN_OSTYPE: _bindgen_ty_34 = 1;
pub const KERN_OSRELEASE: _bindgen_ty_34 = 2;
pub const KERN_OSREV: _bindgen_ty_34 = 3;
pub const KERN_VERSION: _bindgen_ty_34 = 4;
pub const KERN_SECUREMASK: _bindgen_ty_34 = 5;
pub const KERN_PROF: _bindgen_ty_34 = 6;
pub const KERN_NODENAME: _bindgen_ty_34 = 7;
pub const KERN_DOMAINNAME: _bindgen_ty_34 = 8;
pub const KERN_PANIC: _bindgen_ty_34 = 15;
pub const KERN_REALROOTDEV: _bindgen_ty_34 = 16;
pub const KERN_SPARC_REBOOT: _bindgen_ty_34 = 21;
pub const KERN_CTLALTDEL: _bindgen_ty_34 = 22;
pub const KERN_PRINTK: _bindgen_ty_34 = 23;
pub const KERN_NAMETRANS: _bindgen_ty_34 = 24;
pub const KERN_PPC_HTABRECLAIM: _bindgen_ty_34 = 25;
pub const KERN_PPC_ZEROPAGED: _bindgen_ty_34 = 26;
pub const KERN_PPC_POWERSAVE_NAP: _bindgen_ty_34 = 27;
pub const KERN_MODPROBE: _bindgen_ty_34 = 28;
pub const KERN_SG_BIG_BUFF: _bindgen_ty_34 = 29;
pub const KERN_ACCT: _bindgen_ty_34 = 30;
pub const KERN_PPC_L2CR: _bindgen_ty_34 = 31;
pub const KERN_RTSIGNR: _bindgen_ty_34 = 32;
pub const KERN_RTSIGMAX: _bindgen_ty_34 = 33;
pub const KERN_SHMMAX: _bindgen_ty_34 = 34;
pub const KERN_MSGMAX: _bindgen_ty_34 = 35;
pub const KERN_MSGMNB: _bindgen_ty_34 = 36;
pub const KERN_MSGPOOL: _bindgen_ty_34 = 37;
pub const KERN_SYSRQ: _bindgen_ty_34 = 38;
pub const KERN_MAX_THREADS: _bindgen_ty_34 = 39;
pub const KERN_RANDOM: _bindgen_ty_34 = 40;
pub const KERN_SHMALL: _bindgen_ty_34 = 41;
pub const KERN_MSGMNI: _bindgen_ty_34 = 42;
pub const KERN_SEM: _bindgen_ty_34 = 43;
pub const KERN_SPARC_STOP_A: _bindgen_ty_34 = 44;
pub const KERN_SHMMNI: _bindgen_ty_34 = 45;
pub const KERN_OVERFLOWUID: _bindgen_ty_34 = 46;
pub const KERN_OVERFLOWGID: _bindgen_ty_34 = 47;
pub const KERN_SHMPATH: _bindgen_ty_34 = 48;
pub const KERN_HOTPLUG: _bindgen_ty_34 = 49;
pub const KERN_IEEE_EMULATION_WARNINGS: _bindgen_ty_34 = 50;
pub const KERN_S390_USER_DEBUG_LOGGING: _bindgen_ty_34 = 51;
pub const KERN_CORE_USES_PID: _bindgen_ty_34 = 52;
pub const KERN_TAINTED: _bindgen_ty_34 = 53;
pub const KERN_CADPID: _bindgen_ty_34 = 54;
pub const KERN_PIDMAX: _bindgen_ty_34 = 55;
pub const KERN_CORE_PATTERN: _bindgen_ty_34 = 56;
pub const KERN_PANIC_ON_OOPS: _bindgen_ty_34 = 57;
pub const KERN_HPPA_PWRSW: _bindgen_ty_34 = 58;
pub const KERN_HPPA_UNALIGNED: _bindgen_ty_34 = 59;
pub const KERN_PRINTK_RATELIMIT: _bindgen_ty_34 = 60;
pub const KERN_PRINTK_RATELIMIT_BURST: _bindgen_ty_34 = 61;
pub const KERN_PTY: _bindgen_ty_34 = 62;
pub const KERN_NGROUPS_MAX: _bindgen_ty_34 = 63;
pub const KERN_SPARC_SCONS_PWROFF: _bindgen_ty_34 = 64;
pub const KERN_HZ_TIMER: _bindgen_ty_34 = 65;
pub const KERN_UNKNOWN_NMI_PANIC: _bindgen_ty_34 = 66;
pub const KERN_BOOTLOADER_TYPE: _bindgen_ty_34 = 67;
pub const KERN_RANDOMIZE: _bindgen_ty_34 = 68;
pub const KERN_SETUID_DUMPABLE: _bindgen_ty_34 = 69;
pub const KERN_SPIN_RETRY: _bindgen_ty_34 = 70;
pub const KERN_ACPI_VIDEO_FLAGS: _bindgen_ty_34 = 71;
pub const KERN_IA64_UNALIGNED: _bindgen_ty_34 = 72;
pub const KERN_COMPAT_LOG: _bindgen_ty_34 = 73;
pub const KERN_MAX_LOCK_DEPTH: _bindgen_ty_34 = 74;
pub const KERN_NMI_WATCHDOG: _bindgen_ty_34 = 75;
pub const KERN_PANIC_ON_NMI: _bindgen_ty_34 = 76;
pub const KERN_PANIC_ON_WARN: _bindgen_ty_34 = 77;
pub const KERN_PANIC_PRINT: _bindgen_ty_34 = 78;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
pub const VM_UNUSED1: _bindgen_ty_35 = 1;
pub const VM_UNUSED2: _bindgen_ty_35 = 2;
pub const VM_UNUSED3: _bindgen_ty_35 = 3;
pub const VM_UNUSED4: _bindgen_ty_35 = 4;
pub const VM_OVERCOMMIT_MEMORY: _bindgen_ty_35 = 5;
pub const VM_UNUSED5: _bindgen_ty_35 = 6;
pub const VM_UNUSED7: _bindgen_ty_35 = 7;
pub const VM_UNUSED8: _bindgen_ty_35 = 8;
pub const VM_UNUSED9: _bindgen_ty_35 = 9;
pub const VM_PAGE_CLUSTER: _bindgen_ty_35 = 10;
pub const VM_DIRTY_BACKGROUND: _bindgen_ty_35 = 11;
pub const VM_DIRTY_RATIO: _bindgen_ty_35 = 12;
pub const VM_DIRTY_WB_CS: _bindgen_ty_35 = 13;
pub const VM_DIRTY_EXPIRE_CS: _bindgen_ty_35 = 14;
pub const VM_NR_PDFLUSH_THREADS: _bindgen_ty_35 = 15;
pub const VM_OVERCOMMIT_RATIO: _bindgen_ty_35 = 16;
pub const VM_PAGEBUF: _bindgen_ty_35 = 17;
pub const VM_HUGETLB_PAGES: _bindgen_ty_35 = 18;
pub const VM_SWAPPINESS: _bindgen_ty_35 = 19;
pub const VM_LOWMEM_RESERVE_RATIO: _bindgen_ty_35 = 20;
pub const VM_MIN_FREE_KBYTES: _bindgen_ty_35 = 21;
pub const VM_MAX_MAP_COUNT: _bindgen_ty_35 = 22;
pub const VM_LAPTOP_MODE: _bindgen_ty_35 = 23;
pub const VM_BLOCK_DUMP: _bindgen_ty_35 = 24;
pub const VM_HUGETLB_GROUP: _bindgen_ty_35 = 25;
pub const VM_VFS_CACHE_PRESSURE: _bindgen_ty_35 = 26;
pub const VM_LEGACY_VA_LAYOUT: _bindgen_ty_35 = 27;
pub const VM_SWAP_TOKEN_TIMEOUT: _bindgen_ty_35 = 28;
pub const VM_DROP_PAGECACHE: _bindgen_ty_35 = 29;
pub const VM_PERCPU_PAGELIST_FRACTION: _bindgen_ty_35 = 30;
pub const VM_ZONE_RECLAIM_MODE: _bindgen_ty_35 = 31;
pub const VM_MIN_UNMAPPED: _bindgen_ty_35 = 32;
pub const VM_PANIC_ON_OOM: _bindgen_ty_35 = 33;
pub const VM_VDSO_ENABLED: _bindgen_ty_35 = 34;
pub const VM_MIN_SLAB: _bindgen_ty_35 = 35;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub const NET_CORE: _bindgen_ty_36 = 1;
pub const NET_ETHER: _bindgen_ty_36 = 2;
pub const NET_802: _bindgen_ty_36 = 3;
pub const NET_UNIX: _bindgen_ty_36 = 4;
pub const NET_IPV4: _bindgen_ty_36 = 5;
pub const NET_IPX: _bindgen_ty_36 = 6;
pub const NET_ATALK: _bindgen_ty_36 = 7;
pub const NET_NETROM: _bindgen_ty_36 = 8;
pub const NET_AX25: _bindgen_ty_36 = 9;
pub const NET_BRIDGE: _bindgen_ty_36 = 10;
pub const NET_ROSE: _bindgen_ty_36 = 11;
pub const NET_IPV6: _bindgen_ty_36 = 12;
pub const NET_X25: _bindgen_ty_36 = 13;
pub const NET_TR: _bindgen_ty_36 = 14;
pub const NET_DECNET: _bindgen_ty_36 = 15;
pub const NET_ECONET: _bindgen_ty_36 = 16;
pub const NET_SCTP: _bindgen_ty_36 = 17;
pub const NET_LLC: _bindgen_ty_36 = 18;
pub const NET_NETFILTER: _bindgen_ty_36 = 19;
pub const NET_DCCP: _bindgen_ty_36 = 20;
pub const NET_IRDA: _bindgen_ty_36 = 412;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub const RANDOM_POOLSIZE: _bindgen_ty_37 = 1;
pub const RANDOM_ENTROPY_COUNT: _bindgen_ty_37 = 2;
pub const RANDOM_READ_THRESH: _bindgen_ty_37 = 3;
pub const RANDOM_WRITE_THRESH: _bindgen_ty_37 = 4;
pub const RANDOM_BOOT_ID: _bindgen_ty_37 = 5;
pub const RANDOM_UUID: _bindgen_ty_37 = 6;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
pub const PTY_MAX: _bindgen_ty_38 = 1;
pub const PTY_NR: _bindgen_ty_38 = 2;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
pub const BUS_ISA_MEM_BASE: _bindgen_ty_39 = 1;
pub const BUS_ISA_PORT_BASE: _bindgen_ty_39 = 2;
pub const BUS_ISA_PORT_SHIFT: _bindgen_ty_39 = 3;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const NET_CORE_WMEM_MAX: _bindgen_ty_40 = 1;
pub const NET_CORE_RMEM_MAX: _bindgen_ty_40 = 2;
pub const NET_CORE_WMEM_DEFAULT: _bindgen_ty_40 = 3;
pub const NET_CORE_RMEM_DEFAULT: _bindgen_ty_40 = 4;
pub const NET_CORE_MAX_BACKLOG: _bindgen_ty_40 = 6;
pub const NET_CORE_FASTROUTE: _bindgen_ty_40 = 7;
pub const NET_CORE_MSG_COST: _bindgen_ty_40 = 8;
pub const NET_CORE_MSG_BURST: _bindgen_ty_40 = 9;
pub const NET_CORE_OPTMEM_MAX: _bindgen_ty_40 = 10;
pub const NET_CORE_HOT_LIST_LENGTH: _bindgen_ty_40 = 11;
pub const NET_CORE_DIVERT_VERSION: _bindgen_ty_40 = 12;
pub const NET_CORE_NO_CONG_THRESH: _bindgen_ty_40 = 13;
pub const NET_CORE_NO_CONG: _bindgen_ty_40 = 14;
pub const NET_CORE_LO_CONG: _bindgen_ty_40 = 15;
pub const NET_CORE_MOD_CONG: _bindgen_ty_40 = 16;
pub const NET_CORE_DEV_WEIGHT: _bindgen_ty_40 = 17;
pub const NET_CORE_SOMAXCONN: _bindgen_ty_40 = 18;
pub const NET_CORE_BUDGET: _bindgen_ty_40 = 19;
pub const NET_CORE_AEVENT_ETIME: _bindgen_ty_40 = 20;
pub const NET_CORE_AEVENT_RSEQTH: _bindgen_ty_40 = 21;
pub const NET_CORE_WARNINGS: _bindgen_ty_40 = 22;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const NET_UNIX_DESTROY_DELAY: _bindgen_ty_41 = 1;
pub const NET_UNIX_DELETE_DELAY: _bindgen_ty_41 = 2;
pub const NET_UNIX_MAX_DGRAM_QLEN: _bindgen_ty_41 = 3;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const NET_NF_CONNTRACK_MAX: _bindgen_ty_42 = 1;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT: _bindgen_ty_42 = 2;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV: _bindgen_ty_42 = 3;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED: _bindgen_ty_42 = 4;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT: _bindgen_ty_42 = 5;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT: _bindgen_ty_42 = 6;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK: _bindgen_ty_42 = 7;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT: _bindgen_ty_42 = 8;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE: _bindgen_ty_42 = 9;
pub const NET_NF_CONNTRACK_UDP_TIMEOUT: _bindgen_ty_42 = 10;
pub const NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM: _bindgen_ty_42 = 11;
pub const NET_NF_CONNTRACK_ICMP_TIMEOUT: _bindgen_ty_42 = 12;
pub const NET_NF_CONNTRACK_GENERIC_TIMEOUT: _bindgen_ty_42 = 13;
pub const NET_NF_CONNTRACK_BUCKETS: _bindgen_ty_42 = 14;
pub const NET_NF_CONNTRACK_LOG_INVALID: _bindgen_ty_42 = 15;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS: _bindgen_ty_42 = 16;
pub const NET_NF_CONNTRACK_TCP_LOOSE: _bindgen_ty_42 = 17;
pub const NET_NF_CONNTRACK_TCP_BE_LIBERAL: _bindgen_ty_42 = 18;
pub const NET_NF_CONNTRACK_TCP_MAX_RETRANS: _bindgen_ty_42 = 19;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED: _bindgen_ty_42 = 20;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT: _bindgen_ty_42 = 21;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED: _bindgen_ty_42 = 22;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED: _bindgen_ty_42 = 23;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT: _bindgen_ty_42 = 24;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD: _bindgen_ty_42 = 25;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT: _bindgen_ty_42 = 26;
pub const NET_NF_CONNTRACK_COUNT: _bindgen_ty_42 = 27;
pub const NET_NF_CONNTRACK_ICMPV6_TIMEOUT: _bindgen_ty_42 = 28;
pub const NET_NF_CONNTRACK_FRAG6_TIMEOUT: _bindgen_ty_42 = 29;
pub const NET_NF_CONNTRACK_FRAG6_LOW_THRESH: _bindgen_ty_42 = 30;
pub const NET_NF_CONNTRACK_FRAG6_HIGH_THRESH: _bindgen_ty_42 = 31;
pub const NET_NF_CONNTRACK_CHECKSUM: _bindgen_ty_42 = 32;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const NET_IPV4_FORWARD: _bindgen_ty_43 = 8;
pub const NET_IPV4_DYNADDR: _bindgen_ty_43 = 9;
pub const NET_IPV4_CONF: _bindgen_ty_43 = 16;
pub const NET_IPV4_NEIGH: _bindgen_ty_43 = 17;
pub const NET_IPV4_ROUTE: _bindgen_ty_43 = 18;
pub const NET_IPV4_FIB_HASH: _bindgen_ty_43 = 19;
pub const NET_IPV4_NETFILTER: _bindgen_ty_43 = 20;
pub const NET_IPV4_TCP_TIMESTAMPS: _bindgen_ty_43 = 33;
pub const NET_IPV4_TCP_WINDOW_SCALING: _bindgen_ty_43 = 34;
pub const NET_IPV4_TCP_SACK: _bindgen_ty_43 = 35;
pub const NET_IPV4_TCP_RETRANS_COLLAPSE: _bindgen_ty_43 = 36;
pub const NET_IPV4_DEFAULT_TTL: _bindgen_ty_43 = 37;
pub const NET_IPV4_AUTOCONFIG: _bindgen_ty_43 = 38;
pub const NET_IPV4_NO_PMTU_DISC: _bindgen_ty_43 = 39;
pub const NET_IPV4_TCP_SYN_RETRIES: _bindgen_ty_43 = 40;
pub const NET_IPV4_IPFRAG_HIGH_THRESH: _bindgen_ty_43 = 41;
pub const NET_IPV4_IPFRAG_LOW_THRESH: _bindgen_ty_43 = 42;
pub const NET_IPV4_IPFRAG_TIME: _bindgen_ty_43 = 43;
pub const NET_IPV4_TCP_MAX_KA_PROBES: _bindgen_ty_43 = 44;
pub const NET_IPV4_TCP_KEEPALIVE_TIME: _bindgen_ty_43 = 45;
pub const NET_IPV4_TCP_KEEPALIVE_PROBES: _bindgen_ty_43 = 46;
pub const NET_IPV4_TCP_RETRIES1: _bindgen_ty_43 = 47;
pub const NET_IPV4_TCP_RETRIES2: _bindgen_ty_43 = 48;
pub const NET_IPV4_TCP_FIN_TIMEOUT: _bindgen_ty_43 = 49;
pub const NET_IPV4_IP_MASQ_DEBUG: _bindgen_ty_43 = 50;
pub const NET_TCP_SYNCOOKIES: _bindgen_ty_43 = 51;
pub const NET_TCP_STDURG: _bindgen_ty_43 = 52;
pub const NET_TCP_RFC1337: _bindgen_ty_43 = 53;
pub const NET_TCP_SYN_TAILDROP: _bindgen_ty_43 = 54;
pub const NET_TCP_MAX_SYN_BACKLOG: _bindgen_ty_43 = 55;
pub const NET_IPV4_LOCAL_PORT_RANGE: _bindgen_ty_43 = 56;
pub const NET_IPV4_ICMP_ECHO_IGNORE_ALL: _bindgen_ty_43 = 57;
pub const NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS: _bindgen_ty_43 = 58;
pub const NET_IPV4_ICMP_SOURCEQUENCH_RATE: _bindgen_ty_43 = 59;
pub const NET_IPV4_ICMP_DESTUNREACH_RATE: _bindgen_ty_43 = 60;
pub const NET_IPV4_ICMP_TIMEEXCEED_RATE: _bindgen_ty_43 = 61;
pub const NET_IPV4_ICMP_PARAMPROB_RATE: _bindgen_ty_43 = 62;
pub const NET_IPV4_ICMP_ECHOREPLY_RATE: _bindgen_ty_43 = 63;
pub const NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES: _bindgen_ty_43 = 64;
pub const NET_IPV4_IGMP_MAX_MEMBERSHIPS: _bindgen_ty_43 = 65;
pub const NET_TCP_TW_RECYCLE: _bindgen_ty_43 = 66;
pub const NET_IPV4_ALWAYS_DEFRAG: _bindgen_ty_43 = 67;
pub const NET_IPV4_TCP_KEEPALIVE_INTVL: _bindgen_ty_43 = 68;
pub const NET_IPV4_INET_PEER_THRESHOLD: _bindgen_ty_43 = 69;
pub const NET_IPV4_INET_PEER_MINTTL: _bindgen_ty_43 = 70;
pub const NET_IPV4_INET_PEER_MAXTTL: _bindgen_ty_43 = 71;
pub const NET_IPV4_INET_PEER_GC_MINTIME: _bindgen_ty_43 = 72;
pub const NET_IPV4_INET_PEER_GC_MAXTIME: _bindgen_ty_43 = 73;
pub const NET_TCP_ORPHAN_RETRIES: _bindgen_ty_43 = 74;
pub const NET_TCP_ABORT_ON_OVERFLOW: _bindgen_ty_43 = 75;
pub const NET_TCP_SYNACK_RETRIES: _bindgen_ty_43 = 76;
pub const NET_TCP_MAX_ORPHANS: _bindgen_ty_43 = 77;
pub const NET_TCP_MAX_TW_BUCKETS: _bindgen_ty_43 = 78;
pub const NET_TCP_FACK: _bindgen_ty_43 = 79;
pub const NET_TCP_REORDERING: _bindgen_ty_43 = 80;
pub const NET_TCP_ECN: _bindgen_ty_43 = 81;
pub const NET_TCP_DSACK: _bindgen_ty_43 = 82;
pub const NET_TCP_MEM: _bindgen_ty_43 = 83;
pub const NET_TCP_WMEM: _bindgen_ty_43 = 84;
pub const NET_TCP_RMEM: _bindgen_ty_43 = 85;
pub const NET_TCP_APP_WIN: _bindgen_ty_43 = 86;
pub const NET_TCP_ADV_WIN_SCALE: _bindgen_ty_43 = 87;
pub const NET_IPV4_NONLOCAL_BIND: _bindgen_ty_43 = 88;
pub const NET_IPV4_ICMP_RATELIMIT: _bindgen_ty_43 = 89;
pub const NET_IPV4_ICMP_RATEMASK: _bindgen_ty_43 = 90;
pub const NET_TCP_TW_REUSE: _bindgen_ty_43 = 91;
pub const NET_TCP_FRTO: _bindgen_ty_43 = 92;
pub const NET_TCP_LOW_LATENCY: _bindgen_ty_43 = 93;
pub const NET_IPV4_IPFRAG_SECRET_INTERVAL: _bindgen_ty_43 = 94;
pub const NET_IPV4_IGMP_MAX_MSF: _bindgen_ty_43 = 96;
pub const NET_TCP_NO_METRICS_SAVE: _bindgen_ty_43 = 97;
pub const NET_TCP_DEFAULT_WIN_SCALE: _bindgen_ty_43 = 105;
pub const NET_TCP_MODERATE_RCVBUF: _bindgen_ty_43 = 106;
pub const NET_TCP_TSO_WIN_DIVISOR: _bindgen_ty_43 = 107;
pub const NET_TCP_BIC_BETA: _bindgen_ty_43 = 108;
pub const NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR: _bindgen_ty_43 = 109;
pub const NET_TCP_CONG_CONTROL: _bindgen_ty_43 = 110;
pub const NET_TCP_ABC: _bindgen_ty_43 = 111;
pub const NET_IPV4_IPFRAG_MAX_DIST: _bindgen_ty_43 = 112;
pub const NET_TCP_MTU_PROBING: _bindgen_ty_43 = 113;
pub const NET_TCP_BASE_MSS: _bindgen_ty_43 = 114;
pub const NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS: _bindgen_ty_43 = 115;
pub const NET_TCP_DMA_COPYBREAK: _bindgen_ty_43 = 116;
pub const NET_TCP_SLOW_START_AFTER_IDLE: _bindgen_ty_43 = 117;
pub const NET_CIPSOV4_CACHE_ENABLE: _bindgen_ty_43 = 118;
pub const NET_CIPSOV4_CACHE_BUCKET_SIZE: _bindgen_ty_43 = 119;
pub const NET_CIPSOV4_RBM_OPTFMT: _bindgen_ty_43 = 120;
pub const NET_CIPSOV4_RBM_STRICTVALID: _bindgen_ty_43 = 121;
pub const NET_TCP_AVAIL_CONG_CONTROL: _bindgen_ty_43 = 122;
pub const NET_TCP_ALLOWED_CONG_CONTROL: _bindgen_ty_43 = 123;
pub const NET_TCP_MAX_SSTHRESH: _bindgen_ty_43 = 124;
pub const NET_TCP_FRTO_RESPONSE: _bindgen_ty_43 = 125;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const NET_IPV4_ROUTE_FLUSH: _bindgen_ty_44 = 1;
pub const NET_IPV4_ROUTE_MIN_DELAY: _bindgen_ty_44 = 2;
pub const NET_IPV4_ROUTE_MAX_DELAY: _bindgen_ty_44 = 3;
pub const NET_IPV4_ROUTE_GC_THRESH: _bindgen_ty_44 = 4;
pub const NET_IPV4_ROUTE_MAX_SIZE: _bindgen_ty_44 = 5;
pub const NET_IPV4_ROUTE_GC_MIN_INTERVAL: _bindgen_ty_44 = 6;
pub const NET_IPV4_ROUTE_GC_TIMEOUT: _bindgen_ty_44 = 7;
pub const NET_IPV4_ROUTE_GC_INTERVAL: _bindgen_ty_44 = 8;
pub const NET_IPV4_ROUTE_REDIRECT_LOAD: _bindgen_ty_44 = 9;
pub const NET_IPV4_ROUTE_REDIRECT_NUMBER: _bindgen_ty_44 = 10;
pub const NET_IPV4_ROUTE_REDIRECT_SILENCE: _bindgen_ty_44 = 11;
pub const NET_IPV4_ROUTE_ERROR_COST: _bindgen_ty_44 = 12;
pub const NET_IPV4_ROUTE_ERROR_BURST: _bindgen_ty_44 = 13;
pub const NET_IPV4_ROUTE_GC_ELASTICITY: _bindgen_ty_44 = 14;
pub const NET_IPV4_ROUTE_MTU_EXPIRES: _bindgen_ty_44 = 15;
pub const NET_IPV4_ROUTE_MIN_PMTU: _bindgen_ty_44 = 16;
pub const NET_IPV4_ROUTE_MIN_ADVMSS: _bindgen_ty_44 = 17;
pub const NET_IPV4_ROUTE_SECRET_INTERVAL: _bindgen_ty_44 = 18;
pub const NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS: _bindgen_ty_44 = 19;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const NET_PROTO_CONF_ALL: _bindgen_ty_45 = -2;
pub const NET_PROTO_CONF_DEFAULT: _bindgen_ty_45 = -3;
pub type _bindgen_ty_45 = ::std::os::raw::c_int;
pub const NET_IPV4_CONF_FORWARDING: _bindgen_ty_46 = 1;
pub const NET_IPV4_CONF_MC_FORWARDING: _bindgen_ty_46 = 2;
pub const NET_IPV4_CONF_PROXY_ARP: _bindgen_ty_46 = 3;
pub const NET_IPV4_CONF_ACCEPT_REDIRECTS: _bindgen_ty_46 = 4;
pub const NET_IPV4_CONF_SECURE_REDIRECTS: _bindgen_ty_46 = 5;
pub const NET_IPV4_CONF_SEND_REDIRECTS: _bindgen_ty_46 = 6;
pub const NET_IPV4_CONF_SHARED_MEDIA: _bindgen_ty_46 = 7;
pub const NET_IPV4_CONF_RP_FILTER: _bindgen_ty_46 = 8;
pub const NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE: _bindgen_ty_46 = 9;
pub const NET_IPV4_CONF_BOOTP_RELAY: _bindgen_ty_46 = 10;
pub const NET_IPV4_CONF_LOG_MARTIANS: _bindgen_ty_46 = 11;
pub const NET_IPV4_CONF_TAG: _bindgen_ty_46 = 12;
pub const NET_IPV4_CONF_ARPFILTER: _bindgen_ty_46 = 13;
pub const NET_IPV4_CONF_MEDIUM_ID: _bindgen_ty_46 = 14;
pub const NET_IPV4_CONF_NOXFRM: _bindgen_ty_46 = 15;
pub const NET_IPV4_CONF_NOPOLICY: _bindgen_ty_46 = 16;
pub const NET_IPV4_CONF_FORCE_IGMP_VERSION: _bindgen_ty_46 = 17;
pub const NET_IPV4_CONF_ARP_ANNOUNCE: _bindgen_ty_46 = 18;
pub const NET_IPV4_CONF_ARP_IGNORE: _bindgen_ty_46 = 19;
pub const NET_IPV4_CONF_PROMOTE_SECONDARIES: _bindgen_ty_46 = 20;
pub const NET_IPV4_CONF_ARP_ACCEPT: _bindgen_ty_46 = 21;
pub const NET_IPV4_CONF_ARP_NOTIFY: _bindgen_ty_46 = 22;
pub const NET_IPV4_CONF_ARP_EVICT_NOCARRIER: _bindgen_ty_46 = 23;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub const NET_IPV4_NF_CONNTRACK_MAX: _bindgen_ty_47 = 1;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT: _bindgen_ty_47 = 2;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV: _bindgen_ty_47 = 3;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED: _bindgen_ty_47 = 4;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT: _bindgen_ty_47 = 5;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT: _bindgen_ty_47 = 6;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK: _bindgen_ty_47 = 7;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT: _bindgen_ty_47 = 8;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE: _bindgen_ty_47 = 9;
pub const NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT: _bindgen_ty_47 = 10;
pub const NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM: _bindgen_ty_47 = 11;
pub const NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT: _bindgen_ty_47 = 12;
pub const NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT: _bindgen_ty_47 = 13;
pub const NET_IPV4_NF_CONNTRACK_BUCKETS: _bindgen_ty_47 = 14;
pub const NET_IPV4_NF_CONNTRACK_LOG_INVALID: _bindgen_ty_47 = 15;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS: _bindgen_ty_47 = 16;
pub const NET_IPV4_NF_CONNTRACK_TCP_LOOSE: _bindgen_ty_47 = 17;
pub const NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL: _bindgen_ty_47 = 18;
pub const NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS: _bindgen_ty_47 = 19;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED: _bindgen_ty_47 = 20;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT: _bindgen_ty_47 = 21;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED: _bindgen_ty_47 = 22;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED: _bindgen_ty_47 = 23;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT: _bindgen_ty_47 = 24;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD: _bindgen_ty_47 = 25;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT: _bindgen_ty_47 = 26;
pub const NET_IPV4_NF_CONNTRACK_COUNT: _bindgen_ty_47 = 27;
pub const NET_IPV4_NF_CONNTRACK_CHECKSUM: _bindgen_ty_47 = 28;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
pub const NET_IPV6_CONF: _bindgen_ty_48 = 16;
pub const NET_IPV6_NEIGH: _bindgen_ty_48 = 17;
pub const NET_IPV6_ROUTE: _bindgen_ty_48 = 18;
pub const NET_IPV6_ICMP: _bindgen_ty_48 = 19;
pub const NET_IPV6_BINDV6ONLY: _bindgen_ty_48 = 20;
pub const NET_IPV6_IP6FRAG_HIGH_THRESH: _bindgen_ty_48 = 21;
pub const NET_IPV6_IP6FRAG_LOW_THRESH: _bindgen_ty_48 = 22;
pub const NET_IPV6_IP6FRAG_TIME: _bindgen_ty_48 = 23;
pub const NET_IPV6_IP6FRAG_SECRET_INTERVAL: _bindgen_ty_48 = 24;
pub const NET_IPV6_MLD_MAX_MSF: _bindgen_ty_48 = 25;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
pub const NET_IPV6_ROUTE_FLUSH: _bindgen_ty_49 = 1;
pub const NET_IPV6_ROUTE_GC_THRESH: _bindgen_ty_49 = 2;
pub const NET_IPV6_ROUTE_MAX_SIZE: _bindgen_ty_49 = 3;
pub const NET_IPV6_ROUTE_GC_MIN_INTERVAL: _bindgen_ty_49 = 4;
pub const NET_IPV6_ROUTE_GC_TIMEOUT: _bindgen_ty_49 = 5;
pub const NET_IPV6_ROUTE_GC_INTERVAL: _bindgen_ty_49 = 6;
pub const NET_IPV6_ROUTE_GC_ELASTICITY: _bindgen_ty_49 = 7;
pub const NET_IPV6_ROUTE_MTU_EXPIRES: _bindgen_ty_49 = 8;
pub const NET_IPV6_ROUTE_MIN_ADVMSS: _bindgen_ty_49 = 9;
pub const NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS: _bindgen_ty_49 = 10;
pub type _bindgen_ty_49 = ::std::os::raw::c_uint;
pub const NET_IPV6_FORWARDING: _bindgen_ty_50 = 1;
pub const NET_IPV6_HOP_LIMIT: _bindgen_ty_50 = 2;
pub const NET_IPV6_MTU: _bindgen_ty_50 = 3;
pub const NET_IPV6_ACCEPT_RA: _bindgen_ty_50 = 4;
pub const NET_IPV6_ACCEPT_REDIRECTS: _bindgen_ty_50 = 5;
pub const NET_IPV6_AUTOCONF: _bindgen_ty_50 = 6;
pub const NET_IPV6_DAD_TRANSMITS: _bindgen_ty_50 = 7;
pub const NET_IPV6_RTR_SOLICITS: _bindgen_ty_50 = 8;
pub const NET_IPV6_RTR_SOLICIT_INTERVAL: _bindgen_ty_50 = 9;
pub const NET_IPV6_RTR_SOLICIT_DELAY: _bindgen_ty_50 = 10;
pub const NET_IPV6_USE_TEMPADDR: _bindgen_ty_50 = 11;
pub const NET_IPV6_TEMP_VALID_LFT: _bindgen_ty_50 = 12;
pub const NET_IPV6_TEMP_PREFERED_LFT: _bindgen_ty_50 = 13;
pub const NET_IPV6_REGEN_MAX_RETRY: _bindgen_ty_50 = 14;
pub const NET_IPV6_MAX_DESYNC_FACTOR: _bindgen_ty_50 = 15;
pub const NET_IPV6_MAX_ADDRESSES: _bindgen_ty_50 = 16;
pub const NET_IPV6_FORCE_MLD_VERSION: _bindgen_ty_50 = 17;
pub const NET_IPV6_ACCEPT_RA_DEFRTR: _bindgen_ty_50 = 18;
pub const NET_IPV6_ACCEPT_RA_PINFO: _bindgen_ty_50 = 19;
pub const NET_IPV6_ACCEPT_RA_RTR_PREF: _bindgen_ty_50 = 20;
pub const NET_IPV6_RTR_PROBE_INTERVAL: _bindgen_ty_50 = 21;
pub const NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN: _bindgen_ty_50 = 22;
pub const NET_IPV6_PROXY_NDP: _bindgen_ty_50 = 23;
pub const NET_IPV6_ACCEPT_SOURCE_ROUTE: _bindgen_ty_50 = 25;
pub const NET_IPV6_ACCEPT_RA_FROM_LOCAL: _bindgen_ty_50 = 26;
pub const NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN: _bindgen_ty_50 = 27;
pub const NET_IPV6_RA_DEFRTR_METRIC: _bindgen_ty_50 = 28;
pub const __NET_IPV6_MAX: _bindgen_ty_50 = 29;
pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
pub const NET_IPV6_ICMP_RATELIMIT: _bindgen_ty_51 = 1;
pub const NET_IPV6_ICMP_ECHO_IGNORE_ALL: _bindgen_ty_51 = 2;
pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
pub const NET_NEIGH_MCAST_SOLICIT: _bindgen_ty_52 = 1;
pub const NET_NEIGH_UCAST_SOLICIT: _bindgen_ty_52 = 2;
pub const NET_NEIGH_APP_SOLICIT: _bindgen_ty_52 = 3;
pub const NET_NEIGH_RETRANS_TIME: _bindgen_ty_52 = 4;
pub const NET_NEIGH_REACHABLE_TIME: _bindgen_ty_52 = 5;
pub const NET_NEIGH_DELAY_PROBE_TIME: _bindgen_ty_52 = 6;
pub const NET_NEIGH_GC_STALE_TIME: _bindgen_ty_52 = 7;
pub const NET_NEIGH_UNRES_QLEN: _bindgen_ty_52 = 8;
pub const NET_NEIGH_PROXY_QLEN: _bindgen_ty_52 = 9;
pub const NET_NEIGH_ANYCAST_DELAY: _bindgen_ty_52 = 10;
pub const NET_NEIGH_PROXY_DELAY: _bindgen_ty_52 = 11;
pub const NET_NEIGH_LOCKTIME: _bindgen_ty_52 = 12;
pub const NET_NEIGH_GC_INTERVAL: _bindgen_ty_52 = 13;
pub const NET_NEIGH_GC_THRESH1: _bindgen_ty_52 = 14;
pub const NET_NEIGH_GC_THRESH2: _bindgen_ty_52 = 15;
pub const NET_NEIGH_GC_THRESH3: _bindgen_ty_52 = 16;
pub const NET_NEIGH_RETRANS_TIME_MS: _bindgen_ty_52 = 17;
pub const NET_NEIGH_REACHABLE_TIME_MS: _bindgen_ty_52 = 18;
pub const NET_NEIGH_INTERVAL_PROBE_TIME_MS: _bindgen_ty_52 = 19;
pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
pub const NET_DCCP_DEFAULT: _bindgen_ty_53 = 1;
pub type _bindgen_ty_53 = ::std::os::raw::c_uint;
pub const NET_IPX_PPROP_BROADCASTING: _bindgen_ty_54 = 1;
pub const NET_IPX_FORWARDING: _bindgen_ty_54 = 2;
pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
pub const NET_LLC2: _bindgen_ty_55 = 1;
pub const NET_LLC_STATION: _bindgen_ty_55 = 2;
pub type _bindgen_ty_55 = ::std::os::raw::c_uint;
pub const NET_LLC2_TIMEOUT: _bindgen_ty_56 = 1;
pub type _bindgen_ty_56 = ::std::os::raw::c_uint;
pub const NET_LLC_STATION_ACK_TIMEOUT: _bindgen_ty_57 = 1;
pub type _bindgen_ty_57 = ::std::os::raw::c_uint;
pub const NET_LLC2_ACK_TIMEOUT: _bindgen_ty_58 = 1;
pub const NET_LLC2_P_TIMEOUT: _bindgen_ty_58 = 2;
pub const NET_LLC2_REJ_TIMEOUT: _bindgen_ty_58 = 3;
pub const NET_LLC2_BUSY_TIMEOUT: _bindgen_ty_58 = 4;
pub type _bindgen_ty_58 = ::std::os::raw::c_uint;
pub const NET_ATALK_AARP_EXPIRY_TIME: _bindgen_ty_59 = 1;
pub const NET_ATALK_AARP_TICK_TIME: _bindgen_ty_59 = 2;
pub const NET_ATALK_AARP_RETRANSMIT_LIMIT: _bindgen_ty_59 = 3;
pub const NET_ATALK_AARP_RESOLVE_TIME: _bindgen_ty_59 = 4;
pub type _bindgen_ty_59 = ::std::os::raw::c_uint;
pub const NET_NETROM_DEFAULT_PATH_QUALITY: _bindgen_ty_60 = 1;
pub const NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER: _bindgen_ty_60 = 2;
pub const NET_NETROM_NETWORK_TTL_INITIALISER: _bindgen_ty_60 = 3;
pub const NET_NETROM_TRANSPORT_TIMEOUT: _bindgen_ty_60 = 4;
pub const NET_NETROM_TRANSPORT_MAXIMUM_TRIES: _bindgen_ty_60 = 5;
pub const NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY: _bindgen_ty_60 = 6;
pub const NET_NETROM_TRANSPORT_BUSY_DELAY: _bindgen_ty_60 = 7;
pub const NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE: _bindgen_ty_60 = 8;
pub const NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT: _bindgen_ty_60 = 9;
pub const NET_NETROM_ROUTING_CONTROL: _bindgen_ty_60 = 10;
pub const NET_NETROM_LINK_FAILS_COUNT: _bindgen_ty_60 = 11;
pub const NET_NETROM_RESET: _bindgen_ty_60 = 12;
pub type _bindgen_ty_60 = ::std::os::raw::c_uint;
pub const NET_AX25_IP_DEFAULT_MODE: _bindgen_ty_61 = 1;
pub const NET_AX25_DEFAULT_MODE: _bindgen_ty_61 = 2;
pub const NET_AX25_BACKOFF_TYPE: _bindgen_ty_61 = 3;
pub const NET_AX25_CONNECT_MODE: _bindgen_ty_61 = 4;
pub const NET_AX25_STANDARD_WINDOW: _bindgen_ty_61 = 5;
pub const NET_AX25_EXTENDED_WINDOW: _bindgen_ty_61 = 6;
pub const NET_AX25_T1_TIMEOUT: _bindgen_ty_61 = 7;
pub const NET_AX25_T2_TIMEOUT: _bindgen_ty_61 = 8;
pub const NET_AX25_T3_TIMEOUT: _bindgen_ty_61 = 9;
pub const NET_AX25_IDLE_TIMEOUT: _bindgen_ty_61 = 10;
pub const NET_AX25_N2: _bindgen_ty_61 = 11;
pub const NET_AX25_PACLEN: _bindgen_ty_61 = 12;
pub const NET_AX25_PROTOCOL: _bindgen_ty_61 = 13;
pub const NET_AX25_DAMA_SLAVE_TIMEOUT: _bindgen_ty_61 = 14;
pub type _bindgen_ty_61 = ::std::os::raw::c_uint;
pub const NET_ROSE_RESTART_REQUEST_TIMEOUT: _bindgen_ty_62 = 1;
pub const NET_ROSE_CALL_REQUEST_TIMEOUT: _bindgen_ty_62 = 2;
pub const NET_ROSE_RESET_REQUEST_TIMEOUT: _bindgen_ty_62 = 3;
pub const NET_ROSE_CLEAR_REQUEST_TIMEOUT: _bindgen_ty_62 = 4;
pub const NET_ROSE_ACK_HOLD_BACK_TIMEOUT: _bindgen_ty_62 = 5;
pub const NET_ROSE_ROUTING_CONTROL: _bindgen_ty_62 = 6;
pub const NET_ROSE_LINK_FAIL_TIMEOUT: _bindgen_ty_62 = 7;
pub const NET_ROSE_MAX_VCS: _bindgen_ty_62 = 8;
pub const NET_ROSE_WINDOW_SIZE: _bindgen_ty_62 = 9;
pub const NET_ROSE_NO_ACTIVITY_TIMEOUT: _bindgen_ty_62 = 10;
pub type _bindgen_ty_62 = ::std::os::raw::c_uint;
pub const NET_X25_RESTART_REQUEST_TIMEOUT: _bindgen_ty_63 = 1;
pub const NET_X25_CALL_REQUEST_TIMEOUT: _bindgen_ty_63 = 2;
pub const NET_X25_RESET_REQUEST_TIMEOUT: _bindgen_ty_63 = 3;
pub const NET_X25_CLEAR_REQUEST_TIMEOUT: _bindgen_ty_63 = 4;
pub const NET_X25_ACK_HOLD_BACK_TIMEOUT: _bindgen_ty_63 = 5;
pub const NET_X25_FORWARD: _bindgen_ty_63 = 6;
pub type _bindgen_ty_63 = ::std::os::raw::c_uint;
pub const NET_TR_RIF_TIMEOUT: _bindgen_ty_64 = 1;
pub type _bindgen_ty_64 = ::std::os::raw::c_uint;
pub const NET_DECNET_NODE_TYPE: _bindgen_ty_65 = 1;
pub const NET_DECNET_NODE_ADDRESS: _bindgen_ty_65 = 2;
pub const NET_DECNET_NODE_NAME: _bindgen_ty_65 = 3;
pub const NET_DECNET_DEFAULT_DEVICE: _bindgen_ty_65 = 4;
pub const NET_DECNET_TIME_WAIT: _bindgen_ty_65 = 5;
pub const NET_DECNET_DN_COUNT: _bindgen_ty_65 = 6;
pub const NET_DECNET_DI_COUNT: _bindgen_ty_65 = 7;
pub const NET_DECNET_DR_COUNT: _bindgen_ty_65 = 8;
pub const NET_DECNET_DST_GC_INTERVAL: _bindgen_ty_65 = 9;
pub const NET_DECNET_CONF: _bindgen_ty_65 = 10;
pub const NET_DECNET_NO_FC_MAX_CWND: _bindgen_ty_65 = 11;
pub const NET_DECNET_MEM: _bindgen_ty_65 = 12;
pub const NET_DECNET_RMEM: _bindgen_ty_65 = 13;
pub const NET_DECNET_WMEM: _bindgen_ty_65 = 14;
pub const NET_DECNET_DEBUG_LEVEL: _bindgen_ty_65 = 255;
pub type _bindgen_ty_65 = ::std::os::raw::c_uint;
pub const NET_DECNET_CONF_LOOPBACK: _bindgen_ty_66 = -2;
pub const NET_DECNET_CONF_DDCMP: _bindgen_ty_66 = -3;
pub const NET_DECNET_CONF_PPP: _bindgen_ty_66 = -4;
pub const NET_DECNET_CONF_X25: _bindgen_ty_66 = -5;
pub const NET_DECNET_CONF_GRE: _bindgen_ty_66 = -6;
pub const NET_DECNET_CONF_ETHER: _bindgen_ty_66 = -7;
pub type _bindgen_ty_66 = ::std::os::raw::c_int;
pub const NET_DECNET_CONF_DEV_PRIORITY: _bindgen_ty_67 = 1;
pub const NET_DECNET_CONF_DEV_T1: _bindgen_ty_67 = 2;
pub const NET_DECNET_CONF_DEV_T2: _bindgen_ty_67 = 3;
pub const NET_DECNET_CONF_DEV_T3: _bindgen_ty_67 = 4;
pub const NET_DECNET_CONF_DEV_FORWARDING: _bindgen_ty_67 = 5;
pub const NET_DECNET_CONF_DEV_BLKSIZE: _bindgen_ty_67 = 6;
pub const NET_DECNET_CONF_DEV_STATE: _bindgen_ty_67 = 7;
pub type _bindgen_ty_67 = ::std::os::raw::c_uint;
pub const NET_SCTP_RTO_INITIAL: _bindgen_ty_68 = 1;
pub const NET_SCTP_RTO_MIN: _bindgen_ty_68 = 2;
pub const NET_SCTP_RTO_MAX: _bindgen_ty_68 = 3;
pub const NET_SCTP_RTO_ALPHA: _bindgen_ty_68 = 4;
pub const NET_SCTP_RTO_BETA: _bindgen_ty_68 = 5;
pub const NET_SCTP_VALID_COOKIE_LIFE: _bindgen_ty_68 = 6;
pub const NET_SCTP_ASSOCIATION_MAX_RETRANS: _bindgen_ty_68 = 7;
pub const NET_SCTP_PATH_MAX_RETRANS: _bindgen_ty_68 = 8;
pub const NET_SCTP_MAX_INIT_RETRANSMITS: _bindgen_ty_68 = 9;
pub const NET_SCTP_HB_INTERVAL: _bindgen_ty_68 = 10;
pub const NET_SCTP_PRESERVE_ENABLE: _bindgen_ty_68 = 11;
pub const NET_SCTP_MAX_BURST: _bindgen_ty_68 = 12;
pub const NET_SCTP_ADDIP_ENABLE: _bindgen_ty_68 = 13;
pub const NET_SCTP_PRSCTP_ENABLE: _bindgen_ty_68 = 14;
pub const NET_SCTP_SNDBUF_POLICY: _bindgen_ty_68 = 15;
pub const NET_SCTP_SACK_TIMEOUT: _bindgen_ty_68 = 16;
pub const NET_SCTP_RCVBUF_POLICY: _bindgen_ty_68 = 17;
pub type _bindgen_ty_68 = ::std::os::raw::c_uint;
pub const NET_BRIDGE_NF_CALL_ARPTABLES: _bindgen_ty_69 = 1;
pub const NET_BRIDGE_NF_CALL_IPTABLES: _bindgen_ty_69 = 2;
pub const NET_BRIDGE_NF_CALL_IP6TABLES: _bindgen_ty_69 = 3;
pub const NET_BRIDGE_NF_FILTER_VLAN_TAGGED: _bindgen_ty_69 = 4;
pub const NET_BRIDGE_NF_FILTER_PPPOE_TAGGED: _bindgen_ty_69 = 5;
pub type _bindgen_ty_69 = ::std::os::raw::c_uint;
pub const FS_NRINODE: _bindgen_ty_70 = 1;
pub const FS_STATINODE: _bindgen_ty_70 = 2;
pub const FS_MAXINODE: _bindgen_ty_70 = 3;
pub const FS_NRDQUOT: _bindgen_ty_70 = 4;
pub const FS_MAXDQUOT: _bindgen_ty_70 = 5;
pub const FS_NRFILE: _bindgen_ty_70 = 6;
pub const FS_MAXFILE: _bindgen_ty_70 = 7;
pub const FS_DENTRY: _bindgen_ty_70 = 8;
pub const FS_NRSUPER: _bindgen_ty_70 = 9;
pub const FS_MAXSUPER: _bindgen_ty_70 = 10;
pub const FS_OVERFLOWUID: _bindgen_ty_70 = 11;
pub const FS_OVERFLOWGID: _bindgen_ty_70 = 12;
pub const FS_LEASES: _bindgen_ty_70 = 13;
pub const FS_DIR_NOTIFY: _bindgen_ty_70 = 14;
pub const FS_LEASE_TIME: _bindgen_ty_70 = 15;
pub const FS_DQSTATS: _bindgen_ty_70 = 16;
pub const FS_XFS: _bindgen_ty_70 = 17;
pub const FS_AIO_NR: _bindgen_ty_70 = 18;
pub const FS_AIO_MAX_NR: _bindgen_ty_70 = 19;
pub const FS_INOTIFY: _bindgen_ty_70 = 20;
pub const FS_OCFS2: _bindgen_ty_70 = 988;
pub type _bindgen_ty_70 = ::std::os::raw::c_uint;
pub const FS_DQ_LOOKUPS: _bindgen_ty_71 = 1;
pub const FS_DQ_DROPS: _bindgen_ty_71 = 2;
pub const FS_DQ_READS: _bindgen_ty_71 = 3;
pub const FS_DQ_WRITES: _bindgen_ty_71 = 4;
pub const FS_DQ_CACHE_HITS: _bindgen_ty_71 = 5;
pub const FS_DQ_ALLOCATED: _bindgen_ty_71 = 6;
pub const FS_DQ_FREE: _bindgen_ty_71 = 7;
pub const FS_DQ_SYNCS: _bindgen_ty_71 = 8;
pub const FS_DQ_WARNINGS: _bindgen_ty_71 = 9;
pub type _bindgen_ty_71 = ::std::os::raw::c_uint;
pub const DEV_CDROM: _bindgen_ty_72 = 1;
pub const DEV_HWMON: _bindgen_ty_72 = 2;
pub const DEV_PARPORT: _bindgen_ty_72 = 3;
pub const DEV_RAID: _bindgen_ty_72 = 4;
pub const DEV_MAC_HID: _bindgen_ty_72 = 5;
pub const DEV_SCSI: _bindgen_ty_72 = 6;
pub const DEV_IPMI: _bindgen_ty_72 = 7;
pub type _bindgen_ty_72 = ::std::os::raw::c_uint;
pub const DEV_CDROM_INFO: _bindgen_ty_73 = 1;
pub const DEV_CDROM_AUTOCLOSE: _bindgen_ty_73 = 2;
pub const DEV_CDROM_AUTOEJECT: _bindgen_ty_73 = 3;
pub const DEV_CDROM_DEBUG: _bindgen_ty_73 = 4;
pub const DEV_CDROM_LOCK: _bindgen_ty_73 = 5;
pub const DEV_CDROM_CHECK_MEDIA: _bindgen_ty_73 = 6;
pub type _bindgen_ty_73 = ::std::os::raw::c_uint;
pub const DEV_PARPORT_DEFAULT: _bindgen_ty_74 = -3;
pub type _bindgen_ty_74 = ::std::os::raw::c_int;
pub const DEV_RAID_SPEED_LIMIT_MIN: _bindgen_ty_75 = 1;
pub const DEV_RAID_SPEED_LIMIT_MAX: _bindgen_ty_75 = 2;
pub type _bindgen_ty_75 = ::std::os::raw::c_uint;
pub const DEV_PARPORT_DEFAULT_TIMESLICE: _bindgen_ty_76 = 1;
pub const DEV_PARPORT_DEFAULT_SPINTIME: _bindgen_ty_76 = 2;
pub type _bindgen_ty_76 = ::std::os::raw::c_uint;
pub const DEV_PARPORT_SPINTIME: _bindgen_ty_77 = 1;
pub const DEV_PARPORT_BASE_ADDR: _bindgen_ty_77 = 2;
pub const DEV_PARPORT_IRQ: _bindgen_ty_77 = 3;
pub const DEV_PARPORT_DMA: _bindgen_ty_77 = 4;
pub const DEV_PARPORT_MODES: _bindgen_ty_77 = 5;
pub const DEV_PARPORT_DEVICES: _bindgen_ty_77 = 6;
pub const DEV_PARPORT_AUTOPROBE: _bindgen_ty_77 = 16;
pub type _bindgen_ty_77 = ::std::os::raw::c_uint;
pub const DEV_PARPORT_DEVICES_ACTIVE: _bindgen_ty_78 = -3;
pub type _bindgen_ty_78 = ::std::os::raw::c_int;
pub const DEV_PARPORT_DEVICE_TIMESLICE: _bindgen_ty_79 = 1;
pub type _bindgen_ty_79 = ::std::os::raw::c_uint;
pub const DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES: _bindgen_ty_80 = 1;
pub const DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES: _bindgen_ty_80 = 2;
pub const DEV_MAC_HID_MOUSE_BUTTON_EMULATION: _bindgen_ty_80 = 3;
pub const DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE: _bindgen_ty_80 = 4;
pub const DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE: _bindgen_ty_80 = 5;
pub const DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES: _bindgen_ty_80 = 6;
pub type _bindgen_ty_80 = ::std::os::raw::c_uint;
pub const DEV_SCSI_LOGGING_LEVEL: _bindgen_ty_81 = 1;
pub type _bindgen_ty_81 = ::std::os::raw::c_uint;
pub const DEV_IPMI_POWEROFF_POWERCYCLE: _bindgen_ty_82 = 1;
pub type _bindgen_ty_82 = ::std::os::raw::c_uint;
pub const ABI_DEFHANDLER_COFF: _bindgen_ty_83 = 1;
pub const ABI_DEFHANDLER_ELF: _bindgen_ty_83 = 2;
pub const ABI_DEFHANDLER_LCALL7: _bindgen_ty_83 = 3;
pub const ABI_DEFHANDLER_LIBCSO: _bindgen_ty_83 = 4;
pub const ABI_TRACE: _bindgen_ty_83 = 5;
pub const ABI_FAKE_UTSNAME: _bindgen_ty_83 = 6;
pub type _bindgen_ty_83 = ::std::os::raw::c_uint;
extern "C" {
    pub static sysctl_vals: [::std::os::raw::c_int; 0usize];
}
extern "C" {
    pub static sysctl_long_vals: [::std::os::raw::c_ulong; 0usize];
}
pub type proc_handler = ::std::option::Option<
    unsafe extern "C" fn(
        ctl: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn proc_dostring(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dobool(
        table: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dointvec(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_douintvec(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dointvec_minmax(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_douintvec_minmax(
        table: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dou8vec_minmax(
        table: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dointvec_jiffies(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dointvec_ms_jiffies_minmax(
        table: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dointvec_userhz_jiffies(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_dointvec_ms_jiffies(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_doulongvec_minmax(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_doulongvec_ms_jiffies_minmax(
        table: *const ctl_table,
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_do_large_bitmap(
        arg1: *const ctl_table,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_do_static_key(
        table: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_poll {
    pub event: atomic_t,
    pub wait: wait_queue_head_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_poll"][::std::mem::size_of::<ctl_table_poll>() - 32usize];
    ["Alignment of ctl_table_poll"][::std::mem::align_of::<ctl_table_poll>() - 8usize];
    ["Offset of field: ctl_table_poll::event"]
        [::std::mem::offset_of!(ctl_table_poll, event) - 0usize];
    ["Offset of field: ctl_table_poll::wait"]
        [::std::mem::offset_of!(ctl_table_poll, wait) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_table {
    pub procname: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub maxlen: ::std::os::raw::c_int,
    pub mode: umode_t,
    pub proc_handler: proc_handler,
    pub poll: *mut ctl_table_poll,
    pub extra1: *mut ::std::os::raw::c_void,
    pub extra2: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table"][::std::mem::size_of::<ctl_table>() - 56usize];
    ["Alignment of ctl_table"][::std::mem::align_of::<ctl_table>() - 8usize];
    ["Offset of field: ctl_table::procname"][::std::mem::offset_of!(ctl_table, procname) - 0usize];
    ["Offset of field: ctl_table::data"][::std::mem::offset_of!(ctl_table, data) - 8usize];
    ["Offset of field: ctl_table::maxlen"][::std::mem::offset_of!(ctl_table, maxlen) - 16usize];
    ["Offset of field: ctl_table::mode"][::std::mem::offset_of!(ctl_table, mode) - 20usize];
    ["Offset of field: ctl_table::proc_handler"]
        [::std::mem::offset_of!(ctl_table, proc_handler) - 24usize];
    ["Offset of field: ctl_table::poll"][::std::mem::offset_of!(ctl_table, poll) - 32usize];
    ["Offset of field: ctl_table::extra1"][::std::mem::offset_of!(ctl_table, extra1) - 40usize];
    ["Offset of field: ctl_table::extra2"][::std::mem::offset_of!(ctl_table, extra2) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_node {
    pub node: rb_node,
    pub header: *mut ctl_table_header,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_node"][::std::mem::size_of::<ctl_node>() - 32usize];
    ["Alignment of ctl_node"][::std::mem::align_of::<ctl_node>() - 8usize];
    ["Offset of field: ctl_node::node"][::std::mem::offset_of!(ctl_node, node) - 0usize];
    ["Offset of field: ctl_node::header"][::std::mem::offset_of!(ctl_node, header) - 24usize];
};
#[doc = " struct ctl_table_header - maintains dynamic lists of struct ctl_table trees\n @ctl_table: pointer to the first element in ctl_table array\n @ctl_table_size: number of elements pointed by @ctl_table\n @used: The entry will never be touched when equal to 0.\n @count: Upped every time something is added to @inodes and downed every time\n         something is removed from inodes\n @nreg: When nreg drops to 0 the ctl_table_header will be unregistered.\n @rcu: Delays the freeing of the inode. Introduced with \"unfuck proc_sysctl ->d_compare()\"\n"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_header {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1,
    pub unregistering: *mut completion,
    pub ctl_table_arg: *const ctl_table,
    pub root: *mut ctl_table_root,
    pub set: *mut ctl_table_set,
    pub parent: *mut ctl_dir,
    pub node: *mut ctl_node,
    pub inodes: hlist_head,
    pub type_: ctl_table_header__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ctl_table_header__bindgen_ty_1 {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1__bindgen_ty_1,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_table_header__bindgen_ty_1__bindgen_ty_1 {
    pub ctl_table: *mut ctl_table,
    pub ctl_table_size: ::std::os::raw::c_int,
    pub used: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub nreg: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_header__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ctl_table_header__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of ctl_table_header__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ctl_table_header__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::ctl_table"]
        [::std::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, ctl_table) - 0usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::ctl_table_size"][::std::mem::offset_of!(
        ctl_table_header__bindgen_ty_1__bindgen_ty_1,
        ctl_table_size
    ) - 8usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::used"]
        [::std::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, used) - 12usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, count) - 16usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::nreg"]
        [::std::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, nreg) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_header__bindgen_ty_1"]
        [::std::mem::size_of::<ctl_table_header__bindgen_ty_1>() - 24usize];
    ["Alignment of ctl_table_header__bindgen_ty_1"]
        [::std::mem::align_of::<ctl_table_header__bindgen_ty_1>() - 8usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1::rcu"]
        [::std::mem::offset_of!(ctl_table_header__bindgen_ty_1, rcu) - 0usize];
};
pub const ctl_table_header_SYSCTL_TABLE_TYPE_DEFAULT: ctl_table_header__bindgen_ty_2 = 0;
pub const ctl_table_header_SYSCTL_TABLE_TYPE_PERMANENTLY_EMPTY: ctl_table_header__bindgen_ty_2 = 1;
#[doc = " enum type - Enumeration to differentiate between ctl target types\n @SYSCTL_TABLE_TYPE_DEFAULT: ctl target with no special considerations\n @SYSCTL_TABLE_TYPE_PERMANENTLY_EMPTY: Used to identify a permanently\n                                       empty directory target to serve\n                                       as mount point."]
pub type ctl_table_header__bindgen_ty_2 = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_header"][::std::mem::size_of::<ctl_table_header>() - 88usize];
    ["Alignment of ctl_table_header"][::std::mem::align_of::<ctl_table_header>() - 8usize];
    ["Offset of field: ctl_table_header::unregistering"]
        [::std::mem::offset_of!(ctl_table_header, unregistering) - 24usize];
    ["Offset of field: ctl_table_header::ctl_table_arg"]
        [::std::mem::offset_of!(ctl_table_header, ctl_table_arg) - 32usize];
    ["Offset of field: ctl_table_header::root"]
        [::std::mem::offset_of!(ctl_table_header, root) - 40usize];
    ["Offset of field: ctl_table_header::set"]
        [::std::mem::offset_of!(ctl_table_header, set) - 48usize];
    ["Offset of field: ctl_table_header::parent"]
        [::std::mem::offset_of!(ctl_table_header, parent) - 56usize];
    ["Offset of field: ctl_table_header::node"]
        [::std::mem::offset_of!(ctl_table_header, node) - 64usize];
    ["Offset of field: ctl_table_header::inodes"]
        [::std::mem::offset_of!(ctl_table_header, inodes) - 72usize];
    ["Offset of field: ctl_table_header::type_"]
        [::std::mem::offset_of!(ctl_table_header, type_) - 80usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_dir {
    pub header: ctl_table_header,
    pub root: rb_root,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_dir"][::std::mem::size_of::<ctl_dir>() - 96usize];
    ["Alignment of ctl_dir"][::std::mem::align_of::<ctl_dir>() - 8usize];
    ["Offset of field: ctl_dir::header"][::std::mem::offset_of!(ctl_dir, header) - 0usize];
    ["Offset of field: ctl_dir::root"][::std::mem::offset_of!(ctl_dir, root) - 88usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_set {
    pub is_seen: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ctl_table_set) -> ::std::os::raw::c_int,
    >,
    pub dir: ctl_dir,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_set"][::std::mem::size_of::<ctl_table_set>() - 104usize];
    ["Alignment of ctl_table_set"][::std::mem::align_of::<ctl_table_set>() - 8usize];
    ["Offset of field: ctl_table_set::is_seen"]
        [::std::mem::offset_of!(ctl_table_set, is_seen) - 0usize];
    ["Offset of field: ctl_table_set::dir"][::std::mem::offset_of!(ctl_table_set, dir) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_root {
    pub default_set: ctl_table_set,
    pub lookup: ::std::option::Option<
        unsafe extern "C" fn(root: *mut ctl_table_root) -> *mut ctl_table_set,
    >,
    pub set_ownership: ::std::option::Option<
        unsafe extern "C" fn(head: *mut ctl_table_header, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
    pub permissions: ::std::option::Option<
        unsafe extern "C" fn(
            head: *mut ctl_table_header,
            table: *const ctl_table,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_root"][::std::mem::size_of::<ctl_table_root>() - 128usize];
    ["Alignment of ctl_table_root"][::std::mem::align_of::<ctl_table_root>() - 8usize];
    ["Offset of field: ctl_table_root::default_set"]
        [::std::mem::offset_of!(ctl_table_root, default_set) - 0usize];
    ["Offset of field: ctl_table_root::lookup"]
        [::std::mem::offset_of!(ctl_table_root, lookup) - 104usize];
    ["Offset of field: ctl_table_root::set_ownership"]
        [::std::mem::offset_of!(ctl_table_root, set_ownership) - 112usize];
    ["Offset of field: ctl_table_root::permissions"]
        [::std::mem::offset_of!(ctl_table_root, permissions) - 120usize];
};
extern "C" {
    pub fn proc_sys_poll_notify(poll: *mut ctl_table_poll);
}
extern "C" {
    pub fn setup_sysctl_set(
        p: *mut ctl_table_set,
        root: *mut ctl_table_root,
        is_seen: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ctl_table_set) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn retire_sysctl_set(set: *mut ctl_table_set);
}
extern "C" {
    pub fn __register_sysctl_table(
        set: *mut ctl_table_set,
        path: *const ::std::os::raw::c_char,
        table: *mut ctl_table,
        table_size: usize,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn register_sysctl_sz(
        path: *const ::std::os::raw::c_char,
        table: *mut ctl_table,
        table_size: usize,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn unregister_sysctl_table(table: *mut ctl_table_header);
}
extern "C" {
    pub fn sysctl_init_bases() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __register_sysctl_init(
        path: *const ::std::os::raw::c_char,
        table: *mut ctl_table,
        table_name: *const ::std::os::raw::c_char,
        table_size: usize,
    );
}
extern "C" {
    pub fn register_sysctl_mount_point(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn do_sysctl_args();
}
extern "C" {
    pub fn sysctl_is_alias(param: *mut ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    pub fn do_proc_douintvec(
        table: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
        conv: ::std::option::Option<
            unsafe extern "C" fn(
                lvalp: *mut ::std::os::raw::c_ulong,
                valp: *mut ::std::os::raw::c_uint,
                write: ::std::os::raw::c_int,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut pwrsw_enabled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut unaligned_enabled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut unaligned_dump_stack: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_unaligned_warning: ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctl_max_threads(
        table: *const ctl_table,
        write: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subprocess_info {
    pub work: work_struct,
    pub complete: *mut completion,
    pub path: *const ::std::os::raw::c_char,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub envp: *mut *mut ::std::os::raw::c_char,
    pub wait: ::std::os::raw::c_int,
    pub retval: ::std::os::raw::c_int,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(info: *mut subprocess_info, new: *mut cred) -> ::std::os::raw::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(info: *mut subprocess_info)>,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of subprocess_info"][::std::mem::size_of::<subprocess_info>() - 96usize];
    ["Alignment of subprocess_info"][::std::mem::align_of::<subprocess_info>() - 8usize];
    ["Offset of field: subprocess_info::work"]
        [::std::mem::offset_of!(subprocess_info, work) - 0usize];
    ["Offset of field: subprocess_info::complete"]
        [::std::mem::offset_of!(subprocess_info, complete) - 32usize];
    ["Offset of field: subprocess_info::path"]
        [::std::mem::offset_of!(subprocess_info, path) - 40usize];
    ["Offset of field: subprocess_info::argv"]
        [::std::mem::offset_of!(subprocess_info, argv) - 48usize];
    ["Offset of field: subprocess_info::envp"]
        [::std::mem::offset_of!(subprocess_info, envp) - 56usize];
    ["Offset of field: subprocess_info::wait"]
        [::std::mem::offset_of!(subprocess_info, wait) - 64usize];
    ["Offset of field: subprocess_info::retval"]
        [::std::mem::offset_of!(subprocess_info, retval) - 68usize];
    ["Offset of field: subprocess_info::init"]
        [::std::mem::offset_of!(subprocess_info, init) - 72usize];
    ["Offset of field: subprocess_info::cleanup"]
        [::std::mem::offset_of!(subprocess_info, cleanup) - 80usize];
    ["Offset of field: subprocess_info::data"]
        [::std::mem::offset_of!(subprocess_info, data) - 88usize];
};
extern "C" {
    pub fn call_usermodehelper(
        path: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        envp: *mut *mut ::std::os::raw::c_char,
        wait: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_usermodehelper_setup(
        path: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        envp: *mut *mut ::std::os::raw::c_char,
        gfp_mask: gfp_t,
        init: ::std::option::Option<
            unsafe extern "C" fn(
                info: *mut subprocess_info,
                new: *mut cred,
            ) -> ::std::os::raw::c_int,
        >,
        cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut subprocess_info)>,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut subprocess_info;
}
extern "C" {
    pub fn call_usermodehelper_exec(
        info: *mut subprocess_info,
        wait: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const umh_disable_depth_UMH_ENABLED: umh_disable_depth = 0;
pub const umh_disable_depth_UMH_FREEZING: umh_disable_depth = 1;
pub const umh_disable_depth_UMH_DISABLED: umh_disable_depth = 2;
pub type umh_disable_depth = ::std::os::raw::c_uint;
extern "C" {
    pub fn __usermodehelper_disable(depth: umh_disable_depth) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __usermodehelper_set_disable_depth(depth: umh_disable_depth);
}
extern "C" {
    pub fn usermodehelper_read_trylock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usermodehelper_read_lock_wait(timeout: ::std::os::raw::c_long)
        -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn usermodehelper_read_unlock();
}
extern "C" {
    pub static mut modprobe_path: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn __request_module(
        wait: bool_,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rhash_head {
    pub next: *mut rhash_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhash_head"][::std::mem::size_of::<rhash_head>() - 8usize];
    ["Alignment of rhash_head"][::std::mem::align_of::<rhash_head>() - 8usize];
    ["Offset of field: rhash_head::next"][::std::mem::offset_of!(rhash_head, next) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rhlist_head {
    pub rhead: rhash_head,
    pub next: *mut rhlist_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhlist_head"][::std::mem::size_of::<rhlist_head>() - 16usize];
    ["Alignment of rhlist_head"][::std::mem::align_of::<rhlist_head>() - 8usize];
    ["Offset of field: rhlist_head::rhead"][::std::mem::offset_of!(rhlist_head, rhead) - 0usize];
    ["Offset of field: rhlist_head::next"][::std::mem::offset_of!(rhlist_head, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bucket_table {
    _unused: [u8; 0],
}
#[doc = " struct rhashtable_compare_arg - Key for the function rhashtable_compare\n @ht: Hash table\n @key: Key to compare against"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rhashtable_compare_arg {
    pub ht: *mut rhashtable,
    pub key: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhashtable_compare_arg"][::std::mem::size_of::<rhashtable_compare_arg>() - 16usize];
    ["Alignment of rhashtable_compare_arg"]
        [::std::mem::align_of::<rhashtable_compare_arg>() - 8usize];
    ["Offset of field: rhashtable_compare_arg::ht"]
        [::std::mem::offset_of!(rhashtable_compare_arg, ht) - 0usize];
    ["Offset of field: rhashtable_compare_arg::key"]
        [::std::mem::offset_of!(rhashtable_compare_arg, key) - 8usize];
};
pub type rht_hashfn_t = ::std::option::Option<
    unsafe extern "C" fn(data: *const ::std::os::raw::c_void, len: u32_, seed: u32_) -> u32_,
>;
pub type rht_obj_hashfn_t = ::std::option::Option<
    unsafe extern "C" fn(data: *const ::std::os::raw::c_void, len: u32_, seed: u32_) -> u32_,
>;
pub type rht_obj_cmpfn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg: *mut rhashtable_compare_arg,
        obj: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " struct rhashtable_params - Hash table construction parameters\n @nelem_hint: Hint on number of elements, should be 75% of desired size\n @key_len: Length of key\n @key_offset: Offset of key in struct to be hashed\n @head_offset: Offset of rhash_head in struct to be hashed\n @max_size: Maximum size while expanding\n @min_size: Minimum size while shrinking\n @automatic_shrinking: Enable automatic shrinking of tables\n @hashfn: Hash function (default: jhash2 if !(key_len % 4), or jhash)\n @obj_hashfn: Function to hash object\n @obj_cmpfn: Function to compare key with object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rhashtable_params {
    pub nelem_hint: u16_,
    pub key_len: u16_,
    pub key_offset: u16_,
    pub head_offset: u16_,
    pub max_size: ::std::os::raw::c_uint,
    pub min_size: u16_,
    pub automatic_shrinking: bool_,
    pub hashfn: rht_hashfn_t,
    pub obj_hashfn: rht_obj_hashfn_t,
    pub obj_cmpfn: rht_obj_cmpfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhashtable_params"][::std::mem::size_of::<rhashtable_params>() - 40usize];
    ["Alignment of rhashtable_params"][::std::mem::align_of::<rhashtable_params>() - 8usize];
    ["Offset of field: rhashtable_params::nelem_hint"]
        [::std::mem::offset_of!(rhashtable_params, nelem_hint) - 0usize];
    ["Offset of field: rhashtable_params::key_len"]
        [::std::mem::offset_of!(rhashtable_params, key_len) - 2usize];
    ["Offset of field: rhashtable_params::key_offset"]
        [::std::mem::offset_of!(rhashtable_params, key_offset) - 4usize];
    ["Offset of field: rhashtable_params::head_offset"]
        [::std::mem::offset_of!(rhashtable_params, head_offset) - 6usize];
    ["Offset of field: rhashtable_params::max_size"]
        [::std::mem::offset_of!(rhashtable_params, max_size) - 8usize];
    ["Offset of field: rhashtable_params::min_size"]
        [::std::mem::offset_of!(rhashtable_params, min_size) - 12usize];
    ["Offset of field: rhashtable_params::automatic_shrinking"]
        [::std::mem::offset_of!(rhashtable_params, automatic_shrinking) - 14usize];
    ["Offset of field: rhashtable_params::hashfn"]
        [::std::mem::offset_of!(rhashtable_params, hashfn) - 16usize];
    ["Offset of field: rhashtable_params::obj_hashfn"]
        [::std::mem::offset_of!(rhashtable_params, obj_hashfn) - 24usize];
    ["Offset of field: rhashtable_params::obj_cmpfn"]
        [::std::mem::offset_of!(rhashtable_params, obj_cmpfn) - 32usize];
};
#[doc = " struct rhashtable - Hash table handle\n @tbl: Bucket table\n @key_len: Key length for hashfn\n @max_elems: Maximum number of elements in table\n @p: Configuration parameters\n @rhlist: True if this is an rhltable\n @run_work: Deferred worker to expand/shrink asynchronously\n @mutex: Mutex to protect current/future table swapping\n @lock: Spin lock to protect walker list\n @nelems: Number of elements in table"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhashtable {
    pub tbl: *mut bucket_table,
    pub key_len: ::std::os::raw::c_uint,
    pub max_elems: ::std::os::raw::c_uint,
    pub p: rhashtable_params,
    pub rhlist: bool_,
    pub run_work: work_struct,
    pub mutex: mutex,
    pub lock: spinlock_t,
    pub nelems: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhashtable"][::std::mem::size_of::<rhashtable>() - 136usize];
    ["Alignment of rhashtable"][::std::mem::align_of::<rhashtable>() - 8usize];
    ["Offset of field: rhashtable::tbl"][::std::mem::offset_of!(rhashtable, tbl) - 0usize];
    ["Offset of field: rhashtable::key_len"][::std::mem::offset_of!(rhashtable, key_len) - 8usize];
    ["Offset of field: rhashtable::max_elems"]
        [::std::mem::offset_of!(rhashtable, max_elems) - 12usize];
    ["Offset of field: rhashtable::p"][::std::mem::offset_of!(rhashtable, p) - 16usize];
    ["Offset of field: rhashtable::rhlist"][::std::mem::offset_of!(rhashtable, rhlist) - 56usize];
    ["Offset of field: rhashtable::run_work"]
        [::std::mem::offset_of!(rhashtable, run_work) - 64usize];
    ["Offset of field: rhashtable::mutex"][::std::mem::offset_of!(rhashtable, mutex) - 96usize];
    ["Offset of field: rhashtable::lock"][::std::mem::offset_of!(rhashtable, lock) - 128usize];
    ["Offset of field: rhashtable::nelems"][::std::mem::offset_of!(rhashtable, nelems) - 132usize];
};
#[doc = " struct rhltable - Hash table with duplicate objects in a list\n @ht: Underlying rhtable"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rhltable {
    pub ht: rhashtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhltable"][::std::mem::size_of::<rhltable>() - 136usize];
    ["Alignment of rhltable"][::std::mem::align_of::<rhltable>() - 8usize];
    ["Offset of field: rhltable::ht"][::std::mem::offset_of!(rhltable, ht) - 0usize];
};
#[doc = " struct rhashtable_walker - Hash table walker\n @list: List entry on list of walkers\n @tbl: The table that we were walking over"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rhashtable_walker {
    pub list: list_head,
    pub tbl: *mut bucket_table,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhashtable_walker"][::std::mem::size_of::<rhashtable_walker>() - 24usize];
    ["Alignment of rhashtable_walker"][::std::mem::align_of::<rhashtable_walker>() - 8usize];
    ["Offset of field: rhashtable_walker::list"]
        [::std::mem::offset_of!(rhashtable_walker, list) - 0usize];
    ["Offset of field: rhashtable_walker::tbl"]
        [::std::mem::offset_of!(rhashtable_walker, tbl) - 16usize];
};
#[doc = " struct rhashtable_iter - Hash table iterator\n @ht: Table to iterate through\n @p: Current pointer\n @list: Current hash list pointer\n @walker: Associated rhashtable walker\n @slot: Current slot\n @skip: Number of entries to skip in slot"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rhashtable_iter {
    pub ht: *mut rhashtable,
    pub p: *mut rhash_head,
    pub list: *mut rhlist_head,
    pub walker: rhashtable_walker,
    pub slot: ::std::os::raw::c_uint,
    pub skip: ::std::os::raw::c_uint,
    pub end_of_table: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rhashtable_iter"][::std::mem::size_of::<rhashtable_iter>() - 64usize];
    ["Alignment of rhashtable_iter"][::std::mem::align_of::<rhashtable_iter>() - 8usize];
    ["Offset of field: rhashtable_iter::ht"][::std::mem::offset_of!(rhashtable_iter, ht) - 0usize];
    ["Offset of field: rhashtable_iter::p"][::std::mem::offset_of!(rhashtable_iter, p) - 8usize];
    ["Offset of field: rhashtable_iter::list"]
        [::std::mem::offset_of!(rhashtable_iter, list) - 16usize];
    ["Offset of field: rhashtable_iter::walker"]
        [::std::mem::offset_of!(rhashtable_iter, walker) - 24usize];
    ["Offset of field: rhashtable_iter::slot"]
        [::std::mem::offset_of!(rhashtable_iter, slot) - 48usize];
    ["Offset of field: rhashtable_iter::skip"]
        [::std::mem::offset_of!(rhashtable_iter, skip) - 52usize];
    ["Offset of field: rhashtable_iter::end_of_table"]
        [::std::mem::offset_of!(rhashtable_iter, end_of_table) - 56usize];
};
extern "C" {
    pub fn rhashtable_init_noprof(
        ht: *mut rhashtable,
        params: *const rhashtable_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rhltable_init_noprof(
        hlt: *mut rhltable,
        params: *const rhashtable_params,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_perm {
    pub key: __kernel_key_t,
    pub uid: __kernel_uid_t,
    pub gid: __kernel_gid_t,
    pub cuid: __kernel_uid_t,
    pub cgid: __kernel_gid_t,
    pub mode: __kernel_mode_t,
    pub seq: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_perm"][::std::mem::size_of::<ipc_perm>() - 28usize];
    ["Alignment of ipc_perm"][::std::mem::align_of::<ipc_perm>() - 4usize];
    ["Offset of field: ipc_perm::key"][::std::mem::offset_of!(ipc_perm, key) - 0usize];
    ["Offset of field: ipc_perm::uid"][::std::mem::offset_of!(ipc_perm, uid) - 4usize];
    ["Offset of field: ipc_perm::gid"][::std::mem::offset_of!(ipc_perm, gid) - 8usize];
    ["Offset of field: ipc_perm::cuid"][::std::mem::offset_of!(ipc_perm, cuid) - 12usize];
    ["Offset of field: ipc_perm::cgid"][::std::mem::offset_of!(ipc_perm, cgid) - 16usize];
    ["Offset of field: ipc_perm::mode"][::std::mem::offset_of!(ipc_perm, mode) - 20usize];
    ["Offset of field: ipc_perm::seq"][::std::mem::offset_of!(ipc_perm, seq) - 24usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ipc64_perm {
    pub key: __kernel_key_t,
    pub uid: __kernel_uid32_t,
    pub gid: __kernel_gid32_t,
    pub cuid: __kernel_uid32_t,
    pub cgid: __kernel_gid32_t,
    pub mode: __kernel_mode_t,
    pub __pad1: __IncompleteArrayField<::std::os::raw::c_uchar>,
    pub seq: ::std::os::raw::c_ushort,
    pub __pad2: ::std::os::raw::c_ushort,
    pub __unused1: __kernel_ulong_t,
    pub __unused2: __kernel_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc64_perm"][::std::mem::size_of::<ipc64_perm>() - 48usize];
    ["Alignment of ipc64_perm"][::std::mem::align_of::<ipc64_perm>() - 8usize];
    ["Offset of field: ipc64_perm::key"][::std::mem::offset_of!(ipc64_perm, key) - 0usize];
    ["Offset of field: ipc64_perm::uid"][::std::mem::offset_of!(ipc64_perm, uid) - 4usize];
    ["Offset of field: ipc64_perm::gid"][::std::mem::offset_of!(ipc64_perm, gid) - 8usize];
    ["Offset of field: ipc64_perm::cuid"][::std::mem::offset_of!(ipc64_perm, cuid) - 12usize];
    ["Offset of field: ipc64_perm::cgid"][::std::mem::offset_of!(ipc64_perm, cgid) - 16usize];
    ["Offset of field: ipc64_perm::mode"][::std::mem::offset_of!(ipc64_perm, mode) - 20usize];
    ["Offset of field: ipc64_perm::__pad1"][::std::mem::offset_of!(ipc64_perm, __pad1) - 24usize];
    ["Offset of field: ipc64_perm::seq"][::std::mem::offset_of!(ipc64_perm, seq) - 24usize];
    ["Offset of field: ipc64_perm::__pad2"][::std::mem::offset_of!(ipc64_perm, __pad2) - 26usize];
    ["Offset of field: ipc64_perm::__unused1"]
        [::std::mem::offset_of!(ipc64_perm, __unused1) - 32usize];
    ["Offset of field: ipc64_perm::__unused2"]
        [::std::mem::offset_of!(ipc64_perm, __unused2) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_kludge {
    pub msgp: *mut msgbuf,
    pub msgtyp: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipc_kludge"][::std::mem::size_of::<ipc_kludge>() - 16usize];
    ["Alignment of ipc_kludge"][::std::mem::align_of::<ipc_kludge>() - 8usize];
    ["Offset of field: ipc_kludge::msgp"][::std::mem::offset_of!(ipc_kludge, msgp) - 0usize];
    ["Offset of field: ipc_kludge::msgtyp"][::std::mem::offset_of!(ipc_kludge, msgtyp) - 8usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct kern_ipc_perm {
    pub lock: spinlock_t,
    pub deleted: bool_,
    pub id: ::std::os::raw::c_int,
    pub key: key_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub cuid: kuid_t,
    pub cgid: kgid_t,
    pub mode: umode_t,
    pub seq: ::std::os::raw::c_ulong,
    pub security: *mut ::std::os::raw::c_void,
    pub khtnode: rhash_head,
    pub rcu: callback_head,
    pub refcount: refcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kern_ipc_perm"][::std::mem::size_of::<kern_ipc_perm>() - 128usize];
    ["Alignment of kern_ipc_perm"][::std::mem::align_of::<kern_ipc_perm>() - 64usize];
    ["Offset of field: kern_ipc_perm::lock"][::std::mem::offset_of!(kern_ipc_perm, lock) - 0usize];
    ["Offset of field: kern_ipc_perm::deleted"]
        [::std::mem::offset_of!(kern_ipc_perm, deleted) - 4usize];
    ["Offset of field: kern_ipc_perm::id"][::std::mem::offset_of!(kern_ipc_perm, id) - 8usize];
    ["Offset of field: kern_ipc_perm::key"][::std::mem::offset_of!(kern_ipc_perm, key) - 12usize];
    ["Offset of field: kern_ipc_perm::uid"][::std::mem::offset_of!(kern_ipc_perm, uid) - 16usize];
    ["Offset of field: kern_ipc_perm::gid"][::std::mem::offset_of!(kern_ipc_perm, gid) - 20usize];
    ["Offset of field: kern_ipc_perm::cuid"][::std::mem::offset_of!(kern_ipc_perm, cuid) - 24usize];
    ["Offset of field: kern_ipc_perm::cgid"][::std::mem::offset_of!(kern_ipc_perm, cgid) - 28usize];
    ["Offset of field: kern_ipc_perm::mode"][::std::mem::offset_of!(kern_ipc_perm, mode) - 32usize];
    ["Offset of field: kern_ipc_perm::seq"][::std::mem::offset_of!(kern_ipc_perm, seq) - 40usize];
    ["Offset of field: kern_ipc_perm::security"]
        [::std::mem::offset_of!(kern_ipc_perm, security) - 48usize];
    ["Offset of field: kern_ipc_perm::khtnode"]
        [::std::mem::offset_of!(kern_ipc_perm, khtnode) - 56usize];
    ["Offset of field: kern_ipc_perm::rcu"][::std::mem::offset_of!(kern_ipc_perm, rcu) - 64usize];
    ["Offset of field: kern_ipc_perm::refcount"]
        [::std::mem::offset_of!(kern_ipc_perm, refcount) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct semid_ds {
    pub sem_perm: ipc_perm,
    pub sem_otime: __kernel_old_time_t,
    pub sem_ctime: __kernel_old_time_t,
    pub sem_base: *mut sem,
    pub sem_pending: *mut sem_queue,
    pub sem_pending_last: *mut *mut sem_queue,
    pub undo: *mut sem_undo,
    pub sem_nsems: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of semid_ds"][::std::mem::size_of::<semid_ds>() - 88usize];
    ["Alignment of semid_ds"][::std::mem::align_of::<semid_ds>() - 8usize];
    ["Offset of field: semid_ds::sem_perm"][::std::mem::offset_of!(semid_ds, sem_perm) - 0usize];
    ["Offset of field: semid_ds::sem_otime"][::std::mem::offset_of!(semid_ds, sem_otime) - 32usize];
    ["Offset of field: semid_ds::sem_ctime"][::std::mem::offset_of!(semid_ds, sem_ctime) - 40usize];
    ["Offset of field: semid_ds::sem_base"][::std::mem::offset_of!(semid_ds, sem_base) - 48usize];
    ["Offset of field: semid_ds::sem_pending"]
        [::std::mem::offset_of!(semid_ds, sem_pending) - 56usize];
    ["Offset of field: semid_ds::sem_pending_last"]
        [::std::mem::offset_of!(semid_ds, sem_pending_last) - 64usize];
    ["Offset of field: semid_ds::undo"][::std::mem::offset_of!(semid_ds, undo) - 72usize];
    ["Offset of field: semid_ds::sem_nsems"][::std::mem::offset_of!(semid_ds, sem_nsems) - 80usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct semid64_ds {
    pub sem_perm: ipc64_perm,
    pub sem_otime: __kernel_long_t,
    pub __unused1: __kernel_ulong_t,
    pub sem_ctime: __kernel_long_t,
    pub __unused2: __kernel_ulong_t,
    pub sem_nsems: __kernel_ulong_t,
    pub __unused3: __kernel_ulong_t,
    pub __unused4: __kernel_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of semid64_ds"][::std::mem::size_of::<semid64_ds>() - 104usize];
    ["Alignment of semid64_ds"][::std::mem::align_of::<semid64_ds>() - 8usize];
    ["Offset of field: semid64_ds::sem_perm"]
        [::std::mem::offset_of!(semid64_ds, sem_perm) - 0usize];
    ["Offset of field: semid64_ds::sem_otime"]
        [::std::mem::offset_of!(semid64_ds, sem_otime) - 48usize];
    ["Offset of field: semid64_ds::__unused1"]
        [::std::mem::offset_of!(semid64_ds, __unused1) - 56usize];
    ["Offset of field: semid64_ds::sem_ctime"]
        [::std::mem::offset_of!(semid64_ds, sem_ctime) - 64usize];
    ["Offset of field: semid64_ds::__unused2"]
        [::std::mem::offset_of!(semid64_ds, __unused2) - 72usize];
    ["Offset of field: semid64_ds::sem_nsems"]
        [::std::mem::offset_of!(semid64_ds, sem_nsems) - 80usize];
    ["Offset of field: semid64_ds::__unused3"]
        [::std::mem::offset_of!(semid64_ds, __unused3) - 88usize];
    ["Offset of field: semid64_ds::__unused4"]
        [::std::mem::offset_of!(semid64_ds, __unused4) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sembuf {
    pub sem_num: ::std::os::raw::c_ushort,
    pub sem_op: ::std::os::raw::c_short,
    pub sem_flg: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sembuf"][::std::mem::size_of::<sembuf>() - 6usize];
    ["Alignment of sembuf"][::std::mem::align_of::<sembuf>() - 2usize];
    ["Offset of field: sembuf::sem_num"][::std::mem::offset_of!(sembuf, sem_num) - 0usize];
    ["Offset of field: sembuf::sem_op"][::std::mem::offset_of!(sembuf, sem_op) - 2usize];
    ["Offset of field: sembuf::sem_flg"][::std::mem::offset_of!(sembuf, sem_flg) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union semun {
    pub val: ::std::os::raw::c_int,
    pub buf: *mut semid_ds,
    pub array: *mut ::std::os::raw::c_ushort,
    pub __buf: *mut seminfo,
    pub __pad: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of semun"][::std::mem::size_of::<semun>() - 8usize];
    ["Alignment of semun"][::std::mem::align_of::<semun>() - 8usize];
    ["Offset of field: semun::val"][::std::mem::offset_of!(semun, val) - 0usize];
    ["Offset of field: semun::buf"][::std::mem::offset_of!(semun, buf) - 0usize];
    ["Offset of field: semun::array"][::std::mem::offset_of!(semun, array) - 0usize];
    ["Offset of field: semun::__buf"][::std::mem::offset_of!(semun, __buf) - 0usize];
    ["Offset of field: semun::__pad"][::std::mem::offset_of!(semun, __pad) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seminfo {
    pub semmap: ::std::os::raw::c_int,
    pub semmni: ::std::os::raw::c_int,
    pub semmns: ::std::os::raw::c_int,
    pub semmnu: ::std::os::raw::c_int,
    pub semmsl: ::std::os::raw::c_int,
    pub semopm: ::std::os::raw::c_int,
    pub semume: ::std::os::raw::c_int,
    pub semusz: ::std::os::raw::c_int,
    pub semvmx: ::std::os::raw::c_int,
    pub semaem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seminfo"][::std::mem::size_of::<seminfo>() - 40usize];
    ["Alignment of seminfo"][::std::mem::align_of::<seminfo>() - 4usize];
    ["Offset of field: seminfo::semmap"][::std::mem::offset_of!(seminfo, semmap) - 0usize];
    ["Offset of field: seminfo::semmni"][::std::mem::offset_of!(seminfo, semmni) - 4usize];
    ["Offset of field: seminfo::semmns"][::std::mem::offset_of!(seminfo, semmns) - 8usize];
    ["Offset of field: seminfo::semmnu"][::std::mem::offset_of!(seminfo, semmnu) - 12usize];
    ["Offset of field: seminfo::semmsl"][::std::mem::offset_of!(seminfo, semmsl) - 16usize];
    ["Offset of field: seminfo::semopm"][::std::mem::offset_of!(seminfo, semopm) - 20usize];
    ["Offset of field: seminfo::semume"][::std::mem::offset_of!(seminfo, semume) - 24usize];
    ["Offset of field: seminfo::semusz"][::std::mem::offset_of!(seminfo, semusz) - 28usize];
    ["Offset of field: seminfo::semvmx"][::std::mem::offset_of!(seminfo, semvmx) - 32usize];
    ["Offset of field: seminfo::semaem"][::std::mem::offset_of!(seminfo, semaem) - 36usize];
};
extern "C" {
    pub fn copy_semundo(
        clone_flags: ::std::os::raw::c_ulong,
        tsk: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit_sem(tsk: *mut task_struct);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: __kernel_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type iov_iter_extraction_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kvec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kvec"][::std::mem::size_of::<kvec>() - 16usize];
    ["Alignment of kvec"][::std::mem::align_of::<kvec>() - 8usize];
    ["Offset of field: kvec::iov_base"][::std::mem::offset_of!(kvec, iov_base) - 0usize];
    ["Offset of field: kvec::iov_len"][::std::mem::offset_of!(kvec, iov_len) - 8usize];
};
pub const iter_type_ITER_UBUF: iter_type = 0;
pub const iter_type_ITER_IOVEC: iter_type = 1;
pub const iter_type_ITER_BVEC: iter_type = 2;
pub const iter_type_ITER_KVEC: iter_type = 3;
pub const iter_type_ITER_XARRAY: iter_type = 4;
pub const iter_type_ITER_DISCARD: iter_type = 5;
pub type iter_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iov_iter_state {
    pub iov_offset: usize,
    pub count: usize,
    pub nr_segs: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iov_iter_state"][::std::mem::size_of::<iov_iter_state>() - 24usize];
    ["Alignment of iov_iter_state"][::std::mem::align_of::<iov_iter_state>() - 8usize];
    ["Offset of field: iov_iter_state::iov_offset"]
        [::std::mem::offset_of!(iov_iter_state, iov_offset) - 0usize];
    ["Offset of field: iov_iter_state::count"]
        [::std::mem::offset_of!(iov_iter_state, count) - 8usize];
    ["Offset of field: iov_iter_state::nr_segs"]
        [::std::mem::offset_of!(iov_iter_state, nr_segs) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iov_iter {
    pub iter_type: u8_,
    pub nofault: bool_,
    pub data_source: bool_,
    pub iov_offset: usize,
    pub __bindgen_anon_1: iov_iter__bindgen_ty_1,
    pub __bindgen_anon_2: iov_iter__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iov_iter__bindgen_ty_1 {
    pub __ubuf_iovec: iovec,
    pub __bindgen_anon_1: iov_iter__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iov_iter__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub count: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __iov: *const iovec,
    pub kvec: *const kvec,
    pub bvec: *mut bio_vec,
    pub xarray: *mut xarray,
    pub ubuf: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::__iov"][::std::mem::offset_of!(
        iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        __iov
    ) - 0usize];
    ["Offset of field: iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::kvec"]
        [::std::mem::offset_of!(iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, kvec) - 0usize];
    ["Offset of field: iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::bvec"]
        [::std::mem::offset_of!(iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, bvec) - 0usize];
    ["Offset of field: iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::xarray"][::std::mem::offset_of!(
        iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        xarray
    ) - 0usize];
    ["Offset of field: iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::ubuf"]
        [::std::mem::offset_of!(iov_iter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, ubuf) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iov_iter__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<iov_iter__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of iov_iter__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<iov_iter__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: iov_iter__bindgen_ty_1__bindgen_ty_1::count"]
        [::std::mem::offset_of!(iov_iter__bindgen_ty_1__bindgen_ty_1, count) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iov_iter__bindgen_ty_1"][::std::mem::size_of::<iov_iter__bindgen_ty_1>() - 16usize];
    ["Alignment of iov_iter__bindgen_ty_1"]
        [::std::mem::align_of::<iov_iter__bindgen_ty_1>() - 8usize];
    ["Offset of field: iov_iter__bindgen_ty_1::__ubuf_iovec"]
        [::std::mem::offset_of!(iov_iter__bindgen_ty_1, __ubuf_iovec) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union iov_iter__bindgen_ty_2 {
    pub nr_segs: ::std::os::raw::c_ulong,
    pub xarray_start: loff_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iov_iter__bindgen_ty_2"][::std::mem::size_of::<iov_iter__bindgen_ty_2>() - 8usize];
    ["Alignment of iov_iter__bindgen_ty_2"]
        [::std::mem::align_of::<iov_iter__bindgen_ty_2>() - 8usize];
    ["Offset of field: iov_iter__bindgen_ty_2::nr_segs"]
        [::std::mem::offset_of!(iov_iter__bindgen_ty_2, nr_segs) - 0usize];
    ["Offset of field: iov_iter__bindgen_ty_2::xarray_start"]
        [::std::mem::offset_of!(iov_iter__bindgen_ty_2, xarray_start) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iov_iter"][::std::mem::size_of::<iov_iter>() - 40usize];
    ["Alignment of iov_iter"][::std::mem::align_of::<iov_iter>() - 8usize];
    ["Offset of field: iov_iter::iter_type"][::std::mem::offset_of!(iov_iter, iter_type) - 0usize];
    ["Offset of field: iov_iter::nofault"][::std::mem::offset_of!(iov_iter, nofault) - 1usize];
    ["Offset of field: iov_iter::data_source"]
        [::std::mem::offset_of!(iov_iter, data_source) - 2usize];
    ["Offset of field: iov_iter::iov_offset"]
        [::std::mem::offset_of!(iov_iter, iov_offset) - 8usize];
};
extern "C" {
    pub fn copy_page_from_iter_atomic(
        page: *mut page,
        offset: usize,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn iov_iter_advance(i: *mut iov_iter, bytes: usize);
}
extern "C" {
    pub fn iov_iter_revert(i: *mut iov_iter, bytes: usize);
}
extern "C" {
    pub fn fault_in_iov_iter_readable(i: *const iov_iter, bytes: usize) -> usize;
}
extern "C" {
    pub fn fault_in_iov_iter_writeable(i: *const iov_iter, bytes: usize) -> usize;
}
extern "C" {
    pub fn iov_iter_single_seg_count(i: *const iov_iter) -> usize;
}
extern "C" {
    pub fn copy_page_to_iter(
        page: *mut page,
        offset: usize,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn copy_page_from_iter(
        page: *mut page,
        offset: usize,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_to_iter(
        addr: *const ::std::os::raw::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_from_iter(
        addr: *mut ::std::os::raw::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_from_iter_nocache(
        addr: *mut ::std::os::raw::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn copy_page_to_iter_nofault(
        page: *mut page,
        offset: ::std::os::raw::c_uint,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_from_iter_flushcache(
        addr: *mut ::std::os::raw::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn _copy_mc_to_iter(
        addr: *const ::std::os::raw::c_void,
        bytes: usize,
        i: *mut iov_iter,
    ) -> usize;
}
extern "C" {
    pub fn iov_iter_zero(bytes: usize, arg1: *mut iov_iter) -> usize;
}
extern "C" {
    pub fn iov_iter_is_aligned(
        i: *const iov_iter,
        addr_mask: ::std::os::raw::c_uint,
        len_mask: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn iov_iter_alignment(i: *const iov_iter) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn iov_iter_gap_alignment(i: *const iov_iter) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn iov_iter_init(
        i: *mut iov_iter,
        direction: ::std::os::raw::c_uint,
        iov: *const iovec,
        nr_segs: ::std::os::raw::c_ulong,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_kvec(
        i: *mut iov_iter,
        direction: ::std::os::raw::c_uint,
        kvec: *const kvec,
        nr_segs: ::std::os::raw::c_ulong,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_bvec(
        i: *mut iov_iter,
        direction: ::std::os::raw::c_uint,
        bvec: *const bio_vec,
        nr_segs: ::std::os::raw::c_ulong,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_discard(i: *mut iov_iter, direction: ::std::os::raw::c_uint, count: usize);
}
extern "C" {
    pub fn iov_iter_xarray(
        i: *mut iov_iter,
        direction: ::std::os::raw::c_uint,
        xarray: *mut xarray,
        start: loff_t,
        count: usize,
    );
}
extern "C" {
    pub fn iov_iter_get_pages2(
        i: *mut iov_iter,
        pages: *mut *mut page,
        maxsize: usize,
        maxpages: ::std::os::raw::c_uint,
        start: *mut usize,
    ) -> isize;
}
extern "C" {
    pub fn iov_iter_get_pages_alloc2(
        i: *mut iov_iter,
        pages: *mut *mut *mut page,
        maxsize: usize,
        start: *mut usize,
    ) -> isize;
}
extern "C" {
    pub fn iov_iter_npages(
        i: *const iov_iter,
        maxpages: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iov_iter_restore(i: *mut iov_iter, state: *mut iov_iter_state);
}
extern "C" {
    pub fn dup_iter(
        new: *mut iov_iter,
        old: *mut iov_iter,
        flags: gfp_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn iovec_from_user(
        uvector: *const iovec,
        nr_segs: ::std::os::raw::c_ulong,
        fast_segs: ::std::os::raw::c_ulong,
        fast_iov: *mut iovec,
        compat: bool_,
    ) -> *mut iovec;
}
extern "C" {
    pub fn import_iovec(
        type_: ::std::os::raw::c_int,
        uvec: *const iovec,
        nr_segs: ::std::os::raw::c_uint,
        fast_segs: ::std::os::raw::c_uint,
        iovp: *mut *mut iovec,
        i: *mut iov_iter,
    ) -> isize;
}
extern "C" {
    pub fn __import_iovec(
        type_: ::std::os::raw::c_int,
        uvec: *const iovec,
        nr_segs: ::std::os::raw::c_uint,
        fast_segs: ::std::os::raw::c_uint,
        iovp: *mut *mut iovec,
        i: *mut iov_iter,
        compat: bool_,
    ) -> isize;
}
extern "C" {
    pub fn import_ubuf(
        type_: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: usize,
        i: *mut iov_iter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iov_iter_extract_pages(
        i: *mut iov_iter,
        pages: *mut *mut *mut page,
        maxsize: usize,
        maxpages: ::std::os::raw::c_uint,
        extraction_flags: iov_iter_extraction_t,
        offset0: *mut usize,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_table {
    _unused: [u8; 0],
}
extern "C" {
    pub fn extract_iter_to_sg(
        iter: *mut iov_iter,
        len: usize,
        sgtable: *mut sg_table,
        sg_max: ::std::os::raw::c_uint,
        extraction_flags: iov_iter_extraction_t,
    ) -> isize;
}
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::std::os::raw::c_char; 126usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>() - 128usize];
    ["Alignment of __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1::ss_family"][::std::mem::offset_of!(
        __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
        ss_family
    )
        - 0usize];
    ["Offset of field: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1::__data"][::std::mem::offset_of!(
        __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
        __data
    ) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sockaddr_storage__bindgen_ty_1"]
        [::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1>() - 128usize];
    ["Alignment of __kernel_sockaddr_storage__bindgen_ty_1"]
        [::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1>() - 8usize];
    ["Offset of field: __kernel_sockaddr_storage__bindgen_ty_1::__align"]
        [::std::mem::offset_of!(__kernel_sockaddr_storage__bindgen_ty_1, __align) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sockaddr_storage"]
        [::std::mem::size_of::<__kernel_sockaddr_storage>() - 128usize];
    ["Alignment of __kernel_sockaddr_storage"]
        [::std::mem::align_of::<__kernel_sockaddr_storage>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct socket {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_buff {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proto_accept_arg {
    _unused: [u8; 0],
}
extern "C" {
    pub fn socket_seq_show(seq: *mut seq_file);
}
pub type sa_family_t = __kernel_sa_family_t;
#[repr(C)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub __bindgen_anon_1: sockaddr__bindgen_ty_1,
}
#[repr(C)]
pub struct sockaddr__bindgen_ty_1 {
    pub sa_data_min: __BindgenUnionField<[::std::os::raw::c_char; 14usize]>,
    pub __bindgen_anon_1: __BindgenUnionField<sockaddr__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u8; 14usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct sockaddr__bindgen_ty_1__bindgen_ty_1 {
    pub __empty_sa_data: sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub sa_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sockaddr__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sockaddr__bindgen_ty_1__bindgen_ty_1>() - 0usize];
    ["Alignment of sockaddr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sockaddr__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: sockaddr__bindgen_ty_1__bindgen_ty_1::__empty_sa_data"]
        [::std::mem::offset_of!(sockaddr__bindgen_ty_1__bindgen_ty_1, __empty_sa_data) - 0usize];
    ["Offset of field: sockaddr__bindgen_ty_1__bindgen_ty_1::sa_data"]
        [::std::mem::offset_of!(sockaddr__bindgen_ty_1__bindgen_ty_1, sa_data) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr__bindgen_ty_1"][::std::mem::size_of::<sockaddr__bindgen_ty_1>() - 14usize];
    ["Alignment of sockaddr__bindgen_ty_1"]
        [::std::mem::align_of::<sockaddr__bindgen_ty_1>() - 1usize];
    ["Offset of field: sockaddr__bindgen_ty_1::sa_data_min"]
        [::std::mem::offset_of!(sockaddr__bindgen_ty_1, sa_data_min) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: ::std::os::raw::c_int,
    pub msg_inq: ::std::os::raw::c_int,
    pub msg_iter: iov_iter,
    pub __bindgen_anon_1: msghdr__bindgen_ty_1,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub msg_flags: ::std::os::raw::c_uint,
    pub msg_controllen: __kernel_size_t,
    pub msg_iocb: *mut kiocb,
    pub msg_ubuf: *mut ubuf_info,
    pub sg_from_iter: ::std::option::Option<
        unsafe extern "C" fn(
            skb: *mut sk_buff,
            from: *mut iov_iter,
            length: usize,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union msghdr__bindgen_ty_1 {
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_control_user: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr__bindgen_ty_1"][::std::mem::size_of::<msghdr__bindgen_ty_1>() - 8usize];
    ["Alignment of msghdr__bindgen_ty_1"][::std::mem::align_of::<msghdr__bindgen_ty_1>() - 8usize];
    ["Offset of field: msghdr__bindgen_ty_1::msg_control"]
        [::std::mem::offset_of!(msghdr__bindgen_ty_1, msg_control) - 0usize];
    ["Offset of field: msghdr__bindgen_ty_1::msg_control_user"]
        [::std::mem::offset_of!(msghdr__bindgen_ty_1, msg_control_user) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 104usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_inq"][::std::mem::offset_of!(msghdr, msg_inq) - 12usize];
    ["Offset of field: msghdr::msg_iter"][::std::mem::offset_of!(msghdr, msg_iter) - 16usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 68usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 72usize];
    ["Offset of field: msghdr::msg_iocb"][::std::mem::offset_of!(msghdr, msg_iocb) - 80usize];
    ["Offset of field: msghdr::msg_ubuf"][::std::mem::offset_of!(msghdr, msg_ubuf) - 88usize];
    ["Offset of field: msghdr::sg_from_iter"]
        [::std::mem::offset_of!(msghdr, sg_from_iter) - 96usize];
};
impl msghdr {
    #[inline]
    pub fn msg_control_is_user(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_msg_control_is_user(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn msg_get_inq(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_msg_get_inq(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        msg_control_is_user: bool_,
        msg_get_inq: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let msg_control_is_user: u8 = unsafe { ::std::mem::transmute(msg_control_is_user) };
            msg_control_is_user as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let msg_get_inq: u8 = unsafe { ::std::mem::transmute(msg_get_inq) };
            msg_get_inq as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: ::std::os::raw::c_int,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: __kernel_size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: __kernel_size_t,
    pub msg_flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_msghdr"][::std::mem::size_of::<user_msghdr>() - 56usize];
    ["Alignment of user_msghdr"][::std::mem::align_of::<user_msghdr>() - 8usize];
    ["Offset of field: user_msghdr::msg_name"]
        [::std::mem::offset_of!(user_msghdr, msg_name) - 0usize];
    ["Offset of field: user_msghdr::msg_namelen"]
        [::std::mem::offset_of!(user_msghdr, msg_namelen) - 8usize];
    ["Offset of field: user_msghdr::msg_iov"]
        [::std::mem::offset_of!(user_msghdr, msg_iov) - 16usize];
    ["Offset of field: user_msghdr::msg_iovlen"]
        [::std::mem::offset_of!(user_msghdr, msg_iovlen) - 24usize];
    ["Offset of field: user_msghdr::msg_control"]
        [::std::mem::offset_of!(user_msghdr, msg_control) - 32usize];
    ["Offset of field: user_msghdr::msg_controllen"]
        [::std::mem::offset_of!(user_msghdr, msg_controllen) - 40usize];
    ["Offset of field: user_msghdr::msg_flags"]
        [::std::mem::offset_of!(user_msghdr, msg_flags) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmsghdr {
    pub msg_hdr: user_msghdr,
    pub msg_len: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmsghdr"][::std::mem::size_of::<mmsghdr>() - 64usize];
    ["Alignment of mmsghdr"][::std::mem::align_of::<mmsghdr>() - 8usize];
    ["Offset of field: mmsghdr::msg_hdr"][::std::mem::offset_of!(mmsghdr, msg_hdr) - 0usize];
    ["Offset of field: mmsghdr::msg_len"][::std::mem::offset_of!(mmsghdr, msg_len) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: __kernel_size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    pub pid: __u32,
    pub uid: __u32,
    pub gid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ucred"][::std::mem::size_of::<ucred>() - 12usize];
    ["Alignment of ucred"][::std::mem::align_of::<ucred>() - 4usize];
    ["Offset of field: ucred::pid"][::std::mem::offset_of!(ucred, pid) - 0usize];
    ["Offset of field: ucred::uid"][::std::mem::offset_of!(ucred, uid) - 4usize];
    ["Offset of field: ucred::gid"][::std::mem::offset_of!(ucred, gid) - 8usize];
};
extern "C" {
    pub fn move_addr_to_kernel(
        uaddr: *mut ::std::os::raw::c_void,
        ulen: ::std::os::raw::c_int,
        kaddr: *mut __kernel_sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_cmsg(
        arg1: *mut msghdr,
        level: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct scm_timestamping_internal {
    pub ts: [timespec64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of scm_timestamping_internal"]
        [::std::mem::size_of::<scm_timestamping_internal>() - 48usize];
    ["Alignment of scm_timestamping_internal"]
        [::std::mem::align_of::<scm_timestamping_internal>() - 8usize];
    ["Offset of field: scm_timestamping_internal::ts"]
        [::std::mem::offset_of!(scm_timestamping_internal, ts) - 0usize];
};
extern "C" {
    pub fn put_cmsg_scm_timestamping64(msg: *mut msghdr, tss: *mut scm_timestamping_internal);
}
extern "C" {
    pub fn put_cmsg_scm_timestamping(msg: *mut msghdr, tss: *mut scm_timestamping_internal);
}
extern "C" {
    pub fn __sys_recvmsg(
        fd: ::std::os::raw::c_int,
        msg: *mut user_msghdr,
        flags: ::std::os::raw::c_uint,
        forbid_cmsg_compat: bool_,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __sys_sendmsg(
        fd: ::std::os::raw::c_int,
        msg: *mut user_msghdr,
        flags: ::std::os::raw::c_uint,
        forbid_cmsg_compat: bool_,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __sys_recvmmsg(
        fd: ::std::os::raw::c_int,
        mmsg: *mut mmsghdr,
        vlen: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        timeout: *mut __kernel_timespec,
        timeout32: *mut old_timespec32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_sendmmsg(
        fd: ::std::os::raw::c_int,
        mmsg: *mut mmsghdr,
        vlen: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        forbid_cmsg_compat: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_sendmsg_sock(
        sock: *mut socket,
        msg: *mut msghdr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __sys_recvmsg_sock(
        sock: *mut socket,
        msg: *mut msghdr,
        umsg: *mut user_msghdr,
        uaddr: *mut sockaddr,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __copy_msghdr(
        kmsg: *mut msghdr,
        umsg: *mut user_msghdr,
        save_addr: *mut *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_recvfrom(
        fd: ::std::os::raw::c_int,
        ubuf: *mut ::std::os::raw::c_void,
        size: usize,
        flags: ::std::os::raw::c_uint,
        addr: *mut sockaddr,
        addr_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_sendto(
        fd: ::std::os::raw::c_int,
        buff: *mut ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_uint,
        addr: *mut sockaddr,
        addr_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_accept(
        file: *mut file,
        arg: *mut proto_accept_arg,
        upeer_sockaddr: *mut sockaddr,
        upeer_addrlen: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut file;
}
extern "C" {
    pub fn __sys_accept4(
        fd: ::std::os::raw::c_int,
        upeer_sockaddr: *mut sockaddr,
        upeer_addrlen: *mut ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_socket(
        family: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_socket_file(
        family: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
    ) -> *mut file;
}
extern "C" {
    pub fn __sys_bind(
        fd: ::std::os::raw::c_int,
        umyaddr: *mut sockaddr,
        addrlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_bind_socket(
        sock: *mut socket,
        address: *mut __kernel_sockaddr_storage,
        addrlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_connect_file(
        file: *mut file,
        addr: *mut __kernel_sockaddr_storage,
        addrlen: ::std::os::raw::c_int,
        file_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_connect(
        fd: ::std::os::raw::c_int,
        uservaddr: *mut sockaddr,
        addrlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_listen(
        fd: ::std::os::raw::c_int,
        backlog: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_listen_socket(
        sock: *mut socket,
        backlog: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_getsockname(
        fd: ::std::os::raw::c_int,
        usockaddr: *mut sockaddr,
        usockaddr_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_getpeername(
        fd: ::std::os::raw::c_int,
        usockaddr: *mut sockaddr,
        usockaddr_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_socketpair(
        family: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        usockvec: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_shutdown_sock(
        sock: *mut socket,
        how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_shutdown(
        fd: ::std::os::raw::c_int,
        how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sync_serial_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sync_serial_settings"][::std::mem::size_of::<sync_serial_settings>() - 12usize];
    ["Alignment of sync_serial_settings"][::std::mem::align_of::<sync_serial_settings>() - 4usize];
    ["Offset of field: sync_serial_settings::clock_rate"]
        [::std::mem::offset_of!(sync_serial_settings, clock_rate) - 0usize];
    ["Offset of field: sync_serial_settings::clock_type"]
        [::std::mem::offset_of!(sync_serial_settings, clock_type) - 4usize];
    ["Offset of field: sync_serial_settings::loopback"]
        [::std::mem::offset_of!(sync_serial_settings, loopback) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct te1_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
    pub slot_map: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of te1_settings"][::std::mem::size_of::<te1_settings>() - 16usize];
    ["Alignment of te1_settings"][::std::mem::align_of::<te1_settings>() - 4usize];
    ["Offset of field: te1_settings::clock_rate"]
        [::std::mem::offset_of!(te1_settings, clock_rate) - 0usize];
    ["Offset of field: te1_settings::clock_type"]
        [::std::mem::offset_of!(te1_settings, clock_type) - 4usize];
    ["Offset of field: te1_settings::loopback"]
        [::std::mem::offset_of!(te1_settings, loopback) - 8usize];
    ["Offset of field: te1_settings::slot_map"]
        [::std::mem::offset_of!(te1_settings, slot_map) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct raw_hdlc_proto {
    pub encoding: ::std::os::raw::c_ushort,
    pub parity: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of raw_hdlc_proto"][::std::mem::size_of::<raw_hdlc_proto>() - 4usize];
    ["Alignment of raw_hdlc_proto"][::std::mem::align_of::<raw_hdlc_proto>() - 2usize];
    ["Offset of field: raw_hdlc_proto::encoding"]
        [::std::mem::offset_of!(raw_hdlc_proto, encoding) - 0usize];
    ["Offset of field: raw_hdlc_proto::parity"]
        [::std::mem::offset_of!(raw_hdlc_proto, parity) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto {
    pub t391: ::std::os::raw::c_uint,
    pub t392: ::std::os::raw::c_uint,
    pub n391: ::std::os::raw::c_uint,
    pub n392: ::std::os::raw::c_uint,
    pub n393: ::std::os::raw::c_uint,
    pub lmi: ::std::os::raw::c_ushort,
    pub dce: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fr_proto"][::std::mem::size_of::<fr_proto>() - 24usize];
    ["Alignment of fr_proto"][::std::mem::align_of::<fr_proto>() - 4usize];
    ["Offset of field: fr_proto::t391"][::std::mem::offset_of!(fr_proto, t391) - 0usize];
    ["Offset of field: fr_proto::t392"][::std::mem::offset_of!(fr_proto, t392) - 4usize];
    ["Offset of field: fr_proto::n391"][::std::mem::offset_of!(fr_proto, n391) - 8usize];
    ["Offset of field: fr_proto::n392"][::std::mem::offset_of!(fr_proto, n392) - 12usize];
    ["Offset of field: fr_proto::n393"][::std::mem::offset_of!(fr_proto, n393) - 16usize];
    ["Offset of field: fr_proto::lmi"][::std::mem::offset_of!(fr_proto, lmi) - 20usize];
    ["Offset of field: fr_proto::dce"][::std::mem::offset_of!(fr_proto, dce) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto_pvc {
    pub dlci: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fr_proto_pvc"][::std::mem::size_of::<fr_proto_pvc>() - 4usize];
    ["Alignment of fr_proto_pvc"][::std::mem::align_of::<fr_proto_pvc>() - 4usize];
    ["Offset of field: fr_proto_pvc::dlci"][::std::mem::offset_of!(fr_proto_pvc, dlci) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto_pvc_info {
    pub dlci: ::std::os::raw::c_uint,
    pub master: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fr_proto_pvc_info"][::std::mem::size_of::<fr_proto_pvc_info>() - 20usize];
    ["Alignment of fr_proto_pvc_info"][::std::mem::align_of::<fr_proto_pvc_info>() - 4usize];
    ["Offset of field: fr_proto_pvc_info::dlci"]
        [::std::mem::offset_of!(fr_proto_pvc_info, dlci) - 0usize];
    ["Offset of field: fr_proto_pvc_info::master"]
        [::std::mem::offset_of!(fr_proto_pvc_info, master) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cisco_proto {
    pub interval: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cisco_proto"][::std::mem::size_of::<cisco_proto>() - 8usize];
    ["Alignment of cisco_proto"][::std::mem::align_of::<cisco_proto>() - 4usize];
    ["Offset of field: cisco_proto::interval"]
        [::std::mem::offset_of!(cisco_proto, interval) - 0usize];
    ["Offset of field: cisco_proto::timeout"]
        [::std::mem::offset_of!(cisco_proto, timeout) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x25_hdlc_proto {
    pub dce: ::std::os::raw::c_ushort,
    pub modulo: ::std::os::raw::c_uint,
    pub window: ::std::os::raw::c_uint,
    pub t1: ::std::os::raw::c_uint,
    pub t2: ::std::os::raw::c_uint,
    pub n2: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x25_hdlc_proto"][::std::mem::size_of::<x25_hdlc_proto>() - 24usize];
    ["Alignment of x25_hdlc_proto"][::std::mem::align_of::<x25_hdlc_proto>() - 4usize];
    ["Offset of field: x25_hdlc_proto::dce"][::std::mem::offset_of!(x25_hdlc_proto, dce) - 0usize];
    ["Offset of field: x25_hdlc_proto::modulo"]
        [::std::mem::offset_of!(x25_hdlc_proto, modulo) - 4usize];
    ["Offset of field: x25_hdlc_proto::window"]
        [::std::mem::offset_of!(x25_hdlc_proto, window) - 8usize];
    ["Offset of field: x25_hdlc_proto::t1"][::std::mem::offset_of!(x25_hdlc_proto, t1) - 12usize];
    ["Offset of field: x25_hdlc_proto::t2"][::std::mem::offset_of!(x25_hdlc_proto, t2) - 16usize];
    ["Offset of field: x25_hdlc_proto::n2"][::std::mem::offset_of!(x25_hdlc_proto, n2) - 20usize];
};
pub const net_device_flags_IFF_UP: net_device_flags = 1;
pub const net_device_flags_IFF_BROADCAST: net_device_flags = 2;
pub const net_device_flags_IFF_DEBUG: net_device_flags = 4;
pub const net_device_flags_IFF_LOOPBACK: net_device_flags = 8;
pub const net_device_flags_IFF_POINTOPOINT: net_device_flags = 16;
pub const net_device_flags_IFF_NOTRAILERS: net_device_flags = 32;
pub const net_device_flags_IFF_RUNNING: net_device_flags = 64;
pub const net_device_flags_IFF_NOARP: net_device_flags = 128;
pub const net_device_flags_IFF_PROMISC: net_device_flags = 256;
pub const net_device_flags_IFF_ALLMULTI: net_device_flags = 512;
pub const net_device_flags_IFF_MASTER: net_device_flags = 1024;
pub const net_device_flags_IFF_SLAVE: net_device_flags = 2048;
pub const net_device_flags_IFF_MULTICAST: net_device_flags = 4096;
pub const net_device_flags_IFF_PORTSEL: net_device_flags = 8192;
pub const net_device_flags_IFF_AUTOMEDIA: net_device_flags = 16384;
pub const net_device_flags_IFF_DYNAMIC: net_device_flags = 32768;
pub const net_device_flags_IFF_LOWER_UP: net_device_flags = 65536;
pub const net_device_flags_IFF_DORMANT: net_device_flags = 131072;
pub const net_device_flags_IFF_ECHO: net_device_flags = 262144;
#[doc = " enum net_device_flags - &struct net_device flags\n\n These are the &struct net_device flags, they can be set by drivers, the\n kernel and some can be triggered by userspace. Userspace can query and\n set these flags using userspace utilities but there is also a sysfs\n entry available for all dev flags which can be queried and set. These flags\n are shared for all types of net_devices. The sysfs entries are available\n via /sys/class/net/<dev>/flags. Flags which can be toggled through sysfs\n are annotated below, note that only a few flags can be toggled and some\n other flags are always preserved from the original net_device flags\n even if you try to set them via sysfs. Flags which are always preserved\n are kept under the flag grouping @IFF_VOLATILE. Flags which are volatile\n are annotated below as such.\n\n You should have a pretty good reason to be extending these flags.\n\n @IFF_UP: interface is up. Can be toggled through sysfs.\n @IFF_BROADCAST: broadcast address valid. Volatile.\n @IFF_DEBUG: turn on debugging. Can be toggled through sysfs.\n @IFF_LOOPBACK: is a loopback net. Volatile.\n @IFF_POINTOPOINT: interface is has p-p link. Volatile.\n @IFF_NOTRAILERS: avoid use of trailers. Can be toggled through sysfs.\n\tVolatile.\n @IFF_RUNNING: interface RFC2863 OPER_UP. Volatile.\n @IFF_NOARP: no ARP protocol. Can be toggled through sysfs. Volatile.\n @IFF_PROMISC: receive all packets. Can be toggled through sysfs.\n @IFF_ALLMULTI: receive all multicast packets. Can be toggled through\n\tsysfs.\n @IFF_MASTER: master of a load balancer. Volatile.\n @IFF_SLAVE: slave of a load balancer. Volatile.\n @IFF_MULTICAST: Supports multicast. Can be toggled through sysfs.\n @IFF_PORTSEL: can set media type. Can be toggled through sysfs.\n @IFF_AUTOMEDIA: auto media select active. Can be toggled through sysfs.\n @IFF_DYNAMIC: dialup device with changing addresses. Can be toggled\n\tthrough sysfs.\n @IFF_LOWER_UP: driver signals L1 up. Volatile.\n @IFF_DORMANT: driver signals dormant. Volatile.\n @IFF_ECHO: echo sent packets. Volatile."]
pub type net_device_flags = ::std::os::raw::c_uint;
pub const IF_OPER_UNKNOWN: _bindgen_ty_84 = 0;
pub const IF_OPER_NOTPRESENT: _bindgen_ty_84 = 1;
pub const IF_OPER_DOWN: _bindgen_ty_84 = 2;
pub const IF_OPER_LOWERLAYERDOWN: _bindgen_ty_84 = 3;
pub const IF_OPER_TESTING: _bindgen_ty_84 = 4;
pub const IF_OPER_DORMANT: _bindgen_ty_84 = 5;
pub const IF_OPER_UP: _bindgen_ty_84 = 6;
pub type _bindgen_ty_84 = ::std::os::raw::c_uint;
pub const IF_LINK_MODE_DEFAULT: _bindgen_ty_85 = 0;
pub const IF_LINK_MODE_DORMANT: _bindgen_ty_85 = 1;
pub const IF_LINK_MODE_TESTING: _bindgen_ty_85 = 2;
pub type _bindgen_ty_85 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmap {
    pub mem_start: ::std::os::raw::c_ulong,
    pub mem_end: ::std::os::raw::c_ulong,
    pub base_addr: ::std::os::raw::c_ushort,
    pub irq: ::std::os::raw::c_uchar,
    pub dma: ::std::os::raw::c_uchar,
    pub port: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifmap"][::std::mem::size_of::<ifmap>() - 24usize];
    ["Alignment of ifmap"][::std::mem::align_of::<ifmap>() - 8usize];
    ["Offset of field: ifmap::mem_start"][::std::mem::offset_of!(ifmap, mem_start) - 0usize];
    ["Offset of field: ifmap::mem_end"][::std::mem::offset_of!(ifmap, mem_end) - 8usize];
    ["Offset of field: ifmap::base_addr"][::std::mem::offset_of!(ifmap, base_addr) - 16usize];
    ["Offset of field: ifmap::irq"][::std::mem::offset_of!(ifmap, irq) - 18usize];
    ["Offset of field: ifmap::dma"][::std::mem::offset_of!(ifmap, dma) - 19usize];
    ["Offset of field: ifmap::port"][::std::mem::offset_of!(ifmap, port) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_settings {
    pub type_: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub ifs_ifsu: if_settings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_settings__bindgen_ty_1 {
    pub raw_hdlc: *mut raw_hdlc_proto,
    pub cisco: *mut cisco_proto,
    pub fr: *mut fr_proto,
    pub fr_pvc: *mut fr_proto_pvc,
    pub fr_pvc_info: *mut fr_proto_pvc_info,
    pub x25: *mut x25_hdlc_proto,
    pub sync: *mut sync_serial_settings,
    pub te1: *mut te1_settings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_settings__bindgen_ty_1"]
        [::std::mem::size_of::<if_settings__bindgen_ty_1>() - 8usize];
    ["Alignment of if_settings__bindgen_ty_1"]
        [::std::mem::align_of::<if_settings__bindgen_ty_1>() - 8usize];
    ["Offset of field: if_settings__bindgen_ty_1::raw_hdlc"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, raw_hdlc) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::cisco"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, cisco) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::fr"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, fr) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::fr_pvc"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, fr_pvc) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::fr_pvc_info"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, fr_pvc_info) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::x25"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, x25) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::sync"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, sync) - 0usize];
    ["Offset of field: if_settings__bindgen_ty_1::te1"]
        [::std::mem::offset_of!(if_settings__bindgen_ty_1, te1) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_settings"][::std::mem::size_of::<if_settings>() - 16usize];
    ["Alignment of if_settings"][::std::mem::align_of::<if_settings>() - 8usize];
    ["Offset of field: if_settings::type_"][::std::mem::offset_of!(if_settings, type_) - 0usize];
    ["Offset of field: if_settings::size"][::std::mem::offset_of!(if_settings, size) - 4usize];
    ["Offset of field: if_settings::ifs_ifsu"]
        [::std::mem::offset_of!(if_settings, ifs_ifsu) - 8usize];
};
#[repr(C)]
pub struct ifreq {
    pub ifr_ifrn: ifreq__bindgen_ty_1,
    pub ifr_ifru: ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifrn_name: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq__bindgen_ty_1"][::std::mem::size_of::<ifreq__bindgen_ty_1>() - 16usize];
    ["Alignment of ifreq__bindgen_ty_1"][::std::mem::align_of::<ifreq__bindgen_ty_1>() - 1usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifrn_name"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifrn_name) - 0usize];
};
#[repr(C)]
pub struct ifreq__bindgen_ty_2 {
    pub ifru_addr: __BindgenUnionField<sockaddr>,
    pub ifru_dstaddr: __BindgenUnionField<sockaddr>,
    pub ifru_broadaddr: __BindgenUnionField<sockaddr>,
    pub ifru_netmask: __BindgenUnionField<sockaddr>,
    pub ifru_hwaddr: __BindgenUnionField<sockaddr>,
    pub ifru_flags: __BindgenUnionField<::std::os::raw::c_short>,
    pub ifru_ivalue: __BindgenUnionField<::std::os::raw::c_int>,
    pub ifru_mtu: __BindgenUnionField<::std::os::raw::c_int>,
    pub ifru_map: __BindgenUnionField<ifmap>,
    pub ifru_slave: __BindgenUnionField<[::std::os::raw::c_char; 16usize]>,
    pub ifru_newname: __BindgenUnionField<[::std::os::raw::c_char; 16usize]>,
    pub ifru_data: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub ifru_settings: __BindgenUnionField<if_settings>,
    pub bindgen_union_field: [u64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq__bindgen_ty_2"][::std::mem::size_of::<ifreq__bindgen_ty_2>() - 24usize];
    ["Alignment of ifreq__bindgen_ty_2"][::std::mem::align_of::<ifreq__bindgen_ty_2>() - 8usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_addr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_addr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_dstaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_dstaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_broadaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_broadaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_netmask"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_netmask) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_hwaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_hwaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_flags"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_flags) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_ivalue"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_ivalue) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_mtu"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_mtu) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_map"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_map) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_slave"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_slave) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_newname"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_newname) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_data"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_data) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_2::ifru_settings"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_2, ifru_settings) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq"][::std::mem::size_of::<ifreq>() - 40usize];
    ["Alignment of ifreq"][::std::mem::align_of::<ifreq>() - 8usize];
    ["Offset of field: ifreq::ifr_ifrn"][::std::mem::offset_of!(ifreq, ifr_ifrn) - 0usize];
    ["Offset of field: ifreq::ifr_ifru"][::std::mem::offset_of!(ifreq, ifr_ifru) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: *mut ::std::os::raw::c_char,
    pub ifcu_req: *mut ifreq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifconf__bindgen_ty_1"][::std::mem::size_of::<ifconf__bindgen_ty_1>() - 8usize];
    ["Alignment of ifconf__bindgen_ty_1"][::std::mem::align_of::<ifconf__bindgen_ty_1>() - 8usize];
    ["Offset of field: ifconf__bindgen_ty_1::ifcu_buf"]
        [::std::mem::offset_of!(ifconf__bindgen_ty_1, ifcu_buf) - 0usize];
    ["Offset of field: ifconf__bindgen_ty_1::ifcu_req"]
        [::std::mem::offset_of!(ifconf__bindgen_ty_1, ifcu_req) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifconf"][::std::mem::size_of::<ifconf>() - 16usize];
    ["Alignment of ifconf"][::std::mem::align_of::<ifconf>() - 8usize];
    ["Offset of field: ifconf::ifc_len"][::std::mem::offset_of!(ifconf, ifc_len) - 0usize];
    ["Offset of field: ifconf::ifc_ifcu"][::std::mem::offset_of!(ifconf, ifc_ifcu) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait_bit_key {
    pub flags: *mut ::std::os::raw::c_void,
    pub bit_nr: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait_bit_key"][::std::mem::size_of::<wait_bit_key>() - 24usize];
    ["Alignment of wait_bit_key"][::std::mem::align_of::<wait_bit_key>() - 8usize];
    ["Offset of field: wait_bit_key::flags"][::std::mem::offset_of!(wait_bit_key, flags) - 0usize];
    ["Offset of field: wait_bit_key::bit_nr"]
        [::std::mem::offset_of!(wait_bit_key, bit_nr) - 8usize];
    ["Offset of field: wait_bit_key::timeout"]
        [::std::mem::offset_of!(wait_bit_key, timeout) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait_bit_queue_entry {
    pub key: wait_bit_key,
    pub wq_entry: wait_queue_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait_bit_queue_entry"][::std::mem::size_of::<wait_bit_queue_entry>() - 64usize];
    ["Alignment of wait_bit_queue_entry"][::std::mem::align_of::<wait_bit_queue_entry>() - 8usize];
    ["Offset of field: wait_bit_queue_entry::key"]
        [::std::mem::offset_of!(wait_bit_queue_entry, key) - 0usize];
    ["Offset of field: wait_bit_queue_entry::wq_entry"]
        [::std::mem::offset_of!(wait_bit_queue_entry, wq_entry) - 24usize];
};
pub type wait_bit_action_f = ::std::option::Option<
    unsafe extern "C" fn(
        key: *mut wait_bit_key,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __wake_up_bit(
        wq_head: *mut wait_queue_head,
        word: *mut ::std::os::raw::c_void,
        bit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn __wait_on_bit(
        wq_head: *mut wait_queue_head,
        wbq_entry: *mut wait_bit_queue_entry,
        action: wait_bit_action_f,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __wait_on_bit_lock(
        wq_head: *mut wait_queue_head,
        wbq_entry: *mut wait_bit_queue_entry,
        action: wait_bit_action_f,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wake_up_bit(word: *mut ::std::os::raw::c_void, bit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn out_of_line_wait_on_bit(
        word: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_int,
        action: wait_bit_action_f,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn out_of_line_wait_on_bit_timeout(
        word: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_int,
        action: wait_bit_action_f,
        mode: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn out_of_line_wait_on_bit_lock(
        word: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_int,
        action: wait_bit_action_f,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bit_waitqueue(
        word: *mut ::std::os::raw::c_void,
        bit: ::std::os::raw::c_int,
    ) -> *mut wait_queue_head;
}
extern "C" {
    pub fn wait_bit_init();
}
extern "C" {
    pub fn wake_bit_function(
        wq_entry: *mut wait_queue_entry,
        mode: ::std::os::raw::c_uint,
        sync: ::std::os::raw::c_int,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bit_wait(key: *mut wait_bit_key, mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bit_wait_io(
        key: *mut wait_bit_key,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bit_wait_timeout(
        key: *mut wait_bit_key,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bit_wait_io_timeout(
        key: *mut wait_bit_key,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_wait_var_entry(
        wbq_entry: *mut wait_bit_queue_entry,
        var: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wake_up_var(var: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __var_waitqueue(p: *mut ::std::os::raw::c_void) -> *mut wait_queue_head_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_bl_head {
    pub first: *mut hlist_bl_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_bl_head"][::std::mem::size_of::<hlist_bl_head>() - 8usize];
    ["Alignment of hlist_bl_head"][::std::mem::align_of::<hlist_bl_head>() - 8usize];
    ["Offset of field: hlist_bl_head::first"]
        [::std::mem::offset_of!(hlist_bl_head, first) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_bl_node {
    pub next: *mut hlist_bl_node,
    pub pprev: *mut *mut hlist_bl_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_bl_node"][::std::mem::size_of::<hlist_bl_node>() - 16usize];
    ["Alignment of hlist_bl_node"][::std::mem::align_of::<hlist_bl_node>() - 8usize];
    ["Offset of field: hlist_bl_node::next"][::std::mem::offset_of!(hlist_bl_node, next) - 0usize];
    ["Offset of field: hlist_bl_node::pprev"]
        [::std::mem::offset_of!(hlist_bl_node, pprev) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lockref {
    pub __bindgen_anon_1: lockref__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lockref__bindgen_ty_1 {
    pub lock_count: __u64,
    pub __bindgen_anon_1: lockref__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lockref__bindgen_ty_1__bindgen_ty_1 {
    pub lock: spinlock_t,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockref__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lockref__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of lockref__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lockref__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: lockref__bindgen_ty_1__bindgen_ty_1::lock"]
        [::std::mem::offset_of!(lockref__bindgen_ty_1__bindgen_ty_1, lock) - 0usize];
    ["Offset of field: lockref__bindgen_ty_1__bindgen_ty_1::count"]
        [::std::mem::offset_of!(lockref__bindgen_ty_1__bindgen_ty_1, count) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockref__bindgen_ty_1"][::std::mem::size_of::<lockref__bindgen_ty_1>() - 8usize];
    ["Alignment of lockref__bindgen_ty_1"]
        [::std::mem::align_of::<lockref__bindgen_ty_1>() - 8usize];
    ["Offset of field: lockref__bindgen_ty_1::lock_count"]
        [::std::mem::offset_of!(lockref__bindgen_ty_1, lock_count) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockref"][::std::mem::size_of::<lockref>() - 8usize];
    ["Alignment of lockref"][::std::mem::align_of::<lockref>() - 8usize];
};
extern "C" {
    pub fn lockref_get(arg1: *mut lockref);
}
extern "C" {
    pub fn lockref_put_return(arg1: *mut lockref) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockref_get_not_zero(arg1: *mut lockref) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockref_put_not_zero(arg1: *mut lockref) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockref_put_or_lock(arg1: *mut lockref) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockref_mark_dead(arg1: *mut lockref);
}
extern "C" {
    pub fn lockref_get_not_dead(arg1: *mut lockref) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn full_name_hash(
        salt: *const ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hashlen_string(
        salt: *const ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> u64_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qstr {
    pub __bindgen_anon_1: qstr__bindgen_ty_1,
    pub name: *const ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qstr__bindgen_ty_1 {
    pub __bindgen_anon_1: qstr__bindgen_ty_1__bindgen_ty_1,
    pub hash_len: u64_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qstr__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32_,
    pub len: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qstr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<qstr__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of qstr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<qstr__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: qstr__bindgen_ty_1__bindgen_ty_1::hash"]
        [::std::mem::offset_of!(qstr__bindgen_ty_1__bindgen_ty_1, hash) - 0usize];
    ["Offset of field: qstr__bindgen_ty_1__bindgen_ty_1::len"]
        [::std::mem::offset_of!(qstr__bindgen_ty_1__bindgen_ty_1, len) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qstr__bindgen_ty_1"][::std::mem::size_of::<qstr__bindgen_ty_1>() - 8usize];
    ["Alignment of qstr__bindgen_ty_1"][::std::mem::align_of::<qstr__bindgen_ty_1>() - 8usize];
    ["Offset of field: qstr__bindgen_ty_1::hash_len"]
        [::std::mem::offset_of!(qstr__bindgen_ty_1, hash_len) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qstr"][::std::mem::size_of::<qstr>() - 16usize];
    ["Alignment of qstr"][::std::mem::align_of::<qstr>() - 8usize];
    ["Offset of field: qstr::name"][::std::mem::offset_of!(qstr, name) - 8usize];
};
extern "C" {
    pub static empty_name: qstr;
}
extern "C" {
    pub static slash_name: qstr;
}
extern "C" {
    pub static dotdot_name: qstr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dentry {
    pub d_flags: ::std::os::raw::c_uint,
    pub d_seq: seqcount_spinlock_t,
    pub d_hash: hlist_bl_node,
    pub d_parent: *mut dentry,
    pub d_name: qstr,
    pub d_inode: *mut inode,
    pub d_iname: [::std::os::raw::c_uchar; 40usize],
    pub d_op: *const dentry_operations,
    pub d_sb: *mut super_block,
    pub d_time: ::std::os::raw::c_ulong,
    pub d_fsdata: *mut ::std::os::raw::c_void,
    pub d_lockref: lockref,
    pub __bindgen_anon_1: dentry__bindgen_ty_1,
    pub d_sib: hlist_node,
    pub d_children: hlist_head,
    pub d_u: dentry__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_1 {
    pub d_lru: list_head,
    pub d_wait: *mut wait_queue_head_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry__bindgen_ty_1"][::std::mem::size_of::<dentry__bindgen_ty_1>() - 16usize];
    ["Alignment of dentry__bindgen_ty_1"][::std::mem::align_of::<dentry__bindgen_ty_1>() - 8usize];
    ["Offset of field: dentry__bindgen_ty_1::d_lru"]
        [::std::mem::offset_of!(dentry__bindgen_ty_1, d_lru) - 0usize];
    ["Offset of field: dentry__bindgen_ty_1::d_wait"]
        [::std::mem::offset_of!(dentry__bindgen_ty_1, d_wait) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_2 {
    pub d_alias: hlist_node,
    pub d_in_lookup_hash: hlist_bl_node,
    pub d_rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry__bindgen_ty_2"][::std::mem::size_of::<dentry__bindgen_ty_2>() - 16usize];
    ["Alignment of dentry__bindgen_ty_2"][::std::mem::align_of::<dentry__bindgen_ty_2>() - 8usize];
    ["Offset of field: dentry__bindgen_ty_2::d_alias"]
        [::std::mem::offset_of!(dentry__bindgen_ty_2, d_alias) - 0usize];
    ["Offset of field: dentry__bindgen_ty_2::d_in_lookup_hash"]
        [::std::mem::offset_of!(dentry__bindgen_ty_2, d_in_lookup_hash) - 0usize];
    ["Offset of field: dentry__bindgen_ty_2::d_rcu"]
        [::std::mem::offset_of!(dentry__bindgen_ty_2, d_rcu) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry"][::std::mem::size_of::<dentry>() - 192usize];
    ["Alignment of dentry"][::std::mem::align_of::<dentry>() - 8usize];
    ["Offset of field: dentry::d_flags"][::std::mem::offset_of!(dentry, d_flags) - 0usize];
    ["Offset of field: dentry::d_seq"][::std::mem::offset_of!(dentry, d_seq) - 4usize];
    ["Offset of field: dentry::d_hash"][::std::mem::offset_of!(dentry, d_hash) - 8usize];
    ["Offset of field: dentry::d_parent"][::std::mem::offset_of!(dentry, d_parent) - 24usize];
    ["Offset of field: dentry::d_name"][::std::mem::offset_of!(dentry, d_name) - 32usize];
    ["Offset of field: dentry::d_inode"][::std::mem::offset_of!(dentry, d_inode) - 48usize];
    ["Offset of field: dentry::d_iname"][::std::mem::offset_of!(dentry, d_iname) - 56usize];
    ["Offset of field: dentry::d_op"][::std::mem::offset_of!(dentry, d_op) - 96usize];
    ["Offset of field: dentry::d_sb"][::std::mem::offset_of!(dentry, d_sb) - 104usize];
    ["Offset of field: dentry::d_time"][::std::mem::offset_of!(dentry, d_time) - 112usize];
    ["Offset of field: dentry::d_fsdata"][::std::mem::offset_of!(dentry, d_fsdata) - 120usize];
    ["Offset of field: dentry::d_lockref"][::std::mem::offset_of!(dentry, d_lockref) - 128usize];
    ["Offset of field: dentry::d_sib"][::std::mem::offset_of!(dentry, d_sib) - 152usize];
    ["Offset of field: dentry::d_children"][::std::mem::offset_of!(dentry, d_children) - 168usize];
    ["Offset of field: dentry::d_u"][::std::mem::offset_of!(dentry, d_u) - 176usize];
};
pub const dentry_d_lock_class_DENTRY_D_LOCK_NORMAL: dentry_d_lock_class = 0;
pub const dentry_d_lock_class_DENTRY_D_LOCK_NESTED: dentry_d_lock_class = 1;
pub type dentry_d_lock_class = ::std::os::raw::c_uint;
pub const d_real_type_D_REAL_DATA: d_real_type = 0;
pub const d_real_type_D_REAL_METADATA: d_real_type = 1;
pub type d_real_type = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct dentry_operations {
    pub d_revalidate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub d_weak_revalidate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub d_hash: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const dentry, arg2: *mut qstr) -> ::std::os::raw::c_int,
    >,
    pub d_compare: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const dentry,
            arg2: ::std::os::raw::c_uint,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const qstr,
        ) -> ::std::os::raw::c_int,
    >,
    pub d_delete:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const dentry) -> ::std::os::raw::c_int>,
    pub d_init:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut dentry) -> ::std::os::raw::c_int>,
    pub d_release: ::std::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_prune: ::std::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_iput: ::std::option::Option<unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut inode)>,
    pub d_dname: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub d_automount: ::std::option::Option<unsafe extern "C" fn(arg1: *mut path) -> *mut vfsmount>,
    pub d_manage: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const path, arg2: bool_) -> ::std::os::raw::c_int,
    >,
    pub d_real: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, type_: d_real_type) -> *mut dentry,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry_operations"][::std::mem::size_of::<dentry_operations>() - 128usize];
    ["Alignment of dentry_operations"][::std::mem::align_of::<dentry_operations>() - 64usize];
    ["Offset of field: dentry_operations::d_revalidate"]
        [::std::mem::offset_of!(dentry_operations, d_revalidate) - 0usize];
    ["Offset of field: dentry_operations::d_weak_revalidate"]
        [::std::mem::offset_of!(dentry_operations, d_weak_revalidate) - 8usize];
    ["Offset of field: dentry_operations::d_hash"]
        [::std::mem::offset_of!(dentry_operations, d_hash) - 16usize];
    ["Offset of field: dentry_operations::d_compare"]
        [::std::mem::offset_of!(dentry_operations, d_compare) - 24usize];
    ["Offset of field: dentry_operations::d_delete"]
        [::std::mem::offset_of!(dentry_operations, d_delete) - 32usize];
    ["Offset of field: dentry_operations::d_init"]
        [::std::mem::offset_of!(dentry_operations, d_init) - 40usize];
    ["Offset of field: dentry_operations::d_release"]
        [::std::mem::offset_of!(dentry_operations, d_release) - 48usize];
    ["Offset of field: dentry_operations::d_prune"]
        [::std::mem::offset_of!(dentry_operations, d_prune) - 56usize];
    ["Offset of field: dentry_operations::d_iput"]
        [::std::mem::offset_of!(dentry_operations, d_iput) - 64usize];
    ["Offset of field: dentry_operations::d_dname"]
        [::std::mem::offset_of!(dentry_operations, d_dname) - 72usize];
    ["Offset of field: dentry_operations::d_automount"]
        [::std::mem::offset_of!(dentry_operations, d_automount) - 80usize];
    ["Offset of field: dentry_operations::d_manage"]
        [::std::mem::offset_of!(dentry_operations, d_manage) - 88usize];
    ["Offset of field: dentry_operations::d_real"]
        [::std::mem::offset_of!(dentry_operations, d_real) - 96usize];
};
extern "C" {
    pub static mut rename_lock: seqlock_t;
}
extern "C" {
    pub fn d_instantiate(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn d_instantiate_new(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn __d_drop(dentry: *mut dentry);
}
extern "C" {
    pub fn d_drop(dentry: *mut dentry);
}
extern "C" {
    pub fn d_delete(arg1: *mut dentry);
}
extern "C" {
    pub fn d_set_d_op(dentry: *mut dentry, op: *const dentry_operations);
}
extern "C" {
    pub fn d_alloc(arg1: *mut dentry, arg2: *const qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_alloc_anon(arg1: *mut super_block) -> *mut dentry;
}
extern "C" {
    pub fn d_alloc_parallel(
        arg1: *mut dentry,
        arg2: *const qstr,
        arg3: *mut wait_queue_head_t,
    ) -> *mut dentry;
}
extern "C" {
    pub fn d_splice_alias(arg1: *mut inode, arg2: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn d_add_ci(arg1: *mut dentry, arg2: *mut inode, arg3: *mut qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_same_name(dentry: *const dentry, parent: *const dentry, name: *const qstr) -> bool_;
}
extern "C" {
    pub fn d_exact_alias(arg1: *mut dentry, arg2: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_find_any_alias(inode: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_obtain_alias(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_obtain_root(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn shrink_dcache_sb(arg1: *mut super_block);
}
extern "C" {
    pub fn shrink_dcache_parent(arg1: *mut dentry);
}
extern "C" {
    pub fn d_invalidate(arg1: *mut dentry);
}
extern "C" {
    pub fn d_make_root(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_mark_tmpfile(arg1: *mut file, arg2: *mut inode);
}
extern "C" {
    pub fn d_tmpfile(arg1: *mut file, arg2: *mut inode);
}
extern "C" {
    pub fn d_find_alias(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_prune_aliases(arg1: *mut inode);
}
extern "C" {
    pub fn d_find_alias_rcu(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn path_has_submounts(arg1: *const path) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d_rehash(arg1: *mut dentry);
}
extern "C" {
    pub fn d_add(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn d_move(arg1: *mut dentry, arg2: *mut dentry);
}
extern "C" {
    pub fn d_exchange(arg1: *mut dentry, arg2: *mut dentry);
}
extern "C" {
    pub fn d_ancestor(arg1: *mut dentry, arg2: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn d_lookup(arg1: *const dentry, arg2: *const qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_hash_and_lookup(arg1: *mut dentry, arg2: *mut qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_parent_ino(dentry: *mut dentry) -> ino_t;
}
extern "C" {
    pub fn dynamic_dname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __d_path(
        arg1: *const path,
        arg2: *const path,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn d_absolute_path(
        arg1: *const path,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn d_path(
        arg1: *const path,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dentry_path_raw(
        arg1: *const dentry,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dentry_path(
        arg1: *const dentry,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dget_parent(dentry: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn __d_lookup_unhash_wake(dentry: *mut dentry);
}
extern "C" {
    pub fn dput(arg1: *mut dentry);
}
extern "C" {
    pub static mut sysctl_vfs_cache_pressure: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct name_snapshot {
    pub name: qstr,
    pub inline_name: [::std::os::raw::c_uchar; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of name_snapshot"][::std::mem::size_of::<name_snapshot>() - 56usize];
    ["Alignment of name_snapshot"][::std::mem::align_of::<name_snapshot>() - 8usize];
    ["Offset of field: name_snapshot::name"][::std::mem::offset_of!(name_snapshot, name) - 0usize];
    ["Offset of field: name_snapshot::inline_name"]
        [::std::mem::offset_of!(name_snapshot, inline_name) - 16usize];
};
extern "C" {
    pub fn take_dentry_name_snapshot(arg1: *mut name_snapshot, arg2: *mut dentry);
}
extern "C" {
    pub fn release_dentry_name_snapshot(arg1: *mut name_snapshot);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct path {
    pub mnt: *mut vfsmount,
    pub dentry: *mut dentry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of path"][::std::mem::size_of::<path>() - 16usize];
    ["Alignment of path"][::std::mem::align_of::<path>() - 8usize];
    ["Offset of field: path::mnt"][::std::mem::offset_of!(path, mnt) - 0usize];
    ["Offset of field: path::dentry"][::std::mem::offset_of!(path, dentry) - 8usize];
};
extern "C" {
    pub fn path_get(arg1: *const path);
}
extern "C" {
    pub fn path_put(arg1: *const path);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shrinker_info_unit {
    pub nr_deferred: [atomic_long_t; 64usize],
    pub map: [::std::os::raw::c_ulong; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shrinker_info_unit"][::std::mem::size_of::<shrinker_info_unit>() - 520usize];
    ["Alignment of shrinker_info_unit"][::std::mem::align_of::<shrinker_info_unit>() - 8usize];
    ["Offset of field: shrinker_info_unit::nr_deferred"]
        [::std::mem::offset_of!(shrinker_info_unit, nr_deferred) - 0usize];
    ["Offset of field: shrinker_info_unit::map"]
        [::std::mem::offset_of!(shrinker_info_unit, map) - 512usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct shrinker_info {
    pub rcu: callback_head,
    pub map_nr_max: ::std::os::raw::c_int,
    pub unit: __IncompleteArrayField<*mut shrinker_info_unit>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shrinker_info"][::std::mem::size_of::<shrinker_info>() - 24usize];
    ["Alignment of shrinker_info"][::std::mem::align_of::<shrinker_info>() - 8usize];
    ["Offset of field: shrinker_info::rcu"][::std::mem::offset_of!(shrinker_info, rcu) - 0usize];
    ["Offset of field: shrinker_info::map_nr_max"]
        [::std::mem::offset_of!(shrinker_info, map_nr_max) - 16usize];
    ["Offset of field: shrinker_info::unit"][::std::mem::offset_of!(shrinker_info, unit) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shrink_control {
    pub gfp_mask: gfp_t,
    pub nid: ::std::os::raw::c_int,
    pub nr_to_scan: ::std::os::raw::c_ulong,
    pub nr_scanned: ::std::os::raw::c_ulong,
    pub memcg: *mut mem_cgroup,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shrink_control"][::std::mem::size_of::<shrink_control>() - 32usize];
    ["Alignment of shrink_control"][::std::mem::align_of::<shrink_control>() - 8usize];
    ["Offset of field: shrink_control::gfp_mask"]
        [::std::mem::offset_of!(shrink_control, gfp_mask) - 0usize];
    ["Offset of field: shrink_control::nid"][::std::mem::offset_of!(shrink_control, nid) - 4usize];
    ["Offset of field: shrink_control::nr_to_scan"]
        [::std::mem::offset_of!(shrink_control, nr_to_scan) - 8usize];
    ["Offset of field: shrink_control::nr_scanned"]
        [::std::mem::offset_of!(shrink_control, nr_scanned) - 16usize];
    ["Offset of field: shrink_control::memcg"]
        [::std::mem::offset_of!(shrink_control, memcg) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shrinker {
    pub count_objects: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut shrinker,
            sc: *mut shrink_control,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub scan_objects: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut shrinker,
            sc: *mut shrink_control,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub batch: ::std::os::raw::c_long,
    pub seeks: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub refcount: refcount_t,
    pub done: completion,
    pub rcu: callback_head,
    pub private_data: *mut ::std::os::raw::c_void,
    pub list: list_head,
    pub id: ::std::os::raw::c_int,
    pub nr_deferred: *mut atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shrinker"][::std::mem::size_of::<shrinker>() - 128usize];
    ["Alignment of shrinker"][::std::mem::align_of::<shrinker>() - 8usize];
    ["Offset of field: shrinker::count_objects"]
        [::std::mem::offset_of!(shrinker, count_objects) - 0usize];
    ["Offset of field: shrinker::scan_objects"]
        [::std::mem::offset_of!(shrinker, scan_objects) - 8usize];
    ["Offset of field: shrinker::batch"][::std::mem::offset_of!(shrinker, batch) - 16usize];
    ["Offset of field: shrinker::seeks"][::std::mem::offset_of!(shrinker, seeks) - 24usize];
    ["Offset of field: shrinker::flags"][::std::mem::offset_of!(shrinker, flags) - 28usize];
    ["Offset of field: shrinker::refcount"][::std::mem::offset_of!(shrinker, refcount) - 32usize];
    ["Offset of field: shrinker::done"][::std::mem::offset_of!(shrinker, done) - 40usize];
    ["Offset of field: shrinker::rcu"][::std::mem::offset_of!(shrinker, rcu) - 72usize];
    ["Offset of field: shrinker::private_data"]
        [::std::mem::offset_of!(shrinker, private_data) - 88usize];
    ["Offset of field: shrinker::list"][::std::mem::offset_of!(shrinker, list) - 96usize];
    ["Offset of field: shrinker::id"][::std::mem::offset_of!(shrinker, id) - 112usize];
    ["Offset of field: shrinker::nr_deferred"]
        [::std::mem::offset_of!(shrinker, nr_deferred) - 120usize];
};
extern "C" {
    pub fn shrinker_alloc(
        flags: ::std::os::raw::c_uint,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut shrinker;
}
extern "C" {
    pub fn shrinker_register(shrinker: *mut shrinker);
}
extern "C" {
    pub fn shrinker_free(shrinker: *mut shrinker);
}
pub const lru_status_LRU_REMOVED: lru_status = 0;
pub const lru_status_LRU_REMOVED_RETRY: lru_status = 1;
pub const lru_status_LRU_ROTATE: lru_status = 2;
pub const lru_status_LRU_SKIP: lru_status = 3;
pub const lru_status_LRU_RETRY: lru_status = 4;
pub const lru_status_LRU_STOP: lru_status = 5;
pub type lru_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_lru_one {
    pub list: list_head,
    pub nr_items: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_lru_one"][::std::mem::size_of::<list_lru_one>() - 24usize];
    ["Alignment of list_lru_one"][::std::mem::align_of::<list_lru_one>() - 8usize];
    ["Offset of field: list_lru_one::list"][::std::mem::offset_of!(list_lru_one, list) - 0usize];
    ["Offset of field: list_lru_one::nr_items"]
        [::std::mem::offset_of!(list_lru_one, nr_items) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct list_lru_memcg {
    pub rcu: callback_head,
    pub node: __IncompleteArrayField<list_lru_one>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_lru_memcg"][::std::mem::size_of::<list_lru_memcg>() - 16usize];
    ["Alignment of list_lru_memcg"][::std::mem::align_of::<list_lru_memcg>() - 8usize];
    ["Offset of field: list_lru_memcg::rcu"][::std::mem::offset_of!(list_lru_memcg, rcu) - 0usize];
    ["Offset of field: list_lru_memcg::node"]
        [::std::mem::offset_of!(list_lru_memcg, node) - 16usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct list_lru_node {
    pub lock: spinlock_t,
    pub lru: list_lru_one,
    pub nr_items: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_lru_node"][::std::mem::size_of::<list_lru_node>() - 64usize];
    ["Alignment of list_lru_node"][::std::mem::align_of::<list_lru_node>() - 64usize];
    ["Offset of field: list_lru_node::lock"][::std::mem::offset_of!(list_lru_node, lock) - 0usize];
    ["Offset of field: list_lru_node::lru"][::std::mem::offset_of!(list_lru_node, lru) - 8usize];
    ["Offset of field: list_lru_node::nr_items"]
        [::std::mem::offset_of!(list_lru_node, nr_items) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_lru {
    pub node: *mut list_lru_node,
    pub list: list_head,
    pub shrinker_id: ::std::os::raw::c_int,
    pub memcg_aware: bool_,
    pub xa: xarray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_lru"][::std::mem::size_of::<list_lru>() - 48usize];
    ["Alignment of list_lru"][::std::mem::align_of::<list_lru>() - 8usize];
    ["Offset of field: list_lru::node"][::std::mem::offset_of!(list_lru, node) - 0usize];
    ["Offset of field: list_lru::list"][::std::mem::offset_of!(list_lru, list) - 8usize];
    ["Offset of field: list_lru::shrinker_id"]
        [::std::mem::offset_of!(list_lru, shrinker_id) - 24usize];
    ["Offset of field: list_lru::memcg_aware"]
        [::std::mem::offset_of!(list_lru, memcg_aware) - 28usize];
    ["Offset of field: list_lru::xa"][::std::mem::offset_of!(list_lru, xa) - 32usize];
};
extern "C" {
    pub fn list_lru_destroy(lru: *mut list_lru);
}
extern "C" {
    pub fn __list_lru_init(
        lru: *mut list_lru,
        memcg_aware: bool_,
        key: *mut lock_class_key,
        shrinker: *mut shrinker,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcg_list_lru_alloc(
        memcg: *mut mem_cgroup,
        lru: *mut list_lru,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcg_reparent_list_lrus(memcg: *mut mem_cgroup, parent: *mut mem_cgroup);
}
extern "C" {
    #[doc = " list_lru_add: add an element to the lru list's tail\n @lru: the lru pointer\n @item: the item to be added.\n @nid: the node id of the sublist to add the item to.\n @memcg: the cgroup of the sublist to add the item to.\n\n If the element is already part of a list, this function returns doing\n nothing. Therefore the caller does not need to keep state about whether or\n not the element already belongs in the list and is allowed to lazy update\n it. Note however that this is valid for *a* list, not *this* list. If\n the caller organize itself in a way that elements can be in more than\n one type of list, it is up to the caller to fully remove the item from\n the previous list (with list_lru_del() for instance) before moving it\n to @lru.\n\n Return: true if the list was updated, false otherwise"]
    pub fn list_lru_add(
        lru: *mut list_lru,
        item: *mut list_head,
        nid: ::std::os::raw::c_int,
        memcg: *mut mem_cgroup,
    ) -> bool_;
}
extern "C" {
    #[doc = " list_lru_add_obj: add an element to the lru list's tail\n @lru: the lru pointer\n @item: the item to be added.\n\n This function is similar to list_lru_add(), but the NUMA node and the\n memcg of the sublist is determined by @item list_head. This assumption is\n valid for slab objects LRU such as dentries, inodes, etc.\n\n Return value: true if the list was updated, false otherwise"]
    pub fn list_lru_add_obj(lru: *mut list_lru, item: *mut list_head) -> bool_;
}
extern "C" {
    #[doc = " list_lru_del: delete an element from the lru list\n @lru: the lru pointer\n @item: the item to be deleted.\n @nid: the node id of the sublist to delete the item from.\n @memcg: the cgroup of the sublist to delete the item from.\n\n This function works analogously as list_lru_add() in terms of list\n manipulation. The comments about an element already pertaining to\n a list are also valid for list_lru_del().\n\n Return: true if the list was updated, false otherwise"]
    pub fn list_lru_del(
        lru: *mut list_lru,
        item: *mut list_head,
        nid: ::std::os::raw::c_int,
        memcg: *mut mem_cgroup,
    ) -> bool_;
}
extern "C" {
    #[doc = " list_lru_del_obj: delete an element from the lru list\n @lru: the lru pointer\n @item: the item to be deleted.\n\n This function is similar to list_lru_del(), but the NUMA node and the\n memcg of the sublist is determined by @item list_head. This assumption is\n valid for slab objects LRU such as dentries, inodes, etc.\n\n Return value: true if the list was updated, false otherwise."]
    pub fn list_lru_del_obj(lru: *mut list_lru, item: *mut list_head) -> bool_;
}
extern "C" {
    #[doc = " list_lru_count_one: return the number of objects currently held by @lru\n @lru: the lru pointer.\n @nid: the node id to count from.\n @memcg: the cgroup to count from.\n\n There is no guarantee that the list is not updated while the count is being\n computed. Callers that want such a guarantee need to provide an outer lock.\n\n Return: 0 for empty lists, otherwise the number of objects\n currently held by @lru."]
    pub fn list_lru_count_one(
        lru: *mut list_lru,
        nid: ::std::os::raw::c_int,
        memcg: *mut mem_cgroup,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn list_lru_count_node(
        lru: *mut list_lru,
        nid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn list_lru_isolate(list: *mut list_lru_one, item: *mut list_head);
}
extern "C" {
    pub fn list_lru_isolate_move(
        list: *mut list_lru_one,
        item: *mut list_head,
        head: *mut list_head,
    );
}
pub type list_lru_walk_cb = ::std::option::Option<
    unsafe extern "C" fn(
        item: *mut list_head,
        list: *mut list_lru_one,
        lock: *mut spinlock_t,
        cb_arg: *mut ::std::os::raw::c_void,
    ) -> lru_status,
>;
extern "C" {
    #[doc = " list_lru_walk_one: walk a @lru, isolating and disposing freeable items.\n @lru: the lru pointer.\n @nid: the node id to scan from.\n @memcg: the cgroup to scan from.\n @isolate: callback function that is responsible for deciding what to do with\n  the item currently being scanned\n @cb_arg: opaque type that will be passed to @isolate\n @nr_to_walk: how many items to scan.\n\n This function will scan all elements in a particular @lru, calling the\n @isolate callback for each of those items, along with the current list\n spinlock and a caller-provided opaque. The @isolate callback can choose to\n drop the lock internally, but *must* return with the lock held. The callback\n will return an enum lru_status telling the @lru infrastructure what to\n do with the object being scanned.\n\n Please note that @nr_to_walk does not mean how many objects will be freed,\n just how many objects will be scanned.\n\n Return: the number of objects effectively removed from the LRU."]
    pub fn list_lru_walk_one(
        lru: *mut list_lru,
        nid: ::std::os::raw::c_int,
        memcg: *mut mem_cgroup,
        isolate: list_lru_walk_cb,
        cb_arg: *mut ::std::os::raw::c_void,
        nr_to_walk: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[doc = " list_lru_walk_one_irq: walk a @lru, isolating and disposing freeable items.\n @lru: the lru pointer.\n @nid: the node id to scan from.\n @memcg: the cgroup to scan from.\n @isolate: callback function that is responsible for deciding what to do with\n  the item currently being scanned\n @cb_arg: opaque type that will be passed to @isolate\n @nr_to_walk: how many items to scan.\n\n Same as list_lru_walk_one() except that the spinlock is acquired with\n spin_lock_irq()."]
    pub fn list_lru_walk_one_irq(
        lru: *mut list_lru,
        nid: ::std::os::raw::c_int,
        memcg: *mut mem_cgroup,
        isolate: list_lru_walk_cb,
        cb_arg: *mut ::std::os::raw::c_void,
        nr_to_walk: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn list_lru_walk_node(
        lru: *mut list_lru,
        nid: ::std::os::raw::c_int,
        isolate: list_lru_walk_cb,
        cb_arg: *mut ::std::os::raw::c_void,
        nr_to_walk: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct upid {
    pub nr: ::std::os::raw::c_int,
    pub ns: *mut pid_namespace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of upid"][::std::mem::size_of::<upid>() - 16usize];
    ["Alignment of upid"][::std::mem::align_of::<upid>() - 8usize];
    ["Offset of field: upid::nr"][::std::mem::offset_of!(upid, nr) - 0usize];
    ["Offset of field: upid::ns"][::std::mem::offset_of!(upid, ns) - 8usize];
};
#[repr(C)]
pub struct pid {
    pub count: refcount_t,
    pub level: ::std::os::raw::c_uint,
    pub lock: spinlock_t,
    pub stashed: *mut dentry,
    pub ino: u64_,
    pub tasks: [hlist_head; 4usize],
    pub inodes: hlist_head,
    pub wait_pidfd: wait_queue_head_t,
    pub rcu: callback_head,
    pub numbers: __IncompleteArrayField<upid>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pid"][::std::mem::size_of::<pid>() - 112usize];
    ["Alignment of pid"][::std::mem::align_of::<pid>() - 8usize];
    ["Offset of field: pid::count"][::std::mem::offset_of!(pid, count) - 0usize];
    ["Offset of field: pid::level"][::std::mem::offset_of!(pid, level) - 4usize];
    ["Offset of field: pid::lock"][::std::mem::offset_of!(pid, lock) - 8usize];
    ["Offset of field: pid::stashed"][::std::mem::offset_of!(pid, stashed) - 16usize];
    ["Offset of field: pid::ino"][::std::mem::offset_of!(pid, ino) - 24usize];
    ["Offset of field: pid::tasks"][::std::mem::offset_of!(pid, tasks) - 32usize];
    ["Offset of field: pid::inodes"][::std::mem::offset_of!(pid, inodes) - 64usize];
    ["Offset of field: pid::wait_pidfd"][::std::mem::offset_of!(pid, wait_pidfd) - 72usize];
    ["Offset of field: pid::rcu"][::std::mem::offset_of!(pid, rcu) - 96usize];
    ["Offset of field: pid::numbers"][::std::mem::offset_of!(pid, numbers) - 112usize];
};
extern "C" {
    pub static mut init_struct_pid: pid;
}
extern "C" {
    pub fn pidfd_pid(file: *const file) -> *mut pid;
}
extern "C" {
    pub fn pidfd_get_pid(
        fd: ::std::os::raw::c_uint,
        flags: *mut ::std::os::raw::c_uint,
    ) -> *mut pid;
}
extern "C" {
    pub fn pidfd_get_task(
        pidfd: ::std::os::raw::c_int,
        flags: *mut ::std::os::raw::c_uint,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn pidfd_prepare(
        pid: *mut pid,
        flags: ::std::os::raw::c_uint,
        ret: *mut *mut file,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_notify_pidfd(task: *mut task_struct);
}
extern "C" {
    pub fn put_pid(pid: *mut pid);
}
extern "C" {
    pub fn pid_task(pid: *mut pid, arg1: pid_type) -> *mut task_struct;
}
extern "C" {
    pub fn get_pid_task(pid: *mut pid, arg1: pid_type) -> *mut task_struct;
}
extern "C" {
    pub fn get_task_pid(task: *mut task_struct, type_: pid_type) -> *mut pid;
}
extern "C" {
    pub fn attach_pid(task: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub fn detach_pid(task: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub fn change_pid(task: *mut task_struct, arg1: pid_type, pid: *mut pid);
}
extern "C" {
    pub fn exchange_tids(task: *mut task_struct, old: *mut task_struct);
}
extern "C" {
    pub fn transfer_pid(old: *mut task_struct, new: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub static mut pid_max: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut pid_max_min: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut pid_max_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_pid_ns(nr: ::std::os::raw::c_int, ns: *mut pid_namespace) -> *mut pid;
}
extern "C" {
    pub fn find_vpid(nr: ::std::os::raw::c_int) -> *mut pid;
}
extern "C" {
    pub fn find_get_pid(nr: ::std::os::raw::c_int) -> *mut pid;
}
extern "C" {
    pub fn find_ge_pid(nr: ::std::os::raw::c_int, arg1: *mut pid_namespace) -> *mut pid;
}
extern "C" {
    pub fn alloc_pid(ns: *mut pid_namespace, set_tid: *mut pid_t, set_tid_size: usize) -> *mut pid;
}
extern "C" {
    pub fn free_pid(pid: *mut pid);
}
extern "C" {
    pub fn disable_pid_allocation(ns: *mut pid_namespace);
}
extern "C" {
    pub fn pid_nr_ns(pid: *mut pid, ns: *mut pid_namespace) -> pid_t;
}
extern "C" {
    pub fn pid_vnr(pid: *mut pid) -> pid_t;
}
extern "C" {
    pub fn __task_pid_nr_ns(
        task: *mut task_struct,
        type_: pid_type,
        ns: *mut pid_namespace,
    ) -> pid_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __user_cap_header_struct {
    pub version: __u32,
    pub pid: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __user_cap_header_struct"]
        [::std::mem::size_of::<__user_cap_header_struct>() - 8usize];
    ["Alignment of __user_cap_header_struct"]
        [::std::mem::align_of::<__user_cap_header_struct>() - 4usize];
    ["Offset of field: __user_cap_header_struct::version"]
        [::std::mem::offset_of!(__user_cap_header_struct, version) - 0usize];
    ["Offset of field: __user_cap_header_struct::pid"]
        [::std::mem::offset_of!(__user_cap_header_struct, pid) - 4usize];
};
pub type cap_user_header_t = *mut __user_cap_header_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __user_cap_data_struct {
    pub effective: __u32,
    pub permitted: __u32,
    pub inheritable: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __user_cap_data_struct"][::std::mem::size_of::<__user_cap_data_struct>() - 12usize];
    ["Alignment of __user_cap_data_struct"]
        [::std::mem::align_of::<__user_cap_data_struct>() - 4usize];
    ["Offset of field: __user_cap_data_struct::effective"]
        [::std::mem::offset_of!(__user_cap_data_struct, effective) - 0usize];
    ["Offset of field: __user_cap_data_struct::permitted"]
        [::std::mem::offset_of!(__user_cap_data_struct, permitted) - 4usize];
    ["Offset of field: __user_cap_data_struct::inheritable"]
        [::std::mem::offset_of!(__user_cap_data_struct, inheritable) - 8usize];
};
pub type cap_user_data_t = *mut __user_cap_data_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_cap_data {
    pub magic_etc: __le32,
    pub data: [vfs_cap_data__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_cap_data__bindgen_ty_1 {
    pub permitted: __le32,
    pub inheritable: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfs_cap_data__bindgen_ty_1"]
        [::std::mem::size_of::<vfs_cap_data__bindgen_ty_1>() - 8usize];
    ["Alignment of vfs_cap_data__bindgen_ty_1"]
        [::std::mem::align_of::<vfs_cap_data__bindgen_ty_1>() - 4usize];
    ["Offset of field: vfs_cap_data__bindgen_ty_1::permitted"]
        [::std::mem::offset_of!(vfs_cap_data__bindgen_ty_1, permitted) - 0usize];
    ["Offset of field: vfs_cap_data__bindgen_ty_1::inheritable"]
        [::std::mem::offset_of!(vfs_cap_data__bindgen_ty_1, inheritable) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfs_cap_data"][::std::mem::size_of::<vfs_cap_data>() - 20usize];
    ["Alignment of vfs_cap_data"][::std::mem::align_of::<vfs_cap_data>() - 4usize];
    ["Offset of field: vfs_cap_data::magic_etc"]
        [::std::mem::offset_of!(vfs_cap_data, magic_etc) - 0usize];
    ["Offset of field: vfs_cap_data::data"][::std::mem::offset_of!(vfs_cap_data, data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_ns_cap_data {
    pub magic_etc: __le32,
    pub data: [vfs_ns_cap_data__bindgen_ty_1; 2usize],
    pub rootid: __le32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_ns_cap_data__bindgen_ty_1 {
    pub permitted: __le32,
    pub inheritable: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfs_ns_cap_data__bindgen_ty_1"]
        [::std::mem::size_of::<vfs_ns_cap_data__bindgen_ty_1>() - 8usize];
    ["Alignment of vfs_ns_cap_data__bindgen_ty_1"]
        [::std::mem::align_of::<vfs_ns_cap_data__bindgen_ty_1>() - 4usize];
    ["Offset of field: vfs_ns_cap_data__bindgen_ty_1::permitted"]
        [::std::mem::offset_of!(vfs_ns_cap_data__bindgen_ty_1, permitted) - 0usize];
    ["Offset of field: vfs_ns_cap_data__bindgen_ty_1::inheritable"]
        [::std::mem::offset_of!(vfs_ns_cap_data__bindgen_ty_1, inheritable) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfs_ns_cap_data"][::std::mem::size_of::<vfs_ns_cap_data>() - 24usize];
    ["Alignment of vfs_ns_cap_data"][::std::mem::align_of::<vfs_ns_cap_data>() - 4usize];
    ["Offset of field: vfs_ns_cap_data::magic_etc"]
        [::std::mem::offset_of!(vfs_ns_cap_data, magic_etc) - 0usize];
    ["Offset of field: vfs_ns_cap_data::data"]
        [::std::mem::offset_of!(vfs_ns_cap_data, data) - 4usize];
    ["Offset of field: vfs_ns_cap_data::rootid"]
        [::std::mem::offset_of!(vfs_ns_cap_data, rootid) - 20usize];
};
extern "C" {
    pub static mut file_caps_enabled: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_cap_t {
    pub val: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_cap_t"][::std::mem::size_of::<kernel_cap_t>() - 8usize];
    ["Alignment of kernel_cap_t"][::std::mem::align_of::<kernel_cap_t>() - 8usize];
    ["Offset of field: kernel_cap_t::val"][::std::mem::offset_of!(kernel_cap_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_vfs_cap_data {
    pub magic_etc: __u32,
    pub rootid: kuid_t,
    pub permitted: kernel_cap_t,
    pub inheritable: kernel_cap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_vfs_cap_data"][::std::mem::size_of::<cpu_vfs_cap_data>() - 24usize];
    ["Alignment of cpu_vfs_cap_data"][::std::mem::align_of::<cpu_vfs_cap_data>() - 8usize];
    ["Offset of field: cpu_vfs_cap_data::magic_etc"]
        [::std::mem::offset_of!(cpu_vfs_cap_data, magic_etc) - 0usize];
    ["Offset of field: cpu_vfs_cap_data::rootid"]
        [::std::mem::offset_of!(cpu_vfs_cap_data, rootid) - 4usize];
    ["Offset of field: cpu_vfs_cap_data::permitted"]
        [::std::mem::offset_of!(cpu_vfs_cap_data, permitted) - 8usize];
    ["Offset of field: cpu_vfs_cap_data::inheritable"]
        [::std::mem::offset_of!(cpu_vfs_cap_data, inheritable) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mnt_idmap {
    _unused: [u8; 0],
}
extern "C" {
    pub fn has_capability(t: *mut task_struct, cap: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn has_ns_capability(
        t: *mut task_struct,
        ns: *mut user_namespace,
        cap: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn has_capability_noaudit(t: *mut task_struct, cap: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn has_ns_capability_noaudit(
        t: *mut task_struct,
        ns: *mut user_namespace,
        cap: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn capable(cap: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable(ns: *mut user_namespace, cap: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable_noaudit(ns: *mut user_namespace, cap: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable_setid(ns: *mut user_namespace, cap: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn privileged_wrt_inode_uidgid(
        ns: *mut user_namespace,
        idmap: *mut mnt_idmap,
        inode: *const inode,
    ) -> bool_;
}
extern "C" {
    pub fn capable_wrt_inode_uidgid(
        idmap: *mut mnt_idmap,
        inode: *const inode,
        cap: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn file_ns_capable(
        file: *const file,
        ns: *mut user_namespace,
        cap: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn ptracer_capable(tsk: *mut task_struct, ns: *mut user_namespace) -> bool_;
}
extern "C" {
    pub fn get_vfs_caps_from_disk(
        idmap: *mut mnt_idmap,
        dentry: *const dentry,
        cpu_caps: *mut cpu_vfs_cap_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cap_convert_nscap(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        ivalue: *mut *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct semaphore {
    pub lock: raw_spinlock_t,
    pub count: ::std::os::raw::c_uint,
    pub wait_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of semaphore"][::std::mem::size_of::<semaphore>() - 24usize];
    ["Alignment of semaphore"][::std::mem::align_of::<semaphore>() - 8usize];
    ["Offset of field: semaphore::lock"][::std::mem::offset_of!(semaphore, lock) - 0usize];
    ["Offset of field: semaphore::count"][::std::mem::offset_of!(semaphore, count) - 4usize];
    ["Offset of field: semaphore::wait_list"]
        [::std::mem::offset_of!(semaphore, wait_list) - 8usize];
};
extern "C" {
    pub fn down(sem: *mut semaphore);
}
extern "C" {
    pub fn down_interruptible(sem: *mut semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn down_killable(sem: *mut semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn down_trylock(sem: *mut semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn down_timeout(
        sem: *mut semaphore,
        jiffies: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn up(sem: *mut semaphore);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f_owner_ex {
    pub type_: ::std::os::raw::c_int,
    pub pid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of f_owner_ex"][::std::mem::size_of::<f_owner_ex>() - 8usize];
    ["Alignment of f_owner_ex"][::std::mem::align_of::<f_owner_ex>() - 4usize];
    ["Offset of field: f_owner_ex::type_"][::std::mem::offset_of!(f_owner_ex, type_) - 0usize];
    ["Offset of field: f_owner_ex::pid"][::std::mem::offset_of!(f_owner_ex, pid) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __kernel_off_t,
    pub l_len: __kernel_off_t,
    pub l_pid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flock"][::std::mem::size_of::<flock>() - 32usize];
    ["Alignment of flock"][::std::mem::align_of::<flock>() - 8usize];
    ["Offset of field: flock::l_type"][::std::mem::offset_of!(flock, l_type) - 0usize];
    ["Offset of field: flock::l_whence"][::std::mem::offset_of!(flock, l_whence) - 2usize];
    ["Offset of field: flock::l_start"][::std::mem::offset_of!(flock, l_start) - 8usize];
    ["Offset of field: flock::l_len"][::std::mem::offset_of!(flock, l_len) - 16usize];
    ["Offset of field: flock::l_pid"][::std::mem::offset_of!(flock, l_pid) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock64 {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __kernel_loff_t,
    pub l_len: __kernel_loff_t,
    pub l_pid: __kernel_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flock64"][::std::mem::size_of::<flock64>() - 32usize];
    ["Alignment of flock64"][::std::mem::align_of::<flock64>() - 8usize];
    ["Offset of field: flock64::l_type"][::std::mem::offset_of!(flock64, l_type) - 0usize];
    ["Offset of field: flock64::l_whence"][::std::mem::offset_of!(flock64, l_whence) - 2usize];
    ["Offset of field: flock64::l_start"][::std::mem::offset_of!(flock64, l_start) - 8usize];
    ["Offset of field: flock64::l_len"][::std::mem::offset_of!(flock64, l_len) - 16usize];
    ["Offset of field: flock64::l_pid"][::std::mem::offset_of!(flock64, l_pid) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct open_how {
    pub flags: __u64,
    pub mode: __u64,
    pub resolve: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of open_how"][::std::mem::size_of::<open_how>() - 24usize];
    ["Alignment of open_how"][::std::mem::align_of::<open_how>() - 8usize];
    ["Offset of field: open_how::flags"][::std::mem::offset_of!(open_how, flags) - 0usize];
    ["Offset of field: open_how::mode"][::std::mem::offset_of!(open_how, mode) - 8usize];
    ["Offset of field: open_how::resolve"][::std::mem::offset_of!(open_how, resolve) - 16usize];
};
pub const migrate_mode_MIGRATE_ASYNC: migrate_mode = 0;
pub const migrate_mode_MIGRATE_SYNC_LIGHT: migrate_mode = 1;
pub const migrate_mode_MIGRATE_SYNC: migrate_mode = 2;
pub type migrate_mode = ::std::os::raw::c_uint;
pub const migrate_reason_MR_COMPACTION: migrate_reason = 0;
pub const migrate_reason_MR_MEMORY_FAILURE: migrate_reason = 1;
pub const migrate_reason_MR_MEMORY_HOTPLUG: migrate_reason = 2;
pub const migrate_reason_MR_SYSCALL: migrate_reason = 3;
pub const migrate_reason_MR_MEMPOLICY_MBIND: migrate_reason = 4;
pub const migrate_reason_MR_NUMA_MISPLACED: migrate_reason = 5;
pub const migrate_reason_MR_CONTIG_RANGE: migrate_reason = 6;
pub const migrate_reason_MR_LONGTERM_PIN: migrate_reason = 7;
pub const migrate_reason_MR_DEMOTION: migrate_reason = 8;
pub const migrate_reason_MR_DAMON: migrate_reason = 9;
pub const migrate_reason_MR_TYPES: migrate_reason = 10;
pub type migrate_reason = ::std::os::raw::c_uint;
extern "C" {
    pub static mut print_fatal_signals: ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_siginfo_to_user(
        to: *mut siginfo_t,
        from: *const kernel_siginfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_siginfo_from_user(
        to: *mut kernel_siginfo_t,
        from: *const siginfo_t,
    ) -> ::std::os::raw::c_int;
}
pub const siginfo_layout_SIL_KILL: siginfo_layout = 0;
pub const siginfo_layout_SIL_TIMER: siginfo_layout = 1;
pub const siginfo_layout_SIL_POLL: siginfo_layout = 2;
pub const siginfo_layout_SIL_FAULT: siginfo_layout = 3;
pub const siginfo_layout_SIL_FAULT_TRAPNO: siginfo_layout = 4;
pub const siginfo_layout_SIL_FAULT_MCEERR: siginfo_layout = 5;
pub const siginfo_layout_SIL_FAULT_BNDERR: siginfo_layout = 6;
pub const siginfo_layout_SIL_FAULT_PKUERR: siginfo_layout = 7;
pub const siginfo_layout_SIL_FAULT_PERF_EVENT: siginfo_layout = 8;
pub const siginfo_layout_SIL_CHLD: siginfo_layout = 9;
pub const siginfo_layout_SIL_RT: siginfo_layout = 10;
pub const siginfo_layout_SIL_SYS: siginfo_layout = 11;
pub type siginfo_layout = ::std::os::raw::c_uint;
extern "C" {
    pub fn siginfo_layout(
        sig: ::std::os::raw::c_uint,
        si_code: ::std::os::raw::c_int,
    ) -> siginfo_layout;
}
extern "C" {
    pub fn flush_sigqueue(queue: *mut sigpending);
}
extern "C" {
    pub fn next_signal(pending: *mut sigpending, mask: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_send_sig_info(
        sig: ::std::os::raw::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn group_send_sig_info(
        sig: ::std::os::raw::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send_signal_locked(
        sig: ::std::os::raw::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_current_blocked(arg1: *mut sigset_t);
}
extern "C" {
    pub fn __set_current_blocked(arg1: *const sigset_t);
}
extern "C" {
    pub static mut show_unhandled_signals: ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_signal(ksig: *mut ksignal) -> bool_;
}
extern "C" {
    pub fn signal_setup_done(
        failed: ::std::os::raw::c_int,
        ksig: *mut ksignal,
        stepping: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit_signals(tsk: *mut task_struct);
}
extern "C" {
    pub fn kernel_sigaction(arg1: ::std::os::raw::c_int, arg2: __sighandler_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmem_cache {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut sighand_cachep: *mut kmem_cache;
}
extern "C" {
    pub fn unhandled_signal(tsk: *mut task_struct, sig: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn signals_init();
}
extern "C" {
    pub fn restore_altstack(arg1: *const stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __save_altstack(
        arg1: *mut stack_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack_size_valid(ss_size: usize) -> bool_;
}
extern "C" {
    pub fn render_sigset_t(
        arg1: *mut seq_file,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut sigset_t,
    );
}
extern "C" {
    pub fn task_set_jobctl_pending(task: *mut task_struct, mask: ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn task_clear_jobctl_trapping(task: *mut task_struct);
}
extern "C" {
    pub fn task_clear_jobctl_pending(task: *mut task_struct, mask: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn arch_prctl_spec_ctrl_get(
        task: *mut task_struct,
        which: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_prctl_spec_ctrl_set(
        task: *mut task_struct,
        which: ::std::os::raw::c_ulong,
        ctrl: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_seccomp_spec_mitigate(task: *mut task_struct);
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_start_locking: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_acquire_returned: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_released: tracepoint;
}
extern "C" {
    pub fn __mmap_lock_do_trace_start_locking(mm: *mut mm_struct, write: bool_);
}
extern "C" {
    pub fn __mmap_lock_do_trace_acquire_returned(mm: *mut mm_struct, write: bool_, success: bool_);
}
extern "C" {
    pub fn __mmap_lock_do_trace_released(mm: *mut mm_struct, write: bool_);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct interval_tree_node {
    pub rb: rb_node,
    pub start: ::std::os::raw::c_ulong,
    pub last: ::std::os::raw::c_ulong,
    pub __subtree_last: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of interval_tree_node"][::std::mem::size_of::<interval_tree_node>() - 48usize];
    ["Alignment of interval_tree_node"][::std::mem::align_of::<interval_tree_node>() - 8usize];
    ["Offset of field: interval_tree_node::rb"]
        [::std::mem::offset_of!(interval_tree_node, rb) - 0usize];
    ["Offset of field: interval_tree_node::start"]
        [::std::mem::offset_of!(interval_tree_node, start) - 24usize];
    ["Offset of field: interval_tree_node::last"]
        [::std::mem::offset_of!(interval_tree_node, last) - 32usize];
    ["Offset of field: interval_tree_node::__subtree_last"]
        [::std::mem::offset_of!(interval_tree_node, __subtree_last) - 40usize];
};
extern "C" {
    pub fn interval_tree_insert(node: *mut interval_tree_node, root: *mut rb_root_cached);
}
extern "C" {
    pub fn interval_tree_remove(node: *mut interval_tree_node, root: *mut rb_root_cached);
}
extern "C" {
    pub fn interval_tree_iter_first(
        root: *mut rb_root_cached,
        start: ::std::os::raw::c_ulong,
        last: ::std::os::raw::c_ulong,
    ) -> *mut interval_tree_node;
}
extern "C" {
    pub fn interval_tree_iter_next(
        node: *mut interval_tree_node,
        start: ::std::os::raw::c_ulong,
        last: ::std::os::raw::c_ulong,
    ) -> *mut interval_tree_node;
}
#[doc = " struct interval_tree_span_iter - Find used and unused spans.\n @start_hole: Start of an interval for a hole when is_hole == 1\n @last_hole: Inclusive end of an interval for a hole when is_hole == 1\n @start_used: Start of a used interval when is_hole == 0\n @last_used: Inclusive end of a used interval when is_hole == 0\n @is_hole: 0 == used, 1 == is_hole, -1 == done iteration\n\n This iterator travels over spans in an interval tree. It does not return\n nodes but classifies each span as either a hole, where no nodes intersect, or\n a used, which is fully covered by nodes. Each iteration step toggles between\n hole and used until the entire range is covered. The returned spans always\n fully cover the requested range.\n\n The iterator is greedy, it always returns the largest hole or used possible,\n consolidating all consecutive nodes.\n\n Use interval_tree_span_iter_done() to detect end of iteration."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct interval_tree_span_iter {
    pub nodes: [*mut interval_tree_node; 2usize],
    pub first_index: ::std::os::raw::c_ulong,
    pub last_index: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: interval_tree_span_iter__bindgen_ty_1,
    pub __bindgen_anon_2: interval_tree_span_iter__bindgen_ty_2,
    pub is_hole: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union interval_tree_span_iter__bindgen_ty_1 {
    pub start_hole: ::std::os::raw::c_ulong,
    pub start_used: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of interval_tree_span_iter__bindgen_ty_1"]
        [::std::mem::size_of::<interval_tree_span_iter__bindgen_ty_1>() - 8usize];
    ["Alignment of interval_tree_span_iter__bindgen_ty_1"]
        [::std::mem::align_of::<interval_tree_span_iter__bindgen_ty_1>() - 8usize];
    ["Offset of field: interval_tree_span_iter__bindgen_ty_1::start_hole"]
        [::std::mem::offset_of!(interval_tree_span_iter__bindgen_ty_1, start_hole) - 0usize];
    ["Offset of field: interval_tree_span_iter__bindgen_ty_1::start_used"]
        [::std::mem::offset_of!(interval_tree_span_iter__bindgen_ty_1, start_used) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union interval_tree_span_iter__bindgen_ty_2 {
    pub last_hole: ::std::os::raw::c_ulong,
    pub last_used: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of interval_tree_span_iter__bindgen_ty_2"]
        [::std::mem::size_of::<interval_tree_span_iter__bindgen_ty_2>() - 8usize];
    ["Alignment of interval_tree_span_iter__bindgen_ty_2"]
        [::std::mem::align_of::<interval_tree_span_iter__bindgen_ty_2>() - 8usize];
    ["Offset of field: interval_tree_span_iter__bindgen_ty_2::last_hole"]
        [::std::mem::offset_of!(interval_tree_span_iter__bindgen_ty_2, last_hole) - 0usize];
    ["Offset of field: interval_tree_span_iter__bindgen_ty_2::last_used"]
        [::std::mem::offset_of!(interval_tree_span_iter__bindgen_ty_2, last_used) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of interval_tree_span_iter"][::std::mem::size_of::<interval_tree_span_iter>() - 56usize];
    ["Alignment of interval_tree_span_iter"]
        [::std::mem::align_of::<interval_tree_span_iter>() - 8usize];
    ["Offset of field: interval_tree_span_iter::nodes"]
        [::std::mem::offset_of!(interval_tree_span_iter, nodes) - 0usize];
    ["Offset of field: interval_tree_span_iter::first_index"]
        [::std::mem::offset_of!(interval_tree_span_iter, first_index) - 16usize];
    ["Offset of field: interval_tree_span_iter::last_index"]
        [::std::mem::offset_of!(interval_tree_span_iter, last_index) - 24usize];
    ["Offset of field: interval_tree_span_iter::is_hole"]
        [::std::mem::offset_of!(interval_tree_span_iter, is_hole) - 48usize];
};
extern "C" {
    pub fn interval_tree_span_iter_first(
        state: *mut interval_tree_span_iter,
        itree: *mut rb_root_cached,
        first_index: ::std::os::raw::c_ulong,
        last_index: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn interval_tree_span_iter_advance(
        iter: *mut interval_tree_span_iter,
        itree: *mut rb_root_cached,
        new_index: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn interval_tree_span_iter_next(state: *mut interval_tree_span_iter);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_notifier_subscriptions {
    _unused: [u8; 0],
}
pub const mmu_notifier_event_MMU_NOTIFY_UNMAP: mmu_notifier_event = 0;
pub const mmu_notifier_event_MMU_NOTIFY_CLEAR: mmu_notifier_event = 1;
pub const mmu_notifier_event_MMU_NOTIFY_PROTECTION_VMA: mmu_notifier_event = 2;
pub const mmu_notifier_event_MMU_NOTIFY_PROTECTION_PAGE: mmu_notifier_event = 3;
pub const mmu_notifier_event_MMU_NOTIFY_SOFT_DIRTY: mmu_notifier_event = 4;
pub const mmu_notifier_event_MMU_NOTIFY_RELEASE: mmu_notifier_event = 5;
pub const mmu_notifier_event_MMU_NOTIFY_MIGRATE: mmu_notifier_event = 6;
pub const mmu_notifier_event_MMU_NOTIFY_EXCLUSIVE: mmu_notifier_event = 7;
#[doc = " enum mmu_notifier_event - reason for the mmu notifier callback\n @MMU_NOTIFY_UNMAP: either munmap() that unmap the range or a mremap() that\n move the range\n\n @MMU_NOTIFY_CLEAR: clear page table entry (many reasons for this like\n madvise() or replacing a page by another one, ...).\n\n @MMU_NOTIFY_PROTECTION_VMA: update is due to protection change for the range\n ie using the vma access permission (vm_page_prot) to update the whole range\n is enough no need to inspect changes to the CPU page table (mprotect()\n syscall)\n\n @MMU_NOTIFY_PROTECTION_PAGE: update is due to change in read/write flag for\n pages in the range so to mirror those changes the user must inspect the CPU\n page table (from the end callback).\n\n @MMU_NOTIFY_SOFT_DIRTY: soft dirty accounting (still same page and same\n access flags). User should soft dirty the page in the end callback to make\n sure that anyone relying on soft dirtiness catch pages that might be written\n through non CPU mappings.\n\n @MMU_NOTIFY_RELEASE: used during mmu_interval_notifier invalidate to signal\n that the mm refcount is zero and the range is no longer accessible.\n\n @MMU_NOTIFY_MIGRATE: used during migrate_vma_collect() invalidate to signal\n a device driver to possibly ignore the invalidation if the\n owner field matches the driver's device private pgmap owner.\n\n @MMU_NOTIFY_EXCLUSIVE: to signal a device driver that the device will no\n longer have exclusive access to the page. When sent during creation of an\n exclusive range the owner will be initialised to the value provided by the\n caller of make_device_exclusive_range(), otherwise the owner will be NULL."]
pub type mmu_notifier_event = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_notifier_ops {
    pub release: ::std::option::Option<
        unsafe extern "C" fn(subscription: *mut mmu_notifier, mm: *mut mm_struct),
    >,
    pub clear_flush_young: ::std::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_young: ::std::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub test_young: ::std::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            address: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub invalidate_range_start: ::std::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            range: *const mmu_notifier_range,
        ) -> ::std::os::raw::c_int,
    >,
    pub invalidate_range_end: ::std::option::Option<
        unsafe extern "C" fn(subscription: *mut mmu_notifier, range: *const mmu_notifier_range),
    >,
    pub arch_invalidate_secondary_tlbs: ::std::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: ::std::os::raw::c_ulong,
            end: ::std::os::raw::c_ulong,
        ),
    >,
    pub alloc_notifier:
        ::std::option::Option<unsafe extern "C" fn(mm: *mut mm_struct) -> *mut mmu_notifier>,
    pub free_notifier: ::std::option::Option<unsafe extern "C" fn(subscription: *mut mmu_notifier)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmu_notifier_ops"][::std::mem::size_of::<mmu_notifier_ops>() - 72usize];
    ["Alignment of mmu_notifier_ops"][::std::mem::align_of::<mmu_notifier_ops>() - 8usize];
    ["Offset of field: mmu_notifier_ops::release"]
        [::std::mem::offset_of!(mmu_notifier_ops, release) - 0usize];
    ["Offset of field: mmu_notifier_ops::clear_flush_young"]
        [::std::mem::offset_of!(mmu_notifier_ops, clear_flush_young) - 8usize];
    ["Offset of field: mmu_notifier_ops::clear_young"]
        [::std::mem::offset_of!(mmu_notifier_ops, clear_young) - 16usize];
    ["Offset of field: mmu_notifier_ops::test_young"]
        [::std::mem::offset_of!(mmu_notifier_ops, test_young) - 24usize];
    ["Offset of field: mmu_notifier_ops::invalidate_range_start"]
        [::std::mem::offset_of!(mmu_notifier_ops, invalidate_range_start) - 32usize];
    ["Offset of field: mmu_notifier_ops::invalidate_range_end"]
        [::std::mem::offset_of!(mmu_notifier_ops, invalidate_range_end) - 40usize];
    ["Offset of field: mmu_notifier_ops::arch_invalidate_secondary_tlbs"]
        [::std::mem::offset_of!(mmu_notifier_ops, arch_invalidate_secondary_tlbs) - 48usize];
    ["Offset of field: mmu_notifier_ops::alloc_notifier"]
        [::std::mem::offset_of!(mmu_notifier_ops, alloc_notifier) - 56usize];
    ["Offset of field: mmu_notifier_ops::free_notifier"]
        [::std::mem::offset_of!(mmu_notifier_ops, free_notifier) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_notifier {
    pub hlist: hlist_node,
    pub ops: *const mmu_notifier_ops,
    pub mm: *mut mm_struct,
    pub rcu: callback_head,
    pub users: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmu_notifier"][::std::mem::size_of::<mmu_notifier>() - 56usize];
    ["Alignment of mmu_notifier"][::std::mem::align_of::<mmu_notifier>() - 8usize];
    ["Offset of field: mmu_notifier::hlist"][::std::mem::offset_of!(mmu_notifier, hlist) - 0usize];
    ["Offset of field: mmu_notifier::ops"][::std::mem::offset_of!(mmu_notifier, ops) - 16usize];
    ["Offset of field: mmu_notifier::mm"][::std::mem::offset_of!(mmu_notifier, mm) - 24usize];
    ["Offset of field: mmu_notifier::rcu"][::std::mem::offset_of!(mmu_notifier, rcu) - 32usize];
    ["Offset of field: mmu_notifier::users"][::std::mem::offset_of!(mmu_notifier, users) - 48usize];
};
#[doc = " struct mmu_interval_notifier_ops\n @invalidate: Upon return the caller must stop using any SPTEs within this\n              range. This function can sleep. Return false only if sleeping\n              was required but mmu_notifier_range_blockable(range) is false."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_interval_notifier_ops {
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(
            interval_sub: *mut mmu_interval_notifier,
            range: *const mmu_notifier_range,
            cur_seq: ::std::os::raw::c_ulong,
        ) -> bool_,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmu_interval_notifier_ops"]
        [::std::mem::size_of::<mmu_interval_notifier_ops>() - 8usize];
    ["Alignment of mmu_interval_notifier_ops"]
        [::std::mem::align_of::<mmu_interval_notifier_ops>() - 8usize];
    ["Offset of field: mmu_interval_notifier_ops::invalidate"]
        [::std::mem::offset_of!(mmu_interval_notifier_ops, invalidate) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_interval_notifier {
    pub interval_tree: interval_tree_node,
    pub ops: *const mmu_interval_notifier_ops,
    pub mm: *mut mm_struct,
    pub deferred_item: hlist_node,
    pub invalidate_seq: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmu_interval_notifier"][::std::mem::size_of::<mmu_interval_notifier>() - 88usize];
    ["Alignment of mmu_interval_notifier"]
        [::std::mem::align_of::<mmu_interval_notifier>() - 8usize];
    ["Offset of field: mmu_interval_notifier::interval_tree"]
        [::std::mem::offset_of!(mmu_interval_notifier, interval_tree) - 0usize];
    ["Offset of field: mmu_interval_notifier::ops"]
        [::std::mem::offset_of!(mmu_interval_notifier, ops) - 48usize];
    ["Offset of field: mmu_interval_notifier::mm"]
        [::std::mem::offset_of!(mmu_interval_notifier, mm) - 56usize];
    ["Offset of field: mmu_interval_notifier::deferred_item"]
        [::std::mem::offset_of!(mmu_interval_notifier, deferred_item) - 64usize];
    ["Offset of field: mmu_interval_notifier::invalidate_seq"]
        [::std::mem::offset_of!(mmu_interval_notifier, invalidate_seq) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_notifier_range {
    pub mm: *mut mm_struct,
    pub start: ::std::os::raw::c_ulong,
    pub end: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_uint,
    pub event: mmu_notifier_event,
    pub owner: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmu_notifier_range"][::std::mem::size_of::<mmu_notifier_range>() - 40usize];
    ["Alignment of mmu_notifier_range"][::std::mem::align_of::<mmu_notifier_range>() - 8usize];
    ["Offset of field: mmu_notifier_range::mm"]
        [::std::mem::offset_of!(mmu_notifier_range, mm) - 0usize];
    ["Offset of field: mmu_notifier_range::start"]
        [::std::mem::offset_of!(mmu_notifier_range, start) - 8usize];
    ["Offset of field: mmu_notifier_range::end"]
        [::std::mem::offset_of!(mmu_notifier_range, end) - 16usize];
    ["Offset of field: mmu_notifier_range::flags"]
        [::std::mem::offset_of!(mmu_notifier_range, flags) - 24usize];
    ["Offset of field: mmu_notifier_range::event"]
        [::std::mem::offset_of!(mmu_notifier_range, event) - 28usize];
    ["Offset of field: mmu_notifier_range::owner"]
        [::std::mem::offset_of!(mmu_notifier_range, owner) - 32usize];
};
extern "C" {
    pub fn mmu_notifier_get_locked(
        ops: *const mmu_notifier_ops,
        mm: *mut mm_struct,
    ) -> *mut mmu_notifier;
}
extern "C" {
    pub fn mmu_notifier_put(subscription: *mut mmu_notifier);
}
extern "C" {
    pub fn mmu_notifier_synchronize();
}
extern "C" {
    pub fn mmu_notifier_register(
        subscription: *mut mmu_notifier,
        mm: *mut mm_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mmu_notifier_register(
        subscription: *mut mmu_notifier,
        mm: *mut mm_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmu_notifier_unregister(subscription: *mut mmu_notifier, mm: *mut mm_struct);
}
extern "C" {
    pub fn mmu_interval_read_begin(
        interval_sub: *mut mmu_interval_notifier,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mmu_interval_notifier_insert(
        interval_sub: *mut mmu_interval_notifier,
        mm: *mut mm_struct,
        start: ::std::os::raw::c_ulong,
        length: ::std::os::raw::c_ulong,
        ops: *const mmu_interval_notifier_ops,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmu_interval_notifier_insert_locked(
        interval_sub: *mut mmu_interval_notifier,
        mm: *mut mm_struct,
        start: ::std::os::raw::c_ulong,
        length: ::std::os::raw::c_ulong,
        ops: *const mmu_interval_notifier_ops,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmu_interval_notifier_remove(interval_sub: *mut mmu_interval_notifier);
}
extern "C" {
    pub fn __mmu_notifier_subscriptions_destroy(mm: *mut mm_struct);
}
extern "C" {
    pub fn __mmu_notifier_release(mm: *mut mm_struct);
}
extern "C" {
    pub fn __mmu_notifier_clear_flush_young(
        mm: *mut mm_struct,
        start: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mmu_notifier_clear_young(
        mm: *mut mm_struct,
        start: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mmu_notifier_test_young(
        mm: *mut mm_struct,
        address: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mmu_notifier_invalidate_range_start(
        r: *mut mmu_notifier_range,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __mmu_notifier_invalidate_range_end(r: *mut mmu_notifier_range);
}
extern "C" {
    pub fn __mmu_notifier_arch_invalidate_secondary_tlbs(
        mm: *mut mm_struct,
        start: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn mmu_notifier_range_update_to_read_only(range: *const mmu_notifier_range) -> bool_;
}
extern "C" {
    pub fn pti_init();
}
extern "C" {
    pub fn pti_check_boottime_disable();
}
extern "C" {
    pub fn pti_finalize();
}
extern "C" {
    pub static mut init_pkru_value: u32_;
}
extern "C" {
    pub fn kernel_fpu_begin_mask(kfpu_mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn kernel_fpu_end();
}
extern "C" {
    pub fn irq_fpu_usable() -> bool_;
}
extern "C" {
    pub fn fpregs_mark_activate();
}
extern "C" {
    pub fn fpregs_lock_and_load();
}
extern "C" {
    pub fn fpregs_assert_state_consistent();
}
extern "C" {
    pub fn switch_fpu_return();
}
extern "C" {
    pub fn cpu_has_xfeatures(
        xfeatures_mask: u64_,
        feature_name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fpu__exception_code(
        fpu: *mut fpu,
        trap_nr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fpu_sync_fpstate(fpu: *mut fpu);
}
extern "C" {
    pub fn fpu_reset_from_exception_fixup();
}
extern "C" {
    pub fn fpu__init_cpu();
}
extern "C" {
    pub fn fpu__init_system();
}
extern "C" {
    pub fn fpu__init_check_bugs();
}
extern "C" {
    pub fn fpu__resume_cpu();
}
extern "C" {
    pub static mut fpu_fpregs_owner_ctx: *mut fpu;
}
extern "C" {
    pub fn fpstate_free(fpu: *mut fpu);
}
extern "C" {
    pub fn fpstate_clear_xstate_component(fps: *mut fpstate, xfeature: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn xstate_get_guest_group_perm() -> u64_;
}
extern "C" {
    pub fn get_xsave_addr(
        xsave: *mut xregs_state,
        xfeature_nr: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fpu_alloc_guest_fpstate(gfpu: *mut fpu_guest) -> bool_;
}
extern "C" {
    pub fn fpu_free_guest_fpstate(gfpu: *mut fpu_guest);
}
extern "C" {
    pub fn fpu_swap_kvm_fpstate(gfpu: *mut fpu_guest, enter_guest: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fpu_enable_guest_xfd_features(
        guest_fpu: *mut fpu_guest,
        xfeatures: u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fpu_update_guest_xfd(guest_fpu: *mut fpu_guest, xfd: u64_);
}
extern "C" {
    pub fn fpu_sync_guest_vmexit_xfd_state();
}
extern "C" {
    pub fn fpu_copy_guest_fpstate_to_uabi(
        gfpu: *mut fpu_guest,
        buf: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
        xfeatures: u64_,
        pkru: u32_,
    );
}
extern "C" {
    pub fn fpu_copy_uabi_to_guest_fpstate(
        gfpu: *mut fpu_guest,
        buf: *const ::std::os::raw::c_void,
        xcr0: u64_,
        vpkru: *mut u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fpu_xstate_prctl(
        option: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpu_idle_fpregs();
}
pub const cc_vendor_CC_VENDOR_NONE: cc_vendor = 0;
pub const cc_vendor_CC_VENDOR_AMD: cc_vendor = 1;
pub const cc_vendor_CC_VENDOR_INTEL: cc_vendor = 2;
pub type cc_vendor = ::std::os::raw::c_uint;
extern "C" {
    pub static mut cc_vendor: cc_vendor;
}
extern "C" {
    pub static mut cc_mask: u64_;
}
extern "C" {
    pub fn cc_mkenc(val: u64_) -> u64_;
}
extern "C" {
    pub fn cc_mkdec(val: u64_) -> u64_;
}
extern "C" {
    pub fn cc_random_init();
}
extern "C" {
    pub static mut early_top_pgt: [pgd_t; 512usize];
}
extern "C" {
    pub fn __early_make_pgtable(address: ::std::os::raw::c_ulong, pmd: pmdval_t) -> bool_;
}
extern "C" {
    pub fn ptdump_walk_pgd_level(m: *mut seq_file, mm: *mut mm_struct);
}
extern "C" {
    pub fn ptdump_walk_pgd_level_debugfs(m: *mut seq_file, mm: *mut mm_struct, user: bool_);
}
extern "C" {
    pub fn ptdump_walk_pgd_level_checkwx() -> bool_;
}
extern "C" {
    pub fn ptdump_walk_user_pgd_level_checkwx();
}
extern "C" {
    pub static mut empty_zero_page: [::std::os::raw::c_ulong; 512usize];
}
extern "C" {
    pub static mut pgd_lock: spinlock_t;
}
extern "C" {
    pub static mut pgd_list: list_head;
}
extern "C" {
    pub fn pgd_page_get_mm(page: *mut page) -> *mut mm_struct;
}
extern "C" {
    pub static mut early_pmd_flags: pmdval_t;
}
extern "C" {
    pub fn pte_mkwrite(pte: pte_t, vma: *mut vm_area_struct) -> pte_t;
}
extern "C" {
    pub fn pmd_mkwrite(pmd: pmd_t, vma: *mut vm_area_struct) -> pmd_t;
}
extern "C" {
    pub fn populate_extra_pmd(vaddr: ::std::os::raw::c_ulong) -> *mut pmd_t;
}
extern "C" {
    pub fn populate_extra_pte(vaddr: ::std::os::raw::c_ulong) -> *mut pte_t;
}
extern "C" {
    pub fn __pti_set_user_pgtbl(pgdp: *mut pgd_t, pgd: pgd_t) -> pgd_t;
}
pub const vsyscall_num___NR_vgettimeofday: vsyscall_num = 0;
pub const vsyscall_num___NR_vtime: vsyscall_num = 1;
pub const vsyscall_num___NR_vgetcpu: vsyscall_num = 2;
pub type vsyscall_num = ::std::os::raw::c_uint;
pub const fixed_addresses_VSYSCALL_PAGE: fixed_addresses = 511;
pub const fixed_addresses_FIX_DBGP_BASE: fixed_addresses = 512;
pub const fixed_addresses_FIX_EARLYCON_MEM_BASE: fixed_addresses = 513;
pub const fixed_addresses_FIX_APIC_BASE: fixed_addresses = 514;
pub const fixed_addresses_FIX_IO_APIC_BASE_0: fixed_addresses = 515;
pub const fixed_addresses_FIX_IO_APIC_BASE_END: fixed_addresses = 642;
pub const fixed_addresses_FIX_PARAVIRT_BOOTMAP: fixed_addresses = 643;
pub const fixed_addresses_FIX_APEI_GHES_IRQ: fixed_addresses = 644;
pub const fixed_addresses_FIX_APEI_GHES_NMI: fixed_addresses = 645;
pub const fixed_addresses___end_of_permanent_fixed_addresses: fixed_addresses = 646;
pub const fixed_addresses_FIX_BTMAP_END: fixed_addresses = 1024;
pub const fixed_addresses_FIX_BTMAP_BEGIN: fixed_addresses = 1535;
pub const fixed_addresses_FIX_TBOOT_BASE: fixed_addresses = 1536;
pub const fixed_addresses___end_of_fixed_addresses: fixed_addresses = 1537;
pub type fixed_addresses = ::std::os::raw::c_uint;
extern "C" {
    pub fn reserve_top_address(reserve: ::std::os::raw::c_ulong);
}
extern "C" {
    pub static mut fixmaps_set: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut pkmap_page_table: *mut pte_t;
}
extern "C" {
    pub fn __native_set_fixmap(idx: fixed_addresses, pte: pte_t);
}
extern "C" {
    pub fn native_set_fixmap(idx: ::std::os::raw::c_uint, phys: phys_addr_t, flags: pgprot_t);
}
extern "C" {
    pub fn early_memremap_encrypted(
        phys_addr: resource_size_t,
        size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn early_memremap_encrypted_wp(
        phys_addr: resource_size_t,
        size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn early_memremap_decrypted(
        phys_addr: resource_size_t,
        size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn early_memremap_decrypted_wp(
        phys_addr: resource_size_t,
        size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __early_set_fixmap(idx: fixed_addresses, phys: phys_addr_t, flags: pgprot_t);
}
extern "C" {
    pub static mut level4_kernel_pgt: [p4d_t; 512usize];
}
extern "C" {
    pub static mut level4_ident_pgt: [p4d_t; 512usize];
}
extern "C" {
    pub static mut level3_kernel_pgt: [pud_t; 512usize];
}
extern "C" {
    pub static mut level3_ident_pgt: [pud_t; 512usize];
}
extern "C" {
    pub static mut level2_kernel_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level2_fixmap_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level2_ident_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level1_fixmap_pgt: [pte_t; 1024usize];
}
extern "C" {
    pub static mut init_top_pgt: [pgd_t; 0usize];
}
extern "C" {
    pub fn paging_init();
}
extern "C" {
    pub fn set_pte_vaddr_p4d(p4d_page: *mut p4d_t, vaddr: ::std::os::raw::c_ulong, new_pte: pte_t);
}
extern "C" {
    pub fn set_pte_vaddr_pud(pud_page: *mut pud_t, vaddr: ::std::os::raw::c_ulong, new_pte: pte_t);
}
extern "C" {
    pub fn cleanup_highmap();
}
extern "C" {
    pub fn init_extra_mapping_uc(phys: ::std::os::raw::c_ulong, size: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn init_extra_mapping_wb(phys: ::std::os::raw::c_ulong, size: ::std::os::raw::c_ulong);
}
extern "C" {
    pub static mut direct_gbpages: ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_mem_mapping();
}
extern "C" {
    pub fn early_alloc_pgt_buf();
}
extern "C" {
    pub fn init_memory_mapping(
        start: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
        prot: pgprot_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut trampoline_pgd_entry: pgd_t;
}
extern "C" {
    pub fn ptep_set_access_flags(
        vma: *mut vm_area_struct,
        address: ::std::os::raw::c_ulong,
        ptep: *mut pte_t,
        entry: pte_t,
        dirty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptep_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: ::std::os::raw::c_ulong,
        ptep: *mut pte_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptep_clear_flush_young(
        vma: *mut vm_area_struct,
        address: ::std::os::raw::c_ulong,
        ptep: *mut pte_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmdp_set_access_flags(
        vma: *mut vm_area_struct,
        address: ::std::os::raw::c_ulong,
        pmdp: *mut pmd_t,
        entry: pmd_t,
        dirty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pudp_set_access_flags(
        vma: *mut vm_area_struct,
        address: ::std::os::raw::c_ulong,
        pudp: *mut pud_t,
        entry: pud_t,
        dirty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmdp_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: ::std::os::raw::c_ulong,
        pmdp: *mut pmd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pudp_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: ::std::os::raw::c_ulong,
        pudp: *mut pud_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmdp_clear_flush_young(
        vma: *mut vm_area_struct,
        address: ::std::os::raw::c_ulong,
        pmdp: *mut pmd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmdp_invalidate_ad(
        vma: *mut vm_area_struct,
        address: ::std::os::raw::c_ulong,
        pmdp: *mut pmd_t,
    ) -> pmd_t;
}
extern "C" {
    pub fn pfn_modify_allowed(pfn: ::std::os::raw::c_ulong, prot: pgprot_t) -> bool_;
}
extern "C" {
    pub fn arch_check_zapped_pte(vma: *mut vm_area_struct, pte: pte_t);
}
extern "C" {
    pub fn arch_check_zapped_pmd(vma: *mut vm_area_struct, pmd: pmd_t);
}
extern "C" {
    pub fn arch_memory_failure(
        pfn: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_is_platform_page(paddr: u64_) -> bool_;
}
extern "C" {
    pub static mut tlbstate_untag_mask: ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __flush_tlb_all();
}
extern "C" {
    pub fn cr4_update_irqsoff(set: ::std::os::raw::c_ulong, clear: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn cr4_read_shadow() -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlb_context {
    pub ctx_id: u64_,
    pub tlb_gen: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tlb_context"][::std::mem::size_of::<tlb_context>() - 16usize];
    ["Alignment of tlb_context"][::std::mem::align_of::<tlb_context>() - 8usize];
    ["Offset of field: tlb_context::ctx_id"][::std::mem::offset_of!(tlb_context, ctx_id) - 0usize];
    ["Offset of field: tlb_context::tlb_gen"]
        [::std::mem::offset_of!(tlb_context, tlb_gen) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tlb_state {
    pub loaded_mm: *mut mm_struct,
    pub __bindgen_anon_1: tlb_state__bindgen_ty_1,
    pub loaded_mm_asid: u16_,
    pub next_asid: u16_,
    pub invalidate_other: bool_,
    pub lam: u8_,
    pub user_pcid_flush_mask: ::std::os::raw::c_ushort,
    pub cr4: ::std::os::raw::c_ulong,
    pub ctxs: [tlb_context; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tlb_state__bindgen_ty_1 {
    pub last_user_mm: *mut mm_struct,
    pub last_user_mm_spec: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tlb_state__bindgen_ty_1"][::std::mem::size_of::<tlb_state__bindgen_ty_1>() - 8usize];
    ["Alignment of tlb_state__bindgen_ty_1"]
        [::std::mem::align_of::<tlb_state__bindgen_ty_1>() - 8usize];
    ["Offset of field: tlb_state__bindgen_ty_1::last_user_mm"]
        [::std::mem::offset_of!(tlb_state__bindgen_ty_1, last_user_mm) - 0usize];
    ["Offset of field: tlb_state__bindgen_ty_1::last_user_mm_spec"]
        [::std::mem::offset_of!(tlb_state__bindgen_ty_1, last_user_mm_spec) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tlb_state"][::std::mem::size_of::<tlb_state>() - 128usize];
    ["Alignment of tlb_state"][::std::mem::align_of::<tlb_state>() - 8usize];
    ["Offset of field: tlb_state::loaded_mm"]
        [::std::mem::offset_of!(tlb_state, loaded_mm) - 0usize];
    ["Offset of field: tlb_state::loaded_mm_asid"]
        [::std::mem::offset_of!(tlb_state, loaded_mm_asid) - 16usize];
    ["Offset of field: tlb_state::next_asid"]
        [::std::mem::offset_of!(tlb_state, next_asid) - 18usize];
    ["Offset of field: tlb_state::invalidate_other"]
        [::std::mem::offset_of!(tlb_state, invalidate_other) - 20usize];
    ["Offset of field: tlb_state::lam"][::std::mem::offset_of!(tlb_state, lam) - 21usize];
    ["Offset of field: tlb_state::user_pcid_flush_mask"]
        [::std::mem::offset_of!(tlb_state, user_pcid_flush_mask) - 22usize];
    ["Offset of field: tlb_state::cr4"][::std::mem::offset_of!(tlb_state, cr4) - 24usize];
    ["Offset of field: tlb_state::ctxs"][::std::mem::offset_of!(tlb_state, ctxs) - 32usize];
};
extern "C" {
    pub static mut cpu_tlbstate: tlb_state;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlb_state_shared {
    pub is_lazy: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tlb_state_shared"][::std::mem::size_of::<tlb_state_shared>() - 1usize];
    ["Alignment of tlb_state_shared"][::std::mem::align_of::<tlb_state_shared>() - 1usize];
    ["Offset of field: tlb_state_shared::is_lazy"]
        [::std::mem::offset_of!(tlb_state_shared, is_lazy) - 0usize];
};
extern "C" {
    pub static mut cpu_tlbstate_shared: tlb_state_shared;
}
extern "C" {
    pub fn nmi_uaccess_okay() -> bool_;
}
extern "C" {
    pub static mut mmu_cr4_features: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut trampoline_cr4_features: *mut u32_;
}
extern "C" {
    pub fn initialize_tlbstate_and_flush();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flush_tlb_info {
    pub mm: *mut mm_struct,
    pub start: ::std::os::raw::c_ulong,
    pub end: ::std::os::raw::c_ulong,
    pub new_tlb_gen: u64_,
    pub initiating_cpu: ::std::os::raw::c_uint,
    pub stride_shift: u8_,
    pub freed_tables: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flush_tlb_info"][::std::mem::size_of::<flush_tlb_info>() - 40usize];
    ["Alignment of flush_tlb_info"][::std::mem::align_of::<flush_tlb_info>() - 8usize];
    ["Offset of field: flush_tlb_info::mm"][::std::mem::offset_of!(flush_tlb_info, mm) - 0usize];
    ["Offset of field: flush_tlb_info::start"]
        [::std::mem::offset_of!(flush_tlb_info, start) - 8usize];
    ["Offset of field: flush_tlb_info::end"][::std::mem::offset_of!(flush_tlb_info, end) - 16usize];
    ["Offset of field: flush_tlb_info::new_tlb_gen"]
        [::std::mem::offset_of!(flush_tlb_info, new_tlb_gen) - 24usize];
    ["Offset of field: flush_tlb_info::initiating_cpu"]
        [::std::mem::offset_of!(flush_tlb_info, initiating_cpu) - 32usize];
    ["Offset of field: flush_tlb_info::stride_shift"]
        [::std::mem::offset_of!(flush_tlb_info, stride_shift) - 36usize];
    ["Offset of field: flush_tlb_info::freed_tables"]
        [::std::mem::offset_of!(flush_tlb_info, freed_tables) - 37usize];
};
extern "C" {
    pub fn flush_tlb_local();
}
extern "C" {
    pub fn flush_tlb_one_user(addr: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn flush_tlb_one_kernel(addr: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn flush_tlb_multi(cpumask: *const cpumask, info: *const flush_tlb_info);
}
extern "C" {
    pub fn flush_tlb_all();
}
extern "C" {
    pub fn flush_tlb_mm_range(
        mm: *mut mm_struct,
        start: ::std::os::raw::c_ulong,
        end: ::std::os::raw::c_ulong,
        stride_shift: ::std::os::raw::c_uint,
        freed_tables: bool_,
    );
}
extern "C" {
    pub fn flush_tlb_kernel_range(start: ::std::os::raw::c_ulong, end: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn arch_tlbbatch_flush(batch: *mut arch_tlbflush_unmap_batch);
}
extern "C" {
    pub fn rep_movs_alternative(
        to: *mut ::std::os::raw::c_void,
        from: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __copy_user_nocache(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __copy_user_flushcache(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rep_stos_alternative(
        addr: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __get_user_1() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_4() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_8() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_1() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_4() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_8() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __get_user_bad() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __put_user_bad();
}
extern "C" {
    pub fn __put_user_1();
}
extern "C" {
    pub fn __put_user_2();
}
extern "C" {
    pub fn __put_user_4();
}
extern "C" {
    pub fn __put_user_8();
}
extern "C" {
    pub fn __put_user_nocheck_1();
}
extern "C" {
    pub fn __put_user_nocheck_2();
}
extern "C" {
    pub fn __put_user_nocheck_4();
}
extern "C" {
    pub fn __put_user_nocheck_8();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __large_struct {
    pub buf: [::std::os::raw::c_ulong; 100usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __large_struct"][::std::mem::size_of::<__large_struct>() - 800usize];
    ["Alignment of __large_struct"][::std::mem::align_of::<__large_struct>() - 8usize];
    ["Offset of field: __large_struct::buf"][::std::mem::offset_of!(__large_struct, buf) - 0usize];
};
extern "C" {
    pub fn copy_from_user_nmi(
        to: *mut ::std::os::raw::c_void,
        from: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncpy_from_user(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strnlen_user(
        str_: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn copy_mc_to_kernel(
        to: *mut ::std::os::raw::c_void,
        from: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn copy_mc_to_user(
        to: *mut ::std::os::raw::c_void,
        from: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __try_cmpxchg_user_wrong_size();
}
extern "C" {
    pub fn _copy_from_user(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _copy_to_user(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn check_zeroed_user(
        from: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_from_kernel_nofault_allowed(
        unsafe_src: *const ::std::os::raw::c_void,
        size: usize,
    ) -> bool_;
}
extern "C" {
    pub fn copy_to_kernel_nofault(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn copy_from_user_nofault(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn copy_to_user_nofault(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strncpy_from_kernel_nofault(
        dst: *mut ::std::os::raw::c_char,
        unsafe_addr: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strncpy_from_user_nofault(
        dst: *mut ::std::os::raw::c_char,
        unsafe_addr: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strnlen_user_nofault(
        unsafe_addr: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn usercopy_abort(
        name: *const ::std::os::raw::c_char,
        detail: *const ::std::os::raw::c_char,
        to_user: bool_,
        offset: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
    ) -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct css_set {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_clone_args {
    pub flags: u64_,
    pub pidfd: *mut ::std::os::raw::c_int,
    pub child_tid: *mut ::std::os::raw::c_int,
    pub parent_tid: *mut ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub exit_signal: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub stack: ::std::os::raw::c_ulong,
    pub stack_size: ::std::os::raw::c_ulong,
    pub tls: ::std::os::raw::c_ulong,
    pub set_tid: *mut pid_t,
    pub set_tid_size: usize,
    pub cgroup: ::std::os::raw::c_int,
    pub idle: ::std::os::raw::c_int,
    pub fn_: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub fn_arg: *mut ::std::os::raw::c_void,
    pub cgrp: *mut cgroup,
    pub cset: *mut css_set,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_clone_args"][::std::mem::size_of::<kernel_clone_args>() - 128usize];
    ["Alignment of kernel_clone_args"][::std::mem::align_of::<kernel_clone_args>() - 8usize];
    ["Offset of field: kernel_clone_args::flags"]
        [::std::mem::offset_of!(kernel_clone_args, flags) - 0usize];
    ["Offset of field: kernel_clone_args::pidfd"]
        [::std::mem::offset_of!(kernel_clone_args, pidfd) - 8usize];
    ["Offset of field: kernel_clone_args::child_tid"]
        [::std::mem::offset_of!(kernel_clone_args, child_tid) - 16usize];
    ["Offset of field: kernel_clone_args::parent_tid"]
        [::std::mem::offset_of!(kernel_clone_args, parent_tid) - 24usize];
    ["Offset of field: kernel_clone_args::name"]
        [::std::mem::offset_of!(kernel_clone_args, name) - 32usize];
    ["Offset of field: kernel_clone_args::exit_signal"]
        [::std::mem::offset_of!(kernel_clone_args, exit_signal) - 40usize];
    ["Offset of field: kernel_clone_args::stack"]
        [::std::mem::offset_of!(kernel_clone_args, stack) - 48usize];
    ["Offset of field: kernel_clone_args::stack_size"]
        [::std::mem::offset_of!(kernel_clone_args, stack_size) - 56usize];
    ["Offset of field: kernel_clone_args::tls"]
        [::std::mem::offset_of!(kernel_clone_args, tls) - 64usize];
    ["Offset of field: kernel_clone_args::set_tid"]
        [::std::mem::offset_of!(kernel_clone_args, set_tid) - 72usize];
    ["Offset of field: kernel_clone_args::set_tid_size"]
        [::std::mem::offset_of!(kernel_clone_args, set_tid_size) - 80usize];
    ["Offset of field: kernel_clone_args::cgroup"]
        [::std::mem::offset_of!(kernel_clone_args, cgroup) - 88usize];
    ["Offset of field: kernel_clone_args::idle"]
        [::std::mem::offset_of!(kernel_clone_args, idle) - 92usize];
    ["Offset of field: kernel_clone_args::fn_"]
        [::std::mem::offset_of!(kernel_clone_args, fn_) - 96usize];
    ["Offset of field: kernel_clone_args::fn_arg"]
        [::std::mem::offset_of!(kernel_clone_args, fn_arg) - 104usize];
    ["Offset of field: kernel_clone_args::cgrp"]
        [::std::mem::offset_of!(kernel_clone_args, cgrp) - 112usize];
    ["Offset of field: kernel_clone_args::cset"]
        [::std::mem::offset_of!(kernel_clone_args, cset) - 120usize];
};
impl kernel_clone_args {
    #[inline]
    pub fn kthread(&self) -> u32_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_kthread(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn io_thread(&self) -> u32_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_io_thread(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn user_worker(&self) -> u32_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_user_worker(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_files(&self) -> u32_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_files(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        kthread: u32_,
        io_thread: u32_,
        user_worker: u32_,
        no_files: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let kthread: u32 = unsafe { ::std::mem::transmute(kthread) };
            kthread as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let io_thread: u32 = unsafe { ::std::mem::transmute(io_thread) };
            io_thread as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let user_worker: u32 = unsafe { ::std::mem::transmute(user_worker) };
            user_worker as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let no_files: u32 = unsafe { ::std::mem::transmute(no_files) };
            no_files as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut tasklist_lock: rwlock_t;
}
extern "C" {
    pub static mut mmlist_lock: spinlock_t;
}
extern "C" {
    pub static mut init_thread_union: thread_union;
}
extern "C" {
    pub static mut init_task: task_struct;
}
extern "C" {
    pub fn lockdep_tasklist_lock_is_held() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn schedule_tail(prev: *mut task_struct);
}
extern "C" {
    pub fn init_idle(idle: *mut task_struct, cpu: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sched_fork(
        clone_flags: ::std::os::raw::c_ulong,
        p: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_cgroup_fork(p: *mut task_struct, kargs: *mut kernel_clone_args);
}
extern "C" {
    pub fn sched_post_fork(p: *mut task_struct);
}
extern "C" {
    pub fn sched_dead(p: *mut task_struct);
}
extern "C" {
    pub fn do_task_dead() -> !;
}
extern "C" {
    pub fn make_task_dead(signr: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn mm_cache_init();
}
extern "C" {
    pub fn proc_caches_init();
}
extern "C" {
    pub fn fork_init();
}
extern "C" {
    pub fn release_task(p: *mut task_struct);
}
extern "C" {
    pub fn copy_thread(
        arg1: *mut task_struct,
        arg2: *const kernel_clone_args,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flush_thread();
}
extern "C" {
    pub fn exit_thread(tsk: *mut task_struct);
}
extern "C" {
    pub fn do_group_exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn exit_files(arg1: *mut task_struct);
}
extern "C" {
    pub fn exit_itimers(arg1: *mut task_struct);
}
extern "C" {
    pub fn kernel_clone(kargs: *mut kernel_clone_args) -> pid_t;
}
extern "C" {
    pub fn copy_process(
        pid: *mut pid,
        trace: ::std::os::raw::c_int,
        node: ::std::os::raw::c_int,
        args: *mut kernel_clone_args,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn create_io_thread(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
        node: ::std::os::raw::c_int,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn fork_idle(arg1: ::std::os::raw::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn kernel_thread(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulong,
    ) -> pid_t;
}
extern "C" {
    pub fn user_mode_thread(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_ulong,
    ) -> pid_t;
}
extern "C" {
    pub fn kernel_wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn kernel_wait(pid: pid_t, stat: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_task(tsk: *mut task_struct);
}
extern "C" {
    pub fn sched_exec();
}
extern "C" {
    pub fn __put_task_struct(t: *mut task_struct);
}
extern "C" {
    pub fn __put_task_struct_rcu_cb(rhp: *mut callback_head);
}
extern "C" {
    pub fn put_task_struct_rcu_user(task: *mut task_struct);
}
extern "C" {
    pub fn release_thread(dead_task: *mut task_struct);
}
extern "C" {
    pub static mut arch_task_struct_size: ::std::os::raw::c_int;
}
pub type class_task_lock_t = *mut task_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct assoc_array {
    pub root: *mut assoc_array_ptr,
    pub nr_leaves_on_tree: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of assoc_array"][::std::mem::size_of::<assoc_array>() - 16usize];
    ["Alignment of assoc_array"][::std::mem::align_of::<assoc_array>() - 8usize];
    ["Offset of field: assoc_array::root"][::std::mem::offset_of!(assoc_array, root) - 0usize];
    ["Offset of field: assoc_array::nr_leaves_on_tree"]
        [::std::mem::offset_of!(assoc_array, nr_leaves_on_tree) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct assoc_array_ops {
    pub get_key_chunk: ::std::option::Option<
        unsafe extern "C" fn(
            index_key: *const ::std::os::raw::c_void,
            level: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub get_object_key_chunk: ::std::option::Option<
        unsafe extern "C" fn(
            object: *const ::std::os::raw::c_void,
            level: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub compare_object: ::std::option::Option<
        unsafe extern "C" fn(
            object: *const ::std::os::raw::c_void,
            index_key: *const ::std::os::raw::c_void,
        ) -> bool_,
    >,
    pub diff_objects: ::std::option::Option<
        unsafe extern "C" fn(
            object: *const ::std::os::raw::c_void,
            index_key: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub free_object:
        ::std::option::Option<unsafe extern "C" fn(object: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of assoc_array_ops"][::std::mem::size_of::<assoc_array_ops>() - 40usize];
    ["Alignment of assoc_array_ops"][::std::mem::align_of::<assoc_array_ops>() - 8usize];
    ["Offset of field: assoc_array_ops::get_key_chunk"]
        [::std::mem::offset_of!(assoc_array_ops, get_key_chunk) - 0usize];
    ["Offset of field: assoc_array_ops::get_object_key_chunk"]
        [::std::mem::offset_of!(assoc_array_ops, get_object_key_chunk) - 8usize];
    ["Offset of field: assoc_array_ops::compare_object"]
        [::std::mem::offset_of!(assoc_array_ops, compare_object) - 16usize];
    ["Offset of field: assoc_array_ops::diff_objects"]
        [::std::mem::offset_of!(assoc_array_ops, diff_objects) - 24usize];
    ["Offset of field: assoc_array_ops::free_object"]
        [::std::mem::offset_of!(assoc_array_ops, free_object) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct assoc_array_edit {
    _unused: [u8; 0],
}
extern "C" {
    pub fn assoc_array_iterate(
        array: *const assoc_array,
        iterator: ::std::option::Option<
            unsafe extern "C" fn(
                object: *const ::std::os::raw::c_void,
                iterator_data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        iterator_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assoc_array_find(
        array: *const assoc_array,
        ops: *const assoc_array_ops,
        index_key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn assoc_array_destroy(array: *mut assoc_array, ops: *const assoc_array_ops);
}
extern "C" {
    pub fn assoc_array_insert(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
        index_key: *const ::std::os::raw::c_void,
        object: *mut ::std::os::raw::c_void,
    ) -> *mut assoc_array_edit;
}
extern "C" {
    pub fn assoc_array_insert_set_object(
        edit: *mut assoc_array_edit,
        object: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn assoc_array_delete(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
        index_key: *const ::std::os::raw::c_void,
    ) -> *mut assoc_array_edit;
}
extern "C" {
    pub fn assoc_array_clear(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
    ) -> *mut assoc_array_edit;
}
extern "C" {
    pub fn assoc_array_apply_edit(edit: *mut assoc_array_edit);
}
extern "C" {
    pub fn assoc_array_cancel_edit(edit: *mut assoc_array_edit);
}
extern "C" {
    pub fn assoc_array_gc(
        array: *mut assoc_array,
        ops: *const assoc_array_ops,
        iterator: ::std::option::Option<
            unsafe extern "C" fn(
                object: *mut ::std::os::raw::c_void,
                iterator_data: *mut ::std::os::raw::c_void,
            ) -> bool_,
        >,
        iterator_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type key_serial_t = i32;
pub type key_perm_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net {
    _unused: [u8; 0],
}
pub const key_need_perm_KEY_NEED_UNSPECIFIED: key_need_perm = 0;
pub const key_need_perm_KEY_NEED_VIEW: key_need_perm = 1;
pub const key_need_perm_KEY_NEED_READ: key_need_perm = 2;
pub const key_need_perm_KEY_NEED_WRITE: key_need_perm = 3;
pub const key_need_perm_KEY_NEED_SEARCH: key_need_perm = 4;
pub const key_need_perm_KEY_NEED_LINK: key_need_perm = 5;
pub const key_need_perm_KEY_NEED_SETATTR: key_need_perm = 6;
pub const key_need_perm_KEY_NEED_UNLINK: key_need_perm = 7;
pub const key_need_perm_KEY_SYSADMIN_OVERRIDE: key_need_perm = 8;
pub const key_need_perm_KEY_AUTHTOKEN_OVERRIDE: key_need_perm = 9;
pub const key_need_perm_KEY_DEFER_PERM_CHECK: key_need_perm = 10;
pub type key_need_perm = ::std::os::raw::c_uint;
pub const key_lookup_flag_KEY_LOOKUP_CREATE: key_lookup_flag = 1;
pub const key_lookup_flag_KEY_LOOKUP_PARTIAL: key_lookup_flag = 2;
pub const key_lookup_flag_KEY_LOOKUP_ALL: key_lookup_flag = 3;
pub type key_lookup_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_owner {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct keyring_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct keyring_name {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_tag {
    pub rcu: callback_head,
    pub usage: refcount_t,
    pub removed: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key_tag"][::std::mem::size_of::<key_tag>() - 24usize];
    ["Alignment of key_tag"][::std::mem::align_of::<key_tag>() - 8usize];
    ["Offset of field: key_tag::rcu"][::std::mem::offset_of!(key_tag, rcu) - 0usize];
    ["Offset of field: key_tag::usage"][::std::mem::offset_of!(key_tag, usage) - 16usize];
    ["Offset of field: key_tag::removed"][::std::mem::offset_of!(key_tag, removed) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct keyring_index_key {
    pub hash: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: keyring_index_key__bindgen_ty_1,
    pub type_: *mut key_type,
    pub domain_tag: *mut key_tag,
    pub description: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union keyring_index_key__bindgen_ty_1 {
    pub __bindgen_anon_1: keyring_index_key__bindgen_ty_1__bindgen_ty_1,
    pub x: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct keyring_index_key__bindgen_ty_1__bindgen_ty_1 {
    pub desc_len: u16_,
    pub desc: [::std::os::raw::c_char; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of keyring_index_key__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<keyring_index_key__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of keyring_index_key__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<keyring_index_key__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: keyring_index_key__bindgen_ty_1__bindgen_ty_1::desc_len"]
        [::std::mem::offset_of!(keyring_index_key__bindgen_ty_1__bindgen_ty_1, desc_len) - 0usize];
    ["Offset of field: keyring_index_key__bindgen_ty_1__bindgen_ty_1::desc"]
        [::std::mem::offset_of!(keyring_index_key__bindgen_ty_1__bindgen_ty_1, desc) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of keyring_index_key__bindgen_ty_1"]
        [::std::mem::size_of::<keyring_index_key__bindgen_ty_1>() - 8usize];
    ["Alignment of keyring_index_key__bindgen_ty_1"]
        [::std::mem::align_of::<keyring_index_key__bindgen_ty_1>() - 8usize];
    ["Offset of field: keyring_index_key__bindgen_ty_1::x"]
        [::std::mem::offset_of!(keyring_index_key__bindgen_ty_1, x) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of keyring_index_key"][::std::mem::size_of::<keyring_index_key>() - 40usize];
    ["Alignment of keyring_index_key"][::std::mem::align_of::<keyring_index_key>() - 8usize];
    ["Offset of field: keyring_index_key::hash"]
        [::std::mem::offset_of!(keyring_index_key, hash) - 0usize];
    ["Offset of field: keyring_index_key::type_"]
        [::std::mem::offset_of!(keyring_index_key, type_) - 16usize];
    ["Offset of field: keyring_index_key::domain_tag"]
        [::std::mem::offset_of!(keyring_index_key, domain_tag) - 24usize];
    ["Offset of field: keyring_index_key::description"]
        [::std::mem::offset_of!(keyring_index_key, description) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union key_payload {
    pub rcu_data0: *mut ::std::os::raw::c_void,
    pub data: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key_payload"][::std::mem::size_of::<key_payload>() - 32usize];
    ["Alignment of key_payload"][::std::mem::align_of::<key_payload>() - 8usize];
    ["Offset of field: key_payload::rcu_data0"]
        [::std::mem::offset_of!(key_payload, rcu_data0) - 0usize];
    ["Offset of field: key_payload::data"][::std::mem::offset_of!(key_payload, data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __key_reference_with_attributes {
    _unused: [u8; 0],
}
pub type key_ref_t = *mut __key_reference_with_attributes;
pub type key_restrict_link_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        dest_keyring: *mut key,
        type_: *const key_type,
        payload: *const key_payload,
        restriction_key: *mut key,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_restriction {
    pub check: key_restrict_link_func_t,
    pub key: *mut key,
    pub keytype: *mut key_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key_restriction"][::std::mem::size_of::<key_restriction>() - 24usize];
    ["Alignment of key_restriction"][::std::mem::align_of::<key_restriction>() - 8usize];
    ["Offset of field: key_restriction::check"]
        [::std::mem::offset_of!(key_restriction, check) - 0usize];
    ["Offset of field: key_restriction::key"]
        [::std::mem::offset_of!(key_restriction, key) - 8usize];
    ["Offset of field: key_restriction::keytype"]
        [::std::mem::offset_of!(key_restriction, keytype) - 16usize];
};
pub const key_state_KEY_IS_UNINSTANTIATED: key_state = 0;
pub const key_state_KEY_IS_POSITIVE: key_state = 1;
pub type key_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key {
    pub usage: refcount_t,
    pub serial: key_serial_t,
    pub __bindgen_anon_1: key__bindgen_ty_1,
    pub watchers: *mut watch_list,
    pub sem: rw_semaphore,
    pub user: *mut key_user,
    pub security: *mut ::std::os::raw::c_void,
    pub __bindgen_anon_2: key__bindgen_ty_2,
    pub last_used_at: time64_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub perm: key_perm_t,
    pub quotalen: ::std::os::raw::c_ushort,
    pub datalen: ::std::os::raw::c_ushort,
    pub state: ::std::os::raw::c_short,
    pub flags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_3: key__bindgen_ty_3,
    pub __bindgen_anon_4: key__bindgen_ty_4,
    pub restrict_link: *mut key_restriction,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_1 {
    pub graveyard_link: list_head,
    pub serial_node: rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_1"][::std::mem::size_of::<key__bindgen_ty_1>() - 24usize];
    ["Alignment of key__bindgen_ty_1"][::std::mem::align_of::<key__bindgen_ty_1>() - 8usize];
    ["Offset of field: key__bindgen_ty_1::graveyard_link"]
        [::std::mem::offset_of!(key__bindgen_ty_1, graveyard_link) - 0usize];
    ["Offset of field: key__bindgen_ty_1::serial_node"]
        [::std::mem::offset_of!(key__bindgen_ty_1, serial_node) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_2 {
    pub expiry: time64_t,
    pub revoked_at: time64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_2"][::std::mem::size_of::<key__bindgen_ty_2>() - 8usize];
    ["Alignment of key__bindgen_ty_2"][::std::mem::align_of::<key__bindgen_ty_2>() - 8usize];
    ["Offset of field: key__bindgen_ty_2::expiry"]
        [::std::mem::offset_of!(key__bindgen_ty_2, expiry) - 0usize];
    ["Offset of field: key__bindgen_ty_2::revoked_at"]
        [::std::mem::offset_of!(key__bindgen_ty_2, revoked_at) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_3 {
    pub index_key: keyring_index_key,
    pub __bindgen_anon_1: key__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key__bindgen_ty_3__bindgen_ty_1 {
    pub hash: ::std::os::raw::c_ulong,
    pub len_desc: ::std::os::raw::c_ulong,
    pub type_: *mut key_type,
    pub domain_tag: *mut key_tag,
    pub description: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::size_of::<key__bindgen_ty_3__bindgen_ty_1>() - 40usize];
    ["Alignment of key__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<key__bindgen_ty_3__bindgen_ty_1>() - 8usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::hash"]
        [::std::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, hash) - 0usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::len_desc"]
        [::std::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, len_desc) - 8usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, type_) - 16usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::domain_tag"]
        [::std::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, domain_tag) - 24usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::description"]
        [::std::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, description) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_3"][::std::mem::size_of::<key__bindgen_ty_3>() - 40usize];
    ["Alignment of key__bindgen_ty_3"][::std::mem::align_of::<key__bindgen_ty_3>() - 8usize];
    ["Offset of field: key__bindgen_ty_3::index_key"]
        [::std::mem::offset_of!(key__bindgen_ty_3, index_key) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_4 {
    pub payload: key_payload,
    pub __bindgen_anon_1: key__bindgen_ty_4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key__bindgen_ty_4__bindgen_ty_1 {
    pub name_link: list_head,
    pub keys: assoc_array,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::size_of::<key__bindgen_ty_4__bindgen_ty_1>() - 32usize];
    ["Alignment of key__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<key__bindgen_ty_4__bindgen_ty_1>() - 8usize];
    ["Offset of field: key__bindgen_ty_4__bindgen_ty_1::name_link"]
        [::std::mem::offset_of!(key__bindgen_ty_4__bindgen_ty_1, name_link) - 0usize];
    ["Offset of field: key__bindgen_ty_4__bindgen_ty_1::keys"]
        [::std::mem::offset_of!(key__bindgen_ty_4__bindgen_ty_1, keys) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_4"][::std::mem::size_of::<key__bindgen_ty_4>() - 32usize];
    ["Alignment of key__bindgen_ty_4"][::std::mem::align_of::<key__bindgen_ty_4>() - 8usize];
    ["Offset of field: key__bindgen_ty_4::payload"]
        [::std::mem::offset_of!(key__bindgen_ty_4, payload) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key"][::std::mem::size_of::<key>() - 224usize];
    ["Alignment of key"][::std::mem::align_of::<key>() - 8usize];
    ["Offset of field: key::usage"][::std::mem::offset_of!(key, usage) - 0usize];
    ["Offset of field: key::serial"][::std::mem::offset_of!(key, serial) - 4usize];
    ["Offset of field: key::watchers"][::std::mem::offset_of!(key, watchers) - 32usize];
    ["Offset of field: key::sem"][::std::mem::offset_of!(key, sem) - 40usize];
    ["Offset of field: key::user"][::std::mem::offset_of!(key, user) - 80usize];
    ["Offset of field: key::security"][::std::mem::offset_of!(key, security) - 88usize];
    ["Offset of field: key::last_used_at"][::std::mem::offset_of!(key, last_used_at) - 104usize];
    ["Offset of field: key::uid"][::std::mem::offset_of!(key, uid) - 112usize];
    ["Offset of field: key::gid"][::std::mem::offset_of!(key, gid) - 116usize];
    ["Offset of field: key::perm"][::std::mem::offset_of!(key, perm) - 120usize];
    ["Offset of field: key::quotalen"][::std::mem::offset_of!(key, quotalen) - 124usize];
    ["Offset of field: key::datalen"][::std::mem::offset_of!(key, datalen) - 126usize];
    ["Offset of field: key::state"][::std::mem::offset_of!(key, state) - 128usize];
    ["Offset of field: key::flags"][::std::mem::offset_of!(key, flags) - 136usize];
    ["Offset of field: key::restrict_link"][::std::mem::offset_of!(key, restrict_link) - 216usize];
};
extern "C" {
    pub fn key_alloc(
        type_: *mut key_type,
        desc: *const ::std::os::raw::c_char,
        uid: kuid_t,
        gid: kgid_t,
        cred: *const cred,
        perm: key_perm_t,
        flags: ::std::os::raw::c_ulong,
        restrict_link: *mut key_restriction,
    ) -> *mut key;
}
extern "C" {
    pub fn key_revoke(key: *mut key);
}
extern "C" {
    pub fn key_invalidate(key: *mut key);
}
extern "C" {
    pub fn key_put(key: *mut key);
}
extern "C" {
    pub fn key_put_tag(tag: *mut key_tag) -> bool_;
}
extern "C" {
    pub fn key_remove_domain(domain_tag: *mut key_tag);
}
extern "C" {
    pub fn request_key_tag(
        type_: *mut key_type,
        description: *const ::std::os::raw::c_char,
        domain_tag: *mut key_tag,
        callout_info: *const ::std::os::raw::c_char,
    ) -> *mut key;
}
extern "C" {
    pub fn request_key_rcu(
        type_: *mut key_type,
        description: *const ::std::os::raw::c_char,
        domain_tag: *mut key_tag,
    ) -> *mut key;
}
extern "C" {
    pub fn request_key_with_auxdata(
        type_: *mut key_type,
        description: *const ::std::os::raw::c_char,
        domain_tag: *mut key_tag,
        callout_info: *const ::std::os::raw::c_void,
        callout_len: usize,
        aux: *mut ::std::os::raw::c_void,
    ) -> *mut key;
}
extern "C" {
    pub fn wait_for_key_construction(key: *mut key, intr: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_validate(key: *const key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_create(
        keyring: key_ref_t,
        type_: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        payload: *const ::std::os::raw::c_void,
        plen: usize,
        perm: key_perm_t,
        flags: ::std::os::raw::c_ulong,
    ) -> key_ref_t;
}
extern "C" {
    pub fn key_create_or_update(
        keyring: key_ref_t,
        type_: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        payload: *const ::std::os::raw::c_void,
        plen: usize,
        perm: key_perm_t,
        flags: ::std::os::raw::c_ulong,
    ) -> key_ref_t;
}
extern "C" {
    pub fn key_update(
        key: key_ref_t,
        payload: *const ::std::os::raw::c_void,
        plen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_link(keyring: *mut key, key: *mut key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_move(
        key: *mut key,
        from_keyring: *mut key,
        to_keyring: *mut key,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_unlink(keyring: *mut key, key: *mut key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyring_alloc(
        description: *const ::std::os::raw::c_char,
        uid: kuid_t,
        gid: kgid_t,
        cred: *const cred,
        perm: key_perm_t,
        flags: ::std::os::raw::c_ulong,
        restrict_link: *mut key_restriction,
        dest: *mut key,
    ) -> *mut key;
}
extern "C" {
    pub fn restrict_link_reject(
        keyring: *mut key,
        type_: *const key_type,
        payload: *const key_payload,
        restriction_key: *mut key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyring_clear(keyring: *mut key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyring_search(
        keyring: key_ref_t,
        type_: *mut key_type,
        description: *const ::std::os::raw::c_char,
        recurse: bool_,
    ) -> key_ref_t;
}
extern "C" {
    pub fn keyring_add_key(keyring: *mut key, key: *mut key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyring_restrict(
        keyring: key_ref_t,
        type_: *const ::std::os::raw::c_char,
        restriction: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_lookup(id: key_serial_t) -> *mut key;
}
extern "C" {
    pub fn key_set_timeout(arg1: *mut key, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn lookup_user_key(
        id: key_serial_t,
        flags: ::std::os::raw::c_ulong,
        need_perm: key_need_perm,
    ) -> key_ref_t;
}
extern "C" {
    pub fn key_free_user_ns(arg1: *mut user_namespace);
}
extern "C" {
    pub fn install_thread_keyring_to_cred(cred: *mut cred) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_fsuid_changed(new_cred: *mut cred);
}
extern "C" {
    pub fn key_fsgid_changed(new_cred: *mut cred);
}
extern "C" {
    pub fn key_init();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_struct {
    pub __count: refcount_t,
    pub epoll_watches: percpu_counter,
    pub unix_inflight: ::std::os::raw::c_ulong,
    pub pipe_bufs: atomic_long_t,
    pub uidhash_node: hlist_node,
    pub uid: kuid_t,
    pub locked_vm: atomic_long_t,
    pub nr_watches: atomic_t,
    pub ratelimit: ratelimit_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_struct"][::std::mem::size_of::<user_struct>() - 144usize];
    ["Alignment of user_struct"][::std::mem::align_of::<user_struct>() - 8usize];
    ["Offset of field: user_struct::__count"]
        [::std::mem::offset_of!(user_struct, __count) - 0usize];
    ["Offset of field: user_struct::epoll_watches"]
        [::std::mem::offset_of!(user_struct, epoll_watches) - 8usize];
    ["Offset of field: user_struct::unix_inflight"]
        [::std::mem::offset_of!(user_struct, unix_inflight) - 48usize];
    ["Offset of field: user_struct::pipe_bufs"]
        [::std::mem::offset_of!(user_struct, pipe_bufs) - 56usize];
    ["Offset of field: user_struct::uidhash_node"]
        [::std::mem::offset_of!(user_struct, uidhash_node) - 64usize];
    ["Offset of field: user_struct::uid"][::std::mem::offset_of!(user_struct, uid) - 80usize];
    ["Offset of field: user_struct::locked_vm"]
        [::std::mem::offset_of!(user_struct, locked_vm) - 88usize];
    ["Offset of field: user_struct::nr_watches"]
        [::std::mem::offset_of!(user_struct, nr_watches) - 96usize];
    ["Offset of field: user_struct::ratelimit"]
        [::std::mem::offset_of!(user_struct, ratelimit) - 104usize];
};
extern "C" {
    pub fn uids_sysfs_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_user(arg1: kuid_t) -> *mut user_struct;
}
extern "C" {
    pub static mut root_user: user_struct;
}
extern "C" {
    pub fn alloc_uid(arg1: kuid_t) -> *mut user_struct;
}
extern "C" {
    pub fn free_uid(arg1: *mut user_struct);
}
#[repr(C)]
#[derive(Debug)]
pub struct group_info {
    pub usage: refcount_t,
    pub ngroups: ::std::os::raw::c_int,
    pub gid: __IncompleteArrayField<kgid_t>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_info"][::std::mem::size_of::<group_info>() - 8usize];
    ["Alignment of group_info"][::std::mem::align_of::<group_info>() - 4usize];
    ["Offset of field: group_info::usage"][::std::mem::offset_of!(group_info, usage) - 0usize];
    ["Offset of field: group_info::ngroups"][::std::mem::offset_of!(group_info, ngroups) - 4usize];
    ["Offset of field: group_info::gid"][::std::mem::offset_of!(group_info, gid) - 8usize];
};
extern "C" {
    pub fn groups_alloc(arg1: ::std::os::raw::c_int) -> *mut group_info;
}
extern "C" {
    pub fn groups_free(arg1: *mut group_info);
}
extern "C" {
    pub fn in_group_p(arg1: kgid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_egroup_p(arg1: kgid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn groups_search(arg1: *const group_info, arg2: kgid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_current_groups(arg1: *mut group_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_groups(arg1: *mut cred, arg2: *mut group_info);
}
extern "C" {
    pub fn may_setgroups() -> bool_;
}
extern "C" {
    pub fn groups_sort(arg1: *mut group_info);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cred {
    pub usage: atomic_long_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub suid: kuid_t,
    pub sgid: kgid_t,
    pub euid: kuid_t,
    pub egid: kgid_t,
    pub fsuid: kuid_t,
    pub fsgid: kgid_t,
    pub securebits: ::std::os::raw::c_uint,
    pub cap_inheritable: kernel_cap_t,
    pub cap_permitted: kernel_cap_t,
    pub cap_effective: kernel_cap_t,
    pub cap_bset: kernel_cap_t,
    pub cap_ambient: kernel_cap_t,
    pub jit_keyring: ::std::os::raw::c_uchar,
    pub session_keyring: *mut key,
    pub process_keyring: *mut key,
    pub thread_keyring: *mut key,
    pub request_key_auth: *mut key,
    pub security: *mut ::std::os::raw::c_void,
    pub user: *mut user_struct,
    pub user_ns: *mut user_namespace,
    pub ucounts: *mut ucounts,
    pub group_info: *mut group_info,
    pub __bindgen_anon_1: cred__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cred__bindgen_ty_1 {
    pub non_rcu: ::std::os::raw::c_int,
    pub rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cred__bindgen_ty_1"][::std::mem::size_of::<cred__bindgen_ty_1>() - 16usize];
    ["Alignment of cred__bindgen_ty_1"][::std::mem::align_of::<cred__bindgen_ty_1>() - 8usize];
    ["Offset of field: cred__bindgen_ty_1::non_rcu"]
        [::std::mem::offset_of!(cred__bindgen_ty_1, non_rcu) - 0usize];
    ["Offset of field: cred__bindgen_ty_1::rcu"]
        [::std::mem::offset_of!(cred__bindgen_ty_1, rcu) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cred"][::std::mem::size_of::<cred>() - 184usize];
    ["Alignment of cred"][::std::mem::align_of::<cred>() - 8usize];
    ["Offset of field: cred::usage"][::std::mem::offset_of!(cred, usage) - 0usize];
    ["Offset of field: cred::uid"][::std::mem::offset_of!(cred, uid) - 8usize];
    ["Offset of field: cred::gid"][::std::mem::offset_of!(cred, gid) - 12usize];
    ["Offset of field: cred::suid"][::std::mem::offset_of!(cred, suid) - 16usize];
    ["Offset of field: cred::sgid"][::std::mem::offset_of!(cred, sgid) - 20usize];
    ["Offset of field: cred::euid"][::std::mem::offset_of!(cred, euid) - 24usize];
    ["Offset of field: cred::egid"][::std::mem::offset_of!(cred, egid) - 28usize];
    ["Offset of field: cred::fsuid"][::std::mem::offset_of!(cred, fsuid) - 32usize];
    ["Offset of field: cred::fsgid"][::std::mem::offset_of!(cred, fsgid) - 36usize];
    ["Offset of field: cred::securebits"][::std::mem::offset_of!(cred, securebits) - 40usize];
    ["Offset of field: cred::cap_inheritable"]
        [::std::mem::offset_of!(cred, cap_inheritable) - 48usize];
    ["Offset of field: cred::cap_permitted"][::std::mem::offset_of!(cred, cap_permitted) - 56usize];
    ["Offset of field: cred::cap_effective"][::std::mem::offset_of!(cred, cap_effective) - 64usize];
    ["Offset of field: cred::cap_bset"][::std::mem::offset_of!(cred, cap_bset) - 72usize];
    ["Offset of field: cred::cap_ambient"][::std::mem::offset_of!(cred, cap_ambient) - 80usize];
    ["Offset of field: cred::jit_keyring"][::std::mem::offset_of!(cred, jit_keyring) - 88usize];
    ["Offset of field: cred::session_keyring"]
        [::std::mem::offset_of!(cred, session_keyring) - 96usize];
    ["Offset of field: cred::process_keyring"]
        [::std::mem::offset_of!(cred, process_keyring) - 104usize];
    ["Offset of field: cred::thread_keyring"]
        [::std::mem::offset_of!(cred, thread_keyring) - 112usize];
    ["Offset of field: cred::request_key_auth"]
        [::std::mem::offset_of!(cred, request_key_auth) - 120usize];
    ["Offset of field: cred::security"][::std::mem::offset_of!(cred, security) - 128usize];
    ["Offset of field: cred::user"][::std::mem::offset_of!(cred, user) - 136usize];
    ["Offset of field: cred::user_ns"][::std::mem::offset_of!(cred, user_ns) - 144usize];
    ["Offset of field: cred::ucounts"][::std::mem::offset_of!(cred, ucounts) - 152usize];
    ["Offset of field: cred::group_info"][::std::mem::offset_of!(cred, group_info) - 160usize];
};
extern "C" {
    pub fn __put_cred(arg1: *mut cred);
}
extern "C" {
    pub fn exit_creds(arg1: *mut task_struct);
}
extern "C" {
    pub fn copy_creds(
        arg1: *mut task_struct,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_task_cred(arg1: *mut task_struct) -> *const cred;
}
extern "C" {
    pub fn cred_alloc_blank() -> *mut cred;
}
extern "C" {
    pub fn prepare_creds() -> *mut cred;
}
extern "C" {
    pub fn prepare_exec_creds() -> *mut cred;
}
extern "C" {
    pub fn commit_creds(arg1: *mut cred) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort_creds(arg1: *mut cred);
}
extern "C" {
    pub fn override_creds(arg1: *const cred) -> *const cred;
}
extern "C" {
    pub fn revert_creds(arg1: *const cred);
}
extern "C" {
    pub fn prepare_kernel_cred(arg1: *mut task_struct) -> *mut cred;
}
extern "C" {
    pub fn set_security_override(arg1: *mut cred, arg2: u32_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_security_override_from_ctx(
        arg1: *mut cred,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_create_files_as(arg1: *mut cred, arg2: *mut inode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cred_fscmp(arg1: *const cred, arg2: *const cred) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cred_init();
}
extern "C" {
    pub fn set_cred_ucounts(arg1: *mut cred) -> ::std::os::raw::c_int;
}
pub const alarmtimer_type_ALARM_REALTIME: alarmtimer_type = 0;
pub const alarmtimer_type_ALARM_BOOTTIME: alarmtimer_type = 1;
pub const alarmtimer_type_ALARM_NUMTYPE: alarmtimer_type = 2;
pub const alarmtimer_type_ALARM_REALTIME_FREEZER: alarmtimer_type = 3;
pub const alarmtimer_type_ALARM_BOOTTIME_FREEZER: alarmtimer_type = 4;
pub type alarmtimer_type = ::std::os::raw::c_uint;
pub const alarmtimer_restart_ALARMTIMER_NORESTART: alarmtimer_restart = 0;
pub const alarmtimer_restart_ALARMTIMER_RESTART: alarmtimer_restart = 1;
pub type alarmtimer_restart = ::std::os::raw::c_uint;
#[doc = " struct alarm - Alarm timer structure\n @node:\ttimerqueue node for adding to the event list this value\n\t\talso includes the expiration time.\n @timer:\thrtimer used to schedule events while running\n @function:\tFunction pointer to be executed when the timer fires.\n @type:\tAlarm type (BOOTTIME/REALTIME).\n @state:\tFlag that represents if the alarm is set to fire or not.\n @data:\tInternal data value."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alarm {
    pub node: timerqueue_node,
    pub timer: hrtimer,
    pub function: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut alarm, now: ktime_t) -> alarmtimer_restart,
    >,
    pub type_: alarmtimer_type,
    pub state: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alarm"][::std::mem::size_of::<alarm>() - 120usize];
    ["Alignment of alarm"][::std::mem::align_of::<alarm>() - 8usize];
    ["Offset of field: alarm::node"][::std::mem::offset_of!(alarm, node) - 0usize];
    ["Offset of field: alarm::timer"][::std::mem::offset_of!(alarm, timer) - 32usize];
    ["Offset of field: alarm::function"][::std::mem::offset_of!(alarm, function) - 96usize];
    ["Offset of field: alarm::type_"][::std::mem::offset_of!(alarm, type_) - 104usize];
    ["Offset of field: alarm::state"][::std::mem::offset_of!(alarm, state) - 108usize];
    ["Offset of field: alarm::data"][::std::mem::offset_of!(alarm, data) - 112usize];
};
extern "C" {
    pub fn alarm_init(
        alarm: *mut alarm,
        type_: alarmtimer_type,
        function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut alarm, arg2: ktime_t) -> alarmtimer_restart,
        >,
    );
}
extern "C" {
    pub fn alarm_start(alarm: *mut alarm, start: ktime_t);
}
extern "C" {
    pub fn alarm_start_relative(alarm: *mut alarm, start: ktime_t);
}
extern "C" {
    pub fn alarm_restart(alarm: *mut alarm);
}
extern "C" {
    pub fn alarm_try_to_cancel(alarm: *mut alarm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm_cancel(alarm: *mut alarm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm_forward(alarm: *mut alarm, now: ktime_t, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn alarm_forward_now(alarm: *mut alarm, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn alarm_expires_remaining(alarm: *const alarm) -> ktime_t;
}
extern "C" {
    pub fn alarmtimer_get_rtcdev() -> *mut rtc_device;
}
#[doc = " cpu_timer - Posix CPU timer representation for k_itimer\n @node:\ttimerqueue node to queue in the task/sig\n @head:\ttimerqueue head on which this timer is queued\n @pid:\tPointer to target task PID\n @elist:\tList head for the expiry list\n @firing:\tTimer is currently firing\n @handling:\tPointer to the task which handles expiry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_timer {
    pub node: timerqueue_node,
    pub head: *mut timerqueue_head,
    pub pid: *mut pid,
    pub elist: list_head,
    pub firing: ::std::os::raw::c_int,
    pub handling: *mut task_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_timer"][::std::mem::size_of::<cpu_timer>() - 80usize];
    ["Alignment of cpu_timer"][::std::mem::align_of::<cpu_timer>() - 8usize];
    ["Offset of field: cpu_timer::node"][::std::mem::offset_of!(cpu_timer, node) - 0usize];
    ["Offset of field: cpu_timer::head"][::std::mem::offset_of!(cpu_timer, head) - 32usize];
    ["Offset of field: cpu_timer::pid"][::std::mem::offset_of!(cpu_timer, pid) - 40usize];
    ["Offset of field: cpu_timer::elist"][::std::mem::offset_of!(cpu_timer, elist) - 48usize];
    ["Offset of field: cpu_timer::firing"][::std::mem::offset_of!(cpu_timer, firing) - 64usize];
    ["Offset of field: cpu_timer::handling"][::std::mem::offset_of!(cpu_timer, handling) - 72usize];
};
extern "C" {
    pub fn posix_cputimers_group_init(pct: *mut posix_cputimers, cpu_limit: u64_);
}
extern "C" {
    pub fn clear_posix_cputimers_work(p: *mut task_struct);
}
extern "C" {
    pub fn posix_cputimers_init_work();
}
#[doc = " struct k_itimer - POSIX.1b interval timer structure.\n @list:\t\tList head for binding the timer to signals->posix_timers\n @t_hash:\t\tEntry in the posix timer hash table\n @it_lock:\t\tLock protecting the timer\n @kclock:\t\tPointer to the k_clock struct handling this timer\n @it_clock:\t\tThe posix timer clock id\n @it_id:\t\tThe posix timer id for identifying the timer\n @it_active:\t\tMarker that timer is active\n @it_overrun:\t\tThe overrun counter for pending signals\n @it_overrun_last:\tThe overrun at the time of the last delivered signal\n @it_requeue_pending:\tIndicator that timer waits for being requeued on\n\t\t\tsignal delivery\n @it_sigev_notify:\tThe notify word of sigevent struct for signal delivery\n @it_interval:\tThe interval for periodic timers\n @it_signal:\t\tPointer to the creators signal struct\n @it_pid:\t\tThe pid of the process/task targeted by the signal\n @it_process:\t\tThe task to wakeup on clock_nanosleep (CPU timers)\n @sigq:\t\tPointer to preallocated sigqueue\n @it:\t\t\tUnion representing the various posix timer type\n\t\t\tinternals.\n @rcu:\t\tRCU head for freeing the timer."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_itimer {
    pub list: list_head,
    pub t_hash: hlist_node,
    pub it_lock: spinlock_t,
    pub kclock: *mut k_clock,
    pub it_clock: clockid_t,
    pub it_id: timer_t,
    pub it_active: ::std::os::raw::c_int,
    pub it_overrun: s64,
    pub it_overrun_last: s64,
    pub it_requeue_pending: ::std::os::raw::c_int,
    pub it_sigev_notify: ::std::os::raw::c_int,
    pub it_interval: ktime_t,
    pub it_signal: *mut signal_struct,
    pub __bindgen_anon_1: k_itimer__bindgen_ty_1,
    pub sigq: *mut sigqueue,
    pub it: k_itimer__bindgen_ty_2,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_itimer__bindgen_ty_1 {
    pub it_pid: *mut pid,
    pub it_process: *mut task_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of k_itimer__bindgen_ty_1"][::std::mem::size_of::<k_itimer__bindgen_ty_1>() - 8usize];
    ["Alignment of k_itimer__bindgen_ty_1"]
        [::std::mem::align_of::<k_itimer__bindgen_ty_1>() - 8usize];
    ["Offset of field: k_itimer__bindgen_ty_1::it_pid"]
        [::std::mem::offset_of!(k_itimer__bindgen_ty_1, it_pid) - 0usize];
    ["Offset of field: k_itimer__bindgen_ty_1::it_process"]
        [::std::mem::offset_of!(k_itimer__bindgen_ty_1, it_process) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_itimer__bindgen_ty_2 {
    pub real: k_itimer__bindgen_ty_2__bindgen_ty_1,
    pub cpu: cpu_timer,
    pub alarm: k_itimer__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_itimer__bindgen_ty_2__bindgen_ty_1 {
    pub timer: hrtimer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of k_itimer__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<k_itimer__bindgen_ty_2__bindgen_ty_1>() - 64usize];
    ["Alignment of k_itimer__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<k_itimer__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: k_itimer__bindgen_ty_2__bindgen_ty_1::timer"]
        [::std::mem::offset_of!(k_itimer__bindgen_ty_2__bindgen_ty_1, timer) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_itimer__bindgen_ty_2__bindgen_ty_2 {
    pub alarmtimer: alarm,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of k_itimer__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<k_itimer__bindgen_ty_2__bindgen_ty_2>() - 120usize];
    ["Alignment of k_itimer__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<k_itimer__bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Offset of field: k_itimer__bindgen_ty_2__bindgen_ty_2::alarmtimer"]
        [::std::mem::offset_of!(k_itimer__bindgen_ty_2__bindgen_ty_2, alarmtimer) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of k_itimer__bindgen_ty_2"][::std::mem::size_of::<k_itimer__bindgen_ty_2>() - 120usize];
    ["Alignment of k_itimer__bindgen_ty_2"]
        [::std::mem::align_of::<k_itimer__bindgen_ty_2>() - 8usize];
    ["Offset of field: k_itimer__bindgen_ty_2::real"]
        [::std::mem::offset_of!(k_itimer__bindgen_ty_2, real) - 0usize];
    ["Offset of field: k_itimer__bindgen_ty_2::cpu"]
        [::std::mem::offset_of!(k_itimer__bindgen_ty_2, cpu) - 0usize];
    ["Offset of field: k_itimer__bindgen_ty_2::alarm"]
        [::std::mem::offset_of!(k_itimer__bindgen_ty_2, alarm) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of k_itimer"][::std::mem::size_of::<k_itimer>() - 256usize];
    ["Alignment of k_itimer"][::std::mem::align_of::<k_itimer>() - 8usize];
    ["Offset of field: k_itimer::list"][::std::mem::offset_of!(k_itimer, list) - 0usize];
    ["Offset of field: k_itimer::t_hash"][::std::mem::offset_of!(k_itimer, t_hash) - 16usize];
    ["Offset of field: k_itimer::it_lock"][::std::mem::offset_of!(k_itimer, it_lock) - 32usize];
    ["Offset of field: k_itimer::kclock"][::std::mem::offset_of!(k_itimer, kclock) - 40usize];
    ["Offset of field: k_itimer::it_clock"][::std::mem::offset_of!(k_itimer, it_clock) - 48usize];
    ["Offset of field: k_itimer::it_id"][::std::mem::offset_of!(k_itimer, it_id) - 52usize];
    ["Offset of field: k_itimer::it_active"][::std::mem::offset_of!(k_itimer, it_active) - 56usize];
    ["Offset of field: k_itimer::it_overrun"]
        [::std::mem::offset_of!(k_itimer, it_overrun) - 64usize];
    ["Offset of field: k_itimer::it_overrun_last"]
        [::std::mem::offset_of!(k_itimer, it_overrun_last) - 72usize];
    ["Offset of field: k_itimer::it_requeue_pending"]
        [::std::mem::offset_of!(k_itimer, it_requeue_pending) - 80usize];
    ["Offset of field: k_itimer::it_sigev_notify"]
        [::std::mem::offset_of!(k_itimer, it_sigev_notify) - 84usize];
    ["Offset of field: k_itimer::it_interval"]
        [::std::mem::offset_of!(k_itimer, it_interval) - 88usize];
    ["Offset of field: k_itimer::it_signal"][::std::mem::offset_of!(k_itimer, it_signal) - 96usize];
    ["Offset of field: k_itimer::sigq"][::std::mem::offset_of!(k_itimer, sigq) - 112usize];
    ["Offset of field: k_itimer::it"][::std::mem::offset_of!(k_itimer, it) - 120usize];
    ["Offset of field: k_itimer::rcu"][::std::mem::offset_of!(k_itimer, rcu) - 240usize];
};
extern "C" {
    pub fn run_posix_cpu_timers();
}
extern "C" {
    pub fn posix_cpu_timers_exit(task: *mut task_struct);
}
extern "C" {
    pub fn posix_cpu_timers_exit_group(task: *mut task_struct);
}
extern "C" {
    pub fn set_process_cpu_timer(
        task: *mut task_struct,
        clock_idx: ::std::os::raw::c_uint,
        newval: *mut u64_,
        oldval: *mut u64_,
    );
}
extern "C" {
    pub fn update_rlimit_cpu(
        task: *mut task_struct,
        rlim_new: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posixtimer_rearm(info: *mut kernel_siginfo);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sighand_struct {
    pub siglock: spinlock_t,
    pub count: refcount_t,
    pub signalfd_wqh: wait_queue_head_t,
    pub action: [k_sigaction; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sighand_struct"][::std::mem::size_of::<sighand_struct>() - 2080usize];
    ["Alignment of sighand_struct"][::std::mem::align_of::<sighand_struct>() - 8usize];
    ["Offset of field: sighand_struct::siglock"]
        [::std::mem::offset_of!(sighand_struct, siglock) - 0usize];
    ["Offset of field: sighand_struct::count"]
        [::std::mem::offset_of!(sighand_struct, count) - 4usize];
    ["Offset of field: sighand_struct::signalfd_wqh"]
        [::std::mem::offset_of!(sighand_struct, signalfd_wqh) - 8usize];
    ["Offset of field: sighand_struct::action"]
        [::std::mem::offset_of!(sighand_struct, action) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pacct_struct {
    pub ac_flag: ::std::os::raw::c_int,
    pub ac_exitcode: ::std::os::raw::c_long,
    pub ac_mem: ::std::os::raw::c_ulong,
    pub ac_utime: u64_,
    pub ac_stime: u64_,
    pub ac_minflt: ::std::os::raw::c_ulong,
    pub ac_majflt: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pacct_struct"][::std::mem::size_of::<pacct_struct>() - 56usize];
    ["Alignment of pacct_struct"][::std::mem::align_of::<pacct_struct>() - 8usize];
    ["Offset of field: pacct_struct::ac_flag"]
        [::std::mem::offset_of!(pacct_struct, ac_flag) - 0usize];
    ["Offset of field: pacct_struct::ac_exitcode"]
        [::std::mem::offset_of!(pacct_struct, ac_exitcode) - 8usize];
    ["Offset of field: pacct_struct::ac_mem"]
        [::std::mem::offset_of!(pacct_struct, ac_mem) - 16usize];
    ["Offset of field: pacct_struct::ac_utime"]
        [::std::mem::offset_of!(pacct_struct, ac_utime) - 24usize];
    ["Offset of field: pacct_struct::ac_stime"]
        [::std::mem::offset_of!(pacct_struct, ac_stime) - 32usize];
    ["Offset of field: pacct_struct::ac_minflt"]
        [::std::mem::offset_of!(pacct_struct, ac_minflt) - 40usize];
    ["Offset of field: pacct_struct::ac_majflt"]
        [::std::mem::offset_of!(pacct_struct, ac_majflt) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_itimer {
    pub expires: u64_,
    pub incr: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_itimer"][::std::mem::size_of::<cpu_itimer>() - 16usize];
    ["Alignment of cpu_itimer"][::std::mem::align_of::<cpu_itimer>() - 8usize];
    ["Offset of field: cpu_itimer::expires"][::std::mem::offset_of!(cpu_itimer, expires) - 0usize];
    ["Offset of field: cpu_itimer::incr"][::std::mem::offset_of!(cpu_itimer, incr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_cputime_atomic {
    pub utime: atomic64_t,
    pub stime: atomic64_t,
    pub sum_exec_runtime: atomic64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_cputime_atomic"][::std::mem::size_of::<task_cputime_atomic>() - 24usize];
    ["Alignment of task_cputime_atomic"][::std::mem::align_of::<task_cputime_atomic>() - 8usize];
    ["Offset of field: task_cputime_atomic::utime"]
        [::std::mem::offset_of!(task_cputime_atomic, utime) - 0usize];
    ["Offset of field: task_cputime_atomic::stime"]
        [::std::mem::offset_of!(task_cputime_atomic, stime) - 8usize];
    ["Offset of field: task_cputime_atomic::sum_exec_runtime"]
        [::std::mem::offset_of!(task_cputime_atomic, sum_exec_runtime) - 16usize];
};
#[doc = " struct thread_group_cputimer - thread group interval timer counts\n @cputime_atomic:\tatomic thread group interval timers.\n\n This structure contains the version of task_cputime, above, that is\n used for thread group CPU timer calculations."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_group_cputimer {
    pub cputime_atomic: task_cputime_atomic,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_group_cputimer"][::std::mem::size_of::<thread_group_cputimer>() - 24usize];
    ["Alignment of thread_group_cputimer"]
        [::std::mem::align_of::<thread_group_cputimer>() - 8usize];
    ["Offset of field: thread_group_cputimer::cputime_atomic"]
        [::std::mem::offset_of!(thread_group_cputimer, cputime_atomic) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiprocess_signals {
    pub signal: sigset_t,
    pub node: hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of multiprocess_signals"][::std::mem::size_of::<multiprocess_signals>() - 24usize];
    ["Alignment of multiprocess_signals"][::std::mem::align_of::<multiprocess_signals>() - 8usize];
    ["Offset of field: multiprocess_signals::signal"]
        [::std::mem::offset_of!(multiprocess_signals, signal) - 0usize];
    ["Offset of field: multiprocess_signals::node"]
        [::std::mem::offset_of!(multiprocess_signals, node) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct core_thread {
    pub task: *mut task_struct,
    pub next: *mut core_thread,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of core_thread"][::std::mem::size_of::<core_thread>() - 16usize];
    ["Alignment of core_thread"][::std::mem::align_of::<core_thread>() - 8usize];
    ["Offset of field: core_thread::task"][::std::mem::offset_of!(core_thread, task) - 0usize];
    ["Offset of field: core_thread::next"][::std::mem::offset_of!(core_thread, next) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct core_state {
    pub nr_threads: atomic_t,
    pub dumper: core_thread,
    pub startup: completion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of core_state"][::std::mem::size_of::<core_state>() - 56usize];
    ["Alignment of core_state"][::std::mem::align_of::<core_state>() - 8usize];
    ["Offset of field: core_state::nr_threads"]
        [::std::mem::offset_of!(core_state, nr_threads) - 0usize];
    ["Offset of field: core_state::dumper"][::std::mem::offset_of!(core_state, dumper) - 8usize];
    ["Offset of field: core_state::startup"][::std::mem::offset_of!(core_state, startup) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct signal_struct {
    pub sigcnt: refcount_t,
    pub live: atomic_t,
    pub nr_threads: ::std::os::raw::c_int,
    pub quick_threads: ::std::os::raw::c_int,
    pub thread_head: list_head,
    pub wait_chldexit: wait_queue_head_t,
    pub curr_target: *mut task_struct,
    pub shared_pending: sigpending,
    pub multiprocess: hlist_head,
    pub group_exit_code: ::std::os::raw::c_int,
    pub notify_count: ::std::os::raw::c_int,
    pub group_exec_task: *mut task_struct,
    pub group_stop_count: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub core_state: *mut core_state,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub next_posix_timer_id: ::std::os::raw::c_uint,
    pub posix_timers: list_head,
    pub real_timer: hrtimer,
    pub it_real_incr: ktime_t,
    pub it: [cpu_itimer; 2usize],
    pub cputimer: thread_group_cputimer,
    pub posix_cputimers: posix_cputimers,
    pub pids: [*mut pid; 4usize],
    pub tick_dep_mask: atomic_t,
    pub tty_old_pgrp: *mut pid,
    pub leader: ::std::os::raw::c_int,
    pub tty: *mut tty_struct,
    pub autogroup: *mut autogroup,
    pub stats_lock: seqlock_t,
    pub utime: u64_,
    pub stime: u64_,
    pub cutime: u64_,
    pub cstime: u64_,
    pub gtime: u64_,
    pub cgtime: u64_,
    pub prev_cputime: prev_cputime,
    pub nvcsw: ::std::os::raw::c_ulong,
    pub nivcsw: ::std::os::raw::c_ulong,
    pub cnvcsw: ::std::os::raw::c_ulong,
    pub cnivcsw: ::std::os::raw::c_ulong,
    pub min_flt: ::std::os::raw::c_ulong,
    pub maj_flt: ::std::os::raw::c_ulong,
    pub cmin_flt: ::std::os::raw::c_ulong,
    pub cmaj_flt: ::std::os::raw::c_ulong,
    pub inblock: ::std::os::raw::c_ulong,
    pub oublock: ::std::os::raw::c_ulong,
    pub cinblock: ::std::os::raw::c_ulong,
    pub coublock: ::std::os::raw::c_ulong,
    pub maxrss: ::std::os::raw::c_ulong,
    pub cmaxrss: ::std::os::raw::c_ulong,
    pub ioac: task_io_accounting,
    pub sum_sched_runtime: ::std::os::raw::c_ulonglong,
    pub rlim: [rlimit; 16usize],
    pub pacct: pacct_struct,
    pub stats: *mut taskstats,
    pub audit_tty: ::std::os::raw::c_uint,
    pub tty_audit_buf: *mut tty_audit_buf,
    pub oom_flag_origin: bool_,
    pub oom_score_adj: ::std::os::raw::c_short,
    pub oom_score_adj_min: ::std::os::raw::c_short,
    pub oom_mm: *mut mm_struct,
    pub cred_guard_mutex: mutex,
    pub exec_update_lock: rw_semaphore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of signal_struct"][::std::mem::size_of::<signal_struct>() - 1112usize];
    ["Alignment of signal_struct"][::std::mem::align_of::<signal_struct>() - 8usize];
    ["Offset of field: signal_struct::sigcnt"]
        [::std::mem::offset_of!(signal_struct, sigcnt) - 0usize];
    ["Offset of field: signal_struct::live"][::std::mem::offset_of!(signal_struct, live) - 4usize];
    ["Offset of field: signal_struct::nr_threads"]
        [::std::mem::offset_of!(signal_struct, nr_threads) - 8usize];
    ["Offset of field: signal_struct::quick_threads"]
        [::std::mem::offset_of!(signal_struct, quick_threads) - 12usize];
    ["Offset of field: signal_struct::thread_head"]
        [::std::mem::offset_of!(signal_struct, thread_head) - 16usize];
    ["Offset of field: signal_struct::wait_chldexit"]
        [::std::mem::offset_of!(signal_struct, wait_chldexit) - 32usize];
    ["Offset of field: signal_struct::curr_target"]
        [::std::mem::offset_of!(signal_struct, curr_target) - 56usize];
    ["Offset of field: signal_struct::shared_pending"]
        [::std::mem::offset_of!(signal_struct, shared_pending) - 64usize];
    ["Offset of field: signal_struct::multiprocess"]
        [::std::mem::offset_of!(signal_struct, multiprocess) - 88usize];
    ["Offset of field: signal_struct::group_exit_code"]
        [::std::mem::offset_of!(signal_struct, group_exit_code) - 96usize];
    ["Offset of field: signal_struct::notify_count"]
        [::std::mem::offset_of!(signal_struct, notify_count) - 100usize];
    ["Offset of field: signal_struct::group_exec_task"]
        [::std::mem::offset_of!(signal_struct, group_exec_task) - 104usize];
    ["Offset of field: signal_struct::group_stop_count"]
        [::std::mem::offset_of!(signal_struct, group_stop_count) - 112usize];
    ["Offset of field: signal_struct::flags"]
        [::std::mem::offset_of!(signal_struct, flags) - 116usize];
    ["Offset of field: signal_struct::core_state"]
        [::std::mem::offset_of!(signal_struct, core_state) - 120usize];
    ["Offset of field: signal_struct::next_posix_timer_id"]
        [::std::mem::offset_of!(signal_struct, next_posix_timer_id) - 132usize];
    ["Offset of field: signal_struct::posix_timers"]
        [::std::mem::offset_of!(signal_struct, posix_timers) - 136usize];
    ["Offset of field: signal_struct::real_timer"]
        [::std::mem::offset_of!(signal_struct, real_timer) - 152usize];
    ["Offset of field: signal_struct::it_real_incr"]
        [::std::mem::offset_of!(signal_struct, it_real_incr) - 216usize];
    ["Offset of field: signal_struct::it"][::std::mem::offset_of!(signal_struct, it) - 224usize];
    ["Offset of field: signal_struct::cputimer"]
        [::std::mem::offset_of!(signal_struct, cputimer) - 256usize];
    ["Offset of field: signal_struct::posix_cputimers"]
        [::std::mem::offset_of!(signal_struct, posix_cputimers) - 280usize];
    ["Offset of field: signal_struct::pids"]
        [::std::mem::offset_of!(signal_struct, pids) - 360usize];
    ["Offset of field: signal_struct::tick_dep_mask"]
        [::std::mem::offset_of!(signal_struct, tick_dep_mask) - 392usize];
    ["Offset of field: signal_struct::tty_old_pgrp"]
        [::std::mem::offset_of!(signal_struct, tty_old_pgrp) - 400usize];
    ["Offset of field: signal_struct::leader"]
        [::std::mem::offset_of!(signal_struct, leader) - 408usize];
    ["Offset of field: signal_struct::tty"][::std::mem::offset_of!(signal_struct, tty) - 416usize];
    ["Offset of field: signal_struct::autogroup"]
        [::std::mem::offset_of!(signal_struct, autogroup) - 424usize];
    ["Offset of field: signal_struct::stats_lock"]
        [::std::mem::offset_of!(signal_struct, stats_lock) - 432usize];
    ["Offset of field: signal_struct::utime"]
        [::std::mem::offset_of!(signal_struct, utime) - 440usize];
    ["Offset of field: signal_struct::stime"]
        [::std::mem::offset_of!(signal_struct, stime) - 448usize];
    ["Offset of field: signal_struct::cutime"]
        [::std::mem::offset_of!(signal_struct, cutime) - 456usize];
    ["Offset of field: signal_struct::cstime"]
        [::std::mem::offset_of!(signal_struct, cstime) - 464usize];
    ["Offset of field: signal_struct::gtime"]
        [::std::mem::offset_of!(signal_struct, gtime) - 472usize];
    ["Offset of field: signal_struct::cgtime"]
        [::std::mem::offset_of!(signal_struct, cgtime) - 480usize];
    ["Offset of field: signal_struct::prev_cputime"]
        [::std::mem::offset_of!(signal_struct, prev_cputime) - 488usize];
    ["Offset of field: signal_struct::nvcsw"]
        [::std::mem::offset_of!(signal_struct, nvcsw) - 512usize];
    ["Offset of field: signal_struct::nivcsw"]
        [::std::mem::offset_of!(signal_struct, nivcsw) - 520usize];
    ["Offset of field: signal_struct::cnvcsw"]
        [::std::mem::offset_of!(signal_struct, cnvcsw) - 528usize];
    ["Offset of field: signal_struct::cnivcsw"]
        [::std::mem::offset_of!(signal_struct, cnivcsw) - 536usize];
    ["Offset of field: signal_struct::min_flt"]
        [::std::mem::offset_of!(signal_struct, min_flt) - 544usize];
    ["Offset of field: signal_struct::maj_flt"]
        [::std::mem::offset_of!(signal_struct, maj_flt) - 552usize];
    ["Offset of field: signal_struct::cmin_flt"]
        [::std::mem::offset_of!(signal_struct, cmin_flt) - 560usize];
    ["Offset of field: signal_struct::cmaj_flt"]
        [::std::mem::offset_of!(signal_struct, cmaj_flt) - 568usize];
    ["Offset of field: signal_struct::inblock"]
        [::std::mem::offset_of!(signal_struct, inblock) - 576usize];
    ["Offset of field: signal_struct::oublock"]
        [::std::mem::offset_of!(signal_struct, oublock) - 584usize];
    ["Offset of field: signal_struct::cinblock"]
        [::std::mem::offset_of!(signal_struct, cinblock) - 592usize];
    ["Offset of field: signal_struct::coublock"]
        [::std::mem::offset_of!(signal_struct, coublock) - 600usize];
    ["Offset of field: signal_struct::maxrss"]
        [::std::mem::offset_of!(signal_struct, maxrss) - 608usize];
    ["Offset of field: signal_struct::cmaxrss"]
        [::std::mem::offset_of!(signal_struct, cmaxrss) - 616usize];
    ["Offset of field: signal_struct::ioac"]
        [::std::mem::offset_of!(signal_struct, ioac) - 624usize];
    ["Offset of field: signal_struct::sum_sched_runtime"]
        [::std::mem::offset_of!(signal_struct, sum_sched_runtime) - 680usize];
    ["Offset of field: signal_struct::rlim"]
        [::std::mem::offset_of!(signal_struct, rlim) - 688usize];
    ["Offset of field: signal_struct::pacct"]
        [::std::mem::offset_of!(signal_struct, pacct) - 944usize];
    ["Offset of field: signal_struct::stats"]
        [::std::mem::offset_of!(signal_struct, stats) - 1000usize];
    ["Offset of field: signal_struct::audit_tty"]
        [::std::mem::offset_of!(signal_struct, audit_tty) - 1008usize];
    ["Offset of field: signal_struct::tty_audit_buf"]
        [::std::mem::offset_of!(signal_struct, tty_audit_buf) - 1016usize];
    ["Offset of field: signal_struct::oom_flag_origin"]
        [::std::mem::offset_of!(signal_struct, oom_flag_origin) - 1024usize];
    ["Offset of field: signal_struct::oom_score_adj"]
        [::std::mem::offset_of!(signal_struct, oom_score_adj) - 1026usize];
    ["Offset of field: signal_struct::oom_score_adj_min"]
        [::std::mem::offset_of!(signal_struct, oom_score_adj_min) - 1028usize];
    ["Offset of field: signal_struct::oom_mm"]
        [::std::mem::offset_of!(signal_struct, oom_mm) - 1032usize];
    ["Offset of field: signal_struct::cred_guard_mutex"]
        [::std::mem::offset_of!(signal_struct, cred_guard_mutex) - 1040usize];
    ["Offset of field: signal_struct::exec_update_lock"]
        [::std::mem::offset_of!(signal_struct, exec_update_lock) - 1072usize];
};
impl signal_struct {
    #[inline]
    pub fn is_child_subreaper(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_child_subreaper(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_child_subreaper(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_child_subreaper(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_child_subreaper: ::std::os::raw::c_uint,
        has_child_subreaper: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_child_subreaper: u32 = unsafe { ::std::mem::transmute(is_child_subreaper) };
            is_child_subreaper as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_child_subreaper: u32 = unsafe { ::std::mem::transmute(has_child_subreaper) };
            has_child_subreaper as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn flush_signals(arg1: *mut task_struct);
}
extern "C" {
    pub fn ignore_signals(arg1: *mut task_struct);
}
extern "C" {
    pub fn flush_signal_handlers(arg1: *mut task_struct, force_default: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dequeue_signal(
        task: *mut task_struct,
        mask: *mut sigset_t,
        info: *mut kernel_siginfo_t,
        type_: *mut pid_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_fault_to_task(
        sig: ::std::os::raw::c_int,
        code: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
        t: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_fault(
        sig: ::std::os::raw::c_int,
        code: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send_sig_fault(
        sig: ::std::os::raw::c_int,
        code: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
        t: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_mceerr(
        code: ::std::os::raw::c_int,
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send_sig_mceerr(
        code: ::std::os::raw::c_int,
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_short,
        arg3: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_bnderr(
        addr: *mut ::std::os::raw::c_void,
        lower: *mut ::std::os::raw::c_void,
        upper: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_pkuerr(addr: *mut ::std::os::raw::c_void, pkey: u32_)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send_sig_perf(
        addr: *mut ::std::os::raw::c_void,
        type_: u32_,
        sig_data: u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_ptrace_errno_trap(
        errno: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_fault_trapno(
        sig: ::std::os::raw::c_int,
        code: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
        trapno: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send_sig_fault_trapno(
        sig: ::std::os::raw::c_int,
        code: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
        trapno: ::std::os::raw::c_int,
        t: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sig_seccomp(
        syscall: ::std::os::raw::c_int,
        reason: ::std::os::raw::c_int,
        force_coredump: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send_sig_info(
        arg1: ::std::os::raw::c_int,
        arg2: *mut kernel_siginfo,
        arg3: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn force_sigsegv(sig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn force_sig_info(arg1: *mut kernel_siginfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __kill_pgrp_info(
        sig: ::std::os::raw::c_int,
        info: *mut kernel_siginfo,
        pgrp: *mut pid,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kill_pid_info(
        sig: ::std::os::raw::c_int,
        info: *mut kernel_siginfo,
        pid: *mut pid,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kill_pid_usb_asyncio(
        sig: ::std::os::raw::c_int,
        errno: ::std::os::raw::c_int,
        addr: sigval_t,
        arg1: *mut pid,
        arg2: *const cred,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kill_pgrp(
        pid: *mut pid,
        sig: ::std::os::raw::c_int,
        priv_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kill_pid(
        pid: *mut pid,
        sig: ::std::os::raw::c_int,
        priv_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_notify_parent(arg1: *mut task_struct, arg2: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn __wake_up_parent(p: *mut task_struct, parent: *mut task_struct);
}
extern "C" {
    pub fn force_sig(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn force_fatal_sig(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn force_exit_sig(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn send_sig(
        arg1: ::std::os::raw::c_int,
        arg2: *mut task_struct,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zap_other_threads(p: *mut task_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue_alloc() -> *mut sigqueue;
}
extern "C" {
    pub fn sigqueue_free(arg1: *mut sigqueue);
}
extern "C" {
    pub fn send_sigqueue(
        arg1: *mut sigqueue,
        arg2: *mut pid,
        arg3: pid_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *mut k_sigaction,
        arg3: *mut k_sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recalc_sigpending();
}
extern "C" {
    pub fn calculate_sigpending();
}
extern "C" {
    pub fn signal_wake_up_state(t: *mut task_struct, state: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn task_join_group_stop(task: *mut task_struct);
}
extern "C" {
    pub fn set_user_sigmask(umask: *const sigset_t, sigsetsize: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __cleanup_sighand(arg1: *mut sighand_struct);
}
extern "C" {
    pub fn flush_itimer_signals();
}
extern "C" {
    pub fn current_is_single_threaded() -> bool_;
}
pub type proc_visitor = ::std::option::Option<
    unsafe extern "C" fn(
        p: *mut task_struct,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn walk_process_tree(
        top: *mut task_struct,
        arg1: proc_visitor,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __lock_task_sighand(
        task: *mut task_struct,
        flags: *mut ::std::os::raw::c_ulong,
    ) -> *mut sighand_struct;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcuwait {
    pub task: *mut task_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcuwait"][::std::mem::size_of::<rcuwait>() - 8usize];
    ["Alignment of rcuwait"][::std::mem::align_of::<rcuwait>() - 8usize];
    ["Offset of field: rcuwait::task"][::std::mem::offset_of!(rcuwait, task) - 0usize];
};
extern "C" {
    pub fn rcuwait_wake_up(w: *mut rcuwait) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finish_rcuwait(w: *mut rcuwait);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_sync {
    pub gp_state: ::std::os::raw::c_int,
    pub gp_count: ::std::os::raw::c_int,
    pub gp_wait: wait_queue_head_t,
    pub cb_head: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_sync"][::std::mem::size_of::<rcu_sync>() - 48usize];
    ["Alignment of rcu_sync"][::std::mem::align_of::<rcu_sync>() - 8usize];
    ["Offset of field: rcu_sync::gp_state"][::std::mem::offset_of!(rcu_sync, gp_state) - 0usize];
    ["Offset of field: rcu_sync::gp_count"][::std::mem::offset_of!(rcu_sync, gp_count) - 4usize];
    ["Offset of field: rcu_sync::gp_wait"][::std::mem::offset_of!(rcu_sync, gp_wait) - 8usize];
    ["Offset of field: rcu_sync::cb_head"][::std::mem::offset_of!(rcu_sync, cb_head) - 32usize];
};
extern "C" {
    pub fn rcu_sync_init(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_enter(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_exit(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_dtor(arg1: *mut rcu_sync);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_rw_semaphore {
    pub rss: rcu_sync,
    pub read_count: *mut ::std::os::raw::c_uint,
    pub writer: rcuwait,
    pub waiters: wait_queue_head_t,
    pub block: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of percpu_rw_semaphore"][::std::mem::size_of::<percpu_rw_semaphore>() - 96usize];
    ["Alignment of percpu_rw_semaphore"][::std::mem::align_of::<percpu_rw_semaphore>() - 8usize];
    ["Offset of field: percpu_rw_semaphore::rss"]
        [::std::mem::offset_of!(percpu_rw_semaphore, rss) - 0usize];
    ["Offset of field: percpu_rw_semaphore::read_count"]
        [::std::mem::offset_of!(percpu_rw_semaphore, read_count) - 48usize];
    ["Offset of field: percpu_rw_semaphore::writer"]
        [::std::mem::offset_of!(percpu_rw_semaphore, writer) - 56usize];
    ["Offset of field: percpu_rw_semaphore::waiters"]
        [::std::mem::offset_of!(percpu_rw_semaphore, waiters) - 64usize];
    ["Offset of field: percpu_rw_semaphore::block"]
        [::std::mem::offset_of!(percpu_rw_semaphore, block) - 88usize];
};
extern "C" {
    pub fn __percpu_down_read(arg1: *mut percpu_rw_semaphore, arg2: bool_) -> bool_;
}
extern "C" {
    pub fn percpu_is_read_locked(arg1: *mut percpu_rw_semaphore) -> bool_;
}
extern "C" {
    pub fn percpu_down_write(arg1: *mut percpu_rw_semaphore);
}
extern "C" {
    pub fn percpu_up_write(arg1: *mut percpu_rw_semaphore);
}
extern "C" {
    pub fn __percpu_init_rwsem(
        arg1: *mut percpu_rw_semaphore,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut lock_class_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn percpu_free_rwsem(arg1: *mut percpu_rw_semaphore);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delayed_call {
    pub fn_: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub arg: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of delayed_call"][::std::mem::size_of::<delayed_call>() - 16usize];
    ["Alignment of delayed_call"][::std::mem::align_of::<delayed_call>() - 8usize];
    ["Offset of field: delayed_call::fn_"][::std::mem::offset_of!(delayed_call, fn_) - 0usize];
    ["Offset of field: delayed_call::arg"][::std::mem::offset_of!(delayed_call, arg) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct guid_t {
    pub b: [__u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of guid_t"][::std::mem::size_of::<guid_t>() - 16usize];
    ["Alignment of guid_t"][::std::mem::align_of::<guid_t>() - 1usize];
    ["Offset of field: guid_t::b"][::std::mem::offset_of!(guid_t, b) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uuid_t {
    pub b: [__u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uuid_t"][::std::mem::size_of::<uuid_t>() - 16usize];
    ["Alignment of uuid_t"][::std::mem::align_of::<uuid_t>() - 1usize];
    ["Offset of field: uuid_t::b"][::std::mem::offset_of!(uuid_t, b) - 0usize];
};
extern "C" {
    pub static guid_null: guid_t;
}
extern "C" {
    pub static uuid_null: uuid_t;
}
extern "C" {
    pub fn generate_random_uuid(uuid: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn generate_random_guid(guid: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn guid_gen(u: *mut guid_t);
}
extern "C" {
    pub fn uuid_gen(u: *mut uuid_t);
}
extern "C" {
    pub fn uuid_is_valid(uuid: *const ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    pub static guid_index: [u8_; 16usize];
}
extern "C" {
    pub static uuid_index: [u8_; 16usize];
}
extern "C" {
    pub fn guid_parse(uuid: *const ::std::os::raw::c_char, u: *mut guid_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_parse(uuid: *const ::std::os::raw::c_char, u: *mut uuid_t)
        -> ::std::os::raw::c_int;
}
pub type errseq_t = u32_;
extern "C" {
    pub fn errseq_set(eseq: *mut errseq_t, err: ::std::os::raw::c_int) -> errseq_t;
}
extern "C" {
    pub fn errseq_sample(eseq: *mut errseq_t) -> errseq_t;
}
extern "C" {
    pub fn errseq_check(eseq: *mut errseq_t, since: errseq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errseq_check_and_advance(
        eseq: *mut errseq_t,
        since: *mut errseq_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rt_mutex_pre_schedule();
}
extern "C" {
    pub fn rt_mutex_schedule();
}
extern "C" {
    pub fn rt_mutex_post_schedule();
}
extern "C" {
    pub fn rt_mutex_setprio(p: *mut task_struct, pi_task: *mut task_struct);
}
extern "C" {
    pub fn rt_mutex_adjust_pi(p: *mut task_struct);
}
extern "C" {
    pub fn normalize_rt_tasks();
}
pub const ICQ_EXITED: _bindgen_ty_86 = 4;
pub const ICQ_DESTROYED: _bindgen_ty_86 = 8;
pub type _bindgen_ty_86 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_cq {
    pub q: *mut request_queue,
    pub ioc: *mut io_context,
    pub __bindgen_anon_1: io_cq__bindgen_ty_1,
    pub __bindgen_anon_2: io_cq__bindgen_ty_2,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_cq__bindgen_ty_1 {
    pub q_node: list_head,
    pub __rcu_icq_cache: *mut kmem_cache,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_cq__bindgen_ty_1"][::std::mem::size_of::<io_cq__bindgen_ty_1>() - 16usize];
    ["Alignment of io_cq__bindgen_ty_1"][::std::mem::align_of::<io_cq__bindgen_ty_1>() - 8usize];
    ["Offset of field: io_cq__bindgen_ty_1::q_node"]
        [::std::mem::offset_of!(io_cq__bindgen_ty_1, q_node) - 0usize];
    ["Offset of field: io_cq__bindgen_ty_1::__rcu_icq_cache"]
        [::std::mem::offset_of!(io_cq__bindgen_ty_1, __rcu_icq_cache) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_cq__bindgen_ty_2 {
    pub ioc_node: hlist_node,
    pub __rcu_head: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_cq__bindgen_ty_2"][::std::mem::size_of::<io_cq__bindgen_ty_2>() - 16usize];
    ["Alignment of io_cq__bindgen_ty_2"][::std::mem::align_of::<io_cq__bindgen_ty_2>() - 8usize];
    ["Offset of field: io_cq__bindgen_ty_2::ioc_node"]
        [::std::mem::offset_of!(io_cq__bindgen_ty_2, ioc_node) - 0usize];
    ["Offset of field: io_cq__bindgen_ty_2::__rcu_head"]
        [::std::mem::offset_of!(io_cq__bindgen_ty_2, __rcu_head) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_cq"][::std::mem::size_of::<io_cq>() - 56usize];
    ["Alignment of io_cq"][::std::mem::align_of::<io_cq>() - 8usize];
    ["Offset of field: io_cq::q"][::std::mem::offset_of!(io_cq, q) - 0usize];
    ["Offset of field: io_cq::ioc"][::std::mem::offset_of!(io_cq, ioc) - 8usize];
    ["Offset of field: io_cq::flags"][::std::mem::offset_of!(io_cq, flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_context {
    pub refcount: atomic_long_t,
    pub active_ref: atomic_t,
    pub ioprio: ::std::os::raw::c_ushort,
    pub lock: spinlock_t,
    pub icq_tree: xarray,
    pub icq_hint: *mut io_cq,
    pub icq_list: hlist_head,
    pub release_work: work_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_context"][::std::mem::size_of::<io_context>() - 88usize];
    ["Alignment of io_context"][::std::mem::align_of::<io_context>() - 8usize];
    ["Offset of field: io_context::refcount"]
        [::std::mem::offset_of!(io_context, refcount) - 0usize];
    ["Offset of field: io_context::active_ref"]
        [::std::mem::offset_of!(io_context, active_ref) - 8usize];
    ["Offset of field: io_context::ioprio"][::std::mem::offset_of!(io_context, ioprio) - 12usize];
    ["Offset of field: io_context::lock"][::std::mem::offset_of!(io_context, lock) - 16usize];
    ["Offset of field: io_context::icq_tree"]
        [::std::mem::offset_of!(io_context, icq_tree) - 24usize];
    ["Offset of field: io_context::icq_hint"]
        [::std::mem::offset_of!(io_context, icq_hint) - 40usize];
    ["Offset of field: io_context::icq_list"]
        [::std::mem::offset_of!(io_context, icq_list) - 48usize];
    ["Offset of field: io_context::release_work"]
        [::std::mem::offset_of!(io_context, release_work) - 56usize];
};
extern "C" {
    pub fn put_io_context(ioc: *mut io_context);
}
extern "C" {
    pub fn exit_io_context(task: *mut task_struct);
}
extern "C" {
    pub fn __copy_io(
        clone_flags: ::std::os::raw::c_ulong,
        tsk: *mut task_struct,
    ) -> ::std::os::raw::c_int;
}
pub const IOPRIO_CLASS_NONE: _bindgen_ty_87 = 0;
pub const IOPRIO_CLASS_RT: _bindgen_ty_87 = 1;
pub const IOPRIO_CLASS_BE: _bindgen_ty_87 = 2;
pub const IOPRIO_CLASS_IDLE: _bindgen_ty_87 = 3;
pub const IOPRIO_CLASS_INVALID: _bindgen_ty_87 = 7;
pub type _bindgen_ty_87 = ::std::os::raw::c_uint;
pub const IOPRIO_WHO_PROCESS: _bindgen_ty_88 = 1;
pub const IOPRIO_WHO_PGRP: _bindgen_ty_88 = 2;
pub const IOPRIO_WHO_USER: _bindgen_ty_88 = 3;
pub type _bindgen_ty_88 = ::std::os::raw::c_uint;
pub const IOPRIO_HINT_NONE: _bindgen_ty_89 = 0;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_1: _bindgen_ty_89 = 1;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_2: _bindgen_ty_89 = 2;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_3: _bindgen_ty_89 = 3;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_4: _bindgen_ty_89 = 4;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_5: _bindgen_ty_89 = 5;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_6: _bindgen_ty_89 = 6;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_7: _bindgen_ty_89 = 7;
pub type _bindgen_ty_89 = ::std::os::raw::c_uint;
extern "C" {
    pub fn set_task_ioprio(
        task: *mut task_struct,
        ioprio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ioprio_check_cap(ioprio: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fs_ftype_to_dtype(filetype: ::std::os::raw::c_uint) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn fs_umode_to_ftype(mode: umode_t) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn fs_umode_to_dtype(mode: umode_t) -> ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsmount {
    pub mnt_root: *mut dentry,
    pub mnt_sb: *mut super_block,
    pub mnt_flags: ::std::os::raw::c_int,
    pub mnt_idmap: *mut mnt_idmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfsmount"][::std::mem::size_of::<vfsmount>() - 32usize];
    ["Alignment of vfsmount"][::std::mem::align_of::<vfsmount>() - 8usize];
    ["Offset of field: vfsmount::mnt_root"][::std::mem::offset_of!(vfsmount, mnt_root) - 0usize];
    ["Offset of field: vfsmount::mnt_sb"][::std::mem::offset_of!(vfsmount, mnt_sb) - 8usize];
    ["Offset of field: vfsmount::mnt_flags"][::std::mem::offset_of!(vfsmount, mnt_flags) - 16usize];
    ["Offset of field: vfsmount::mnt_idmap"][::std::mem::offset_of!(vfsmount, mnt_idmap) - 24usize];
};
extern "C" {
    pub fn mnt_want_write(mnt: *mut vfsmount) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mnt_want_write_file(file: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mnt_drop_write(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mnt_drop_write_file(file: *mut file);
}
extern "C" {
    pub fn mntput(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mntget(mnt: *mut vfsmount) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_make_shortterm(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mnt_clone_internal(path: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn __mnt_is_readonly(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn mnt_may_suid(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn clone_private_mount(path: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_get_write_access(mnt: *mut vfsmount) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mnt_put_write_access(mnt: *mut vfsmount);
}
extern "C" {
    pub fn fc_mount(fc: *mut fs_context) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_create_mount(fc: *mut fs_context) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_kern_mount(
        type_: *mut file_system_type,
        flags: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_submount(
        mountpoint: *const dentry,
        type_: *mut file_system_type,
        name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_set_expiry(mnt: *mut vfsmount, expiry_list: *mut list_head);
}
extern "C" {
    pub fn mark_mounts_for_expiry(mounts: *mut list_head);
}
extern "C" {
    pub fn path_is_mountpoint(path: *const path) -> bool_;
}
extern "C" {
    pub fn our_mnt(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn kern_mount(arg1: *mut file_system_type) -> *mut vfsmount;
}
extern "C" {
    pub fn kern_unmount(mnt: *mut vfsmount);
}
extern "C" {
    pub fn may_umount_tree(arg1: *mut vfsmount) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_umount(arg1: *mut vfsmount) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_mount(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn collect_mounts(arg1: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn drop_collected_mounts(arg1: *mut vfsmount);
}
extern "C" {
    pub fn iterate_mounts(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut vfsmount,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut vfsmount,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kern_unmount_array(mnt: *mut *mut vfsmount, num: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn cifs_root_data(
        dev: *mut *mut ::std::os::raw::c_char,
        opts: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut nop_mnt_idmap: mnt_idmap;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsuid_t {
    pub val: uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfsuid_t"][::std::mem::size_of::<vfsuid_t>() - 4usize];
    ["Alignment of vfsuid_t"][::std::mem::align_of::<vfsuid_t>() - 4usize];
    ["Offset of field: vfsuid_t::val"][::std::mem::offset_of!(vfsuid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsgid_t {
    pub val: gid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfsgid_t"][::std::mem::size_of::<vfsgid_t>() - 4usize];
    ["Alignment of vfsgid_t"][::std::mem::align_of::<vfsgid_t>() - 4usize];
    ["Offset of field: vfsgid_t::val"][::std::mem::offset_of!(vfsgid_t, val) - 0usize];
};
extern "C" {
    pub fn vfsgid_in_group_p(vfsgid: vfsgid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mnt_idmap_get(idmap: *mut mnt_idmap) -> *mut mnt_idmap;
}
extern "C" {
    pub fn mnt_idmap_put(idmap: *mut mnt_idmap);
}
extern "C" {
    pub fn make_vfsuid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        kuid: kuid_t,
    ) -> vfsuid_t;
}
extern "C" {
    pub fn make_vfsgid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        kgid: kgid_t,
    ) -> vfsgid_t;
}
extern "C" {
    pub fn from_vfsuid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        vfsuid: vfsuid_t,
    ) -> kuid_t;
}
extern "C" {
    pub fn from_vfsgid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        vfsgid: vfsgid_t,
    ) -> kgid_t;
}
pub type percpu_ref_func_t = ::std::option::Option<unsafe extern "C" fn(arg1: *mut percpu_ref)>;
pub const __PERCPU_REF_ATOMIC: _bindgen_ty_90 = 1;
pub const __PERCPU_REF_DEAD: _bindgen_ty_90 = 2;
pub const __PERCPU_REF_ATOMIC_DEAD: _bindgen_ty_90 = 3;
pub const __PERCPU_REF_FLAG_BITS: _bindgen_ty_90 = 2;
pub type _bindgen_ty_90 = ::std::os::raw::c_uint;
pub const PERCPU_REF_INIT_ATOMIC: _bindgen_ty_91 = 1;
pub const PERCPU_REF_INIT_DEAD: _bindgen_ty_91 = 2;
pub const PERCPU_REF_ALLOW_REINIT: _bindgen_ty_91 = 4;
pub type _bindgen_ty_91 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct percpu_ref_data {
    pub count: atomic_long_t,
    pub release: percpu_ref_func_t,
    pub confirm_switch: percpu_ref_func_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub rcu: callback_head,
    pub ref_: *mut percpu_ref,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of percpu_ref_data"][::std::mem::size_of::<percpu_ref_data>() - 56usize];
    ["Alignment of percpu_ref_data"][::std::mem::align_of::<percpu_ref_data>() - 8usize];
    ["Offset of field: percpu_ref_data::count"]
        [::std::mem::offset_of!(percpu_ref_data, count) - 0usize];
    ["Offset of field: percpu_ref_data::release"]
        [::std::mem::offset_of!(percpu_ref_data, release) - 8usize];
    ["Offset of field: percpu_ref_data::confirm_switch"]
        [::std::mem::offset_of!(percpu_ref_data, confirm_switch) - 16usize];
    ["Offset of field: percpu_ref_data::rcu"]
        [::std::mem::offset_of!(percpu_ref_data, rcu) - 32usize];
    ["Offset of field: percpu_ref_data::ref_"]
        [::std::mem::offset_of!(percpu_ref_data, ref_) - 48usize];
};
impl percpu_ref_data {
    #[inline]
    pub fn force_atomic(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_force_atomic(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_reinit(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allow_reinit(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_atomic: bool_,
        allow_reinit: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_atomic: u8 = unsafe { ::std::mem::transmute(force_atomic) };
            force_atomic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let allow_reinit: u8 = unsafe { ::std::mem::transmute(allow_reinit) };
            allow_reinit as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct percpu_ref {
    pub percpu_count_ptr: ::std::os::raw::c_ulong,
    pub data: *mut percpu_ref_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of percpu_ref"][::std::mem::size_of::<percpu_ref>() - 16usize];
    ["Alignment of percpu_ref"][::std::mem::align_of::<percpu_ref>() - 8usize];
    ["Offset of field: percpu_ref::percpu_count_ptr"]
        [::std::mem::offset_of!(percpu_ref, percpu_count_ptr) - 0usize];
    ["Offset of field: percpu_ref::data"][::std::mem::offset_of!(percpu_ref, data) - 8usize];
};
extern "C" {
    pub fn percpu_ref_init(
        ref_: *mut percpu_ref,
        release: percpu_ref_func_t,
        flags: ::std::os::raw::c_uint,
        gfp: gfp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn percpu_ref_exit(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_switch_to_atomic(ref_: *mut percpu_ref, confirm_switch: percpu_ref_func_t);
}
extern "C" {
    pub fn percpu_ref_switch_to_atomic_sync(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_switch_to_percpu(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_kill_and_confirm(ref_: *mut percpu_ref, confirm_kill: percpu_ref_func_t);
}
extern "C" {
    pub fn percpu_ref_resurrect(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_reinit(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_is_zero(ref_: *mut percpu_ref) -> bool_;
}
pub const _slab_flag_bits__SLAB_CONSISTENCY_CHECKS: _slab_flag_bits = 0;
pub const _slab_flag_bits__SLAB_RED_ZONE: _slab_flag_bits = 1;
pub const _slab_flag_bits__SLAB_POISON: _slab_flag_bits = 2;
pub const _slab_flag_bits__SLAB_KMALLOC: _slab_flag_bits = 3;
pub const _slab_flag_bits__SLAB_HWCACHE_ALIGN: _slab_flag_bits = 4;
pub const _slab_flag_bits__SLAB_CACHE_DMA: _slab_flag_bits = 5;
pub const _slab_flag_bits__SLAB_CACHE_DMA32: _slab_flag_bits = 6;
pub const _slab_flag_bits__SLAB_STORE_USER: _slab_flag_bits = 7;
pub const _slab_flag_bits__SLAB_PANIC: _slab_flag_bits = 8;
pub const _slab_flag_bits__SLAB_TYPESAFE_BY_RCU: _slab_flag_bits = 9;
pub const _slab_flag_bits__SLAB_TRACE: _slab_flag_bits = 10;
pub const _slab_flag_bits__SLAB_NOLEAKTRACE: _slab_flag_bits = 11;
pub const _slab_flag_bits__SLAB_NO_MERGE: _slab_flag_bits = 12;
pub const _slab_flag_bits__SLAB_ACCOUNT: _slab_flag_bits = 13;
pub const _slab_flag_bits__SLAB_NO_USER_FLAGS: _slab_flag_bits = 14;
pub const _slab_flag_bits__SLAB_SKIP_KFENCE: _slab_flag_bits = 15;
pub const _slab_flag_bits__SLAB_RECLAIM_ACCOUNT: _slab_flag_bits = 16;
pub const _slab_flag_bits__SLAB_OBJECT_POISON: _slab_flag_bits = 17;
pub const _slab_flag_bits__SLAB_CMPXCHG_DOUBLE: _slab_flag_bits = 18;
pub const _slab_flag_bits__SLAB_NO_OBJ_EXT: _slab_flag_bits = 19;
pub const _slab_flag_bits__SLAB_FLAGS_LAST_BIT: _slab_flag_bits = 20;
pub type _slab_flag_bits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slab {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_struct {
    _unused: [u8; 0],
}
pub type kasan_vmalloc_flags_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn slab_is_available() -> bool_;
}
extern "C" {
    pub fn kmem_cache_create(
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
        flags: slab_flags_t,
        ctor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut kmem_cache;
}
extern "C" {
    pub fn kmem_cache_create_usercopy(
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
        flags: slab_flags_t,
        useroffset: ::std::os::raw::c_uint,
        usersize: ::std::os::raw::c_uint,
        ctor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut kmem_cache;
}
extern "C" {
    pub fn kmem_cache_destroy(s: *mut kmem_cache);
}
extern "C" {
    pub fn kmem_cache_shrink(s: *mut kmem_cache) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn krealloc_noprof(
        objp: *const ::std::os::raw::c_void,
        new_size: usize,
        flags: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kfree(objp: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn kfree_sensitive(objp: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn __ksize(objp: *const ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[doc = " ksize - Report actual allocation size of associated object\n\n @objp: Pointer returned from a prior kmalloc()-family allocation.\n\n This should not be used for writing beyond the originally requested\n allocation size. Either use krealloc() or round up the allocation size\n with kmalloc_size_roundup() prior to allocation. If this is used to\n access beyond the originally requested allocation size, UBSAN_BOUNDS\n and/or FORTIFY_SOURCE may trip, since they only know about the\n originally allocated size via the __alloc_size attribute."]
    pub fn ksize(objp: *const ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn kmem_dump_obj(object: *mut ::std::os::raw::c_void) -> bool_;
}
pub const kmalloc_cache_type_KMALLOC_NORMAL: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RANDOM_START: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RANDOM_END: kmalloc_cache_type = 15;
pub const kmalloc_cache_type_KMALLOC_RECLAIM: kmalloc_cache_type = 16;
pub const kmalloc_cache_type_KMALLOC_DMA: kmalloc_cache_type = 17;
pub const kmalloc_cache_type_KMALLOC_CGROUP: kmalloc_cache_type = 18;
pub const kmalloc_cache_type_NR_KMALLOC_TYPES: kmalloc_cache_type = 19;
pub type kmalloc_cache_type = ::std::os::raw::c_uint;
pub type kmem_buckets = [*mut kmem_cache; 14usize];
extern "C" {
    pub static mut kmalloc_caches: [kmem_buckets; 19usize];
}
extern "C" {
    pub static mut random_kmalloc_seed: ::std::os::raw::c_ulong;
}
extern "C" {
    #[doc = " kmem_cache_alloc - Allocate an object\n @cachep: The cache to allocate from.\n @flags: See kmalloc().\n\n Allocate an object from this cache.\n See kmem_cache_zalloc() for a shortcut of adding __GFP_ZERO to flags.\n\n Return: pointer to the new object or %NULL in case of error"]
    pub fn kmem_cache_alloc_noprof(
        cachep: *mut kmem_cache,
        flags: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kmem_cache_alloc_lru_noprof(
        s: *mut kmem_cache,
        lru: *mut list_lru,
        gfpflags: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kmem_cache_free(s: *mut kmem_cache, objp: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn kmem_buckets_create(
        name: *const ::std::os::raw::c_char,
        flags: slab_flags_t,
        useroffset: ::std::os::raw::c_uint,
        usersize: ::std::os::raw::c_uint,
        ctor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut kmem_buckets;
}
extern "C" {
    pub fn kmem_cache_free_bulk(
        s: *mut kmem_cache,
        size: usize,
        p: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn kmem_cache_alloc_bulk_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        size: usize,
        p: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kmem_cache_alloc_node_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kmalloc_noprof(size: usize, flags: gfp_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kmalloc_node_noprof(
        size: usize,
        b: *mut kmem_buckets,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kmalloc_cache_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kmalloc_cache_node_noprof(
        s: *mut kmem_cache,
        gfpflags: gfp_t,
        node: ::std::os::raw::c_int,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kmalloc_large_noprof(size: usize, flags: gfp_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kmalloc_large_node_noprof(
        size: usize,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kmalloc_node_track_caller_noprof(
        size: usize,
        b: *mut kmem_buckets,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
        caller: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __kvmalloc_node_noprof(
        size: usize,
        b: *mut kmem_buckets,
        flags: gfp_t,
        node: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kvrealloc_noprof(
        p: *const ::std::os::raw::c_void,
        oldsize: usize,
        newsize: usize,
        flags: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn kvfree(addr: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn kvfree_sensitive(addr: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn kmem_cache_size(s: *mut kmem_cache) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = " kmalloc_size_roundup - Report allocation bucket size for the given size\n\n @size: Number of bytes to round up from.\n\n This returns the number of bytes that would be available in a kmalloc()\n allocation of @size bytes. For example, a 126 byte request would be\n rounded up to the next sized kmalloc bucket, 128 bytes. (This is strictly\n for the general-purpose kmalloc()-based allocations, and is not for the\n pre-sized kmem_cache_alloc()-based allocations.)\n\n Use this to kmalloc() the full bucket size ahead of time instead of using\n ksize() to query the size after an allocation."]
    pub fn kmalloc_size_roundup(size: usize) -> usize;
}
extern "C" {
    pub fn kmem_cache_init_late();
}
pub const rw_hint_WRITE_LIFE_NOT_SET: rw_hint = 0;
pub const rw_hint_WRITE_LIFE_NONE: rw_hint = 1;
pub const rw_hint_WRITE_LIFE_SHORT: rw_hint = 2;
pub const rw_hint_WRITE_LIFE_MEDIUM: rw_hint = 3;
pub const rw_hint_WRITE_LIFE_LONG: rw_hint = 4;
pub const rw_hint_WRITE_LIFE_EXTREME: rw_hint = 5;
pub type rw_hint = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_clone_range {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_clone_range"][::std::mem::size_of::<file_clone_range>() - 32usize];
    ["Alignment of file_clone_range"][::std::mem::align_of::<file_clone_range>() - 8usize];
    ["Offset of field: file_clone_range::src_fd"]
        [::std::mem::offset_of!(file_clone_range, src_fd) - 0usize];
    ["Offset of field: file_clone_range::src_offset"]
        [::std::mem::offset_of!(file_clone_range, src_offset) - 8usize];
    ["Offset of field: file_clone_range::src_length"]
        [::std::mem::offset_of!(file_clone_range, src_length) - 16usize];
    ["Offset of field: file_clone_range::dest_offset"]
        [::std::mem::offset_of!(file_clone_range, dest_offset) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstrim_range {
    pub start: __u64,
    pub len: __u64,
    pub minlen: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fstrim_range"][::std::mem::size_of::<fstrim_range>() - 24usize];
    ["Alignment of fstrim_range"][::std::mem::align_of::<fstrim_range>() - 8usize];
    ["Offset of field: fstrim_range::start"][::std::mem::offset_of!(fstrim_range, start) - 0usize];
    ["Offset of field: fstrim_range::len"][::std::mem::offset_of!(fstrim_range, len) - 8usize];
    ["Offset of field: fstrim_range::minlen"]
        [::std::mem::offset_of!(fstrim_range, minlen) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsuuid2 {
    pub len: __u8,
    pub uuid: [__u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsuuid2"][::std::mem::size_of::<fsuuid2>() - 17usize];
    ["Alignment of fsuuid2"][::std::mem::align_of::<fsuuid2>() - 1usize];
    ["Offset of field: fsuuid2::len"][::std::mem::offset_of!(fsuuid2, len) - 0usize];
    ["Offset of field: fsuuid2::uuid"][::std::mem::offset_of!(fsuuid2, uuid) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_sysfs_path {
    pub len: __u8,
    pub name: [__u8; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fs_sysfs_path"][::std::mem::size_of::<fs_sysfs_path>() - 129usize];
    ["Alignment of fs_sysfs_path"][::std::mem::align_of::<fs_sysfs_path>() - 1usize];
    ["Offset of field: fs_sysfs_path::len"][::std::mem::offset_of!(fs_sysfs_path, len) - 0usize];
    ["Offset of field: fs_sysfs_path::name"][::std::mem::offset_of!(fs_sysfs_path, name) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_dedupe_range_info {
    pub dest_fd: __s64,
    pub dest_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_dedupe_range_info"][::std::mem::size_of::<file_dedupe_range_info>() - 32usize];
    ["Alignment of file_dedupe_range_info"]
        [::std::mem::align_of::<file_dedupe_range_info>() - 8usize];
    ["Offset of field: file_dedupe_range_info::dest_fd"]
        [::std::mem::offset_of!(file_dedupe_range_info, dest_fd) - 0usize];
    ["Offset of field: file_dedupe_range_info::dest_offset"]
        [::std::mem::offset_of!(file_dedupe_range_info, dest_offset) - 8usize];
    ["Offset of field: file_dedupe_range_info::bytes_deduped"]
        [::std::mem::offset_of!(file_dedupe_range_info, bytes_deduped) - 16usize];
    ["Offset of field: file_dedupe_range_info::status"]
        [::std::mem::offset_of!(file_dedupe_range_info, status) - 24usize];
    ["Offset of field: file_dedupe_range_info::reserved"]
        [::std::mem::offset_of!(file_dedupe_range_info, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct file_dedupe_range {
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<file_dedupe_range_info>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_dedupe_range"][::std::mem::size_of::<file_dedupe_range>() - 24usize];
    ["Alignment of file_dedupe_range"][::std::mem::align_of::<file_dedupe_range>() - 8usize];
    ["Offset of field: file_dedupe_range::src_offset"]
        [::std::mem::offset_of!(file_dedupe_range, src_offset) - 0usize];
    ["Offset of field: file_dedupe_range::src_length"]
        [::std::mem::offset_of!(file_dedupe_range, src_length) - 8usize];
    ["Offset of field: file_dedupe_range::dest_count"]
        [::std::mem::offset_of!(file_dedupe_range, dest_count) - 16usize];
    ["Offset of field: file_dedupe_range::reserved1"]
        [::std::mem::offset_of!(file_dedupe_range, reserved1) - 18usize];
    ["Offset of field: file_dedupe_range::reserved2"]
        [::std::mem::offset_of!(file_dedupe_range, reserved2) - 20usize];
    ["Offset of field: file_dedupe_range::info"]
        [::std::mem::offset_of!(file_dedupe_range, info) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct files_stat_struct {
    pub nr_files: ::std::os::raw::c_ulong,
    pub nr_free_files: ::std::os::raw::c_ulong,
    pub max_files: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of files_stat_struct"][::std::mem::size_of::<files_stat_struct>() - 24usize];
    ["Alignment of files_stat_struct"][::std::mem::align_of::<files_stat_struct>() - 8usize];
    ["Offset of field: files_stat_struct::nr_files"]
        [::std::mem::offset_of!(files_stat_struct, nr_files) - 0usize];
    ["Offset of field: files_stat_struct::nr_free_files"]
        [::std::mem::offset_of!(files_stat_struct, nr_free_files) - 8usize];
    ["Offset of field: files_stat_struct::max_files"]
        [::std::mem::offset_of!(files_stat_struct, max_files) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inodes_stat_t {
    pub nr_inodes: ::std::os::raw::c_long,
    pub nr_unused: ::std::os::raw::c_long,
    pub dummy: [::std::os::raw::c_long; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inodes_stat_t"][::std::mem::size_of::<inodes_stat_t>() - 56usize];
    ["Alignment of inodes_stat_t"][::std::mem::align_of::<inodes_stat_t>() - 8usize];
    ["Offset of field: inodes_stat_t::nr_inodes"]
        [::std::mem::offset_of!(inodes_stat_t, nr_inodes) - 0usize];
    ["Offset of field: inodes_stat_t::nr_unused"]
        [::std::mem::offset_of!(inodes_stat_t, nr_unused) - 8usize];
    ["Offset of field: inodes_stat_t::dummy"]
        [::std::mem::offset_of!(inodes_stat_t, dummy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsxattr {
    pub fsx_xflags: __u32,
    pub fsx_extsize: __u32,
    pub fsx_nextents: __u32,
    pub fsx_projid: __u32,
    pub fsx_cowextsize: __u32,
    pub fsx_pad: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsxattr"][::std::mem::size_of::<fsxattr>() - 28usize];
    ["Alignment of fsxattr"][::std::mem::align_of::<fsxattr>() - 4usize];
    ["Offset of field: fsxattr::fsx_xflags"][::std::mem::offset_of!(fsxattr, fsx_xflags) - 0usize];
    ["Offset of field: fsxattr::fsx_extsize"]
        [::std::mem::offset_of!(fsxattr, fsx_extsize) - 4usize];
    ["Offset of field: fsxattr::fsx_nextents"]
        [::std::mem::offset_of!(fsxattr, fsx_nextents) - 8usize];
    ["Offset of field: fsxattr::fsx_projid"][::std::mem::offset_of!(fsxattr, fsx_projid) - 12usize];
    ["Offset of field: fsxattr::fsx_cowextsize"]
        [::std::mem::offset_of!(fsxattr, fsx_cowextsize) - 16usize];
    ["Offset of field: fsxattr::fsx_pad"][::std::mem::offset_of!(fsxattr, fsx_pad) - 20usize];
};
pub type __kernel_rwf_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_region {
    pub start: __u64,
    pub end: __u64,
    pub categories: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page_region"][::std::mem::size_of::<page_region>() - 24usize];
    ["Alignment of page_region"][::std::mem::align_of::<page_region>() - 8usize];
    ["Offset of field: page_region::start"][::std::mem::offset_of!(page_region, start) - 0usize];
    ["Offset of field: page_region::end"][::std::mem::offset_of!(page_region, end) - 8usize];
    ["Offset of field: page_region::categories"]
        [::std::mem::offset_of!(page_region, categories) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_scan_arg {
    pub size: __u64,
    pub flags: __u64,
    pub start: __u64,
    pub end: __u64,
    pub walk_end: __u64,
    pub vec: __u64,
    pub vec_len: __u64,
    pub max_pages: __u64,
    pub category_inverted: __u64,
    pub category_mask: __u64,
    pub category_anyof_mask: __u64,
    pub return_mask: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pm_scan_arg"][::std::mem::size_of::<pm_scan_arg>() - 96usize];
    ["Alignment of pm_scan_arg"][::std::mem::align_of::<pm_scan_arg>() - 8usize];
    ["Offset of field: pm_scan_arg::size"][::std::mem::offset_of!(pm_scan_arg, size) - 0usize];
    ["Offset of field: pm_scan_arg::flags"][::std::mem::offset_of!(pm_scan_arg, flags) - 8usize];
    ["Offset of field: pm_scan_arg::start"][::std::mem::offset_of!(pm_scan_arg, start) - 16usize];
    ["Offset of field: pm_scan_arg::end"][::std::mem::offset_of!(pm_scan_arg, end) - 24usize];
    ["Offset of field: pm_scan_arg::walk_end"]
        [::std::mem::offset_of!(pm_scan_arg, walk_end) - 32usize];
    ["Offset of field: pm_scan_arg::vec"][::std::mem::offset_of!(pm_scan_arg, vec) - 40usize];
    ["Offset of field: pm_scan_arg::vec_len"]
        [::std::mem::offset_of!(pm_scan_arg, vec_len) - 48usize];
    ["Offset of field: pm_scan_arg::max_pages"]
        [::std::mem::offset_of!(pm_scan_arg, max_pages) - 56usize];
    ["Offset of field: pm_scan_arg::category_inverted"]
        [::std::mem::offset_of!(pm_scan_arg, category_inverted) - 64usize];
    ["Offset of field: pm_scan_arg::category_mask"]
        [::std::mem::offset_of!(pm_scan_arg, category_mask) - 72usize];
    ["Offset of field: pm_scan_arg::category_anyof_mask"]
        [::std::mem::offset_of!(pm_scan_arg, category_anyof_mask) - 80usize];
    ["Offset of field: pm_scan_arg::return_mask"]
        [::std::mem::offset_of!(pm_scan_arg, return_mask) - 88usize];
};
pub const procmap_query_flags_PROCMAP_QUERY_VMA_READABLE: procmap_query_flags = 1;
pub const procmap_query_flags_PROCMAP_QUERY_VMA_WRITABLE: procmap_query_flags = 2;
pub const procmap_query_flags_PROCMAP_QUERY_VMA_EXECUTABLE: procmap_query_flags = 4;
pub const procmap_query_flags_PROCMAP_QUERY_VMA_SHARED: procmap_query_flags = 8;
pub const procmap_query_flags_PROCMAP_QUERY_COVERING_OR_NEXT_VMA: procmap_query_flags = 16;
pub const procmap_query_flags_PROCMAP_QUERY_FILE_BACKED_VMA: procmap_query_flags = 32;
pub type procmap_query_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct procmap_query {
    pub size: __u64,
    pub query_flags: __u64,
    pub query_addr: __u64,
    pub vma_start: __u64,
    pub vma_end: __u64,
    pub vma_flags: __u64,
    pub vma_page_size: __u64,
    pub vma_offset: __u64,
    pub inode: __u64,
    pub dev_major: __u32,
    pub dev_minor: __u32,
    pub vma_name_size: __u32,
    pub build_id_size: __u32,
    pub vma_name_addr: __u64,
    pub build_id_addr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of procmap_query"][::std::mem::size_of::<procmap_query>() - 104usize];
    ["Alignment of procmap_query"][::std::mem::align_of::<procmap_query>() - 8usize];
    ["Offset of field: procmap_query::size"][::std::mem::offset_of!(procmap_query, size) - 0usize];
    ["Offset of field: procmap_query::query_flags"]
        [::std::mem::offset_of!(procmap_query, query_flags) - 8usize];
    ["Offset of field: procmap_query::query_addr"]
        [::std::mem::offset_of!(procmap_query, query_addr) - 16usize];
    ["Offset of field: procmap_query::vma_start"]
        [::std::mem::offset_of!(procmap_query, vma_start) - 24usize];
    ["Offset of field: procmap_query::vma_end"]
        [::std::mem::offset_of!(procmap_query, vma_end) - 32usize];
    ["Offset of field: procmap_query::vma_flags"]
        [::std::mem::offset_of!(procmap_query, vma_flags) - 40usize];
    ["Offset of field: procmap_query::vma_page_size"]
        [::std::mem::offset_of!(procmap_query, vma_page_size) - 48usize];
    ["Offset of field: procmap_query::vma_offset"]
        [::std::mem::offset_of!(procmap_query, vma_offset) - 56usize];
    ["Offset of field: procmap_query::inode"]
        [::std::mem::offset_of!(procmap_query, inode) - 64usize];
    ["Offset of field: procmap_query::dev_major"]
        [::std::mem::offset_of!(procmap_query, dev_major) - 72usize];
    ["Offset of field: procmap_query::dev_minor"]
        [::std::mem::offset_of!(procmap_query, dev_minor) - 76usize];
    ["Offset of field: procmap_query::vma_name_size"]
        [::std::mem::offset_of!(procmap_query, vma_name_size) - 80usize];
    ["Offset of field: procmap_query::build_id_size"]
        [::std::mem::offset_of!(procmap_query, build_id_size) - 84usize];
    ["Offset of field: procmap_query::vma_name_addr"]
        [::std::mem::offset_of!(procmap_query, vma_name_addr) - 88usize];
    ["Offset of field: procmap_query::build_id_addr"]
        [::std::mem::offset_of!(procmap_query, build_id_addr) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct backing_dev_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bdi_writeback {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_comp_batch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct export_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiemap_extent_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hd_geometry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kstatfs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swap_info_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_inode_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsverity_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsverity_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsnotify_mark_connector {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsnotify_sb_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_parameter_spec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fileattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iomap_ops {
    _unused: [u8; 0],
}
extern "C" {
    pub fn inode_init();
}
extern "C" {
    pub fn inode_init_early();
}
extern "C" {
    pub fn files_init();
}
extern "C" {
    pub fn files_maxfiles_init();
}
extern "C" {
    pub fn get_max_files() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut sysctl_nr_open: ::std::os::raw::c_uint;
}
pub type rwf_t = __kernel_rwf_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffer_head {
    _unused: [u8; 0],
}
pub type get_block_t = ::std::option::Option<
    unsafe extern "C" fn(
        inode: *mut inode,
        iblock: sector_t,
        bh_result: *mut buffer_head,
        create: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type dio_iodone_t = ::std::option::Option<
    unsafe extern "C" fn(
        iocb: *mut kiocb,
        offset: loff_t,
        bytes: isize,
        private: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iattr {
    pub ia_valid: ::std::os::raw::c_uint,
    pub ia_mode: umode_t,
    pub __bindgen_anon_1: iattr__bindgen_ty_1,
    pub __bindgen_anon_2: iattr__bindgen_ty_2,
    pub ia_size: loff_t,
    pub ia_atime: timespec64,
    pub ia_mtime: timespec64,
    pub ia_ctime: timespec64,
    pub ia_file: *mut file,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_1 {
    pub ia_uid: kuid_t,
    pub ia_vfsuid: vfsuid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iattr__bindgen_ty_1"][::std::mem::size_of::<iattr__bindgen_ty_1>() - 4usize];
    ["Alignment of iattr__bindgen_ty_1"][::std::mem::align_of::<iattr__bindgen_ty_1>() - 4usize];
    ["Offset of field: iattr__bindgen_ty_1::ia_uid"]
        [::std::mem::offset_of!(iattr__bindgen_ty_1, ia_uid) - 0usize];
    ["Offset of field: iattr__bindgen_ty_1::ia_vfsuid"]
        [::std::mem::offset_of!(iattr__bindgen_ty_1, ia_vfsuid) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_2 {
    pub ia_gid: kgid_t,
    pub ia_vfsgid: vfsgid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iattr__bindgen_ty_2"][::std::mem::size_of::<iattr__bindgen_ty_2>() - 4usize];
    ["Alignment of iattr__bindgen_ty_2"][::std::mem::align_of::<iattr__bindgen_ty_2>() - 4usize];
    ["Offset of field: iattr__bindgen_ty_2::ia_gid"]
        [::std::mem::offset_of!(iattr__bindgen_ty_2, ia_gid) - 0usize];
    ["Offset of field: iattr__bindgen_ty_2::ia_vfsgid"]
        [::std::mem::offset_of!(iattr__bindgen_ty_2, ia_vfsgid) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iattr"][::std::mem::size_of::<iattr>() - 80usize];
    ["Alignment of iattr"][::std::mem::align_of::<iattr>() - 8usize];
    ["Offset of field: iattr::ia_valid"][::std::mem::offset_of!(iattr, ia_valid) - 0usize];
    ["Offset of field: iattr::ia_mode"][::std::mem::offset_of!(iattr, ia_mode) - 4usize];
    ["Offset of field: iattr::ia_size"][::std::mem::offset_of!(iattr, ia_size) - 16usize];
    ["Offset of field: iattr::ia_atime"][::std::mem::offset_of!(iattr, ia_atime) - 24usize];
    ["Offset of field: iattr::ia_mtime"][::std::mem::offset_of!(iattr, ia_mtime) - 40usize];
    ["Offset of field: iattr::ia_ctime"][::std::mem::offset_of!(iattr, ia_ctime) - 56usize];
    ["Offset of field: iattr::ia_file"][::std::mem::offset_of!(iattr, ia_file) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_disk_quota {
    pub d_version: __s8,
    pub d_flags: __s8,
    pub d_fieldmask: __u16,
    pub d_id: __u32,
    pub d_blk_hardlimit: __u64,
    pub d_blk_softlimit: __u64,
    pub d_ino_hardlimit: __u64,
    pub d_ino_softlimit: __u64,
    pub d_bcount: __u64,
    pub d_icount: __u64,
    pub d_itimer: __s32,
    pub d_btimer: __s32,
    pub d_iwarns: __u16,
    pub d_bwarns: __u16,
    pub d_itimer_hi: __s8,
    pub d_btimer_hi: __s8,
    pub d_rtbtimer_hi: __s8,
    pub d_padding2: __s8,
    pub d_rtb_hardlimit: __u64,
    pub d_rtb_softlimit: __u64,
    pub d_rtbcount: __u64,
    pub d_rtbtimer: __s32,
    pub d_rtbwarns: __u16,
    pub d_padding3: __s16,
    pub d_padding4: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fs_disk_quota"][::std::mem::size_of::<fs_disk_quota>() - 112usize];
    ["Alignment of fs_disk_quota"][::std::mem::align_of::<fs_disk_quota>() - 8usize];
    ["Offset of field: fs_disk_quota::d_version"]
        [::std::mem::offset_of!(fs_disk_quota, d_version) - 0usize];
    ["Offset of field: fs_disk_quota::d_flags"]
        [::std::mem::offset_of!(fs_disk_quota, d_flags) - 1usize];
    ["Offset of field: fs_disk_quota::d_fieldmask"]
        [::std::mem::offset_of!(fs_disk_quota, d_fieldmask) - 2usize];
    ["Offset of field: fs_disk_quota::d_id"][::std::mem::offset_of!(fs_disk_quota, d_id) - 4usize];
    ["Offset of field: fs_disk_quota::d_blk_hardlimit"]
        [::std::mem::offset_of!(fs_disk_quota, d_blk_hardlimit) - 8usize];
    ["Offset of field: fs_disk_quota::d_blk_softlimit"]
        [::std::mem::offset_of!(fs_disk_quota, d_blk_softlimit) - 16usize];
    ["Offset of field: fs_disk_quota::d_ino_hardlimit"]
        [::std::mem::offset_of!(fs_disk_quota, d_ino_hardlimit) - 24usize];
    ["Offset of field: fs_disk_quota::d_ino_softlimit"]
        [::std::mem::offset_of!(fs_disk_quota, d_ino_softlimit) - 32usize];
    ["Offset of field: fs_disk_quota::d_bcount"]
        [::std::mem::offset_of!(fs_disk_quota, d_bcount) - 40usize];
    ["Offset of field: fs_disk_quota::d_icount"]
        [::std::mem::offset_of!(fs_disk_quota, d_icount) - 48usize];
    ["Offset of field: fs_disk_quota::d_itimer"]
        [::std::mem::offset_of!(fs_disk_quota, d_itimer) - 56usize];
    ["Offset of field: fs_disk_quota::d_btimer"]
        [::std::mem::offset_of!(fs_disk_quota, d_btimer) - 60usize];
    ["Offset of field: fs_disk_quota::d_iwarns"]
        [::std::mem::offset_of!(fs_disk_quota, d_iwarns) - 64usize];
    ["Offset of field: fs_disk_quota::d_bwarns"]
        [::std::mem::offset_of!(fs_disk_quota, d_bwarns) - 66usize];
    ["Offset of field: fs_disk_quota::d_itimer_hi"]
        [::std::mem::offset_of!(fs_disk_quota, d_itimer_hi) - 68usize];
    ["Offset of field: fs_disk_quota::d_btimer_hi"]
        [::std::mem::offset_of!(fs_disk_quota, d_btimer_hi) - 69usize];
    ["Offset of field: fs_disk_quota::d_rtbtimer_hi"]
        [::std::mem::offset_of!(fs_disk_quota, d_rtbtimer_hi) - 70usize];
    ["Offset of field: fs_disk_quota::d_padding2"]
        [::std::mem::offset_of!(fs_disk_quota, d_padding2) - 71usize];
    ["Offset of field: fs_disk_quota::d_rtb_hardlimit"]
        [::std::mem::offset_of!(fs_disk_quota, d_rtb_hardlimit) - 72usize];
    ["Offset of field: fs_disk_quota::d_rtb_softlimit"]
        [::std::mem::offset_of!(fs_disk_quota, d_rtb_softlimit) - 80usize];
    ["Offset of field: fs_disk_quota::d_rtbcount"]
        [::std::mem::offset_of!(fs_disk_quota, d_rtbcount) - 88usize];
    ["Offset of field: fs_disk_quota::d_rtbtimer"]
        [::std::mem::offset_of!(fs_disk_quota, d_rtbtimer) - 96usize];
    ["Offset of field: fs_disk_quota::d_rtbwarns"]
        [::std::mem::offset_of!(fs_disk_quota, d_rtbwarns) - 100usize];
    ["Offset of field: fs_disk_quota::d_padding3"]
        [::std::mem::offset_of!(fs_disk_quota, d_padding3) - 102usize];
    ["Offset of field: fs_disk_quota::d_padding4"]
        [::std::mem::offset_of!(fs_disk_quota, d_padding4) - 104usize];
};
pub type fs_disk_quota_t = fs_disk_quota;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_qfilestat {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fs_qfilestat"][::std::mem::size_of::<fs_qfilestat>() - 24usize];
    ["Alignment of fs_qfilestat"][::std::mem::align_of::<fs_qfilestat>() - 8usize];
    ["Offset of field: fs_qfilestat::qfs_ino"]
        [::std::mem::offset_of!(fs_qfilestat, qfs_ino) - 0usize];
    ["Offset of field: fs_qfilestat::qfs_nblks"]
        [::std::mem::offset_of!(fs_qfilestat, qfs_nblks) - 8usize];
    ["Offset of field: fs_qfilestat::qfs_nextents"]
        [::std::mem::offset_of!(fs_qfilestat, qfs_nextents) - 16usize];
};
pub type fs_qfilestat_t = fs_qfilestat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_quota_stat {
    pub qs_version: __s8,
    pub qs_flags: __u16,
    pub qs_pad: __s8,
    pub qs_uquota: fs_qfilestat_t,
    pub qs_gquota: fs_qfilestat_t,
    pub qs_incoredqs: __u32,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fs_quota_stat"][::std::mem::size_of::<fs_quota_stat>() - 80usize];
    ["Alignment of fs_quota_stat"][::std::mem::align_of::<fs_quota_stat>() - 8usize];
    ["Offset of field: fs_quota_stat::qs_version"]
        [::std::mem::offset_of!(fs_quota_stat, qs_version) - 0usize];
    ["Offset of field: fs_quota_stat::qs_flags"]
        [::std::mem::offset_of!(fs_quota_stat, qs_flags) - 2usize];
    ["Offset of field: fs_quota_stat::qs_pad"]
        [::std::mem::offset_of!(fs_quota_stat, qs_pad) - 4usize];
    ["Offset of field: fs_quota_stat::qs_uquota"]
        [::std::mem::offset_of!(fs_quota_stat, qs_uquota) - 8usize];
    ["Offset of field: fs_quota_stat::qs_gquota"]
        [::std::mem::offset_of!(fs_quota_stat, qs_gquota) - 32usize];
    ["Offset of field: fs_quota_stat::qs_incoredqs"]
        [::std::mem::offset_of!(fs_quota_stat, qs_incoredqs) - 56usize];
    ["Offset of field: fs_quota_stat::qs_btimelimit"]
        [::std::mem::offset_of!(fs_quota_stat, qs_btimelimit) - 60usize];
    ["Offset of field: fs_quota_stat::qs_itimelimit"]
        [::std::mem::offset_of!(fs_quota_stat, qs_itimelimit) - 64usize];
    ["Offset of field: fs_quota_stat::qs_rtbtimelimit"]
        [::std::mem::offset_of!(fs_quota_stat, qs_rtbtimelimit) - 68usize];
    ["Offset of field: fs_quota_stat::qs_bwarnlimit"]
        [::std::mem::offset_of!(fs_quota_stat, qs_bwarnlimit) - 72usize];
    ["Offset of field: fs_quota_stat::qs_iwarnlimit"]
        [::std::mem::offset_of!(fs_quota_stat, qs_iwarnlimit) - 74usize];
};
pub type fs_quota_stat_t = fs_quota_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_qfilestatv {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
    pub qfs_pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fs_qfilestatv"][::std::mem::size_of::<fs_qfilestatv>() - 24usize];
    ["Alignment of fs_qfilestatv"][::std::mem::align_of::<fs_qfilestatv>() - 8usize];
    ["Offset of field: fs_qfilestatv::qfs_ino"]
        [::std::mem::offset_of!(fs_qfilestatv, qfs_ino) - 0usize];
    ["Offset of field: fs_qfilestatv::qfs_nblks"]
        [::std::mem::offset_of!(fs_qfilestatv, qfs_nblks) - 8usize];
    ["Offset of field: fs_qfilestatv::qfs_nextents"]
        [::std::mem::offset_of!(fs_qfilestatv, qfs_nextents) - 16usize];
    ["Offset of field: fs_qfilestatv::qfs_pad"]
        [::std::mem::offset_of!(fs_qfilestatv, qfs_pad) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_quota_statv {
    pub qs_version: __s8,
    pub qs_pad1: __u8,
    pub qs_flags: __u16,
    pub qs_incoredqs: __u32,
    pub qs_uquota: fs_qfilestatv,
    pub qs_gquota: fs_qfilestatv,
    pub qs_pquota: fs_qfilestatv,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
    pub qs_rtbwarnlimit: __u16,
    pub qs_pad3: __u16,
    pub qs_pad4: __u32,
    pub qs_pad2: [__u64; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fs_quota_statv"][::std::mem::size_of::<fs_quota_statv>() - 160usize];
    ["Alignment of fs_quota_statv"][::std::mem::align_of::<fs_quota_statv>() - 8usize];
    ["Offset of field: fs_quota_statv::qs_version"]
        [::std::mem::offset_of!(fs_quota_statv, qs_version) - 0usize];
    ["Offset of field: fs_quota_statv::qs_pad1"]
        [::std::mem::offset_of!(fs_quota_statv, qs_pad1) - 1usize];
    ["Offset of field: fs_quota_statv::qs_flags"]
        [::std::mem::offset_of!(fs_quota_statv, qs_flags) - 2usize];
    ["Offset of field: fs_quota_statv::qs_incoredqs"]
        [::std::mem::offset_of!(fs_quota_statv, qs_incoredqs) - 4usize];
    ["Offset of field: fs_quota_statv::qs_uquota"]
        [::std::mem::offset_of!(fs_quota_statv, qs_uquota) - 8usize];
    ["Offset of field: fs_quota_statv::qs_gquota"]
        [::std::mem::offset_of!(fs_quota_statv, qs_gquota) - 32usize];
    ["Offset of field: fs_quota_statv::qs_pquota"]
        [::std::mem::offset_of!(fs_quota_statv, qs_pquota) - 56usize];
    ["Offset of field: fs_quota_statv::qs_btimelimit"]
        [::std::mem::offset_of!(fs_quota_statv, qs_btimelimit) - 80usize];
    ["Offset of field: fs_quota_statv::qs_itimelimit"]
        [::std::mem::offset_of!(fs_quota_statv, qs_itimelimit) - 84usize];
    ["Offset of field: fs_quota_statv::qs_rtbtimelimit"]
        [::std::mem::offset_of!(fs_quota_statv, qs_rtbtimelimit) - 88usize];
    ["Offset of field: fs_quota_statv::qs_bwarnlimit"]
        [::std::mem::offset_of!(fs_quota_statv, qs_bwarnlimit) - 92usize];
    ["Offset of field: fs_quota_statv::qs_iwarnlimit"]
        [::std::mem::offset_of!(fs_quota_statv, qs_iwarnlimit) - 94usize];
    ["Offset of field: fs_quota_statv::qs_rtbwarnlimit"]
        [::std::mem::offset_of!(fs_quota_statv, qs_rtbwarnlimit) - 96usize];
    ["Offset of field: fs_quota_statv::qs_pad3"]
        [::std::mem::offset_of!(fs_quota_statv, qs_pad3) - 98usize];
    ["Offset of field: fs_quota_statv::qs_pad4"]
        [::std::mem::offset_of!(fs_quota_statv, qs_pad4) - 100usize];
    ["Offset of field: fs_quota_statv::qs_pad2"]
        [::std::mem::offset_of!(fs_quota_statv, qs_pad2) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtree_fmt_operations {
    pub mem2disk_dqblk: ::std::option::Option<
        unsafe extern "C" fn(disk: *mut ::std::os::raw::c_void, dquot: *mut dquot),
    >,
    pub disk2mem_dqblk: ::std::option::Option<
        unsafe extern "C" fn(dquot: *mut dquot, disk: *mut ::std::os::raw::c_void),
    >,
    pub is_id: ::std::option::Option<
        unsafe extern "C" fn(
            disk: *mut ::std::os::raw::c_void,
            dquot: *mut dquot,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qtree_fmt_operations"][::std::mem::size_of::<qtree_fmt_operations>() - 24usize];
    ["Alignment of qtree_fmt_operations"][::std::mem::align_of::<qtree_fmt_operations>() - 8usize];
    ["Offset of field: qtree_fmt_operations::mem2disk_dqblk"]
        [::std::mem::offset_of!(qtree_fmt_operations, mem2disk_dqblk) - 0usize];
    ["Offset of field: qtree_fmt_operations::disk2mem_dqblk"]
        [::std::mem::offset_of!(qtree_fmt_operations, disk2mem_dqblk) - 8usize];
    ["Offset of field: qtree_fmt_operations::is_id"]
        [::std::mem::offset_of!(qtree_fmt_operations, is_id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtree_mem_dqinfo {
    pub dqi_sb: *mut super_block,
    pub dqi_type: ::std::os::raw::c_int,
    pub dqi_blocks: ::std::os::raw::c_uint,
    pub dqi_free_blk: ::std::os::raw::c_uint,
    pub dqi_free_entry: ::std::os::raw::c_uint,
    pub dqi_blocksize_bits: ::std::os::raw::c_uint,
    pub dqi_entry_size: ::std::os::raw::c_uint,
    pub dqi_usable_bs: ::std::os::raw::c_uint,
    pub dqi_qtree_depth: ::std::os::raw::c_uint,
    pub dqi_ops: *const qtree_fmt_operations,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qtree_mem_dqinfo"][::std::mem::size_of::<qtree_mem_dqinfo>() - 48usize];
    ["Alignment of qtree_mem_dqinfo"][::std::mem::align_of::<qtree_mem_dqinfo>() - 8usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_sb"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_sb) - 0usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_type"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_type) - 8usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_blocks"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_blocks) - 12usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_free_blk"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_free_blk) - 16usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_free_entry"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_free_entry) - 20usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_blocksize_bits"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_blocksize_bits) - 24usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_entry_size"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_entry_size) - 28usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_usable_bs"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_usable_bs) - 32usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_qtree_depth"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_qtree_depth) - 36usize];
    ["Offset of field: qtree_mem_dqinfo::dqi_ops"]
        [::std::mem::offset_of!(qtree_mem_dqinfo, dqi_ops) - 40usize];
};
extern "C" {
    pub fn qtree_write_dquot(
        info: *mut qtree_mem_dqinfo,
        dquot: *mut dquot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qtree_read_dquot(
        info: *mut qtree_mem_dqinfo,
        dquot: *mut dquot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qtree_delete_dquot(
        info: *mut qtree_mem_dqinfo,
        dquot: *mut dquot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qtree_release_dquot(
        info: *mut qtree_mem_dqinfo,
        dquot: *mut dquot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qtree_entry_unused(
        info: *mut qtree_mem_dqinfo,
        disk: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qtree_get_next_id(info: *mut qtree_mem_dqinfo, qid: *mut kqid) -> ::std::os::raw::c_int;
}
pub type projid_t = __kernel_uid32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kprojid_t {
    pub val: projid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kprojid_t"][::std::mem::size_of::<kprojid_t>() - 4usize];
    ["Alignment of kprojid_t"][::std::mem::align_of::<kprojid_t>() - 4usize];
    ["Offset of field: kprojid_t::val"][::std::mem::offset_of!(kprojid_t, val) - 0usize];
};
extern "C" {
    pub fn make_kprojid(from: *mut user_namespace, projid: projid_t) -> kprojid_t;
}
extern "C" {
    pub fn from_kprojid(to: *mut user_namespace, projid: kprojid_t) -> projid_t;
}
extern "C" {
    pub fn from_kprojid_munged(to: *mut user_namespace, projid: kprojid_t) -> projid_t;
}
pub const QIF_BLIMITS_B: _bindgen_ty_92 = 0;
pub const QIF_SPACE_B: _bindgen_ty_92 = 1;
pub const QIF_ILIMITS_B: _bindgen_ty_92 = 2;
pub const QIF_INODES_B: _bindgen_ty_92 = 3;
pub const QIF_BTIME_B: _bindgen_ty_92 = 4;
pub const QIF_ITIME_B: _bindgen_ty_92 = 5;
pub type _bindgen_ty_92 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_dqblk {
    pub dqb_bhardlimit: __u64,
    pub dqb_bsoftlimit: __u64,
    pub dqb_curspace: __u64,
    pub dqb_ihardlimit: __u64,
    pub dqb_isoftlimit: __u64,
    pub dqb_curinodes: __u64,
    pub dqb_btime: __u64,
    pub dqb_itime: __u64,
    pub dqb_valid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_dqblk"][::std::mem::size_of::<if_dqblk>() - 72usize];
    ["Alignment of if_dqblk"][::std::mem::align_of::<if_dqblk>() - 8usize];
    ["Offset of field: if_dqblk::dqb_bhardlimit"]
        [::std::mem::offset_of!(if_dqblk, dqb_bhardlimit) - 0usize];
    ["Offset of field: if_dqblk::dqb_bsoftlimit"]
        [::std::mem::offset_of!(if_dqblk, dqb_bsoftlimit) - 8usize];
    ["Offset of field: if_dqblk::dqb_curspace"]
        [::std::mem::offset_of!(if_dqblk, dqb_curspace) - 16usize];
    ["Offset of field: if_dqblk::dqb_ihardlimit"]
        [::std::mem::offset_of!(if_dqblk, dqb_ihardlimit) - 24usize];
    ["Offset of field: if_dqblk::dqb_isoftlimit"]
        [::std::mem::offset_of!(if_dqblk, dqb_isoftlimit) - 32usize];
    ["Offset of field: if_dqblk::dqb_curinodes"]
        [::std::mem::offset_of!(if_dqblk, dqb_curinodes) - 40usize];
    ["Offset of field: if_dqblk::dqb_btime"][::std::mem::offset_of!(if_dqblk, dqb_btime) - 48usize];
    ["Offset of field: if_dqblk::dqb_itime"][::std::mem::offset_of!(if_dqblk, dqb_itime) - 56usize];
    ["Offset of field: if_dqblk::dqb_valid"][::std::mem::offset_of!(if_dqblk, dqb_valid) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_nextdqblk {
    pub dqb_bhardlimit: __u64,
    pub dqb_bsoftlimit: __u64,
    pub dqb_curspace: __u64,
    pub dqb_ihardlimit: __u64,
    pub dqb_isoftlimit: __u64,
    pub dqb_curinodes: __u64,
    pub dqb_btime: __u64,
    pub dqb_itime: __u64,
    pub dqb_valid: __u32,
    pub dqb_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_nextdqblk"][::std::mem::size_of::<if_nextdqblk>() - 72usize];
    ["Alignment of if_nextdqblk"][::std::mem::align_of::<if_nextdqblk>() - 8usize];
    ["Offset of field: if_nextdqblk::dqb_bhardlimit"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_bhardlimit) - 0usize];
    ["Offset of field: if_nextdqblk::dqb_bsoftlimit"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_bsoftlimit) - 8usize];
    ["Offset of field: if_nextdqblk::dqb_curspace"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_curspace) - 16usize];
    ["Offset of field: if_nextdqblk::dqb_ihardlimit"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_ihardlimit) - 24usize];
    ["Offset of field: if_nextdqblk::dqb_isoftlimit"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_isoftlimit) - 32usize];
    ["Offset of field: if_nextdqblk::dqb_curinodes"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_curinodes) - 40usize];
    ["Offset of field: if_nextdqblk::dqb_btime"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_btime) - 48usize];
    ["Offset of field: if_nextdqblk::dqb_itime"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_itime) - 56usize];
    ["Offset of field: if_nextdqblk::dqb_valid"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_valid) - 64usize];
    ["Offset of field: if_nextdqblk::dqb_id"]
        [::std::mem::offset_of!(if_nextdqblk, dqb_id) - 68usize];
};
pub const DQF_ROOT_SQUASH_B: _bindgen_ty_93 = 0;
pub const DQF_SYS_FILE_B: _bindgen_ty_93 = 16;
pub const DQF_PRIVATE: _bindgen_ty_93 = 17;
pub type _bindgen_ty_93 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_dqinfo {
    pub dqi_bgrace: __u64,
    pub dqi_igrace: __u64,
    pub dqi_flags: __u32,
    pub dqi_valid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_dqinfo"][::std::mem::size_of::<if_dqinfo>() - 24usize];
    ["Alignment of if_dqinfo"][::std::mem::align_of::<if_dqinfo>() - 8usize];
    ["Offset of field: if_dqinfo::dqi_bgrace"]
        [::std::mem::offset_of!(if_dqinfo, dqi_bgrace) - 0usize];
    ["Offset of field: if_dqinfo::dqi_igrace"]
        [::std::mem::offset_of!(if_dqinfo, dqi_igrace) - 8usize];
    ["Offset of field: if_dqinfo::dqi_flags"]
        [::std::mem::offset_of!(if_dqinfo, dqi_flags) - 16usize];
    ["Offset of field: if_dqinfo::dqi_valid"]
        [::std::mem::offset_of!(if_dqinfo, dqi_valid) - 20usize];
};
pub const QUOTA_NL_C_UNSPEC: _bindgen_ty_94 = 0;
pub const QUOTA_NL_C_WARNING: _bindgen_ty_94 = 1;
pub const __QUOTA_NL_C_MAX: _bindgen_ty_94 = 2;
pub type _bindgen_ty_94 = ::std::os::raw::c_uint;
pub const QUOTA_NL_A_UNSPEC: _bindgen_ty_95 = 0;
pub const QUOTA_NL_A_QTYPE: _bindgen_ty_95 = 1;
pub const QUOTA_NL_A_EXCESS_ID: _bindgen_ty_95 = 2;
pub const QUOTA_NL_A_WARNING: _bindgen_ty_95 = 3;
pub const QUOTA_NL_A_DEV_MAJOR: _bindgen_ty_95 = 4;
pub const QUOTA_NL_A_DEV_MINOR: _bindgen_ty_95 = 5;
pub const QUOTA_NL_A_CAUSED_ID: _bindgen_ty_95 = 6;
pub const QUOTA_NL_A_PAD: _bindgen_ty_95 = 7;
pub const __QUOTA_NL_A_MAX: _bindgen_ty_95 = 8;
pub type _bindgen_ty_95 = ::std::os::raw::c_uint;
pub const quota_type_USRQUOTA: quota_type = 0;
pub const quota_type_GRPQUOTA: quota_type = 1;
pub const quota_type_PRJQUOTA: quota_type = 2;
pub type quota_type = ::std::os::raw::c_uint;
pub type qid_t = __kernel_uid32_t;
pub type qsize_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kqid {
    pub __bindgen_anon_1: kqid__bindgen_ty_1,
    pub type_: quota_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kqid__bindgen_ty_1 {
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub projid: kprojid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kqid__bindgen_ty_1"][::std::mem::size_of::<kqid__bindgen_ty_1>() - 4usize];
    ["Alignment of kqid__bindgen_ty_1"][::std::mem::align_of::<kqid__bindgen_ty_1>() - 4usize];
    ["Offset of field: kqid__bindgen_ty_1::uid"]
        [::std::mem::offset_of!(kqid__bindgen_ty_1, uid) - 0usize];
    ["Offset of field: kqid__bindgen_ty_1::gid"]
        [::std::mem::offset_of!(kqid__bindgen_ty_1, gid) - 0usize];
    ["Offset of field: kqid__bindgen_ty_1::projid"]
        [::std::mem::offset_of!(kqid__bindgen_ty_1, projid) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kqid"][::std::mem::size_of::<kqid>() - 8usize];
    ["Alignment of kqid"][::std::mem::align_of::<kqid>() - 4usize];
    ["Offset of field: kqid::type_"][::std::mem::offset_of!(kqid, type_) - 4usize];
};
extern "C" {
    pub fn qid_eq(left: kqid, right: kqid) -> bool_;
}
extern "C" {
    pub fn qid_lt(left: kqid, right: kqid) -> bool_;
}
extern "C" {
    pub fn from_kqid(to: *mut user_namespace, qid: kqid) -> qid_t;
}
extern "C" {
    pub fn from_kqid_munged(to: *mut user_namespace, qid: kqid) -> qid_t;
}
extern "C" {
    pub fn qid_valid(qid: kqid) -> bool_;
}
extern "C" {
    pub static mut dq_data_lock: spinlock_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_dqblk {
    pub dqb_bhardlimit: qsize_t,
    pub dqb_bsoftlimit: qsize_t,
    pub dqb_curspace: qsize_t,
    pub dqb_rsvspace: qsize_t,
    pub dqb_ihardlimit: qsize_t,
    pub dqb_isoftlimit: qsize_t,
    pub dqb_curinodes: qsize_t,
    pub dqb_btime: time64_t,
    pub dqb_itime: time64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_dqblk"][::std::mem::size_of::<mem_dqblk>() - 72usize];
    ["Alignment of mem_dqblk"][::std::mem::align_of::<mem_dqblk>() - 8usize];
    ["Offset of field: mem_dqblk::dqb_bhardlimit"]
        [::std::mem::offset_of!(mem_dqblk, dqb_bhardlimit) - 0usize];
    ["Offset of field: mem_dqblk::dqb_bsoftlimit"]
        [::std::mem::offset_of!(mem_dqblk, dqb_bsoftlimit) - 8usize];
    ["Offset of field: mem_dqblk::dqb_curspace"]
        [::std::mem::offset_of!(mem_dqblk, dqb_curspace) - 16usize];
    ["Offset of field: mem_dqblk::dqb_rsvspace"]
        [::std::mem::offset_of!(mem_dqblk, dqb_rsvspace) - 24usize];
    ["Offset of field: mem_dqblk::dqb_ihardlimit"]
        [::std::mem::offset_of!(mem_dqblk, dqb_ihardlimit) - 32usize];
    ["Offset of field: mem_dqblk::dqb_isoftlimit"]
        [::std::mem::offset_of!(mem_dqblk, dqb_isoftlimit) - 40usize];
    ["Offset of field: mem_dqblk::dqb_curinodes"]
        [::std::mem::offset_of!(mem_dqblk, dqb_curinodes) - 48usize];
    ["Offset of field: mem_dqblk::dqb_btime"]
        [::std::mem::offset_of!(mem_dqblk, dqb_btime) - 56usize];
    ["Offset of field: mem_dqblk::dqb_itime"]
        [::std::mem::offset_of!(mem_dqblk, dqb_itime) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_dqinfo {
    pub dqi_format: *mut quota_format_type,
    pub dqi_fmt_id: ::std::os::raw::c_int,
    pub dqi_dirty_list: list_head,
    pub dqi_flags: ::std::os::raw::c_ulong,
    pub dqi_bgrace: ::std::os::raw::c_uint,
    pub dqi_igrace: ::std::os::raw::c_uint,
    pub dqi_max_spc_limit: qsize_t,
    pub dqi_max_ino_limit: qsize_t,
    pub dqi_priv: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_dqinfo"][::std::mem::size_of::<mem_dqinfo>() - 72usize];
    ["Alignment of mem_dqinfo"][::std::mem::align_of::<mem_dqinfo>() - 8usize];
    ["Offset of field: mem_dqinfo::dqi_format"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_format) - 0usize];
    ["Offset of field: mem_dqinfo::dqi_fmt_id"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_fmt_id) - 8usize];
    ["Offset of field: mem_dqinfo::dqi_dirty_list"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_dirty_list) - 16usize];
    ["Offset of field: mem_dqinfo::dqi_flags"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_flags) - 32usize];
    ["Offset of field: mem_dqinfo::dqi_bgrace"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_bgrace) - 40usize];
    ["Offset of field: mem_dqinfo::dqi_igrace"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_igrace) - 44usize];
    ["Offset of field: mem_dqinfo::dqi_max_spc_limit"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_max_spc_limit) - 48usize];
    ["Offset of field: mem_dqinfo::dqi_max_ino_limit"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_max_ino_limit) - 56usize];
    ["Offset of field: mem_dqinfo::dqi_priv"]
        [::std::mem::offset_of!(mem_dqinfo, dqi_priv) - 64usize];
};
pub const DQF_INFO_DIRTY_B: _bindgen_ty_96 = 17;
pub type _bindgen_ty_96 = ::std::os::raw::c_uint;
extern "C" {
    pub fn mark_info_dirty(sb: *mut super_block, type_: ::std::os::raw::c_int);
}
pub const DQST_LOOKUPS: _bindgen_ty_97 = 0;
pub const DQST_DROPS: _bindgen_ty_97 = 1;
pub const DQST_READS: _bindgen_ty_97 = 2;
pub const DQST_WRITES: _bindgen_ty_97 = 3;
pub const DQST_CACHE_HITS: _bindgen_ty_97 = 4;
pub const DQST_ALLOC_DQUOTS: _bindgen_ty_97 = 5;
pub const DQST_FREE_DQUOTS: _bindgen_ty_97 = 6;
pub const DQST_SYNCS: _bindgen_ty_97 = 7;
pub const _DQST_DQSTAT_LAST: _bindgen_ty_97 = 8;
pub type _bindgen_ty_97 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dqstats {
    pub stat: [::std::os::raw::c_ulong; 8usize],
    pub counter: [percpu_counter; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dqstats"][::std::mem::size_of::<dqstats>() - 384usize];
    ["Alignment of dqstats"][::std::mem::align_of::<dqstats>() - 8usize];
    ["Offset of field: dqstats::stat"][::std::mem::offset_of!(dqstats, stat) - 0usize];
    ["Offset of field: dqstats::counter"][::std::mem::offset_of!(dqstats, counter) - 64usize];
};
extern "C" {
    pub static mut dqstats: dqstats;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dquot {
    pub dq_hash: hlist_node,
    pub dq_inuse: list_head,
    pub dq_free: list_head,
    pub dq_dirty: list_head,
    pub dq_lock: mutex,
    pub dq_dqb_lock: spinlock_t,
    pub dq_count: atomic_t,
    pub dq_sb: *mut super_block,
    pub dq_id: kqid,
    pub dq_off: loff_t,
    pub dq_flags: ::std::os::raw::c_ulong,
    pub dq_dqb: mem_dqblk,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dquot"][::std::mem::size_of::<dquot>() - 208usize];
    ["Alignment of dquot"][::std::mem::align_of::<dquot>() - 8usize];
    ["Offset of field: dquot::dq_hash"][::std::mem::offset_of!(dquot, dq_hash) - 0usize];
    ["Offset of field: dquot::dq_inuse"][::std::mem::offset_of!(dquot, dq_inuse) - 16usize];
    ["Offset of field: dquot::dq_free"][::std::mem::offset_of!(dquot, dq_free) - 32usize];
    ["Offset of field: dquot::dq_dirty"][::std::mem::offset_of!(dquot, dq_dirty) - 48usize];
    ["Offset of field: dquot::dq_lock"][::std::mem::offset_of!(dquot, dq_lock) - 64usize];
    ["Offset of field: dquot::dq_dqb_lock"][::std::mem::offset_of!(dquot, dq_dqb_lock) - 96usize];
    ["Offset of field: dquot::dq_count"][::std::mem::offset_of!(dquot, dq_count) - 100usize];
    ["Offset of field: dquot::dq_sb"][::std::mem::offset_of!(dquot, dq_sb) - 104usize];
    ["Offset of field: dquot::dq_id"][::std::mem::offset_of!(dquot, dq_id) - 112usize];
    ["Offset of field: dquot::dq_off"][::std::mem::offset_of!(dquot, dq_off) - 120usize];
    ["Offset of field: dquot::dq_flags"][::std::mem::offset_of!(dquot, dq_flags) - 128usize];
    ["Offset of field: dquot::dq_dqb"][::std::mem::offset_of!(dquot, dq_dqb) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quota_format_ops {
    pub check_quota_file: ::std::option::Option<
        unsafe extern "C" fn(
            sb: *mut super_block,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_file_info: ::std::option::Option<
        unsafe extern "C" fn(
            sb: *mut super_block,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub write_file_info: ::std::option::Option<
        unsafe extern "C" fn(
            sb: *mut super_block,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub free_file_info: ::std::option::Option<
        unsafe extern "C" fn(
            sb: *mut super_block,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_dqblk:
        ::std::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> ::std::os::raw::c_int>,
    pub commit_dqblk:
        ::std::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> ::std::os::raw::c_int>,
    pub release_dqblk:
        ::std::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> ::std::os::raw::c_int>,
    pub get_next_id: ::std::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quota_format_ops"][::std::mem::size_of::<quota_format_ops>() - 64usize];
    ["Alignment of quota_format_ops"][::std::mem::align_of::<quota_format_ops>() - 8usize];
    ["Offset of field: quota_format_ops::check_quota_file"]
        [::std::mem::offset_of!(quota_format_ops, check_quota_file) - 0usize];
    ["Offset of field: quota_format_ops::read_file_info"]
        [::std::mem::offset_of!(quota_format_ops, read_file_info) - 8usize];
    ["Offset of field: quota_format_ops::write_file_info"]
        [::std::mem::offset_of!(quota_format_ops, write_file_info) - 16usize];
    ["Offset of field: quota_format_ops::free_file_info"]
        [::std::mem::offset_of!(quota_format_ops, free_file_info) - 24usize];
    ["Offset of field: quota_format_ops::read_dqblk"]
        [::std::mem::offset_of!(quota_format_ops, read_dqblk) - 32usize];
    ["Offset of field: quota_format_ops::commit_dqblk"]
        [::std::mem::offset_of!(quota_format_ops, commit_dqblk) - 40usize];
    ["Offset of field: quota_format_ops::release_dqblk"]
        [::std::mem::offset_of!(quota_format_ops, release_dqblk) - 48usize];
    ["Offset of field: quota_format_ops::get_next_id"]
        [::std::mem::offset_of!(quota_format_ops, get_next_id) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dquot_operations {
    pub write_dquot:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> ::std::os::raw::c_int>,
    pub alloc_dquot: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: ::std::os::raw::c_int) -> *mut dquot,
    >,
    pub destroy_dquot: ::std::option::Option<unsafe extern "C" fn(arg1: *mut dquot)>,
    pub acquire_dquot:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> ::std::os::raw::c_int>,
    pub release_dquot:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> ::std::os::raw::c_int>,
    pub mark_dirty:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> ::std::os::raw::c_int>,
    pub write_info: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_reserved_space:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> *mut qsize_t>,
    pub get_projid: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut kprojid_t) -> ::std::os::raw::c_int,
    >,
    pub get_inode_usage: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut qsize_t) -> ::std::os::raw::c_int,
    >,
    pub get_next_id: ::std::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dquot_operations"][::std::mem::size_of::<dquot_operations>() - 88usize];
    ["Alignment of dquot_operations"][::std::mem::align_of::<dquot_operations>() - 8usize];
    ["Offset of field: dquot_operations::write_dquot"]
        [::std::mem::offset_of!(dquot_operations, write_dquot) - 0usize];
    ["Offset of field: dquot_operations::alloc_dquot"]
        [::std::mem::offset_of!(dquot_operations, alloc_dquot) - 8usize];
    ["Offset of field: dquot_operations::destroy_dquot"]
        [::std::mem::offset_of!(dquot_operations, destroy_dquot) - 16usize];
    ["Offset of field: dquot_operations::acquire_dquot"]
        [::std::mem::offset_of!(dquot_operations, acquire_dquot) - 24usize];
    ["Offset of field: dquot_operations::release_dquot"]
        [::std::mem::offset_of!(dquot_operations, release_dquot) - 32usize];
    ["Offset of field: dquot_operations::mark_dirty"]
        [::std::mem::offset_of!(dquot_operations, mark_dirty) - 40usize];
    ["Offset of field: dquot_operations::write_info"]
        [::std::mem::offset_of!(dquot_operations, write_info) - 48usize];
    ["Offset of field: dquot_operations::get_reserved_space"]
        [::std::mem::offset_of!(dquot_operations, get_reserved_space) - 56usize];
    ["Offset of field: dquot_operations::get_projid"]
        [::std::mem::offset_of!(dquot_operations, get_projid) - 64usize];
    ["Offset of field: dquot_operations::get_inode_usage"]
        [::std::mem::offset_of!(dquot_operations, get_inode_usage) - 72usize];
    ["Offset of field: dquot_operations::get_next_id"]
        [::std::mem::offset_of!(dquot_operations, get_next_id) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qc_dqblk {
    pub d_fieldmask: ::std::os::raw::c_int,
    pub d_spc_hardlimit: u64_,
    pub d_spc_softlimit: u64_,
    pub d_ino_hardlimit: u64_,
    pub d_ino_softlimit: u64_,
    pub d_space: u64_,
    pub d_ino_count: u64_,
    pub d_ino_timer: s64,
    pub d_spc_timer: s64,
    pub d_ino_warns: ::std::os::raw::c_int,
    pub d_spc_warns: ::std::os::raw::c_int,
    pub d_rt_spc_hardlimit: u64_,
    pub d_rt_spc_softlimit: u64_,
    pub d_rt_space: u64_,
    pub d_rt_spc_timer: s64,
    pub d_rt_spc_warns: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_dqblk"][::std::mem::size_of::<qc_dqblk>() - 120usize];
    ["Alignment of qc_dqblk"][::std::mem::align_of::<qc_dqblk>() - 8usize];
    ["Offset of field: qc_dqblk::d_fieldmask"]
        [::std::mem::offset_of!(qc_dqblk, d_fieldmask) - 0usize];
    ["Offset of field: qc_dqblk::d_spc_hardlimit"]
        [::std::mem::offset_of!(qc_dqblk, d_spc_hardlimit) - 8usize];
    ["Offset of field: qc_dqblk::d_spc_softlimit"]
        [::std::mem::offset_of!(qc_dqblk, d_spc_softlimit) - 16usize];
    ["Offset of field: qc_dqblk::d_ino_hardlimit"]
        [::std::mem::offset_of!(qc_dqblk, d_ino_hardlimit) - 24usize];
    ["Offset of field: qc_dqblk::d_ino_softlimit"]
        [::std::mem::offset_of!(qc_dqblk, d_ino_softlimit) - 32usize];
    ["Offset of field: qc_dqblk::d_space"][::std::mem::offset_of!(qc_dqblk, d_space) - 40usize];
    ["Offset of field: qc_dqblk::d_ino_count"]
        [::std::mem::offset_of!(qc_dqblk, d_ino_count) - 48usize];
    ["Offset of field: qc_dqblk::d_ino_timer"]
        [::std::mem::offset_of!(qc_dqblk, d_ino_timer) - 56usize];
    ["Offset of field: qc_dqblk::d_spc_timer"]
        [::std::mem::offset_of!(qc_dqblk, d_spc_timer) - 64usize];
    ["Offset of field: qc_dqblk::d_ino_warns"]
        [::std::mem::offset_of!(qc_dqblk, d_ino_warns) - 72usize];
    ["Offset of field: qc_dqblk::d_spc_warns"]
        [::std::mem::offset_of!(qc_dqblk, d_spc_warns) - 76usize];
    ["Offset of field: qc_dqblk::d_rt_spc_hardlimit"]
        [::std::mem::offset_of!(qc_dqblk, d_rt_spc_hardlimit) - 80usize];
    ["Offset of field: qc_dqblk::d_rt_spc_softlimit"]
        [::std::mem::offset_of!(qc_dqblk, d_rt_spc_softlimit) - 88usize];
    ["Offset of field: qc_dqblk::d_rt_space"]
        [::std::mem::offset_of!(qc_dqblk, d_rt_space) - 96usize];
    ["Offset of field: qc_dqblk::d_rt_spc_timer"]
        [::std::mem::offset_of!(qc_dqblk, d_rt_spc_timer) - 104usize];
    ["Offset of field: qc_dqblk::d_rt_spc_warns"]
        [::std::mem::offset_of!(qc_dqblk, d_rt_spc_warns) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qc_type_state {
    pub flags: ::std::os::raw::c_uint,
    pub spc_timelimit: ::std::os::raw::c_uint,
    pub ino_timelimit: ::std::os::raw::c_uint,
    pub rt_spc_timelimit: ::std::os::raw::c_uint,
    pub spc_warnlimit: ::std::os::raw::c_uint,
    pub ino_warnlimit: ::std::os::raw::c_uint,
    pub rt_spc_warnlimit: ::std::os::raw::c_uint,
    pub ino: ::std::os::raw::c_ulonglong,
    pub blocks: blkcnt_t,
    pub nextents: blkcnt_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_type_state"][::std::mem::size_of::<qc_type_state>() - 56usize];
    ["Alignment of qc_type_state"][::std::mem::align_of::<qc_type_state>() - 8usize];
    ["Offset of field: qc_type_state::flags"]
        [::std::mem::offset_of!(qc_type_state, flags) - 0usize];
    ["Offset of field: qc_type_state::spc_timelimit"]
        [::std::mem::offset_of!(qc_type_state, spc_timelimit) - 4usize];
    ["Offset of field: qc_type_state::ino_timelimit"]
        [::std::mem::offset_of!(qc_type_state, ino_timelimit) - 8usize];
    ["Offset of field: qc_type_state::rt_spc_timelimit"]
        [::std::mem::offset_of!(qc_type_state, rt_spc_timelimit) - 12usize];
    ["Offset of field: qc_type_state::spc_warnlimit"]
        [::std::mem::offset_of!(qc_type_state, spc_warnlimit) - 16usize];
    ["Offset of field: qc_type_state::ino_warnlimit"]
        [::std::mem::offset_of!(qc_type_state, ino_warnlimit) - 20usize];
    ["Offset of field: qc_type_state::rt_spc_warnlimit"]
        [::std::mem::offset_of!(qc_type_state, rt_spc_warnlimit) - 24usize];
    ["Offset of field: qc_type_state::ino"][::std::mem::offset_of!(qc_type_state, ino) - 32usize];
    ["Offset of field: qc_type_state::blocks"]
        [::std::mem::offset_of!(qc_type_state, blocks) - 40usize];
    ["Offset of field: qc_type_state::nextents"]
        [::std::mem::offset_of!(qc_type_state, nextents) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qc_state {
    pub s_incoredqs: ::std::os::raw::c_uint,
    pub s_state: [qc_type_state; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_state"][::std::mem::size_of::<qc_state>() - 176usize];
    ["Alignment of qc_state"][::std::mem::align_of::<qc_state>() - 8usize];
    ["Offset of field: qc_state::s_incoredqs"]
        [::std::mem::offset_of!(qc_state, s_incoredqs) - 0usize];
    ["Offset of field: qc_state::s_state"][::std::mem::offset_of!(qc_state, s_state) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qc_info {
    pub i_fieldmask: ::std::os::raw::c_int,
    pub i_flags: ::std::os::raw::c_uint,
    pub i_spc_timelimit: ::std::os::raw::c_uint,
    pub i_ino_timelimit: ::std::os::raw::c_uint,
    pub i_rt_spc_timelimit: ::std::os::raw::c_uint,
    pub i_spc_warnlimit: ::std::os::raw::c_uint,
    pub i_ino_warnlimit: ::std::os::raw::c_uint,
    pub i_rt_spc_warnlimit: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_info"][::std::mem::size_of::<qc_info>() - 32usize];
    ["Alignment of qc_info"][::std::mem::align_of::<qc_info>() - 4usize];
    ["Offset of field: qc_info::i_fieldmask"]
        [::std::mem::offset_of!(qc_info, i_fieldmask) - 0usize];
    ["Offset of field: qc_info::i_flags"][::std::mem::offset_of!(qc_info, i_flags) - 4usize];
    ["Offset of field: qc_info::i_spc_timelimit"]
        [::std::mem::offset_of!(qc_info, i_spc_timelimit) - 8usize];
    ["Offset of field: qc_info::i_ino_timelimit"]
        [::std::mem::offset_of!(qc_info, i_ino_timelimit) - 12usize];
    ["Offset of field: qc_info::i_rt_spc_timelimit"]
        [::std::mem::offset_of!(qc_info, i_rt_spc_timelimit) - 16usize];
    ["Offset of field: qc_info::i_spc_warnlimit"]
        [::std::mem::offset_of!(qc_info, i_spc_warnlimit) - 20usize];
    ["Offset of field: qc_info::i_ino_warnlimit"]
        [::std::mem::offset_of!(qc_info, i_ino_warnlimit) - 24usize];
    ["Offset of field: qc_info::i_rt_spc_warnlimit"]
        [::std::mem::offset_of!(qc_info, i_rt_spc_warnlimit) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quotactl_ops {
    pub quota_on: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *const path,
        ) -> ::std::os::raw::c_int,
    >,
    pub quota_off: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub quota_enable: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub quota_disable: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub quota_sync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_info: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_int,
            arg3: *mut qc_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_dqblk: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_nextdqblk: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut kqid,
            arg3: *mut qc_dqblk,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dqblk: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_state: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut qc_state) -> ::std::os::raw::c_int,
    >,
    pub rm_xquota: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quotactl_ops"][::std::mem::size_of::<quotactl_ops>() - 88usize];
    ["Alignment of quotactl_ops"][::std::mem::align_of::<quotactl_ops>() - 8usize];
    ["Offset of field: quotactl_ops::quota_on"]
        [::std::mem::offset_of!(quotactl_ops, quota_on) - 0usize];
    ["Offset of field: quotactl_ops::quota_off"]
        [::std::mem::offset_of!(quotactl_ops, quota_off) - 8usize];
    ["Offset of field: quotactl_ops::quota_enable"]
        [::std::mem::offset_of!(quotactl_ops, quota_enable) - 16usize];
    ["Offset of field: quotactl_ops::quota_disable"]
        [::std::mem::offset_of!(quotactl_ops, quota_disable) - 24usize];
    ["Offset of field: quotactl_ops::quota_sync"]
        [::std::mem::offset_of!(quotactl_ops, quota_sync) - 32usize];
    ["Offset of field: quotactl_ops::set_info"]
        [::std::mem::offset_of!(quotactl_ops, set_info) - 40usize];
    ["Offset of field: quotactl_ops::get_dqblk"]
        [::std::mem::offset_of!(quotactl_ops, get_dqblk) - 48usize];
    ["Offset of field: quotactl_ops::get_nextdqblk"]
        [::std::mem::offset_of!(quotactl_ops, get_nextdqblk) - 56usize];
    ["Offset of field: quotactl_ops::set_dqblk"]
        [::std::mem::offset_of!(quotactl_ops, set_dqblk) - 64usize];
    ["Offset of field: quotactl_ops::get_state"]
        [::std::mem::offset_of!(quotactl_ops, get_state) - 72usize];
    ["Offset of field: quotactl_ops::rm_xquota"]
        [::std::mem::offset_of!(quotactl_ops, rm_xquota) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quota_format_type {
    pub qf_fmt_id: ::std::os::raw::c_int,
    pub qf_ops: *const quota_format_ops,
    pub qf_owner: *mut module,
    pub qf_next: *mut quota_format_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quota_format_type"][::std::mem::size_of::<quota_format_type>() - 32usize];
    ["Alignment of quota_format_type"][::std::mem::align_of::<quota_format_type>() - 8usize];
    ["Offset of field: quota_format_type::qf_fmt_id"]
        [::std::mem::offset_of!(quota_format_type, qf_fmt_id) - 0usize];
    ["Offset of field: quota_format_type::qf_ops"]
        [::std::mem::offset_of!(quota_format_type, qf_ops) - 8usize];
    ["Offset of field: quota_format_type::qf_owner"]
        [::std::mem::offset_of!(quota_format_type, qf_owner) - 16usize];
    ["Offset of field: quota_format_type::qf_next"]
        [::std::mem::offset_of!(quota_format_type, qf_next) - 24usize];
};
pub const _DQUOT_USAGE_ENABLED: _bindgen_ty_98 = 0;
pub const _DQUOT_LIMITS_ENABLED: _bindgen_ty_98 = 1;
pub const _DQUOT_SUSPENDED: _bindgen_ty_98 = 2;
pub const _DQUOT_STATE_FLAGS: _bindgen_ty_98 = 3;
#[doc = " Quota state flags - they come in three flavors - for users, groups and projects.\n\n Actual typed flags layout:\n\t\t\t\tUSRQUOTA\tGRPQUOTA\tPRJQUOTA\n  DQUOT_USAGE_ENABLED\t\t0x0001\t\t0x0002\t\t0x0004\n  DQUOT_LIMITS_ENABLED\t0x0008\t\t0x0010\t\t0x0020\n  DQUOT_SUSPENDED\t\t0x0040\t\t0x0080\t\t0x0100\n\n Following bits are used for non-typed flags:\n  DQUOT_QUOTA_SYS_FILE\t0x0200\n  DQUOT_NEGATIVE_USAGE\t0x0400\n  DQUOT_NOLIST_DIRTY\t\t0x0800"]
pub type _bindgen_ty_98 = ::std::os::raw::c_uint;
extern "C" {
    pub fn quota_send_warning(qid: kqid, dev: dev_t, warntype: ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_info {
    pub flags: ::std::os::raw::c_uint,
    pub dqio_sem: rw_semaphore,
    pub files: [*mut inode; 3usize],
    pub info: [mem_dqinfo; 3usize],
    pub ops: [*const quota_format_ops; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quota_info"][::std::mem::size_of::<quota_info>() - 312usize];
    ["Alignment of quota_info"][::std::mem::align_of::<quota_info>() - 8usize];
    ["Offset of field: quota_info::flags"][::std::mem::offset_of!(quota_info, flags) - 0usize];
    ["Offset of field: quota_info::dqio_sem"]
        [::std::mem::offset_of!(quota_info, dqio_sem) - 8usize];
    ["Offset of field: quota_info::files"][::std::mem::offset_of!(quota_info, files) - 48usize];
    ["Offset of field: quota_info::info"][::std::mem::offset_of!(quota_info, info) - 72usize];
    ["Offset of field: quota_info::ops"][::std::mem::offset_of!(quota_info, ops) - 288usize];
};
extern "C" {
    pub fn register_quota_format(fmt: *mut quota_format_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unregister_quota_format(fmt: *mut quota_format_type);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quota_module_name {
    pub qm_fmt_id: ::std::os::raw::c_int,
    pub qm_mod_name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quota_module_name"][::std::mem::size_of::<quota_module_name>() - 16usize];
    ["Alignment of quota_module_name"][::std::mem::align_of::<quota_module_name>() - 8usize];
    ["Offset of field: quota_module_name::qm_fmt_id"]
        [::std::mem::offset_of!(quota_module_name, qm_fmt_id) - 0usize];
    ["Offset of field: quota_module_name::qm_mod_name"]
        [::std::mem::offset_of!(quota_module_name, qm_mod_name) - 8usize];
};
pub const positive_aop_returns_AOP_WRITEPAGE_ACTIVATE: positive_aop_returns = 524288;
pub const positive_aop_returns_AOP_TRUNCATED_PAGE: positive_aop_returns = 524289;
#[doc = " enum positive_aop_returns - aop return codes with specific semantics\n\n @AOP_WRITEPAGE_ACTIVATE: Informs the caller that page writeback has\n \t\t\t    completed, that the page is still locked, and\n \t\t\t    should be considered active.  The VM uses this hint\n \t\t\t    to return the page to the active list -- it won't\n \t\t\t    be a candidate for writeback again in the near\n \t\t\t    future.  Other callers must be careful to unlock\n \t\t\t    the page if they get this return.  Returned by\n \t\t\t    writepage();\n\n @AOP_TRUNCATED_PAGE: The AOP method that was handed a locked page has\n  \t\t\tunlocked it and the page might have been truncated.\n  \t\t\tThe caller should back up to acquiring a new page and\n  \t\t\ttrying again.  The aop will be taking reasonable\n  \t\t\tprecautions not to livelock.  If the caller held a page\n  \t\t\treference, it should drop it before retrying.  Returned\n  \t\t\tby read_folio().\n\n address_space_operation functions return these large constants to indicate\n special semantics to the caller.  These are much larger than the bytes in a\n page to allow for functions that return the number of bytes operated on in a\n given page."]
pub type positive_aop_returns = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct writeback_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readahead_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kiocb {
    pub ki_filp: *mut file,
    pub ki_pos: loff_t,
    pub ki_complete:
        ::std::option::Option<unsafe extern "C" fn(iocb: *mut kiocb, ret: ::std::os::raw::c_long)>,
    pub private: *mut ::std::os::raw::c_void,
    pub ki_flags: ::std::os::raw::c_int,
    pub ki_ioprio: u16_,
    pub __bindgen_anon_1: kiocb__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kiocb__bindgen_ty_1 {
    pub ki_waitq: *mut wait_page_queue,
    pub dio_complete:
        ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> isize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kiocb__bindgen_ty_1"][::std::mem::size_of::<kiocb__bindgen_ty_1>() - 8usize];
    ["Alignment of kiocb__bindgen_ty_1"][::std::mem::align_of::<kiocb__bindgen_ty_1>() - 8usize];
    ["Offset of field: kiocb__bindgen_ty_1::ki_waitq"]
        [::std::mem::offset_of!(kiocb__bindgen_ty_1, ki_waitq) - 0usize];
    ["Offset of field: kiocb__bindgen_ty_1::dio_complete"]
        [::std::mem::offset_of!(kiocb__bindgen_ty_1, dio_complete) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kiocb"][::std::mem::size_of::<kiocb>() - 48usize];
    ["Alignment of kiocb"][::std::mem::align_of::<kiocb>() - 8usize];
    ["Offset of field: kiocb::ki_filp"][::std::mem::offset_of!(kiocb, ki_filp) - 0usize];
    ["Offset of field: kiocb::ki_pos"][::std::mem::offset_of!(kiocb, ki_pos) - 8usize];
    ["Offset of field: kiocb::ki_complete"][::std::mem::offset_of!(kiocb, ki_complete) - 16usize];
    ["Offset of field: kiocb::private"][::std::mem::offset_of!(kiocb, private) - 24usize];
    ["Offset of field: kiocb::ki_flags"][::std::mem::offset_of!(kiocb, ki_flags) - 32usize];
    ["Offset of field: kiocb::ki_ioprio"][::std::mem::offset_of!(kiocb, ki_ioprio) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct address_space_operations {
    pub writepage: ::std::option::Option<
        unsafe extern "C" fn(page: *mut page, wbc: *mut writeback_control) -> ::std::os::raw::c_int,
    >,
    pub read_folio: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut folio) -> ::std::os::raw::c_int,
    >,
    pub writepages: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            arg2: *mut writeback_control,
        ) -> ::std::os::raw::c_int,
    >,
    pub dirty_folio: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut folio) -> bool_,
    >,
    pub readahead: ::std::option::Option<unsafe extern "C" fn(arg1: *mut readahead_control)>,
    pub write_begin: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: ::std::os::raw::c_uint,
            pagep: *mut *mut page,
            fsdata: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub write_end: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: ::std::os::raw::c_uint,
            copied: ::std::os::raw::c_uint,
            page: *mut page,
            fsdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub bmap: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: sector_t) -> sector_t,
    >,
    pub invalidate_folio:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut folio, offset: usize, len: usize)>,
    pub release_folio:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut folio, arg2: gfp_t) -> bool_>,
    pub free_folio: ::std::option::Option<unsafe extern "C" fn(folio: *mut folio)>,
    pub direct_IO:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut kiocb, iter: *mut iov_iter) -> isize>,
    pub migrate_folio: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            dst: *mut folio,
            src: *mut folio,
            arg2: migrate_mode,
        ) -> ::std::os::raw::c_int,
    >,
    pub launder_folio:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut folio) -> ::std::os::raw::c_int>,
    pub is_partially_uptodate: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, from: usize, count: usize) -> bool_,
    >,
    pub is_dirty_writeback: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, dirty: *mut bool_, wb: *mut bool_),
    >,
    pub error_remove_folio: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut folio) -> ::std::os::raw::c_int,
    >,
    pub swap_activate: ::std::option::Option<
        unsafe extern "C" fn(
            sis: *mut swap_info_struct,
            file: *mut file,
            span: *mut sector_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub swap_deactivate: ::std::option::Option<unsafe extern "C" fn(file: *mut file)>,
    pub swap_rw: ::std::option::Option<
        unsafe extern "C" fn(iocb: *mut kiocb, iter: *mut iov_iter) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of address_space_operations"]
        [::std::mem::size_of::<address_space_operations>() - 160usize];
    ["Alignment of address_space_operations"]
        [::std::mem::align_of::<address_space_operations>() - 8usize];
    ["Offset of field: address_space_operations::writepage"]
        [::std::mem::offset_of!(address_space_operations, writepage) - 0usize];
    ["Offset of field: address_space_operations::read_folio"]
        [::std::mem::offset_of!(address_space_operations, read_folio) - 8usize];
    ["Offset of field: address_space_operations::writepages"]
        [::std::mem::offset_of!(address_space_operations, writepages) - 16usize];
    ["Offset of field: address_space_operations::dirty_folio"]
        [::std::mem::offset_of!(address_space_operations, dirty_folio) - 24usize];
    ["Offset of field: address_space_operations::readahead"]
        [::std::mem::offset_of!(address_space_operations, readahead) - 32usize];
    ["Offset of field: address_space_operations::write_begin"]
        [::std::mem::offset_of!(address_space_operations, write_begin) - 40usize];
    ["Offset of field: address_space_operations::write_end"]
        [::std::mem::offset_of!(address_space_operations, write_end) - 48usize];
    ["Offset of field: address_space_operations::bmap"]
        [::std::mem::offset_of!(address_space_operations, bmap) - 56usize];
    ["Offset of field: address_space_operations::invalidate_folio"]
        [::std::mem::offset_of!(address_space_operations, invalidate_folio) - 64usize];
    ["Offset of field: address_space_operations::release_folio"]
        [::std::mem::offset_of!(address_space_operations, release_folio) - 72usize];
    ["Offset of field: address_space_operations::free_folio"]
        [::std::mem::offset_of!(address_space_operations, free_folio) - 80usize];
    ["Offset of field: address_space_operations::direct_IO"]
        [::std::mem::offset_of!(address_space_operations, direct_IO) - 88usize];
    ["Offset of field: address_space_operations::migrate_folio"]
        [::std::mem::offset_of!(address_space_operations, migrate_folio) - 96usize];
    ["Offset of field: address_space_operations::launder_folio"]
        [::std::mem::offset_of!(address_space_operations, launder_folio) - 104usize];
    ["Offset of field: address_space_operations::is_partially_uptodate"]
        [::std::mem::offset_of!(address_space_operations, is_partially_uptodate) - 112usize];
    ["Offset of field: address_space_operations::is_dirty_writeback"]
        [::std::mem::offset_of!(address_space_operations, is_dirty_writeback) - 120usize];
    ["Offset of field: address_space_operations::error_remove_folio"]
        [::std::mem::offset_of!(address_space_operations, error_remove_folio) - 128usize];
    ["Offset of field: address_space_operations::swap_activate"]
        [::std::mem::offset_of!(address_space_operations, swap_activate) - 136usize];
    ["Offset of field: address_space_operations::swap_deactivate"]
        [::std::mem::offset_of!(address_space_operations, swap_deactivate) - 144usize];
    ["Offset of field: address_space_operations::swap_rw"]
        [::std::mem::offset_of!(address_space_operations, swap_rw) - 152usize];
};
extern "C" {
    pub static empty_aops: address_space_operations;
}
#[doc = " struct address_space - Contents of a cacheable, mappable object.\n @host: Owner, either the inode or the block_device.\n @i_pages: Cached pages.\n @invalidate_lock: Guards coherency between page cache contents and\n   file offset->disk block mappings in the filesystem during invalidates.\n   It is also used to block modification of page cache contents through\n   memory mappings.\n @gfp_mask: Memory allocation flags to use for allocating pages.\n @i_mmap_writable: Number of VM_SHARED, VM_MAYWRITE mappings.\n @nr_thps: Number of THPs in the pagecache (non-shmem only).\n @i_mmap: Tree of private and shared mappings.\n @i_mmap_rwsem: Protects @i_mmap and @i_mmap_writable.\n @nrpages: Number of page entries, protected by the i_pages lock.\n @writeback_index: Writeback starts here.\n @a_ops: Methods.\n @flags: Error bits and flags (AS_*).\n @wb_err: The most recent error which has occurred.\n @i_private_lock: For use by the owner of the address_space.\n @i_private_list: For use by the owner of the address_space.\n @i_private_data: For use by the owner of the address_space."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct address_space {
    pub host: *mut inode,
    pub i_pages: xarray,
    pub invalidate_lock: rw_semaphore,
    pub gfp_mask: gfp_t,
    pub i_mmap_writable: atomic_t,
    pub i_mmap: rb_root_cached,
    pub nrpages: ::std::os::raw::c_ulong,
    pub writeback_index: ::std::os::raw::c_ulong,
    pub a_ops: *const address_space_operations,
    pub flags: ::std::os::raw::c_ulong,
    pub wb_err: errseq_t,
    pub i_private_lock: spinlock_t,
    pub i_private_list: list_head,
    pub i_mmap_rwsem: rw_semaphore,
    pub i_private_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of address_space"][::std::mem::size_of::<address_space>() - 192usize];
    ["Alignment of address_space"][::std::mem::align_of::<address_space>() - 8usize];
    ["Offset of field: address_space::host"][::std::mem::offset_of!(address_space, host) - 0usize];
    ["Offset of field: address_space::i_pages"]
        [::std::mem::offset_of!(address_space, i_pages) - 8usize];
    ["Offset of field: address_space::invalidate_lock"]
        [::std::mem::offset_of!(address_space, invalidate_lock) - 24usize];
    ["Offset of field: address_space::gfp_mask"]
        [::std::mem::offset_of!(address_space, gfp_mask) - 64usize];
    ["Offset of field: address_space::i_mmap_writable"]
        [::std::mem::offset_of!(address_space, i_mmap_writable) - 68usize];
    ["Offset of field: address_space::i_mmap"]
        [::std::mem::offset_of!(address_space, i_mmap) - 72usize];
    ["Offset of field: address_space::nrpages"]
        [::std::mem::offset_of!(address_space, nrpages) - 88usize];
    ["Offset of field: address_space::writeback_index"]
        [::std::mem::offset_of!(address_space, writeback_index) - 96usize];
    ["Offset of field: address_space::a_ops"]
        [::std::mem::offset_of!(address_space, a_ops) - 104usize];
    ["Offset of field: address_space::flags"]
        [::std::mem::offset_of!(address_space, flags) - 112usize];
    ["Offset of field: address_space::wb_err"]
        [::std::mem::offset_of!(address_space, wb_err) - 120usize];
    ["Offset of field: address_space::i_private_lock"]
        [::std::mem::offset_of!(address_space, i_private_lock) - 124usize];
    ["Offset of field: address_space::i_private_list"]
        [::std::mem::offset_of!(address_space, i_private_list) - 128usize];
    ["Offset of field: address_space::i_mmap_rwsem"]
        [::std::mem::offset_of!(address_space, i_mmap_rwsem) - 144usize];
    ["Offset of field: address_space::i_private_data"]
        [::std::mem::offset_of!(address_space, i_private_data) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct inode {
    pub i_mode: umode_t,
    pub i_opflags: ::std::os::raw::c_ushort,
    pub i_uid: kuid_t,
    pub i_gid: kgid_t,
    pub i_flags: ::std::os::raw::c_uint,
    pub i_acl: *mut posix_acl,
    pub i_default_acl: *mut posix_acl,
    pub i_op: *const inode_operations,
    pub i_sb: *mut super_block,
    pub i_mapping: *mut address_space,
    pub i_security: *mut ::std::os::raw::c_void,
    pub i_ino: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: inode__bindgen_ty_1,
    pub i_rdev: dev_t,
    pub i_size: loff_t,
    pub i_atime_sec: time64_t,
    pub i_mtime_sec: time64_t,
    pub i_ctime_sec: time64_t,
    pub i_atime_nsec: u32_,
    pub i_mtime_nsec: u32_,
    pub i_ctime_nsec: u32_,
    pub i_generation: u32_,
    pub i_lock: spinlock_t,
    pub i_bytes: ::std::os::raw::c_ushort,
    pub i_blkbits: u8_,
    pub i_write_hint: rw_hint,
    pub i_blocks: blkcnt_t,
    pub i_state: ::std::os::raw::c_ulong,
    pub i_rwsem: rw_semaphore,
    pub dirtied_when: ::std::os::raw::c_ulong,
    pub dirtied_time_when: ::std::os::raw::c_ulong,
    pub i_hash: hlist_node,
    pub i_io_list: list_head,
    pub i_wb: *mut bdi_writeback,
    pub i_wb_frn_winner: ::std::os::raw::c_int,
    pub i_wb_frn_avg_time: u16_,
    pub i_wb_frn_history: u16_,
    pub i_lru: list_head,
    pub i_sb_list: list_head,
    pub i_wb_list: list_head,
    pub __bindgen_anon_2: inode__bindgen_ty_2,
    pub i_version: atomic64_t,
    pub i_sequence: atomic64_t,
    pub i_count: atomic_t,
    pub i_dio_count: atomic_t,
    pub i_writecount: atomic_t,
    pub i_readcount: atomic_t,
    pub __bindgen_anon_3: inode__bindgen_ty_3,
    pub i_flctx: *mut file_lock_context,
    pub i_data: address_space,
    pub i_devices: list_head,
    pub __bindgen_anon_4: inode__bindgen_ty_4,
    pub i_fsnotify_mask: __u32,
    pub i_fsnotify_marks: *mut fsnotify_mark_connector,
    pub i_crypt_info: *mut fscrypt_inode_info,
    pub i_verity_info: *mut fsverity_info,
    pub i_private: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_1 {
    pub i_nlink: ::std::os::raw::c_uint,
    pub __i_nlink: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_1"][::std::mem::size_of::<inode__bindgen_ty_1>() - 4usize];
    ["Alignment of inode__bindgen_ty_1"][::std::mem::align_of::<inode__bindgen_ty_1>() - 4usize];
    ["Offset of field: inode__bindgen_ty_1::i_nlink"]
        [::std::mem::offset_of!(inode__bindgen_ty_1, i_nlink) - 0usize];
    ["Offset of field: inode__bindgen_ty_1::__i_nlink"]
        [::std::mem::offset_of!(inode__bindgen_ty_1, __i_nlink) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_2 {
    pub i_dentry: hlist_head,
    pub i_rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_2"][::std::mem::size_of::<inode__bindgen_ty_2>() - 16usize];
    ["Alignment of inode__bindgen_ty_2"][::std::mem::align_of::<inode__bindgen_ty_2>() - 8usize];
    ["Offset of field: inode__bindgen_ty_2::i_dentry"]
        [::std::mem::offset_of!(inode__bindgen_ty_2, i_dentry) - 0usize];
    ["Offset of field: inode__bindgen_ty_2::i_rcu"]
        [::std::mem::offset_of!(inode__bindgen_ty_2, i_rcu) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_3 {
    pub i_fop: *const file_operations,
    pub free_inode: ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_3"][::std::mem::size_of::<inode__bindgen_ty_3>() - 8usize];
    ["Alignment of inode__bindgen_ty_3"][::std::mem::align_of::<inode__bindgen_ty_3>() - 8usize];
    ["Offset of field: inode__bindgen_ty_3::i_fop"]
        [::std::mem::offset_of!(inode__bindgen_ty_3, i_fop) - 0usize];
    ["Offset of field: inode__bindgen_ty_3::free_inode"]
        [::std::mem::offset_of!(inode__bindgen_ty_3, free_inode) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_4 {
    pub i_pipe: *mut pipe_inode_info,
    pub i_cdev: *mut cdev,
    pub i_link: *mut ::std::os::raw::c_char,
    pub i_dir_seq: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_4"][::std::mem::size_of::<inode__bindgen_ty_4>() - 8usize];
    ["Alignment of inode__bindgen_ty_4"][::std::mem::align_of::<inode__bindgen_ty_4>() - 8usize];
    ["Offset of field: inode__bindgen_ty_4::i_pipe"]
        [::std::mem::offset_of!(inode__bindgen_ty_4, i_pipe) - 0usize];
    ["Offset of field: inode__bindgen_ty_4::i_cdev"]
        [::std::mem::offset_of!(inode__bindgen_ty_4, i_cdev) - 0usize];
    ["Offset of field: inode__bindgen_ty_4::i_link"]
        [::std::mem::offset_of!(inode__bindgen_ty_4, i_link) - 0usize];
    ["Offset of field: inode__bindgen_ty_4::i_dir_seq"]
        [::std::mem::offset_of!(inode__bindgen_ty_4, i_dir_seq) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode"][::std::mem::size_of::<inode>() - 624usize];
    ["Alignment of inode"][::std::mem::align_of::<inode>() - 8usize];
    ["Offset of field: inode::i_mode"][::std::mem::offset_of!(inode, i_mode) - 0usize];
    ["Offset of field: inode::i_opflags"][::std::mem::offset_of!(inode, i_opflags) - 2usize];
    ["Offset of field: inode::i_uid"][::std::mem::offset_of!(inode, i_uid) - 4usize];
    ["Offset of field: inode::i_gid"][::std::mem::offset_of!(inode, i_gid) - 8usize];
    ["Offset of field: inode::i_flags"][::std::mem::offset_of!(inode, i_flags) - 12usize];
    ["Offset of field: inode::i_acl"][::std::mem::offset_of!(inode, i_acl) - 16usize];
    ["Offset of field: inode::i_default_acl"]
        [::std::mem::offset_of!(inode, i_default_acl) - 24usize];
    ["Offset of field: inode::i_op"][::std::mem::offset_of!(inode, i_op) - 32usize];
    ["Offset of field: inode::i_sb"][::std::mem::offset_of!(inode, i_sb) - 40usize];
    ["Offset of field: inode::i_mapping"][::std::mem::offset_of!(inode, i_mapping) - 48usize];
    ["Offset of field: inode::i_security"][::std::mem::offset_of!(inode, i_security) - 56usize];
    ["Offset of field: inode::i_ino"][::std::mem::offset_of!(inode, i_ino) - 64usize];
    ["Offset of field: inode::i_rdev"][::std::mem::offset_of!(inode, i_rdev) - 76usize];
    ["Offset of field: inode::i_size"][::std::mem::offset_of!(inode, i_size) - 80usize];
    ["Offset of field: inode::i_atime_sec"][::std::mem::offset_of!(inode, i_atime_sec) - 88usize];
    ["Offset of field: inode::i_mtime_sec"][::std::mem::offset_of!(inode, i_mtime_sec) - 96usize];
    ["Offset of field: inode::i_ctime_sec"][::std::mem::offset_of!(inode, i_ctime_sec) - 104usize];
    ["Offset of field: inode::i_atime_nsec"]
        [::std::mem::offset_of!(inode, i_atime_nsec) - 112usize];
    ["Offset of field: inode::i_mtime_nsec"]
        [::std::mem::offset_of!(inode, i_mtime_nsec) - 116usize];
    ["Offset of field: inode::i_ctime_nsec"]
        [::std::mem::offset_of!(inode, i_ctime_nsec) - 120usize];
    ["Offset of field: inode::i_generation"]
        [::std::mem::offset_of!(inode, i_generation) - 124usize];
    ["Offset of field: inode::i_lock"][::std::mem::offset_of!(inode, i_lock) - 128usize];
    ["Offset of field: inode::i_bytes"][::std::mem::offset_of!(inode, i_bytes) - 132usize];
    ["Offset of field: inode::i_blkbits"][::std::mem::offset_of!(inode, i_blkbits) - 134usize];
    ["Offset of field: inode::i_write_hint"]
        [::std::mem::offset_of!(inode, i_write_hint) - 135usize];
    ["Offset of field: inode::i_blocks"][::std::mem::offset_of!(inode, i_blocks) - 136usize];
    ["Offset of field: inode::i_state"][::std::mem::offset_of!(inode, i_state) - 144usize];
    ["Offset of field: inode::i_rwsem"][::std::mem::offset_of!(inode, i_rwsem) - 152usize];
    ["Offset of field: inode::dirtied_when"]
        [::std::mem::offset_of!(inode, dirtied_when) - 192usize];
    ["Offset of field: inode::dirtied_time_when"]
        [::std::mem::offset_of!(inode, dirtied_time_when) - 200usize];
    ["Offset of field: inode::i_hash"][::std::mem::offset_of!(inode, i_hash) - 208usize];
    ["Offset of field: inode::i_io_list"][::std::mem::offset_of!(inode, i_io_list) - 224usize];
    ["Offset of field: inode::i_wb"][::std::mem::offset_of!(inode, i_wb) - 240usize];
    ["Offset of field: inode::i_wb_frn_winner"]
        [::std::mem::offset_of!(inode, i_wb_frn_winner) - 248usize];
    ["Offset of field: inode::i_wb_frn_avg_time"]
        [::std::mem::offset_of!(inode, i_wb_frn_avg_time) - 252usize];
    ["Offset of field: inode::i_wb_frn_history"]
        [::std::mem::offset_of!(inode, i_wb_frn_history) - 254usize];
    ["Offset of field: inode::i_lru"][::std::mem::offset_of!(inode, i_lru) - 256usize];
    ["Offset of field: inode::i_sb_list"][::std::mem::offset_of!(inode, i_sb_list) - 272usize];
    ["Offset of field: inode::i_wb_list"][::std::mem::offset_of!(inode, i_wb_list) - 288usize];
    ["Offset of field: inode::i_version"][::std::mem::offset_of!(inode, i_version) - 320usize];
    ["Offset of field: inode::i_sequence"][::std::mem::offset_of!(inode, i_sequence) - 328usize];
    ["Offset of field: inode::i_count"][::std::mem::offset_of!(inode, i_count) - 336usize];
    ["Offset of field: inode::i_dio_count"][::std::mem::offset_of!(inode, i_dio_count) - 340usize];
    ["Offset of field: inode::i_writecount"]
        [::std::mem::offset_of!(inode, i_writecount) - 344usize];
    ["Offset of field: inode::i_readcount"][::std::mem::offset_of!(inode, i_readcount) - 348usize];
    ["Offset of field: inode::i_flctx"][::std::mem::offset_of!(inode, i_flctx) - 360usize];
    ["Offset of field: inode::i_data"][::std::mem::offset_of!(inode, i_data) - 368usize];
    ["Offset of field: inode::i_devices"][::std::mem::offset_of!(inode, i_devices) - 560usize];
    ["Offset of field: inode::i_fsnotify_mask"]
        [::std::mem::offset_of!(inode, i_fsnotify_mask) - 584usize];
    ["Offset of field: inode::i_fsnotify_marks"]
        [::std::mem::offset_of!(inode, i_fsnotify_marks) - 592usize];
    ["Offset of field: inode::i_crypt_info"]
        [::std::mem::offset_of!(inode, i_crypt_info) - 600usize];
    ["Offset of field: inode::i_verity_info"]
        [::std::mem::offset_of!(inode, i_verity_info) - 608usize];
    ["Offset of field: inode::i_private"][::std::mem::offset_of!(inode, i_private) - 616usize];
};
extern "C" {
    pub fn timestamp_truncate(t: timespec64, inode: *mut inode) -> timespec64;
}
pub const inode_i_mutex_lock_class_I_MUTEX_NORMAL: inode_i_mutex_lock_class = 0;
pub const inode_i_mutex_lock_class_I_MUTEX_PARENT: inode_i_mutex_lock_class = 1;
pub const inode_i_mutex_lock_class_I_MUTEX_CHILD: inode_i_mutex_lock_class = 2;
pub const inode_i_mutex_lock_class_I_MUTEX_XATTR: inode_i_mutex_lock_class = 3;
pub const inode_i_mutex_lock_class_I_MUTEX_NONDIR2: inode_i_mutex_lock_class = 4;
pub const inode_i_mutex_lock_class_I_MUTEX_PARENT2: inode_i_mutex_lock_class = 5;
pub type inode_i_mutex_lock_class = ::std::os::raw::c_uint;
extern "C" {
    pub fn lock_two_nondirectories(arg1: *mut inode, arg2: *mut inode);
}
extern "C" {
    pub fn unlock_two_nondirectories(arg1: *mut inode, arg2: *mut inode);
}
extern "C" {
    pub fn filemap_invalidate_lock_two(mapping1: *mut address_space, mapping2: *mut address_space);
}
extern "C" {
    pub fn filemap_invalidate_unlock_two(
        mapping1: *mut address_space,
        mapping2: *mut address_space,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fown_struct {
    pub lock: rwlock_t,
    pub pid: *mut pid,
    pub pid_type: pid_type,
    pub uid: kuid_t,
    pub euid: kuid_t,
    pub signum: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fown_struct"][::std::mem::size_of::<fown_struct>() - 32usize];
    ["Alignment of fown_struct"][::std::mem::align_of::<fown_struct>() - 8usize];
    ["Offset of field: fown_struct::lock"][::std::mem::offset_of!(fown_struct, lock) - 0usize];
    ["Offset of field: fown_struct::pid"][::std::mem::offset_of!(fown_struct, pid) - 8usize];
    ["Offset of field: fown_struct::pid_type"]
        [::std::mem::offset_of!(fown_struct, pid_type) - 16usize];
    ["Offset of field: fown_struct::uid"][::std::mem::offset_of!(fown_struct, uid) - 20usize];
    ["Offset of field: fown_struct::euid"][::std::mem::offset_of!(fown_struct, euid) - 24usize];
    ["Offset of field: fown_struct::signum"][::std::mem::offset_of!(fown_struct, signum) - 28usize];
};
#[doc = " struct file_ra_state - Track a file's readahead state.\n @start: Where the most recent readahead started.\n @size: Number of pages read in the most recent readahead.\n @async_size: Numer of pages that were/are not needed immediately\n      and so were/are genuinely \"ahead\".  Start next readahead when\n      the first of these pages is accessed.\n @ra_pages: Maximum size of a readahead request, copied from the bdi.\n @mmap_miss: How many mmap accesses missed in the page cache.\n @prev_pos: The last byte in the most recent read request.\n\n When this structure is passed to ->readahead(), the \"most recent\"\n readahead means the current readahead."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_ra_state {
    pub start: ::std::os::raw::c_ulong,
    pub size: ::std::os::raw::c_uint,
    pub async_size: ::std::os::raw::c_uint,
    pub ra_pages: ::std::os::raw::c_uint,
    pub mmap_miss: ::std::os::raw::c_uint,
    pub prev_pos: loff_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_ra_state"][::std::mem::size_of::<file_ra_state>() - 32usize];
    ["Alignment of file_ra_state"][::std::mem::align_of::<file_ra_state>() - 8usize];
    ["Offset of field: file_ra_state::start"]
        [::std::mem::offset_of!(file_ra_state, start) - 0usize];
    ["Offset of field: file_ra_state::size"][::std::mem::offset_of!(file_ra_state, size) - 8usize];
    ["Offset of field: file_ra_state::async_size"]
        [::std::mem::offset_of!(file_ra_state, async_size) - 12usize];
    ["Offset of field: file_ra_state::ra_pages"]
        [::std::mem::offset_of!(file_ra_state, ra_pages) - 16usize];
    ["Offset of field: file_ra_state::mmap_miss"]
        [::std::mem::offset_of!(file_ra_state, mmap_miss) - 20usize];
    ["Offset of field: file_ra_state::prev_pos"]
        [::std::mem::offset_of!(file_ra_state, prev_pos) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file {
    pub __bindgen_anon_1: file__bindgen_ty_1,
    pub f_lock: spinlock_t,
    pub f_mode: fmode_t,
    pub f_count: atomic_long_t,
    pub f_pos_lock: mutex,
    pub f_pos: loff_t,
    pub f_flags: ::std::os::raw::c_uint,
    pub f_owner: fown_struct,
    pub f_cred: *const cred,
    pub f_ra: file_ra_state,
    pub f_path: path,
    pub f_inode: *mut inode,
    pub f_op: *const file_operations,
    pub f_version: u64_,
    pub f_security: *mut ::std::os::raw::c_void,
    pub private_data: *mut ::std::os::raw::c_void,
    pub f_ep: *mut hlist_head,
    pub f_mapping: *mut address_space,
    pub f_wb_err: errseq_t,
    pub f_sb_err: errseq_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union file__bindgen_ty_1 {
    pub f_task_work: callback_head,
    pub f_llist: llist_node,
    pub f_iocb_flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file__bindgen_ty_1"][::std::mem::size_of::<file__bindgen_ty_1>() - 16usize];
    ["Alignment of file__bindgen_ty_1"][::std::mem::align_of::<file__bindgen_ty_1>() - 8usize];
    ["Offset of field: file__bindgen_ty_1::f_task_work"]
        [::std::mem::offset_of!(file__bindgen_ty_1, f_task_work) - 0usize];
    ["Offset of field: file__bindgen_ty_1::f_llist"]
        [::std::mem::offset_of!(file__bindgen_ty_1, f_llist) - 0usize];
    ["Offset of field: file__bindgen_ty_1::f_iocb_flags"]
        [::std::mem::offset_of!(file__bindgen_ty_1, f_iocb_flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file"][::std::mem::size_of::<file>() - 232usize];
    ["Alignment of file"][::std::mem::align_of::<file>() - 8usize];
    ["Offset of field: file::f_lock"][::std::mem::offset_of!(file, f_lock) - 16usize];
    ["Offset of field: file::f_mode"][::std::mem::offset_of!(file, f_mode) - 20usize];
    ["Offset of field: file::f_count"][::std::mem::offset_of!(file, f_count) - 24usize];
    ["Offset of field: file::f_pos_lock"][::std::mem::offset_of!(file, f_pos_lock) - 32usize];
    ["Offset of field: file::f_pos"][::std::mem::offset_of!(file, f_pos) - 64usize];
    ["Offset of field: file::f_flags"][::std::mem::offset_of!(file, f_flags) - 72usize];
    ["Offset of field: file::f_owner"][::std::mem::offset_of!(file, f_owner) - 80usize];
    ["Offset of field: file::f_cred"][::std::mem::offset_of!(file, f_cred) - 112usize];
    ["Offset of field: file::f_ra"][::std::mem::offset_of!(file, f_ra) - 120usize];
    ["Offset of field: file::f_path"][::std::mem::offset_of!(file, f_path) - 152usize];
    ["Offset of field: file::f_inode"][::std::mem::offset_of!(file, f_inode) - 168usize];
    ["Offset of field: file::f_op"][::std::mem::offset_of!(file, f_op) - 176usize];
    ["Offset of field: file::f_version"][::std::mem::offset_of!(file, f_version) - 184usize];
    ["Offset of field: file::f_security"][::std::mem::offset_of!(file, f_security) - 192usize];
    ["Offset of field: file::private_data"][::std::mem::offset_of!(file, private_data) - 200usize];
    ["Offset of field: file::f_ep"][::std::mem::offset_of!(file, f_ep) - 208usize];
    ["Offset of field: file::f_mapping"][::std::mem::offset_of!(file, f_mapping) - 216usize];
    ["Offset of field: file::f_wb_err"][::std::mem::offset_of!(file, f_wb_err) - 224usize];
    ["Offset of field: file::f_sb_err"][::std::mem::offset_of!(file, f_sb_err) - 228usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct file_handle {
    pub handle_bytes: __u32,
    pub handle_type: ::std::os::raw::c_int,
    pub f_handle: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_handle"][::std::mem::size_of::<file_handle>() - 8usize];
    ["Alignment of file_handle"][::std::mem::align_of::<file_handle>() - 4usize];
    ["Offset of field: file_handle::handle_bytes"]
        [::std::mem::offset_of!(file_handle, handle_bytes) - 0usize];
    ["Offset of field: file_handle::handle_type"]
        [::std::mem::offset_of!(file_handle, handle_type) - 4usize];
    ["Offset of field: file_handle::f_handle"]
        [::std::mem::offset_of!(file_handle, f_handle) - 8usize];
};
extern "C" {
    pub fn get_file_rcu(f: *mut *mut file) -> *mut file;
}
extern "C" {
    pub fn get_file_active(f: *mut *mut file) -> *mut file;
}
pub type fl_owner_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_lock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_lease {
    _unused: [u8; 0],
}
extern "C" {
    pub fn send_sigio(
        fown: *mut fown_struct,
        fd: ::std::os::raw::c_int,
        band: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fasync_struct {
    pub fa_lock: rwlock_t,
    pub magic: ::std::os::raw::c_int,
    pub fa_fd: ::std::os::raw::c_int,
    pub fa_next: *mut fasync_struct,
    pub fa_file: *mut file,
    pub fa_rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fasync_struct"][::std::mem::size_of::<fasync_struct>() - 48usize];
    ["Alignment of fasync_struct"][::std::mem::align_of::<fasync_struct>() - 8usize];
    ["Offset of field: fasync_struct::fa_lock"]
        [::std::mem::offset_of!(fasync_struct, fa_lock) - 0usize];
    ["Offset of field: fasync_struct::magic"]
        [::std::mem::offset_of!(fasync_struct, magic) - 8usize];
    ["Offset of field: fasync_struct::fa_fd"]
        [::std::mem::offset_of!(fasync_struct, fa_fd) - 12usize];
    ["Offset of field: fasync_struct::fa_next"]
        [::std::mem::offset_of!(fasync_struct, fa_next) - 16usize];
    ["Offset of field: fasync_struct::fa_file"]
        [::std::mem::offset_of!(fasync_struct, fa_file) - 24usize];
    ["Offset of field: fasync_struct::fa_rcu"]
        [::std::mem::offset_of!(fasync_struct, fa_rcu) - 32usize];
};
extern "C" {
    pub fn fasync_helper(
        arg1: ::std::os::raw::c_int,
        arg2: *mut file,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut fasync_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fasync_insert_entry(
        arg1: ::std::os::raw::c_int,
        arg2: *mut file,
        arg3: *mut *mut fasync_struct,
        arg4: *mut fasync_struct,
    ) -> *mut fasync_struct;
}
extern "C" {
    pub fn fasync_remove_entry(
        arg1: *mut file,
        arg2: *mut *mut fasync_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fasync_alloc() -> *mut fasync_struct;
}
extern "C" {
    pub fn fasync_free(arg1: *mut fasync_struct);
}
extern "C" {
    pub fn kill_fasync(
        arg1: *mut *mut fasync_struct,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn __f_setown(
        filp: *mut file,
        arg1: *mut pid,
        arg2: pid_type,
        force: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn f_setown(
        filp: *mut file,
        who: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f_delown(filp: *mut file);
}
extern "C" {
    pub fn f_getown(filp: *mut file) -> pid_t;
}
extern "C" {
    pub fn send_sigurg(fown: *mut fown_struct) -> ::std::os::raw::c_int;
}
pub const SB_UNFROZEN: _bindgen_ty_99 = 0;
pub const SB_FREEZE_WRITE: _bindgen_ty_99 = 1;
pub const SB_FREEZE_PAGEFAULT: _bindgen_ty_99 = 2;
pub const SB_FREEZE_FS: _bindgen_ty_99 = 3;
pub const SB_FREEZE_COMPLETE: _bindgen_ty_99 = 4;
pub type _bindgen_ty_99 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sb_writers {
    pub frozen: ::std::os::raw::c_ushort,
    pub freeze_kcount: ::std::os::raw::c_int,
    pub freeze_ucount: ::std::os::raw::c_int,
    pub rw_sem: [percpu_rw_semaphore; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sb_writers"][::std::mem::size_of::<sb_writers>() - 304usize];
    ["Alignment of sb_writers"][::std::mem::align_of::<sb_writers>() - 8usize];
    ["Offset of field: sb_writers::frozen"][::std::mem::offset_of!(sb_writers, frozen) - 0usize];
    ["Offset of field: sb_writers::freeze_kcount"]
        [::std::mem::offset_of!(sb_writers, freeze_kcount) - 4usize];
    ["Offset of field: sb_writers::freeze_ucount"]
        [::std::mem::offset_of!(sb_writers, freeze_ucount) - 8usize];
    ["Offset of field: sb_writers::rw_sem"][::std::mem::offset_of!(sb_writers, rw_sem) - 16usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct super_block {
    pub s_list: list_head,
    pub s_dev: dev_t,
    pub s_blocksize_bits: ::std::os::raw::c_uchar,
    pub s_blocksize: ::std::os::raw::c_ulong,
    pub s_maxbytes: loff_t,
    pub s_type: *mut file_system_type,
    pub s_op: *const super_operations,
    pub dq_op: *const dquot_operations,
    pub s_qcop: *const quotactl_ops,
    pub s_export_op: *const export_operations,
    pub s_flags: ::std::os::raw::c_ulong,
    pub s_iflags: ::std::os::raw::c_ulong,
    pub s_magic: ::std::os::raw::c_ulong,
    pub s_root: *mut dentry,
    pub s_umount: rw_semaphore,
    pub s_count: ::std::os::raw::c_int,
    pub s_active: atomic_t,
    pub s_security: *mut ::std::os::raw::c_void,
    pub s_xattr: *const *mut xattr_handler,
    pub s_cop: *const fscrypt_operations,
    pub s_master_keys: *mut fscrypt_keyring,
    pub s_vop: *const fsverity_operations,
    pub s_encoding: *mut unicode_map,
    pub s_encoding_flags: __u16,
    pub s_roots: hlist_bl_head,
    pub s_mounts: list_head,
    pub s_bdev: *mut block_device,
    pub s_bdev_file: *mut file,
    pub s_bdi: *mut backing_dev_info,
    pub s_mtd: *mut mtd_info,
    pub s_instances: hlist_node,
    pub s_quota_types: ::std::os::raw::c_uint,
    pub s_dquot: quota_info,
    pub s_writers: sb_writers,
    pub s_fs_info: *mut ::std::os::raw::c_void,
    pub s_time_gran: u32_,
    pub s_time_min: time64_t,
    pub s_time_max: time64_t,
    pub s_fsnotify_mask: __u32,
    pub s_fsnotify_info: *mut fsnotify_sb_info,
    pub s_id: [::std::os::raw::c_char; 32usize],
    pub s_uuid: uuid_t,
    pub s_uuid_len: u8_,
    pub s_sysfs_name: [::std::os::raw::c_char; 37usize],
    pub s_max_links: ::std::os::raw::c_uint,
    pub s_vfs_rename_mutex: mutex,
    pub s_subtype: *const ::std::os::raw::c_char,
    pub s_d_op: *const dentry_operations,
    pub s_shrink: *mut shrinker,
    pub s_remove_count: atomic_long_t,
    pub s_readonly_remount: ::std::os::raw::c_int,
    pub s_wb_err: errseq_t,
    pub s_dio_done_wq: *mut workqueue_struct,
    pub s_pins: hlist_head,
    pub s_user_ns: *mut user_namespace,
    pub s_dentry_lru: list_lru,
    pub s_inode_lru: list_lru,
    pub rcu: callback_head,
    pub destroy_work: work_struct,
    pub s_sync_lock: mutex,
    pub s_stack_depth: ::std::os::raw::c_int,
    pub __bindgen_padding_0: [u32; 3usize],
    pub s_inode_list_lock: spinlock_t,
    pub s_inodes: list_head,
    pub s_inode_wblist_lock: spinlock_t,
    pub s_inodes_wb: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of super_block"][::std::mem::size_of::<super_block>() - 1408usize];
    ["Alignment of super_block"][::std::mem::align_of::<super_block>() - 64usize];
    ["Offset of field: super_block::s_list"][::std::mem::offset_of!(super_block, s_list) - 0usize];
    ["Offset of field: super_block::s_dev"][::std::mem::offset_of!(super_block, s_dev) - 16usize];
    ["Offset of field: super_block::s_blocksize_bits"]
        [::std::mem::offset_of!(super_block, s_blocksize_bits) - 20usize];
    ["Offset of field: super_block::s_blocksize"]
        [::std::mem::offset_of!(super_block, s_blocksize) - 24usize];
    ["Offset of field: super_block::s_maxbytes"]
        [::std::mem::offset_of!(super_block, s_maxbytes) - 32usize];
    ["Offset of field: super_block::s_type"][::std::mem::offset_of!(super_block, s_type) - 40usize];
    ["Offset of field: super_block::s_op"][::std::mem::offset_of!(super_block, s_op) - 48usize];
    ["Offset of field: super_block::dq_op"][::std::mem::offset_of!(super_block, dq_op) - 56usize];
    ["Offset of field: super_block::s_qcop"][::std::mem::offset_of!(super_block, s_qcop) - 64usize];
    ["Offset of field: super_block::s_export_op"]
        [::std::mem::offset_of!(super_block, s_export_op) - 72usize];
    ["Offset of field: super_block::s_flags"]
        [::std::mem::offset_of!(super_block, s_flags) - 80usize];
    ["Offset of field: super_block::s_iflags"]
        [::std::mem::offset_of!(super_block, s_iflags) - 88usize];
    ["Offset of field: super_block::s_magic"]
        [::std::mem::offset_of!(super_block, s_magic) - 96usize];
    ["Offset of field: super_block::s_root"]
        [::std::mem::offset_of!(super_block, s_root) - 104usize];
    ["Offset of field: super_block::s_umount"]
        [::std::mem::offset_of!(super_block, s_umount) - 112usize];
    ["Offset of field: super_block::s_count"]
        [::std::mem::offset_of!(super_block, s_count) - 152usize];
    ["Offset of field: super_block::s_active"]
        [::std::mem::offset_of!(super_block, s_active) - 156usize];
    ["Offset of field: super_block::s_security"]
        [::std::mem::offset_of!(super_block, s_security) - 160usize];
    ["Offset of field: super_block::s_xattr"]
        [::std::mem::offset_of!(super_block, s_xattr) - 168usize];
    ["Offset of field: super_block::s_cop"][::std::mem::offset_of!(super_block, s_cop) - 176usize];
    ["Offset of field: super_block::s_master_keys"]
        [::std::mem::offset_of!(super_block, s_master_keys) - 184usize];
    ["Offset of field: super_block::s_vop"][::std::mem::offset_of!(super_block, s_vop) - 192usize];
    ["Offset of field: super_block::s_encoding"]
        [::std::mem::offset_of!(super_block, s_encoding) - 200usize];
    ["Offset of field: super_block::s_encoding_flags"]
        [::std::mem::offset_of!(super_block, s_encoding_flags) - 208usize];
    ["Offset of field: super_block::s_roots"]
        [::std::mem::offset_of!(super_block, s_roots) - 216usize];
    ["Offset of field: super_block::s_mounts"]
        [::std::mem::offset_of!(super_block, s_mounts) - 224usize];
    ["Offset of field: super_block::s_bdev"]
        [::std::mem::offset_of!(super_block, s_bdev) - 240usize];
    ["Offset of field: super_block::s_bdev_file"]
        [::std::mem::offset_of!(super_block, s_bdev_file) - 248usize];
    ["Offset of field: super_block::s_bdi"][::std::mem::offset_of!(super_block, s_bdi) - 256usize];
    ["Offset of field: super_block::s_mtd"][::std::mem::offset_of!(super_block, s_mtd) - 264usize];
    ["Offset of field: super_block::s_instances"]
        [::std::mem::offset_of!(super_block, s_instances) - 272usize];
    ["Offset of field: super_block::s_quota_types"]
        [::std::mem::offset_of!(super_block, s_quota_types) - 288usize];
    ["Offset of field: super_block::s_dquot"]
        [::std::mem::offset_of!(super_block, s_dquot) - 296usize];
    ["Offset of field: super_block::s_writers"]
        [::std::mem::offset_of!(super_block, s_writers) - 608usize];
    ["Offset of field: super_block::s_fs_info"]
        [::std::mem::offset_of!(super_block, s_fs_info) - 912usize];
    ["Offset of field: super_block::s_time_gran"]
        [::std::mem::offset_of!(super_block, s_time_gran) - 920usize];
    ["Offset of field: super_block::s_time_min"]
        [::std::mem::offset_of!(super_block, s_time_min) - 928usize];
    ["Offset of field: super_block::s_time_max"]
        [::std::mem::offset_of!(super_block, s_time_max) - 936usize];
    ["Offset of field: super_block::s_fsnotify_mask"]
        [::std::mem::offset_of!(super_block, s_fsnotify_mask) - 944usize];
    ["Offset of field: super_block::s_fsnotify_info"]
        [::std::mem::offset_of!(super_block, s_fsnotify_info) - 952usize];
    ["Offset of field: super_block::s_id"][::std::mem::offset_of!(super_block, s_id) - 960usize];
    ["Offset of field: super_block::s_uuid"]
        [::std::mem::offset_of!(super_block, s_uuid) - 992usize];
    ["Offset of field: super_block::s_uuid_len"]
        [::std::mem::offset_of!(super_block, s_uuid_len) - 1008usize];
    ["Offset of field: super_block::s_sysfs_name"]
        [::std::mem::offset_of!(super_block, s_sysfs_name) - 1009usize];
    ["Offset of field: super_block::s_max_links"]
        [::std::mem::offset_of!(super_block, s_max_links) - 1048usize];
    ["Offset of field: super_block::s_vfs_rename_mutex"]
        [::std::mem::offset_of!(super_block, s_vfs_rename_mutex) - 1056usize];
    ["Offset of field: super_block::s_subtype"]
        [::std::mem::offset_of!(super_block, s_subtype) - 1088usize];
    ["Offset of field: super_block::s_d_op"]
        [::std::mem::offset_of!(super_block, s_d_op) - 1096usize];
    ["Offset of field: super_block::s_shrink"]
        [::std::mem::offset_of!(super_block, s_shrink) - 1104usize];
    ["Offset of field: super_block::s_remove_count"]
        [::std::mem::offset_of!(super_block, s_remove_count) - 1112usize];
    ["Offset of field: super_block::s_readonly_remount"]
        [::std::mem::offset_of!(super_block, s_readonly_remount) - 1120usize];
    ["Offset of field: super_block::s_wb_err"]
        [::std::mem::offset_of!(super_block, s_wb_err) - 1124usize];
    ["Offset of field: super_block::s_dio_done_wq"]
        [::std::mem::offset_of!(super_block, s_dio_done_wq) - 1128usize];
    ["Offset of field: super_block::s_pins"]
        [::std::mem::offset_of!(super_block, s_pins) - 1136usize];
    ["Offset of field: super_block::s_user_ns"]
        [::std::mem::offset_of!(super_block, s_user_ns) - 1144usize];
    ["Offset of field: super_block::s_dentry_lru"]
        [::std::mem::offset_of!(super_block, s_dentry_lru) - 1152usize];
    ["Offset of field: super_block::s_inode_lru"]
        [::std::mem::offset_of!(super_block, s_inode_lru) - 1200usize];
    ["Offset of field: super_block::rcu"][::std::mem::offset_of!(super_block, rcu) - 1248usize];
    ["Offset of field: super_block::destroy_work"]
        [::std::mem::offset_of!(super_block, destroy_work) - 1264usize];
    ["Offset of field: super_block::s_sync_lock"]
        [::std::mem::offset_of!(super_block, s_sync_lock) - 1296usize];
    ["Offset of field: super_block::s_stack_depth"]
        [::std::mem::offset_of!(super_block, s_stack_depth) - 1328usize];
    ["Offset of field: super_block::s_inode_list_lock"]
        [::std::mem::offset_of!(super_block, s_inode_list_lock) - 1344usize];
    ["Offset of field: super_block::s_inodes"]
        [::std::mem::offset_of!(super_block, s_inodes) - 1352usize];
    ["Offset of field: super_block::s_inode_wblist_lock"]
        [::std::mem::offset_of!(super_block, s_inode_wblist_lock) - 1368usize];
    ["Offset of field: super_block::s_inodes_wb"]
        [::std::mem::offset_of!(super_block, s_inodes_wb) - 1376usize];
};
extern "C" {
    pub fn current_time(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn inode_set_ctime_current(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn simple_inode_init_ts(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn inode_owner_or_capable(idmap: *mut mnt_idmap, inode: *const inode) -> bool_;
}
extern "C" {
    pub fn vfs_create(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
        arg5: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_mkdir(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_mknod(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
        arg5: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_symlink(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_link(
        arg1: *mut dentry,
        arg2: *mut mnt_idmap,
        arg3: *mut inode,
        arg4: *mut dentry,
        arg5: *mut *mut inode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_rmdir(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_unlink(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *mut *mut inode,
    ) -> ::std::os::raw::c_int;
}
#[doc = " struct renamedata - contains all information required for renaming\n @old_mnt_idmap:     idmap of the old mount the inode was found from\n @old_dir:           parent of source\n @old_dentry:                source\n @new_mnt_idmap:     idmap of the new mount the inode was found from\n @new_dir:           parent of destination\n @new_dentry:                destination\n @delegated_inode:   returns an inode needing a delegation break\n @flags:             rename flags"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct renamedata {
    pub old_mnt_idmap: *mut mnt_idmap,
    pub old_dir: *mut inode,
    pub old_dentry: *mut dentry,
    pub new_mnt_idmap: *mut mnt_idmap,
    pub new_dir: *mut inode,
    pub new_dentry: *mut dentry,
    pub delegated_inode: *mut *mut inode,
    pub flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of renamedata"][::std::mem::size_of::<renamedata>() - 64usize];
    ["Alignment of renamedata"][::std::mem::align_of::<renamedata>() - 8usize];
    ["Offset of field: renamedata::old_mnt_idmap"]
        [::std::mem::offset_of!(renamedata, old_mnt_idmap) - 0usize];
    ["Offset of field: renamedata::old_dir"][::std::mem::offset_of!(renamedata, old_dir) - 8usize];
    ["Offset of field: renamedata::old_dentry"]
        [::std::mem::offset_of!(renamedata, old_dentry) - 16usize];
    ["Offset of field: renamedata::new_mnt_idmap"]
        [::std::mem::offset_of!(renamedata, new_mnt_idmap) - 24usize];
    ["Offset of field: renamedata::new_dir"][::std::mem::offset_of!(renamedata, new_dir) - 32usize];
    ["Offset of field: renamedata::new_dentry"]
        [::std::mem::offset_of!(renamedata, new_dentry) - 40usize];
    ["Offset of field: renamedata::delegated_inode"]
        [::std::mem::offset_of!(renamedata, delegated_inode) - 48usize];
    ["Offset of field: renamedata::flags"][::std::mem::offset_of!(renamedata, flags) - 56usize];
};
extern "C" {
    pub fn vfs_rename(arg1: *mut renamedata) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernel_tmpfile_open(
        idmap: *mut mnt_idmap,
        parentpath: *const path,
        mode: umode_t,
        open_flag: ::std::os::raw::c_int,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn kernel_file_open(
        path: *const path,
        flags: ::std::os::raw::c_int,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn vfs_mkobj(
        arg1: *mut dentry,
        arg2: umode_t,
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut dentry,
                arg2: umode_t,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_fchown(file: *mut file, user: uid_t, group: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_fchmod(file: *mut file, mode: umode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_utimes(path: *const path, times: *mut timespec64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_ioctl(
        file: *mut file,
        cmd: ::std::os::raw::c_uint,
        arg: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn compat_ptr_ioctl(
        file: *mut file,
        cmd: ::std::os::raw::c_uint,
        arg: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn inode_init_owner(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        dir: *const inode,
        mode: umode_t,
    );
}
extern "C" {
    pub fn may_open_dev(path: *const path) -> bool_;
}
extern "C" {
    pub fn mode_strip_sgid(idmap: *mut mnt_idmap, dir: *const inode, mode: umode_t) -> umode_t;
}
extern "C" {
    pub fn in_group_or_capable(
        idmap: *mut mnt_idmap,
        inode: *const inode,
        vfsgid: vfsgid_t,
    ) -> bool_;
}
pub type filldir_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dir_context,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: loff_t,
        arg5: u64_,
        arg6: ::std::os::raw::c_uint,
    ) -> bool_,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dir_context {
    pub actor: filldir_t,
    pub pos: loff_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dir_context"][::std::mem::size_of::<dir_context>() - 16usize];
    ["Alignment of dir_context"][::std::mem::align_of::<dir_context>() - 8usize];
    ["Offset of field: dir_context::actor"][::std::mem::offset_of!(dir_context, actor) - 0usize];
    ["Offset of field: dir_context::pos"][::std::mem::offset_of!(dir_context, pos) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_cmd {
    _unused: [u8; 0],
}
pub type fop_flags_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn wrap_directory_iterator(
        arg1: *mut file,
        arg2: *mut dir_context,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct inode_operations {
    pub lookup: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: ::std::os::raw::c_uint,
        ) -> *mut dentry,
    >,
    pub get_link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut delayed_call,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub permission: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_inode_acl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: ::std::os::raw::c_int,
            arg3: bool_,
        ) -> *mut posix_acl,
    >,
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: bool_,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut dentry,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *mut inode,
            arg5: *mut dentry,
            arg6: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub setattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: *mut iattr,
        ) -> ::std::os::raw::c_int,
    >,
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *const path,
            arg3: *mut kstat,
            arg4: u32_,
            arg5: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> isize,
    >,
    pub fiemap: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut fiemap_extent_info,
            start: u64_,
            len: u64_,
        ) -> ::std::os::raw::c_int,
    >,
    pub update_time: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub atomic_open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: *mut file,
            open_flag: ::std::os::raw::c_uint,
            create_mode: umode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub tmpfile: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut file,
            arg4: umode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_acl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: ::std::os::raw::c_int,
        ) -> *mut posix_acl,
    >,
    pub set_acl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: *mut posix_acl,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fileattr_set: ::std::option::Option<
        unsafe extern "C" fn(
            idmap: *mut mnt_idmap,
            dentry: *mut dentry,
            fa: *mut fileattr,
        ) -> ::std::os::raw::c_int,
    >,
    pub fileattr_get: ::std::option::Option<
        unsafe extern "C" fn(dentry: *mut dentry, fa: *mut fileattr) -> ::std::os::raw::c_int,
    >,
    pub get_offset_ctx:
        ::std::option::Option<unsafe extern "C" fn(inode: *mut inode) -> *mut offset_ctx>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode_operations"][::std::mem::size_of::<inode_operations>() - 256usize];
    ["Alignment of inode_operations"][::std::mem::align_of::<inode_operations>() - 64usize];
    ["Offset of field: inode_operations::lookup"]
        [::std::mem::offset_of!(inode_operations, lookup) - 0usize];
    ["Offset of field: inode_operations::get_link"]
        [::std::mem::offset_of!(inode_operations, get_link) - 8usize];
    ["Offset of field: inode_operations::permission"]
        [::std::mem::offset_of!(inode_operations, permission) - 16usize];
    ["Offset of field: inode_operations::get_inode_acl"]
        [::std::mem::offset_of!(inode_operations, get_inode_acl) - 24usize];
    ["Offset of field: inode_operations::readlink"]
        [::std::mem::offset_of!(inode_operations, readlink) - 32usize];
    ["Offset of field: inode_operations::create"]
        [::std::mem::offset_of!(inode_operations, create) - 40usize];
    ["Offset of field: inode_operations::link"]
        [::std::mem::offset_of!(inode_operations, link) - 48usize];
    ["Offset of field: inode_operations::unlink"]
        [::std::mem::offset_of!(inode_operations, unlink) - 56usize];
    ["Offset of field: inode_operations::symlink"]
        [::std::mem::offset_of!(inode_operations, symlink) - 64usize];
    ["Offset of field: inode_operations::mkdir"]
        [::std::mem::offset_of!(inode_operations, mkdir) - 72usize];
    ["Offset of field: inode_operations::rmdir"]
        [::std::mem::offset_of!(inode_operations, rmdir) - 80usize];
    ["Offset of field: inode_operations::mknod"]
        [::std::mem::offset_of!(inode_operations, mknod) - 88usize];
    ["Offset of field: inode_operations::rename"]
        [::std::mem::offset_of!(inode_operations, rename) - 96usize];
    ["Offset of field: inode_operations::setattr"]
        [::std::mem::offset_of!(inode_operations, setattr) - 104usize];
    ["Offset of field: inode_operations::getattr"]
        [::std::mem::offset_of!(inode_operations, getattr) - 112usize];
    ["Offset of field: inode_operations::listxattr"]
        [::std::mem::offset_of!(inode_operations, listxattr) - 120usize];
    ["Offset of field: inode_operations::fiemap"]
        [::std::mem::offset_of!(inode_operations, fiemap) - 128usize];
    ["Offset of field: inode_operations::update_time"]
        [::std::mem::offset_of!(inode_operations, update_time) - 136usize];
    ["Offset of field: inode_operations::atomic_open"]
        [::std::mem::offset_of!(inode_operations, atomic_open) - 144usize];
    ["Offset of field: inode_operations::tmpfile"]
        [::std::mem::offset_of!(inode_operations, tmpfile) - 152usize];
    ["Offset of field: inode_operations::get_acl"]
        [::std::mem::offset_of!(inode_operations, get_acl) - 160usize];
    ["Offset of field: inode_operations::set_acl"]
        [::std::mem::offset_of!(inode_operations, set_acl) - 168usize];
    ["Offset of field: inode_operations::fileattr_set"]
        [::std::mem::offset_of!(inode_operations, fileattr_set) - 176usize];
    ["Offset of field: inode_operations::fileattr_get"]
        [::std::mem::offset_of!(inode_operations, fileattr_get) - 184usize];
    ["Offset of field: inode_operations::get_offset_ctx"]
        [::std::mem::offset_of!(inode_operations, get_offset_ctx) - 192usize];
};
extern "C" {
    pub fn vfs_read(
        arg1: *mut file,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_write(
        arg1: *mut file,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_copy_file_range(
        arg1: *mut file,
        arg2: loff_t,
        arg3: *mut file,
        arg4: loff_t,
        arg5: usize,
        arg6: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn remap_verify_area(
        file: *mut file,
        pos: loff_t,
        len: loff_t,
        write: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __generic_remap_file_range_prep(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        len: *mut loff_t,
        remap_flags: ::std::os::raw::c_uint,
        dax_read_ops: *const iomap_ops,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_remap_file_range_prep(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        count: *mut loff_t,
        remap_flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_clone_file_range(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        len: loff_t,
        remap_flags: ::std::os::raw::c_uint,
    ) -> loff_t;
}
extern "C" {
    pub fn vfs_dedupe_file_range(
        file: *mut file,
        same: *mut file_dedupe_range,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_dedupe_file_range_one(
        src_file: *mut file,
        src_pos: loff_t,
        dst_file: *mut file,
        dst_pos: loff_t,
        len: loff_t,
        remap_flags: ::std::os::raw::c_uint,
    ) -> loff_t;
}
pub const freeze_holder_FREEZE_HOLDER_KERNEL: freeze_holder = 1;
pub const freeze_holder_FREEZE_HOLDER_USERSPACE: freeze_holder = 2;
pub const freeze_holder_FREEZE_MAY_NEST: freeze_holder = 4;
#[doc = " enum freeze_holder - holder of the freeze\n @FREEZE_HOLDER_KERNEL: kernel wants to freeze or thaw filesystem\n @FREEZE_HOLDER_USERSPACE: userspace wants to freeze or thaw filesystem\n @FREEZE_MAY_NEST: whether nesting freeze and thaw requests is allowed\n\n Indicate who the owner of the freeze or thaw request is and whether\n the freeze needs to be exclusive or can nest.\n Without @FREEZE_MAY_NEST, multiple freeze and thaw requests from the\n same holder aren't allowed. It is however allowed to hold a single\n @FREEZE_HOLDER_USERSPACE and a single @FREEZE_HOLDER_KERNEL freeze at\n the same time. This is relied upon by some filesystems during online\n repair or similar."]
pub type freeze_holder = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct super_operations {
    pub alloc_inode:
        ::std::option::Option<unsafe extern "C" fn(sb: *mut super_block) -> *mut inode>,
    pub destroy_inode: ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub free_inode: ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub dirty_inode:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode, flags: ::std::os::raw::c_int)>,
    pub write_inode: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            wbc: *mut writeback_control,
        ) -> ::std::os::raw::c_int,
    >,
    pub drop_inode:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> ::std::os::raw::c_int>,
    pub evict_inode: ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub put_super: ::std::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub sync_fs: ::std::option::Option<
        unsafe extern "C" fn(
            sb: *mut super_block,
            wait: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub freeze_super: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, who: freeze_holder) -> ::std::os::raw::c_int,
    >,
    pub freeze_fs: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block) -> ::std::os::raw::c_int,
    >,
    pub thaw_super: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, who: freeze_holder) -> ::std::os::raw::c_int,
    >,
    pub unfreeze_fs: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block) -> ::std::os::raw::c_int,
    >,
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut kstatfs) -> ::std::os::raw::c_int,
    >,
    pub remount_fs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub umount_begin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub show_options: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> ::std::os::raw::c_int,
    >,
    pub show_devname: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> ::std::os::raw::c_int,
    >,
    pub show_path: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> ::std::os::raw::c_int,
    >,
    pub show_stats: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> ::std::os::raw::c_int,
    >,
    pub quota_read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
            arg5: loff_t,
        ) -> isize,
    >,
    pub quota_write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
            arg5: loff_t,
        ) -> isize,
    >,
    pub get_dquots:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> *mut *mut dquot>,
    pub nr_cached_objects: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> ::std::os::raw::c_long,
    >,
    pub free_cached_objects: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> ::std::os::raw::c_long,
    >,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn(sb: *mut super_block)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of super_operations"][::std::mem::size_of::<super_operations>() - 208usize];
    ["Alignment of super_operations"][::std::mem::align_of::<super_operations>() - 8usize];
    ["Offset of field: super_operations::alloc_inode"]
        [::std::mem::offset_of!(super_operations, alloc_inode) - 0usize];
    ["Offset of field: super_operations::destroy_inode"]
        [::std::mem::offset_of!(super_operations, destroy_inode) - 8usize];
    ["Offset of field: super_operations::free_inode"]
        [::std::mem::offset_of!(super_operations, free_inode) - 16usize];
    ["Offset of field: super_operations::dirty_inode"]
        [::std::mem::offset_of!(super_operations, dirty_inode) - 24usize];
    ["Offset of field: super_operations::write_inode"]
        [::std::mem::offset_of!(super_operations, write_inode) - 32usize];
    ["Offset of field: super_operations::drop_inode"]
        [::std::mem::offset_of!(super_operations, drop_inode) - 40usize];
    ["Offset of field: super_operations::evict_inode"]
        [::std::mem::offset_of!(super_operations, evict_inode) - 48usize];
    ["Offset of field: super_operations::put_super"]
        [::std::mem::offset_of!(super_operations, put_super) - 56usize];
    ["Offset of field: super_operations::sync_fs"]
        [::std::mem::offset_of!(super_operations, sync_fs) - 64usize];
    ["Offset of field: super_operations::freeze_super"]
        [::std::mem::offset_of!(super_operations, freeze_super) - 72usize];
    ["Offset of field: super_operations::freeze_fs"]
        [::std::mem::offset_of!(super_operations, freeze_fs) - 80usize];
    ["Offset of field: super_operations::thaw_super"]
        [::std::mem::offset_of!(super_operations, thaw_super) - 88usize];
    ["Offset of field: super_operations::unfreeze_fs"]
        [::std::mem::offset_of!(super_operations, unfreeze_fs) - 96usize];
    ["Offset of field: super_operations::statfs"]
        [::std::mem::offset_of!(super_operations, statfs) - 104usize];
    ["Offset of field: super_operations::remount_fs"]
        [::std::mem::offset_of!(super_operations, remount_fs) - 112usize];
    ["Offset of field: super_operations::umount_begin"]
        [::std::mem::offset_of!(super_operations, umount_begin) - 120usize];
    ["Offset of field: super_operations::show_options"]
        [::std::mem::offset_of!(super_operations, show_options) - 128usize];
    ["Offset of field: super_operations::show_devname"]
        [::std::mem::offset_of!(super_operations, show_devname) - 136usize];
    ["Offset of field: super_operations::show_path"]
        [::std::mem::offset_of!(super_operations, show_path) - 144usize];
    ["Offset of field: super_operations::show_stats"]
        [::std::mem::offset_of!(super_operations, show_stats) - 152usize];
    ["Offset of field: super_operations::quota_read"]
        [::std::mem::offset_of!(super_operations, quota_read) - 160usize];
    ["Offset of field: super_operations::quota_write"]
        [::std::mem::offset_of!(super_operations, quota_write) - 168usize];
    ["Offset of field: super_operations::get_dquots"]
        [::std::mem::offset_of!(super_operations, get_dquots) - 176usize];
    ["Offset of field: super_operations::nr_cached_objects"]
        [::std::mem::offset_of!(super_operations, nr_cached_objects) - 184usize];
    ["Offset of field: super_operations::free_cached_objects"]
        [::std::mem::offset_of!(super_operations, free_cached_objects) - 192usize];
    ["Offset of field: super_operations::shutdown"]
        [::std::mem::offset_of!(super_operations, shutdown) - 200usize];
};
extern "C" {
    pub fn __mark_inode_dirty(arg1: *mut inode, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn inc_nlink(inode: *mut inode);
}
extern "C" {
    pub fn drop_nlink(inode: *mut inode);
}
extern "C" {
    pub fn clear_nlink(inode: *mut inode);
}
extern "C" {
    pub fn set_nlink(inode: *mut inode, nlink: ::std::os::raw::c_uint);
}
pub const file_time_flags_S_ATIME: file_time_flags = 1;
pub const file_time_flags_S_MTIME: file_time_flags = 2;
pub const file_time_flags_S_CTIME: file_time_flags = 4;
pub const file_time_flags_S_VERSION: file_time_flags = 8;
pub type file_time_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn atime_needs_update(arg1: *const path, arg2: *mut inode) -> bool_;
}
extern "C" {
    pub fn touch_atime(arg1: *const path);
}
extern "C" {
    pub fn inode_update_time(
        inode: *mut inode,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_modified(file: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kiocb_modified(iocb: *mut kiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_inode_metadata(
        inode: *mut inode,
        wait: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mount_bdev(
        fs_type: *mut file_system_type,
        flags: ::std::os::raw::c_int,
        dev_name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        fill_super: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_single(
        fs_type: *mut file_system_type,
        flags: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        fill_super: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_nodev(
        fs_type: *mut file_system_type,
        flags: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        fill_super: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_subtree(mnt: *mut vfsmount, path: *const ::std::os::raw::c_char) -> *mut dentry;
}
extern "C" {
    pub fn retire_super(sb: *mut super_block);
}
extern "C" {
    pub fn generic_shutdown_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_block_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_anon_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_litter_super(sb: *mut super_block);
}
extern "C" {
    pub fn deactivate_super(sb: *mut super_block);
}
extern "C" {
    pub fn deactivate_locked_super(sb: *mut super_block);
}
extern "C" {
    pub fn set_anon_super(
        s: *mut super_block,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_anon_super_fc(s: *mut super_block, fc: *mut fs_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_anon_bdev(arg1: *mut dev_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_anon_bdev(arg1: dev_t);
}
extern "C" {
    pub fn sget_fc(
        fc: *mut fs_context,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut fs_context,
            ) -> ::std::os::raw::c_int,
        >,
        set: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut fs_context,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut super_block;
}
extern "C" {
    pub fn sget(
        type_: *mut file_system_type,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        set: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        flags: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut super_block;
}
extern "C" {
    pub fn sget_dev(fc: *mut fs_context, dev: dev_t) -> *mut super_block;
}
extern "C" {
    pub fn register_filesystem(arg1: *mut file_system_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unregister_filesystem(arg1: *mut file_system_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_statfs(arg1: *const path, arg2: *mut kstatfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn user_statfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut kstatfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fd_statfs(arg1: ::std::os::raw::c_int, arg2: *mut kstatfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeze_super(super_: *mut super_block, who: freeze_holder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn thaw_super(super_: *mut super_block, who: freeze_holder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_setup_bdi_name(
        sb: *mut super_block,
        fmt: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn super_setup_bdi(sb: *mut super_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_umask() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ihold(inode: *mut inode);
}
extern "C" {
    pub fn iput(arg1: *mut inode);
}
extern "C" {
    pub fn inode_update_timestamps(
        inode: *mut inode,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_update_time(
        arg1: *mut inode,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fs_kobj: *mut kobject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_names {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct filename {
    pub name: *const ::std::os::raw::c_char,
    pub uptr: *const ::std::os::raw::c_char,
    pub refcnt: atomic_t,
    pub aname: *mut audit_names,
    pub iname: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of filename"][::std::mem::size_of::<filename>() - 32usize];
    ["Alignment of filename"][::std::mem::align_of::<filename>() - 8usize];
    ["Offset of field: filename::name"][::std::mem::offset_of!(filename, name) - 0usize];
    ["Offset of field: filename::uptr"][::std::mem::offset_of!(filename, uptr) - 8usize];
    ["Offset of field: filename::refcnt"][::std::mem::offset_of!(filename, refcnt) - 16usize];
    ["Offset of field: filename::aname"][::std::mem::offset_of!(filename, aname) - 24usize];
    ["Offset of field: filename::iname"][::std::mem::offset_of!(filename, iname) - 32usize];
};
extern "C" {
    pub fn vfs_truncate(arg1: *const path, arg2: loff_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn do_truncate(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        start: loff_t,
        time_attrs: ::std::os::raw::c_uint,
        filp: *mut file,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_fallocate(
        file: *mut file,
        mode: ::std::os::raw::c_int,
        offset: loff_t,
        len: loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_sys_open(
        dfd: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: umode_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn file_open_name(
        arg1: *mut filename,
        arg2: ::std::os::raw::c_int,
        arg3: umode_t,
    ) -> *mut file;
}
extern "C" {
    pub fn filp_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: umode_t,
    ) -> *mut file;
}
extern "C" {
    pub fn file_open_root(
        arg1: *const path,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: umode_t,
    ) -> *mut file;
}
extern "C" {
    pub fn dentry_open(
        path: *const path,
        flags: ::std::os::raw::c_int,
        creds: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn dentry_create(
        path: *const path,
        flags: ::std::os::raw::c_int,
        mode: umode_t,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn backing_file_user_path(f: *mut file) -> *mut path;
}
extern "C" {
    pub fn filp_close(arg1: *mut file, id: fl_owner_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getname_flags(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut filename;
}
extern "C" {
    pub fn getname_uflags(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut filename;
}
extern "C" {
    pub fn getname(arg1: *const ::std::os::raw::c_char) -> *mut filename;
}
extern "C" {
    pub fn getname_kernel(arg1: *const ::std::os::raw::c_char) -> *mut filename;
}
extern "C" {
    pub fn putname(name: *mut filename);
}
extern "C" {
    pub fn finish_open(
        file: *mut file,
        dentry: *mut dentry,
        open: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finish_no_open(file: *mut file, dentry: *mut dentry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_caches_init_early();
}
extern "C" {
    pub fn vfs_caches_init();
}
extern "C" {
    pub static mut names_cachep: *mut kmem_cache;
}
extern "C" {
    pub static mut blockdev_superblock: *mut super_block;
}
extern "C" {
    pub fn emergency_thaw_all();
}
extern "C" {
    pub fn sync_filesystem(arg1: *mut super_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static def_blk_fops: file_operations;
}
extern "C" {
    pub static def_chr_fops: file_operations;
}
extern "C" {
    pub fn alloc_chrdev_region(
        arg1: *mut dev_t,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_chrdev_region(
        arg1: dev_t,
        arg2: ::std::os::raw::c_uint,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __register_chrdev(
        major: ::std::os::raw::c_uint,
        baseminor: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        name: *const ::std::os::raw::c_char,
        fops: *const file_operations,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __unregister_chrdev(
        major: ::std::os::raw::c_uint,
        baseminor: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn unregister_chrdev_region(arg1: dev_t, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn chrdev_show(arg1: *mut seq_file, arg2: off_t);
}
extern "C" {
    pub fn init_special_inode(arg1: *mut inode, arg2: umode_t, arg3: dev_t);
}
extern "C" {
    pub fn make_bad_inode(arg1: *mut inode);
}
extern "C" {
    pub fn is_bad_inode(arg1: *mut inode) -> bool_;
}
extern "C" {
    pub fn file_fdatawait_range(
        file: *mut file,
        lstart: loff_t,
        lend: loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_check_and_advance_wb_err(file: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_write_and_wait_range(
        file: *mut file,
        start: loff_t,
        end: loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_fsync_range(
        file: *mut file,
        start: loff_t,
        end: loff_t,
        datasync: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_fsync(file: *mut file, datasync: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_file_range(
        file: *mut file,
        offset: loff_t,
        nbytes: loff_t,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn emergency_sync();
}
extern "C" {
    pub fn emergency_remount();
}
extern "C" {
    pub fn bmap(inode: *mut inode, block: *mut sector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn notify_change(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
        arg4: *mut *mut inode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inode_permission(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_permission(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __check_sticky(
        idmap: *mut mnt_idmap,
        dir: *mut inode,
        inode: *mut inode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_pipe_flags(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kernel_read(
        arg1: *mut file,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn __kernel_read(
        file: *mut file,
        buf: *mut ::std::os::raw::c_void,
        count: usize,
        pos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn kernel_write(
        arg1: *mut file,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn __kernel_write(
        arg1: *mut file,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn open_exec(arg1: *const ::std::os::raw::c_char) -> *mut file;
}
extern "C" {
    pub fn is_subdir(arg1: *mut dentry, arg2: *mut dentry) -> bool_;
}
extern "C" {
    pub fn path_is_under(arg1: *const path, arg2: *const path) -> bool_;
}
extern "C" {
    pub fn file_path(
        arg1: *mut file,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn default_llseek(file: *mut file, offset: loff_t, whence: ::std::os::raw::c_int)
        -> loff_t;
}
extern "C" {
    pub fn vfs_llseek(file: *mut file, offset: loff_t, whence: ::std::os::raw::c_int) -> loff_t;
}
extern "C" {
    pub fn inode_init_always(arg1: *mut super_block, arg2: *mut inode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inode_init_once(arg1: *mut inode);
}
extern "C" {
    pub fn address_space_init_once(mapping: *mut address_space);
}
extern "C" {
    pub fn igrab(arg1: *mut inode) -> *mut inode;
}
extern "C" {
    pub fn iunique(arg1: *mut super_block, arg2: ino_t) -> ino_t;
}
extern "C" {
    pub fn inode_needs_sync(inode: *mut inode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_delete_inode(inode: *mut inode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d_mark_dontcache(inode: *mut inode);
}
extern "C" {
    pub fn ilookup5_nowait(
        sb: *mut super_block,
        hashval: ::std::os::raw::c_ulong,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn ilookup5(
        sb: *mut super_block,
        hashval: ::std::os::raw::c_ulong,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn ilookup(sb: *mut super_block, ino: ::std::os::raw::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn inode_insert5(
        inode: *mut inode,
        hashval: ::std::os::raw::c_ulong,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        set: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget5_locked(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_ulong,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        set: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget5_locked_rcu(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_ulong,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        set: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget_locked(arg1: *mut super_block, arg2: ::std::os::raw::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn find_inode_nowait(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_ulong,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: ::std::os::raw::c_ulong,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn find_inode_rcu(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn find_inode_by_ino_rcu(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut inode;
}
extern "C" {
    pub fn insert_inode_locked4(
        arg1: *mut inode,
        arg2: ::std::os::raw::c_ulong,
        test: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insert_inode_locked(arg1: *mut inode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlock_new_inode(arg1: *mut inode);
}
extern "C" {
    pub fn discard_new_inode(arg1: *mut inode);
}
extern "C" {
    pub fn get_next_ino() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn evict_inodes(sb: *mut super_block);
}
extern "C" {
    pub fn dump_mapping(arg1: *const address_space);
}
extern "C" {
    pub fn __iget(inode: *mut inode);
}
extern "C" {
    pub fn iget_failed(arg1: *mut inode);
}
extern "C" {
    pub fn clear_inode(arg1: *mut inode);
}
extern "C" {
    pub fn __destroy_inode(arg1: *mut inode);
}
extern "C" {
    pub fn new_inode_pseudo(sb: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn new_inode(sb: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn free_inode_nonrcu(inode: *mut inode);
}
extern "C" {
    pub fn setattr_should_drop_suidgid(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_remove_privs_flags(
        file: *mut file,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_remove_privs(arg1: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattr_should_drop_sgid(
        idmap: *mut mnt_idmap,
        inode: *const inode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __insert_inode_hash(arg1: *mut inode, hashval: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __remove_inode_hash(arg1: *mut inode);
}
extern "C" {
    pub fn inode_sb_list_add(inode: *mut inode);
}
extern "C" {
    pub fn inode_add_lru(inode: *mut inode);
}
extern "C" {
    pub fn sb_set_blocksize(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sb_min_blocksize(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_file_mmap(arg1: *mut file, arg2: *mut vm_area_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_file_readonly_mmap(
        arg1: *mut file,
        arg2: *mut vm_area_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_write_checks(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_write_checks_count(
        iocb: *mut kiocb,
        count: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_write_check_limits(
        file: *mut file,
        pos: loff_t,
        count: *mut loff_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_file_rw_checks(file_in: *mut file, file_out: *mut file)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filemap_read(iocb: *mut kiocb, to: *mut iov_iter, already_read: isize) -> isize;
}
extern "C" {
    pub fn generic_file_read_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn __generic_file_write_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_file_write_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_file_direct_write(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_perform_write(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn direct_write_fallback(
        iocb: *mut kiocb,
        iter: *mut iov_iter,
        direct_written: isize,
        buffered_written: isize,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iter_read(
        file: *mut file,
        iter: *mut iov_iter,
        ppos: *mut loff_t,
        flags: rwf_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iter_write(
        file: *mut file,
        iter: *mut iov_iter,
        ppos: *mut loff_t,
        flags: rwf_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iocb_iter_read(file: *mut file, iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn vfs_iocb_iter_write(file: *mut file, iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn filemap_splice_read(
        in_: *mut file,
        ppos: *mut loff_t,
        pipe: *mut pipe_inode_info,
        len: usize,
        flags: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn copy_splice_read(
        in_: *mut file,
        ppos: *mut loff_t,
        pipe: *mut pipe_inode_info,
        len: usize,
        flags: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn iter_file_splice_write(
        arg1: *mut pipe_inode_info,
        arg2: *mut file,
        arg3: *mut loff_t,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn file_ra_state_init(ra: *mut file_ra_state, mapping: *mut address_space);
}
extern "C" {
    pub fn noop_llseek(file: *mut file, offset: loff_t, whence: ::std::os::raw::c_int) -> loff_t;
}
extern "C" {
    pub fn vfs_setpos(file: *mut file, offset: loff_t, maxsize: loff_t) -> loff_t;
}
extern "C" {
    pub fn generic_file_llseek(
        file: *mut file,
        offset: loff_t,
        whence: ::std::os::raw::c_int,
    ) -> loff_t;
}
extern "C" {
    pub fn generic_file_llseek_size(
        file: *mut file,
        offset: loff_t,
        whence: ::std::os::raw::c_int,
        maxsize: loff_t,
        eof: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn fixed_size_llseek(
        file: *mut file,
        offset: loff_t,
        whence: ::std::os::raw::c_int,
        size: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn no_seek_end_llseek_size(
        arg1: *mut file,
        arg2: loff_t,
        arg3: ::std::os::raw::c_int,
        arg4: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn no_seek_end_llseek(arg1: *mut file, arg2: loff_t, arg3: ::std::os::raw::c_int)
        -> loff_t;
}
extern "C" {
    pub fn rw_verify_area(
        arg1: ::std::os::raw::c_int,
        arg2: *mut file,
        arg3: *const loff_t,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_file_open(inode: *mut inode, filp: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonseekable_open(inode: *mut inode, filp: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stream_open(inode: *mut inode, filp: *mut file) -> ::std::os::raw::c_int;
}
pub type dio_submit_t = ::std::option::Option<
    unsafe extern "C" fn(bio: *mut bio, inode: *mut inode, file_offset: loff_t),
>;
pub const DIO_LOCKING: _bindgen_ty_100 = 1;
pub const DIO_SKIP_HOLES: _bindgen_ty_100 = 2;
pub type _bindgen_ty_100 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __blockdev_direct_IO(
        iocb: *mut kiocb,
        inode: *mut inode,
        bdev: *mut block_device,
        iter: *mut iov_iter,
        get_block: get_block_t,
        end_io: dio_iodone_t,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn inode_dio_wait(inode: *mut inode);
}
extern "C" {
    pub fn inode_set_flags(
        inode: *mut inode,
        flags: ::std::os::raw::c_uint,
        mask: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub static generic_ro_fops: file_operations;
}
extern "C" {
    pub fn readlink_copy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn page_readlink(
        arg1: *mut dentry,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn page_get_link(
        arg1: *mut dentry,
        arg2: *mut inode,
        arg3: *mut delayed_call,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn page_put_link(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn page_symlink(
        inode: *mut inode,
        symname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static page_symlink_inode_operations: inode_operations;
}
extern "C" {
    pub fn kfree_link(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn generic_fillattr(arg1: *mut mnt_idmap, arg2: u32_, arg3: *mut inode, arg4: *mut kstat);
}
extern "C" {
    pub fn generic_fill_statx_attr(inode: *mut inode, stat: *mut kstat);
}
extern "C" {
    pub fn generic_fill_statx_atomic_writes(
        stat: *mut kstat,
        unit_min: ::std::os::raw::c_uint,
        unit_max: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn vfs_getattr_nosec(
        arg1: *const path,
        arg2: *mut kstat,
        arg3: u32_,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_getattr(
        arg1: *const path,
        arg2: *mut kstat,
        arg3: u32_,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __inode_add_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_add_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn __inode_sub_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_sub_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_get_bytes(inode: *mut inode) -> loff_t;
}
extern "C" {
    pub fn inode_set_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn simple_get_link(
        arg1: *mut dentry,
        arg2: *mut inode,
        arg3: *mut delayed_call,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static simple_symlink_inode_operations: inode_operations;
}
extern "C" {
    pub fn iterate_dir(arg1: *mut file, arg2: *mut dir_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_fstatat(
        dfd: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        stat: *mut kstat,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_fstat(fd: ::std::os::raw::c_int, stat: *mut kstat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfs_get_link(
        arg1: *mut dentry,
        arg2: *mut delayed_call,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn vfs_readlink(
        arg1: *mut dentry,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_filesystem(fs: *mut file_system_type) -> *mut file_system_type;
}
extern "C" {
    pub fn put_filesystem(fs: *mut file_system_type);
}
extern "C" {
    pub fn get_fs_type(name: *const ::std::os::raw::c_char) -> *mut file_system_type;
}
extern "C" {
    pub fn drop_super(sb: *mut super_block);
}
extern "C" {
    pub fn drop_super_exclusive(sb: *mut super_block);
}
extern "C" {
    pub fn iterate_supers(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut ::std::os::raw::c_void),
        >,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn iterate_supers_type(
        arg1: *mut file_system_type,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut ::std::os::raw::c_void),
        >,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dcache_dir_open(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dcache_dir_close(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dcache_dir_lseek(arg1: *mut file, arg2: loff_t, arg3: ::std::os::raw::c_int) -> loff_t;
}
extern "C" {
    pub fn dcache_readdir(arg1: *mut file, arg2: *mut dir_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_setattr(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_getattr(
        arg1: *mut mnt_idmap,
        arg2: *const path,
        arg3: *mut kstat,
        arg4: u32_,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_statfs(arg1: *mut dentry, arg2: *mut kstatfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_open(inode: *mut inode, file: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_link(
        arg1: *mut dentry,
        arg2: *mut inode,
        arg3: *mut dentry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_unlink(arg1: *mut inode, arg2: *mut dentry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_rmdir(arg1: *mut inode, arg2: *mut dentry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_rename_timestamp(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    );
}
extern "C" {
    pub fn simple_rename_exchange(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_rename(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *mut inode,
        arg5: *mut dentry,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_recursive_removal(
        arg1: *mut dentry,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    );
}
extern "C" {
    pub fn noop_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noop_direct_IO(iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn simple_empty(arg1: *mut dentry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_write_begin(
        file: *mut file,
        mapping: *mut address_space,
        pos: loff_t,
        len: ::std::os::raw::c_uint,
        pagep: *mut *mut page,
        fsdata: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static ram_aops: address_space_operations;
}
extern "C" {
    pub fn always_delete_dentry(arg1: *const dentry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloc_anon_inode(arg1: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn simple_nosetlease(
        arg1: *mut file,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut file_lease,
        arg4: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static simple_dentry_operations: dentry_operations;
}
extern "C" {
    pub fn simple_lookup(
        arg1: *mut inode,
        arg2: *mut dentry,
        flags: ::std::os::raw::c_uint,
    ) -> *mut dentry;
}
extern "C" {
    pub fn generic_read_dir(
        arg1: *mut file,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub static simple_dir_operations: file_operations;
}
extern "C" {
    pub static simple_dir_inode_operations: inode_operations;
}
extern "C" {
    pub fn make_empty_dir_inode(inode: *mut inode);
}
extern "C" {
    pub fn is_empty_dir_inode(inode: *mut inode) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tree_descr {
    pub name: *const ::std::os::raw::c_char,
    pub ops: *const file_operations,
    pub mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tree_descr"][::std::mem::size_of::<tree_descr>() - 24usize];
    ["Alignment of tree_descr"][::std::mem::align_of::<tree_descr>() - 8usize];
    ["Offset of field: tree_descr::name"][::std::mem::offset_of!(tree_descr, name) - 0usize];
    ["Offset of field: tree_descr::ops"][::std::mem::offset_of!(tree_descr, ops) - 8usize];
    ["Offset of field: tree_descr::mode"][::std::mem::offset_of!(tree_descr, mode) - 16usize];
};
extern "C" {
    pub fn d_alloc_name(arg1: *mut dentry, arg2: *const ::std::os::raw::c_char) -> *mut dentry;
}
extern "C" {
    pub fn simple_fill_super(
        arg1: *mut super_block,
        arg2: ::std::os::raw::c_ulong,
        arg3: *const tree_descr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_pin_fs(
        arg1: *mut file_system_type,
        mount: *mut *mut vfsmount,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_release_fs(mount: *mut *mut vfsmount, count: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn simple_read_from_buffer(
        to: *mut ::std::os::raw::c_void,
        count: usize,
        ppos: *mut loff_t,
        from: *const ::std::os::raw::c_void,
        available: usize,
    ) -> isize;
}
extern "C" {
    pub fn simple_write_to_buffer(
        to: *mut ::std::os::raw::c_void,
        available: usize,
        ppos: *mut loff_t,
        from: *const ::std::os::raw::c_void,
        count: usize,
    ) -> isize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct offset_ctx {
    pub mt: maple_tree,
    pub next_offset: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of offset_ctx"][::std::mem::size_of::<offset_ctx>() - 24usize];
    ["Alignment of offset_ctx"][::std::mem::align_of::<offset_ctx>() - 8usize];
    ["Offset of field: offset_ctx::mt"][::std::mem::offset_of!(offset_ctx, mt) - 0usize];
    ["Offset of field: offset_ctx::next_offset"]
        [::std::mem::offset_of!(offset_ctx, next_offset) - 16usize];
};
extern "C" {
    pub fn simple_offset_init(octx: *mut offset_ctx);
}
extern "C" {
    pub fn simple_offset_add(octx: *mut offset_ctx, dentry: *mut dentry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_offset_remove(octx: *mut offset_ctx, dentry: *mut dentry);
}
extern "C" {
    pub fn simple_offset_empty(dentry: *mut dentry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_offset_rename(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_offset_rename_exchange(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_offset_destroy(octx: *mut offset_ctx);
}
extern "C" {
    pub static simple_offset_dir_operations: file_operations;
}
extern "C" {
    pub fn __generic_file_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_file_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_check_addressable(
        arg1: ::std::os::raw::c_uint,
        arg2: u64_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_set_sb_d_ops(sb: *mut super_block);
}
extern "C" {
    pub fn generic_ci_match(
        parent: *const inode,
        name: *const qstr,
        folded_name: *const qstr,
        de_name: *const u8_,
        de_name_len: u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_setattr(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        ia_valid: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattr_prepare(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inode_newsize_ok(arg1: *const inode, offset: loff_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattr_copy(arg1: *mut mnt_idmap, inode: *mut inode, attr: *const iattr);
}
extern "C" {
    pub fn file_update_time(file: *mut file) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct simple_transaction_argresp {
    pub size: isize,
    pub data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simple_transaction_argresp"]
        [::std::mem::size_of::<simple_transaction_argresp>() - 8usize];
    ["Alignment of simple_transaction_argresp"]
        [::std::mem::align_of::<simple_transaction_argresp>() - 8usize];
    ["Offset of field: simple_transaction_argresp::size"]
        [::std::mem::offset_of!(simple_transaction_argresp, size) - 0usize];
    ["Offset of field: simple_transaction_argresp::data"]
        [::std::mem::offset_of!(simple_transaction_argresp, data) - 8usize];
};
extern "C" {
    pub fn simple_transaction_get(
        file: *mut file,
        buf: *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn simple_transaction_read(
        file: *mut file,
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        pos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_transaction_release(inode: *mut inode, file: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_transaction_set(file: *mut file, n: usize);
}
extern "C" {
    pub fn simple_attr_open(
        inode: *mut inode,
        file: *mut file,
        get: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut u64_,
            ) -> ::std::os::raw::c_int,
        >,
        set: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: u64_,
            ) -> ::std::os::raw::c_int,
        >,
        fmt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_attr_release(inode: *mut inode, file: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simple_attr_read(
        file: *mut file,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_attr_write(
        file: *mut file,
        buf: *const ::std::os::raw::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_attr_write_signed(
        file: *mut file,
        buf: *const ::std::os::raw::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn list_bdev_fs_names(
        buf: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn path_noexec(path: *const path) -> bool_;
}
extern "C" {
    pub fn inode_nohighmem(inode: *mut inode);
}
extern "C" {
    pub fn vfs_fadvise(
        file: *mut file,
        offset: loff_t,
        len: loff_t,
        advice: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_fadvise(
        file: *mut file,
        offset: loff_t,
        len: loff_t,
        advice: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn generic_atomic_write_valid(iter: *mut iov_iter, pos: loff_t) -> bool_;
}
pub type aio_context_t = __kernel_ulong_t;
pub const IOCB_CMD_PREAD: _bindgen_ty_101 = 0;
pub const IOCB_CMD_PWRITE: _bindgen_ty_101 = 1;
pub const IOCB_CMD_FSYNC: _bindgen_ty_101 = 2;
pub const IOCB_CMD_FDSYNC: _bindgen_ty_101 = 3;
pub const IOCB_CMD_POLL: _bindgen_ty_101 = 5;
pub const IOCB_CMD_NOOP: _bindgen_ty_101 = 6;
pub const IOCB_CMD_PREADV: _bindgen_ty_101 = 7;
pub const IOCB_CMD_PWRITEV: _bindgen_ty_101 = 8;
pub type _bindgen_ty_101 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_event {
    pub data: __u64,
    pub obj: __u64,
    pub res: __s64,
    pub res2: __s64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_event"][::std::mem::size_of::<io_event>() - 32usize];
    ["Alignment of io_event"][::std::mem::align_of::<io_event>() - 8usize];
    ["Offset of field: io_event::data"][::std::mem::offset_of!(io_event, data) - 0usize];
    ["Offset of field: io_event::obj"][::std::mem::offset_of!(io_event, obj) - 8usize];
    ["Offset of field: io_event::res"][::std::mem::offset_of!(io_event, res) - 16usize];
    ["Offset of field: io_event::res2"][::std::mem::offset_of!(io_event, res2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iocb {
    pub aio_data: __u64,
    pub aio_key: __u32,
    pub aio_rw_flags: __kernel_rwf_t,
    pub aio_lio_opcode: __u16,
    pub aio_reqprio: __s16,
    pub aio_fildes: __u32,
    pub aio_buf: __u64,
    pub aio_nbytes: __u64,
    pub aio_offset: __s64,
    pub aio_reserved2: __u64,
    pub aio_flags: __u32,
    pub aio_resfd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iocb"][::std::mem::size_of::<iocb>() - 64usize];
    ["Alignment of iocb"][::std::mem::align_of::<iocb>() - 8usize];
    ["Offset of field: iocb::aio_data"][::std::mem::offset_of!(iocb, aio_data) - 0usize];
    ["Offset of field: iocb::aio_key"][::std::mem::offset_of!(iocb, aio_key) - 8usize];
    ["Offset of field: iocb::aio_rw_flags"][::std::mem::offset_of!(iocb, aio_rw_flags) - 12usize];
    ["Offset of field: iocb::aio_lio_opcode"]
        [::std::mem::offset_of!(iocb, aio_lio_opcode) - 16usize];
    ["Offset of field: iocb::aio_reqprio"][::std::mem::offset_of!(iocb, aio_reqprio) - 18usize];
    ["Offset of field: iocb::aio_fildes"][::std::mem::offset_of!(iocb, aio_fildes) - 20usize];
    ["Offset of field: iocb::aio_buf"][::std::mem::offset_of!(iocb, aio_buf) - 24usize];
    ["Offset of field: iocb::aio_nbytes"][::std::mem::offset_of!(iocb, aio_nbytes) - 32usize];
    ["Offset of field: iocb::aio_offset"][::std::mem::offset_of!(iocb, aio_offset) - 40usize];
    ["Offset of field: iocb::aio_reserved2"][::std::mem::offset_of!(iocb, aio_reserved2) - 48usize];
    ["Offset of field: iocb::aio_flags"][::std::mem::offset_of!(iocb, aio_flags) - 56usize];
    ["Offset of field: iocb::aio_resfd"][::std::mem::offset_of!(iocb, aio_resfd) - 60usize];
};
extern "C" {
    pub fn put_task_stack(tsk: *mut task_struct);
}
extern "C" {
    pub fn exit_task_stack_account(tsk: *mut task_struct);
}
extern "C" {
    pub fn thread_stack_cache_init();
}
extern "C" {
    pub fn set_task_stack_end_magic(tsk: *mut task_struct);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_i387_ia32_struct {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_i387_ia32_struct"][::std::mem::size_of::<user_i387_ia32_struct>() - 108usize];
    ["Alignment of user_i387_ia32_struct"]
        [::std::mem::align_of::<user_i387_ia32_struct>() - 4usize];
    ["Offset of field: user_i387_ia32_struct::cwd"]
        [::std::mem::offset_of!(user_i387_ia32_struct, cwd) - 0usize];
    ["Offset of field: user_i387_ia32_struct::swd"]
        [::std::mem::offset_of!(user_i387_ia32_struct, swd) - 4usize];
    ["Offset of field: user_i387_ia32_struct::twd"]
        [::std::mem::offset_of!(user_i387_ia32_struct, twd) - 8usize];
    ["Offset of field: user_i387_ia32_struct::fip"]
        [::std::mem::offset_of!(user_i387_ia32_struct, fip) - 12usize];
    ["Offset of field: user_i387_ia32_struct::fcs"]
        [::std::mem::offset_of!(user_i387_ia32_struct, fcs) - 16usize];
    ["Offset of field: user_i387_ia32_struct::foo"]
        [::std::mem::offset_of!(user_i387_ia32_struct, foo) - 20usize];
    ["Offset of field: user_i387_ia32_struct::fos"]
        [::std::mem::offset_of!(user_i387_ia32_struct, fos) - 24usize];
    ["Offset of field: user_i387_ia32_struct::st_space"]
        [::std::mem::offset_of!(user_i387_ia32_struct, st_space) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user32_fxsr_struct {
    pub cwd: ::std::os::raw::c_ushort,
    pub swd: ::std::os::raw::c_ushort,
    pub twd: ::std::os::raw::c_ushort,
    pub fop: ::std::os::raw::c_ushort,
    pub fip: ::std::os::raw::c_int,
    pub fcs: ::std::os::raw::c_int,
    pub foo: ::std::os::raw::c_int,
    pub fos: ::std::os::raw::c_int,
    pub mxcsr: ::std::os::raw::c_int,
    pub reserved: ::std::os::raw::c_int,
    pub st_space: [::std::os::raw::c_int; 32usize],
    pub xmm_space: [::std::os::raw::c_int; 32usize],
    pub padding: [::std::os::raw::c_int; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user32_fxsr_struct"][::std::mem::size_of::<user32_fxsr_struct>() - 512usize];
    ["Alignment of user32_fxsr_struct"][::std::mem::align_of::<user32_fxsr_struct>() - 4usize];
    ["Offset of field: user32_fxsr_struct::cwd"]
        [::std::mem::offset_of!(user32_fxsr_struct, cwd) - 0usize];
    ["Offset of field: user32_fxsr_struct::swd"]
        [::std::mem::offset_of!(user32_fxsr_struct, swd) - 2usize];
    ["Offset of field: user32_fxsr_struct::twd"]
        [::std::mem::offset_of!(user32_fxsr_struct, twd) - 4usize];
    ["Offset of field: user32_fxsr_struct::fop"]
        [::std::mem::offset_of!(user32_fxsr_struct, fop) - 6usize];
    ["Offset of field: user32_fxsr_struct::fip"]
        [::std::mem::offset_of!(user32_fxsr_struct, fip) - 8usize];
    ["Offset of field: user32_fxsr_struct::fcs"]
        [::std::mem::offset_of!(user32_fxsr_struct, fcs) - 12usize];
    ["Offset of field: user32_fxsr_struct::foo"]
        [::std::mem::offset_of!(user32_fxsr_struct, foo) - 16usize];
    ["Offset of field: user32_fxsr_struct::fos"]
        [::std::mem::offset_of!(user32_fxsr_struct, fos) - 20usize];
    ["Offset of field: user32_fxsr_struct::mxcsr"]
        [::std::mem::offset_of!(user32_fxsr_struct, mxcsr) - 24usize];
    ["Offset of field: user32_fxsr_struct::reserved"]
        [::std::mem::offset_of!(user32_fxsr_struct, reserved) - 28usize];
    ["Offset of field: user32_fxsr_struct::st_space"]
        [::std::mem::offset_of!(user32_fxsr_struct, st_space) - 32usize];
    ["Offset of field: user32_fxsr_struct::xmm_space"]
        [::std::mem::offset_of!(user32_fxsr_struct, xmm_space) - 160usize];
    ["Offset of field: user32_fxsr_struct::padding"]
        [::std::mem::offset_of!(user32_fxsr_struct, padding) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_regs_struct32 {
    pub ebx: __u32,
    pub ecx: __u32,
    pub edx: __u32,
    pub esi: __u32,
    pub edi: __u32,
    pub ebp: __u32,
    pub eax: __u32,
    pub ds: ::std::os::raw::c_ushort,
    pub __ds: ::std::os::raw::c_ushort,
    pub es: ::std::os::raw::c_ushort,
    pub __es: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __fs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub __gs: ::std::os::raw::c_ushort,
    pub orig_eax: __u32,
    pub eip: __u32,
    pub cs: ::std::os::raw::c_ushort,
    pub __cs: ::std::os::raw::c_ushort,
    pub eflags: __u32,
    pub esp: __u32,
    pub ss: ::std::os::raw::c_ushort,
    pub __ss: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_regs_struct32"][::std::mem::size_of::<user_regs_struct32>() - 68usize];
    ["Alignment of user_regs_struct32"][::std::mem::align_of::<user_regs_struct32>() - 4usize];
    ["Offset of field: user_regs_struct32::ebx"]
        [::std::mem::offset_of!(user_regs_struct32, ebx) - 0usize];
    ["Offset of field: user_regs_struct32::ecx"]
        [::std::mem::offset_of!(user_regs_struct32, ecx) - 4usize];
    ["Offset of field: user_regs_struct32::edx"]
        [::std::mem::offset_of!(user_regs_struct32, edx) - 8usize];
    ["Offset of field: user_regs_struct32::esi"]
        [::std::mem::offset_of!(user_regs_struct32, esi) - 12usize];
    ["Offset of field: user_regs_struct32::edi"]
        [::std::mem::offset_of!(user_regs_struct32, edi) - 16usize];
    ["Offset of field: user_regs_struct32::ebp"]
        [::std::mem::offset_of!(user_regs_struct32, ebp) - 20usize];
    ["Offset of field: user_regs_struct32::eax"]
        [::std::mem::offset_of!(user_regs_struct32, eax) - 24usize];
    ["Offset of field: user_regs_struct32::ds"]
        [::std::mem::offset_of!(user_regs_struct32, ds) - 28usize];
    ["Offset of field: user_regs_struct32::__ds"]
        [::std::mem::offset_of!(user_regs_struct32, __ds) - 30usize];
    ["Offset of field: user_regs_struct32::es"]
        [::std::mem::offset_of!(user_regs_struct32, es) - 32usize];
    ["Offset of field: user_regs_struct32::__es"]
        [::std::mem::offset_of!(user_regs_struct32, __es) - 34usize];
    ["Offset of field: user_regs_struct32::fs"]
        [::std::mem::offset_of!(user_regs_struct32, fs) - 36usize];
    ["Offset of field: user_regs_struct32::__fs"]
        [::std::mem::offset_of!(user_regs_struct32, __fs) - 38usize];
    ["Offset of field: user_regs_struct32::gs"]
        [::std::mem::offset_of!(user_regs_struct32, gs) - 40usize];
    ["Offset of field: user_regs_struct32::__gs"]
        [::std::mem::offset_of!(user_regs_struct32, __gs) - 42usize];
    ["Offset of field: user_regs_struct32::orig_eax"]
        [::std::mem::offset_of!(user_regs_struct32, orig_eax) - 44usize];
    ["Offset of field: user_regs_struct32::eip"]
        [::std::mem::offset_of!(user_regs_struct32, eip) - 48usize];
    ["Offset of field: user_regs_struct32::cs"]
        [::std::mem::offset_of!(user_regs_struct32, cs) - 52usize];
    ["Offset of field: user_regs_struct32::__cs"]
        [::std::mem::offset_of!(user_regs_struct32, __cs) - 54usize];
    ["Offset of field: user_regs_struct32::eflags"]
        [::std::mem::offset_of!(user_regs_struct32, eflags) - 56usize];
    ["Offset of field: user_regs_struct32::esp"]
        [::std::mem::offset_of!(user_regs_struct32, esp) - 60usize];
    ["Offset of field: user_regs_struct32::ss"]
        [::std::mem::offset_of!(user_regs_struct32, ss) - 64usize];
    ["Offset of field: user_regs_struct32::__ss"]
        [::std::mem::offset_of!(user_regs_struct32, __ss) - 66usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user32 {
    pub regs: user_regs_struct32,
    pub u_fpvalid: ::std::os::raw::c_int,
    pub i387: user_i387_ia32_struct,
    pub u_tsize: __u32,
    pub u_dsize: __u32,
    pub u_ssize: __u32,
    pub start_code: __u32,
    pub start_stack: __u32,
    pub signal: __u32,
    pub reserved: ::std::os::raw::c_int,
    pub u_ar0: __u32,
    pub u_fpstate: __u32,
    pub magic: __u32,
    pub u_comm: [::std::os::raw::c_char; 32usize],
    pub u_debugreg: [::std::os::raw::c_int; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user32"][::std::mem::size_of::<user32>() - 284usize];
    ["Alignment of user32"][::std::mem::align_of::<user32>() - 4usize];
    ["Offset of field: user32::regs"][::std::mem::offset_of!(user32, regs) - 0usize];
    ["Offset of field: user32::u_fpvalid"][::std::mem::offset_of!(user32, u_fpvalid) - 68usize];
    ["Offset of field: user32::i387"][::std::mem::offset_of!(user32, i387) - 72usize];
    ["Offset of field: user32::u_tsize"][::std::mem::offset_of!(user32, u_tsize) - 180usize];
    ["Offset of field: user32::u_dsize"][::std::mem::offset_of!(user32, u_dsize) - 184usize];
    ["Offset of field: user32::u_ssize"][::std::mem::offset_of!(user32, u_ssize) - 188usize];
    ["Offset of field: user32::start_code"][::std::mem::offset_of!(user32, start_code) - 192usize];
    ["Offset of field: user32::start_stack"]
        [::std::mem::offset_of!(user32, start_stack) - 196usize];
    ["Offset of field: user32::signal"][::std::mem::offset_of!(user32, signal) - 200usize];
    ["Offset of field: user32::reserved"][::std::mem::offset_of!(user32, reserved) - 204usize];
    ["Offset of field: user32::u_ar0"][::std::mem::offset_of!(user32, u_ar0) - 208usize];
    ["Offset of field: user32::u_fpstate"][::std::mem::offset_of!(user32, u_fpstate) - 212usize];
    ["Offset of field: user32::magic"][::std::mem::offset_of!(user32, magic) - 216usize];
    ["Offset of field: user32::u_comm"][::std::mem::offset_of!(user32, u_comm) - 220usize];
    ["Offset of field: user32::u_debugreg"][::std::mem::offset_of!(user32, u_debugreg) - 252usize];
};
pub type compat_mode_t = u16_;
pub type __compat_uid_t = u16_;
pub type __compat_gid_t = u16_;
pub type compat_dev_t = u16_;
pub type compat_ipc_pid_t = u16_;
pub type compat_size_t = u32_;
pub type compat_ssize_t = s32;
pub type compat_clock_t = s32;
pub type compat_pid_t = s32;
pub type compat_ino_t = u32_;
pub type compat_off_t = s32;
pub type compat_loff_t = s64;
pub type compat_daddr_t = s32;
pub type compat_timer_t = s32;
pub type compat_key_t = s32;
pub type compat_short_t = s16;
pub type compat_int_t = s32;
pub type compat_long_t = s32;
pub type compat_ushort_t = u16_;
pub type compat_uint_t = u32_;
pub type compat_ulong_t = u32_;
pub type compat_uptr_t = u32_;
pub type compat_caddr_t = u32_;
pub type compat_aio_context_t = u32_;
pub type compat_old_sigset_t = u32_;
pub type __compat_uid32_t = u32_;
pub type __compat_gid32_t = u32_;
pub type compat_s64 = s64;
pub type compat_u64 = u64_;
pub type compat_sigset_word = u32_;
pub type compat_fsid_t = __kernel_fsid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_ipc64_perm {
    pub key: compat_key_t,
    pub uid: __compat_uid32_t,
    pub gid: __compat_gid32_t,
    pub cuid: __compat_uid32_t,
    pub cgid: __compat_gid32_t,
    pub mode: compat_mode_t,
    pub __pad1: [::std::os::raw::c_uchar; 2usize],
    pub seq: compat_ushort_t,
    pub __pad2: compat_ushort_t,
    pub unused1: compat_ulong_t,
    pub unused2: compat_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_ipc64_perm"][::std::mem::size_of::<compat_ipc64_perm>() - 36usize];
    ["Alignment of compat_ipc64_perm"][::std::mem::align_of::<compat_ipc64_perm>() - 4usize];
    ["Offset of field: compat_ipc64_perm::key"]
        [::std::mem::offset_of!(compat_ipc64_perm, key) - 0usize];
    ["Offset of field: compat_ipc64_perm::uid"]
        [::std::mem::offset_of!(compat_ipc64_perm, uid) - 4usize];
    ["Offset of field: compat_ipc64_perm::gid"]
        [::std::mem::offset_of!(compat_ipc64_perm, gid) - 8usize];
    ["Offset of field: compat_ipc64_perm::cuid"]
        [::std::mem::offset_of!(compat_ipc64_perm, cuid) - 12usize];
    ["Offset of field: compat_ipc64_perm::cgid"]
        [::std::mem::offset_of!(compat_ipc64_perm, cgid) - 16usize];
    ["Offset of field: compat_ipc64_perm::mode"]
        [::std::mem::offset_of!(compat_ipc64_perm, mode) - 20usize];
    ["Offset of field: compat_ipc64_perm::__pad1"]
        [::std::mem::offset_of!(compat_ipc64_perm, __pad1) - 22usize];
    ["Offset of field: compat_ipc64_perm::seq"]
        [::std::mem::offset_of!(compat_ipc64_perm, seq) - 24usize];
    ["Offset of field: compat_ipc64_perm::__pad2"]
        [::std::mem::offset_of!(compat_ipc64_perm, __pad2) - 26usize];
    ["Offset of field: compat_ipc64_perm::unused1"]
        [::std::mem::offset_of!(compat_ipc64_perm, unused1) - 28usize];
    ["Offset of field: compat_ipc64_perm::unused2"]
        [::std::mem::offset_of!(compat_ipc64_perm, unused2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_semid64_ds {
    pub sem_perm: compat_ipc64_perm,
    pub sem_otime: compat_ulong_t,
    pub sem_otime_high: compat_ulong_t,
    pub sem_ctime: compat_ulong_t,
    pub sem_ctime_high: compat_ulong_t,
    pub sem_nsems: compat_ulong_t,
    pub __unused3: compat_ulong_t,
    pub __unused4: compat_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_semid64_ds"][::std::mem::size_of::<compat_semid64_ds>() - 64usize];
    ["Alignment of compat_semid64_ds"][::std::mem::align_of::<compat_semid64_ds>() - 4usize];
    ["Offset of field: compat_semid64_ds::sem_perm"]
        [::std::mem::offset_of!(compat_semid64_ds, sem_perm) - 0usize];
    ["Offset of field: compat_semid64_ds::sem_otime"]
        [::std::mem::offset_of!(compat_semid64_ds, sem_otime) - 36usize];
    ["Offset of field: compat_semid64_ds::sem_otime_high"]
        [::std::mem::offset_of!(compat_semid64_ds, sem_otime_high) - 40usize];
    ["Offset of field: compat_semid64_ds::sem_ctime"]
        [::std::mem::offset_of!(compat_semid64_ds, sem_ctime) - 44usize];
    ["Offset of field: compat_semid64_ds::sem_ctime_high"]
        [::std::mem::offset_of!(compat_semid64_ds, sem_ctime_high) - 48usize];
    ["Offset of field: compat_semid64_ds::sem_nsems"]
        [::std::mem::offset_of!(compat_semid64_ds, sem_nsems) - 52usize];
    ["Offset of field: compat_semid64_ds::__unused3"]
        [::std::mem::offset_of!(compat_semid64_ds, __unused3) - 56usize];
    ["Offset of field: compat_semid64_ds::__unused4"]
        [::std::mem::offset_of!(compat_semid64_ds, __unused4) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_msqid64_ds {
    pub msg_perm: compat_ipc64_perm,
    pub msg_stime: compat_ulong_t,
    pub msg_stime_high: compat_ulong_t,
    pub msg_rtime: compat_ulong_t,
    pub msg_rtime_high: compat_ulong_t,
    pub msg_ctime: compat_ulong_t,
    pub msg_ctime_high: compat_ulong_t,
    pub msg_cbytes: compat_ulong_t,
    pub msg_qnum: compat_ulong_t,
    pub msg_qbytes: compat_ulong_t,
    pub msg_lspid: compat_pid_t,
    pub msg_lrpid: compat_pid_t,
    pub __unused4: compat_ulong_t,
    pub __unused5: compat_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_msqid64_ds"][::std::mem::size_of::<compat_msqid64_ds>() - 88usize];
    ["Alignment of compat_msqid64_ds"][::std::mem::align_of::<compat_msqid64_ds>() - 4usize];
    ["Offset of field: compat_msqid64_ds::msg_perm"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_perm) - 0usize];
    ["Offset of field: compat_msqid64_ds::msg_stime"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_stime) - 36usize];
    ["Offset of field: compat_msqid64_ds::msg_stime_high"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_stime_high) - 40usize];
    ["Offset of field: compat_msqid64_ds::msg_rtime"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_rtime) - 44usize];
    ["Offset of field: compat_msqid64_ds::msg_rtime_high"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_rtime_high) - 48usize];
    ["Offset of field: compat_msqid64_ds::msg_ctime"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_ctime) - 52usize];
    ["Offset of field: compat_msqid64_ds::msg_ctime_high"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_ctime_high) - 56usize];
    ["Offset of field: compat_msqid64_ds::msg_cbytes"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_cbytes) - 60usize];
    ["Offset of field: compat_msqid64_ds::msg_qnum"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_qnum) - 64usize];
    ["Offset of field: compat_msqid64_ds::msg_qbytes"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_qbytes) - 68usize];
    ["Offset of field: compat_msqid64_ds::msg_lspid"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_lspid) - 72usize];
    ["Offset of field: compat_msqid64_ds::msg_lrpid"]
        [::std::mem::offset_of!(compat_msqid64_ds, msg_lrpid) - 76usize];
    ["Offset of field: compat_msqid64_ds::__unused4"]
        [::std::mem::offset_of!(compat_msqid64_ds, __unused4) - 80usize];
    ["Offset of field: compat_msqid64_ds::__unused5"]
        [::std::mem::offset_of!(compat_msqid64_ds, __unused5) - 84usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_shmid64_ds {
    pub shm_perm: compat_ipc64_perm,
    pub shm_segsz: compat_size_t,
    pub shm_atime: compat_ulong_t,
    pub shm_atime_high: compat_ulong_t,
    pub shm_dtime: compat_ulong_t,
    pub shm_dtime_high: compat_ulong_t,
    pub shm_ctime: compat_ulong_t,
    pub shm_ctime_high: compat_ulong_t,
    pub shm_cpid: compat_pid_t,
    pub shm_lpid: compat_pid_t,
    pub shm_nattch: compat_ulong_t,
    pub __unused4: compat_ulong_t,
    pub __unused5: compat_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_shmid64_ds"][::std::mem::size_of::<compat_shmid64_ds>() - 84usize];
    ["Alignment of compat_shmid64_ds"][::std::mem::align_of::<compat_shmid64_ds>() - 4usize];
    ["Offset of field: compat_shmid64_ds::shm_perm"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_perm) - 0usize];
    ["Offset of field: compat_shmid64_ds::shm_segsz"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_segsz) - 36usize];
    ["Offset of field: compat_shmid64_ds::shm_atime"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_atime) - 40usize];
    ["Offset of field: compat_shmid64_ds::shm_atime_high"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_atime_high) - 44usize];
    ["Offset of field: compat_shmid64_ds::shm_dtime"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_dtime) - 48usize];
    ["Offset of field: compat_shmid64_ds::shm_dtime_high"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_dtime_high) - 52usize];
    ["Offset of field: compat_shmid64_ds::shm_ctime"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_ctime) - 56usize];
    ["Offset of field: compat_shmid64_ds::shm_ctime_high"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_ctime_high) - 60usize];
    ["Offset of field: compat_shmid64_ds::shm_cpid"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_cpid) - 64usize];
    ["Offset of field: compat_shmid64_ds::shm_lpid"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_lpid) - 68usize];
    ["Offset of field: compat_shmid64_ds::shm_nattch"]
        [::std::mem::offset_of!(compat_shmid64_ds, shm_nattch) - 72usize];
    ["Offset of field: compat_shmid64_ds::__unused4"]
        [::std::mem::offset_of!(compat_shmid64_ds, __unused4) - 76usize];
    ["Offset of field: compat_shmid64_ds::__unused5"]
        [::std::mem::offset_of!(compat_shmid64_ds, __unused5) - 80usize];
};
pub type compat_nlink_t = u16_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_stat {
    pub st_dev: u32_,
    pub st_ino: compat_ino_t,
    pub st_mode: compat_mode_t,
    pub st_nlink: compat_nlink_t,
    pub st_uid: __compat_uid_t,
    pub st_gid: __compat_gid_t,
    pub st_rdev: u32_,
    pub st_size: u32_,
    pub st_blksize: u32_,
    pub st_blocks: u32_,
    pub st_atime: u32_,
    pub st_atime_nsec: u32_,
    pub st_mtime: u32_,
    pub st_mtime_nsec: u32_,
    pub st_ctime: u32_,
    pub st_ctime_nsec: u32_,
    pub __unused4: u32_,
    pub __unused5: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_stat"][::std::mem::size_of::<compat_stat>() - 64usize];
    ["Alignment of compat_stat"][::std::mem::align_of::<compat_stat>() - 4usize];
    ["Offset of field: compat_stat::st_dev"][::std::mem::offset_of!(compat_stat, st_dev) - 0usize];
    ["Offset of field: compat_stat::st_ino"][::std::mem::offset_of!(compat_stat, st_ino) - 4usize];
    ["Offset of field: compat_stat::st_mode"]
        [::std::mem::offset_of!(compat_stat, st_mode) - 8usize];
    ["Offset of field: compat_stat::st_nlink"]
        [::std::mem::offset_of!(compat_stat, st_nlink) - 10usize];
    ["Offset of field: compat_stat::st_uid"][::std::mem::offset_of!(compat_stat, st_uid) - 12usize];
    ["Offset of field: compat_stat::st_gid"][::std::mem::offset_of!(compat_stat, st_gid) - 14usize];
    ["Offset of field: compat_stat::st_rdev"]
        [::std::mem::offset_of!(compat_stat, st_rdev) - 16usize];
    ["Offset of field: compat_stat::st_size"]
        [::std::mem::offset_of!(compat_stat, st_size) - 20usize];
    ["Offset of field: compat_stat::st_blksize"]
        [::std::mem::offset_of!(compat_stat, st_blksize) - 24usize];
    ["Offset of field: compat_stat::st_blocks"]
        [::std::mem::offset_of!(compat_stat, st_blocks) - 28usize];
    ["Offset of field: compat_stat::st_atime"]
        [::std::mem::offset_of!(compat_stat, st_atime) - 32usize];
    ["Offset of field: compat_stat::st_atime_nsec"]
        [::std::mem::offset_of!(compat_stat, st_atime_nsec) - 36usize];
    ["Offset of field: compat_stat::st_mtime"]
        [::std::mem::offset_of!(compat_stat, st_mtime) - 40usize];
    ["Offset of field: compat_stat::st_mtime_nsec"]
        [::std::mem::offset_of!(compat_stat, st_mtime_nsec) - 44usize];
    ["Offset of field: compat_stat::st_ctime"]
        [::std::mem::offset_of!(compat_stat, st_ctime) - 48usize];
    ["Offset of field: compat_stat::st_ctime_nsec"]
        [::std::mem::offset_of!(compat_stat, st_ctime_nsec) - 52usize];
    ["Offset of field: compat_stat::__unused4"]
        [::std::mem::offset_of!(compat_stat, __unused4) - 56usize];
    ["Offset of field: compat_stat::__unused5"]
        [::std::mem::offset_of!(compat_stat, __unused5) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_statfs {
    pub f_type: ::std::os::raw::c_int,
    pub f_bsize: ::std::os::raw::c_int,
    pub f_blocks: ::std::os::raw::c_int,
    pub f_bfree: ::std::os::raw::c_int,
    pub f_bavail: ::std::os::raw::c_int,
    pub f_files: ::std::os::raw::c_int,
    pub f_ffree: ::std::os::raw::c_int,
    pub f_fsid: compat_fsid_t,
    pub f_namelen: ::std::os::raw::c_int,
    pub f_frsize: ::std::os::raw::c_int,
    pub f_flags: ::std::os::raw::c_int,
    pub f_spare: [::std::os::raw::c_int; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_statfs"][::std::mem::size_of::<compat_statfs>() - 64usize];
    ["Alignment of compat_statfs"][::std::mem::align_of::<compat_statfs>() - 4usize];
    ["Offset of field: compat_statfs::f_type"]
        [::std::mem::offset_of!(compat_statfs, f_type) - 0usize];
    ["Offset of field: compat_statfs::f_bsize"]
        [::std::mem::offset_of!(compat_statfs, f_bsize) - 4usize];
    ["Offset of field: compat_statfs::f_blocks"]
        [::std::mem::offset_of!(compat_statfs, f_blocks) - 8usize];
    ["Offset of field: compat_statfs::f_bfree"]
        [::std::mem::offset_of!(compat_statfs, f_bfree) - 12usize];
    ["Offset of field: compat_statfs::f_bavail"]
        [::std::mem::offset_of!(compat_statfs, f_bavail) - 16usize];
    ["Offset of field: compat_statfs::f_files"]
        [::std::mem::offset_of!(compat_statfs, f_files) - 20usize];
    ["Offset of field: compat_statfs::f_ffree"]
        [::std::mem::offset_of!(compat_statfs, f_ffree) - 24usize];
    ["Offset of field: compat_statfs::f_fsid"]
        [::std::mem::offset_of!(compat_statfs, f_fsid) - 28usize];
    ["Offset of field: compat_statfs::f_namelen"]
        [::std::mem::offset_of!(compat_statfs, f_namelen) - 36usize];
    ["Offset of field: compat_statfs::f_frsize"]
        [::std::mem::offset_of!(compat_statfs, f_frsize) - 40usize];
    ["Offset of field: compat_statfs::f_flags"]
        [::std::mem::offset_of!(compat_statfs, f_flags) - 44usize];
    ["Offset of field: compat_statfs::f_spare"]
        [::std::mem::offset_of!(compat_statfs, f_spare) - 48usize];
};
extern "C" {
    pub fn __x64_sys_ni_syscall(regs: *const pt_regs) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __ia32_sys_ni_syscall(regs: *const pt_regs) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __x64_sys_getcpu(regs: *const pt_regs) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __x64_sys_gettimeofday(regs: *const pt_regs) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __x64_sys_time(regs: *const pt_regs) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_iovec {
    pub iov_base: compat_uptr_t,
    pub iov_len: compat_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_iovec"][::std::mem::size_of::<compat_iovec>() - 8usize];
    ["Alignment of compat_iovec"][::std::mem::align_of::<compat_iovec>() - 4usize];
    ["Offset of field: compat_iovec::iov_base"]
        [::std::mem::offset_of!(compat_iovec, iov_base) - 0usize];
    ["Offset of field: compat_iovec::iov_len"]
        [::std::mem::offset_of!(compat_iovec, iov_len) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_sigaltstack {
    pub ss_sp: compat_uptr_t,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: compat_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_sigaltstack"][::std::mem::size_of::<compat_sigaltstack>() - 12usize];
    ["Alignment of compat_sigaltstack"][::std::mem::align_of::<compat_sigaltstack>() - 4usize];
    ["Offset of field: compat_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(compat_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: compat_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(compat_sigaltstack, ss_flags) - 4usize];
    ["Offset of field: compat_sigaltstack::ss_size"]
        [::std::mem::offset_of!(compat_sigaltstack, ss_size) - 8usize];
};
pub type compat_stack_t = compat_sigaltstack;
pub type compat_uid_t = __compat_uid32_t;
pub type compat_gid_t = __compat_gid32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_sel_arg_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct old_itimerval32 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_tms {
    pub tms_utime: compat_clock_t,
    pub tms_stime: compat_clock_t,
    pub tms_cutime: compat_clock_t,
    pub tms_cstime: compat_clock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_tms"][::std::mem::size_of::<compat_tms>() - 16usize];
    ["Alignment of compat_tms"][::std::mem::align_of::<compat_tms>() - 4usize];
    ["Offset of field: compat_tms::tms_utime"]
        [::std::mem::offset_of!(compat_tms, tms_utime) - 0usize];
    ["Offset of field: compat_tms::tms_stime"]
        [::std::mem::offset_of!(compat_tms, tms_stime) - 4usize];
    ["Offset of field: compat_tms::tms_cutime"]
        [::std::mem::offset_of!(compat_tms, tms_cutime) - 8usize];
    ["Offset of field: compat_tms::tms_cstime"]
        [::std::mem::offset_of!(compat_tms, tms_cstime) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_sigset_t {
    pub sig: [compat_sigset_word; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_sigset_t"][::std::mem::size_of::<compat_sigset_t>() - 8usize];
    ["Alignment of compat_sigset_t"][::std::mem::align_of::<compat_sigset_t>() - 4usize];
    ["Offset of field: compat_sigset_t::sig"]
        [::std::mem::offset_of!(compat_sigset_t, sig) - 0usize];
};
extern "C" {
    pub fn set_compat_user_sigmask(
        umask: *const compat_sigset_t,
        sigsetsize: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_sigaction {
    pub sa_handler: compat_uptr_t,
    pub sa_flags: compat_ulong_t,
    pub sa_restorer: compat_uptr_t,
    pub sa_mask: compat_sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_sigaction"][::std::mem::size_of::<compat_sigaction>() - 20usize];
    ["Alignment of compat_sigaction"][::std::mem::align_of::<compat_sigaction>() - 4usize];
    ["Offset of field: compat_sigaction::sa_handler"]
        [::std::mem::offset_of!(compat_sigaction, sa_handler) - 0usize];
    ["Offset of field: compat_sigaction::sa_flags"]
        [::std::mem::offset_of!(compat_sigaction, sa_flags) - 4usize];
    ["Offset of field: compat_sigaction::sa_restorer"]
        [::std::mem::offset_of!(compat_sigaction, sa_restorer) - 8usize];
    ["Offset of field: compat_sigaction::sa_mask"]
        [::std::mem::offset_of!(compat_sigaction, sa_mask) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_sigval {
    pub sival_int: compat_int_t,
    pub sival_ptr: compat_uptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_sigval"][::std::mem::size_of::<compat_sigval>() - 4usize];
    ["Alignment of compat_sigval"][::std::mem::align_of::<compat_sigval>() - 4usize];
    ["Offset of field: compat_sigval::sival_int"]
        [::std::mem::offset_of!(compat_sigval, sival_int) - 0usize];
    ["Offset of field: compat_sigval::sival_ptr"]
        [::std::mem::offset_of!(compat_sigval, sival_ptr) - 0usize];
};
pub type compat_sigval_t = compat_sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: compat_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_siginfo__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 29usize],
    pub _kill: compat_siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _timer: compat_siginfo__bindgen_ty_1__bindgen_ty_2,
    pub _rt: compat_siginfo__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: compat_siginfo__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: compat_siginfo__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: compat_siginfo__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: compat_siginfo__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub _pid: compat_pid_t,
    pub _uid: __compat_uid32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_1::_pid"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_1, _pid) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_1::_uid"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_1, _uid) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_2 {
    pub _tid: compat_timer_t,
    pub _overrun: ::std::os::raw::c_int,
    pub _sigval: compat_sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_2>() - 12usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_2::_tid"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_2, _tid) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_2::_overrun"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_2, _overrun) - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_2::_sigval"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_2, _sigval) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_3 {
    pub _pid: compat_pid_t,
    pub _uid: __compat_uid32_t,
    pub _sigval: compat_sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_3>() - 12usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_3::_pid"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_3, _pid) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_3::_uid"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_3, _uid) - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_3::_sigval"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_3, _sigval) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_4 {
    pub _pid: compat_pid_t,
    pub _uid: __compat_uid32_t,
    pub _status: ::std::os::raw::c_int,
    pub _utime: compat_clock_t,
    pub _stime: compat_clock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_4>() - 20usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_4::_pid"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_4, _pid) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_4::_uid"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_4, _uid) - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_4::_status"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_4, _status) - 8usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_4::_utime"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_4, _utime) - 12usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_4::_stime"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_4, _stime) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5 {
    pub _addr: compat_uptr_t,
    pub __bindgen_anon_1: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _trapno: ::std::os::raw::c_int,
    pub _addr_lsb: ::std::os::raw::c_short,
    pub _addr_bnd: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _addr_pkey: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub _perf: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _dummy_bnd: [::std::os::raw::c_char; 4usize],
    pub _lower: compat_uptr_t,
    pub _upper: compat_uptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        >() - 12usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_dummy_bnd"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , _dummy_bnd) - 0usize] ;
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_lower"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , _lower) - 4usize] ;
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_upper"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , _upper) - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub _dummy_pkey: [::std::os::raw::c_char; 4usize],
    pub _pkey: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<
            compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
        >() - 8usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<
            compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
        >() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2::_dummy_pkey"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 , _dummy_pkey) - 0usize] ;
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2::_pkey"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 , _pkey) - 4usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub _data: compat_ulong_t,
    pub _type: u32_,
    pub _flags: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<
            compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        >() - 12usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<
            compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        >() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_data"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 , _data) - 0usize] ;
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_type"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 , _type) - 4usize] ;
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_flags"] [:: std :: mem :: offset_of ! (compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 , _flags) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"][::std::mem::size_of::<
        compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    >() - 12usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"][::std::mem::align_of::<
        compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_trapno"][::std::mem::offset_of!(
        compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _trapno
    )
        - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_addr_lsb"][::std::mem::offset_of!(
        compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _addr_lsb
    )
        - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_addr_bnd"][::std::mem::offset_of!(
        compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _addr_bnd
    )
        - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_addr_pkey"][::std::mem::offset_of!(
        compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _addr_pkey
    )
        - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_perf"][::std::mem::offset_of!(
        compat_siginfo__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _perf
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_5>() - 16usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_5::_addr"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_5, _addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_6 {
    pub _band: compat_long_t,
    pub _fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_6>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_6::_band"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_6, _band) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_6::_fd"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_6, _fd) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_siginfo__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: compat_uptr_t,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_7>() - 12usize];
    ["Alignment of compat_siginfo__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1__bindgen_ty_7>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_7::_call_addr"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_7, _call_addr) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_7::_syscall"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_7, _syscall) - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1__bindgen_ty_7::_arch"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1__bindgen_ty_7, _arch) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo__bindgen_ty_1"]
        [::std::mem::size_of::<compat_siginfo__bindgen_ty_1>() - 116usize];
    ["Alignment of compat_siginfo__bindgen_ty_1"]
        [::std::mem::align_of::<compat_siginfo__bindgen_ty_1>() - 4usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _pad) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_kill"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _kill) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_timer"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _timer) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_rt"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _rt) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_sigchld"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _sigchld) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_sigfault"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _sigfault) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_sigpoll"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _sigpoll) - 0usize];
    ["Offset of field: compat_siginfo__bindgen_ty_1::_sigsys"]
        [::std::mem::offset_of!(compat_siginfo__bindgen_ty_1, _sigsys) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_siginfo"][::std::mem::size_of::<compat_siginfo>() - 128usize];
    ["Alignment of compat_siginfo"][::std::mem::align_of::<compat_siginfo>() - 4usize];
    ["Offset of field: compat_siginfo::si_signo"]
        [::std::mem::offset_of!(compat_siginfo, si_signo) - 0usize];
    ["Offset of field: compat_siginfo::si_errno"]
        [::std::mem::offset_of!(compat_siginfo, si_errno) - 4usize];
    ["Offset of field: compat_siginfo::si_code"]
        [::std::mem::offset_of!(compat_siginfo, si_code) - 8usize];
    ["Offset of field: compat_siginfo::_sifields"]
        [::std::mem::offset_of!(compat_siginfo, _sifields) - 12usize];
};
pub type compat_siginfo_t = compat_siginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_rlimit {
    pub rlim_cur: compat_ulong_t,
    pub rlim_max: compat_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_rlimit"][::std::mem::size_of::<compat_rlimit>() - 8usize];
    ["Alignment of compat_rlimit"][::std::mem::align_of::<compat_rlimit>() - 4usize];
    ["Offset of field: compat_rlimit::rlim_cur"]
        [::std::mem::offset_of!(compat_rlimit, rlim_cur) - 0usize];
    ["Offset of field: compat_rlimit::rlim_max"]
        [::std::mem::offset_of!(compat_rlimit, rlim_max) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: compat_off_t,
    pub l_len: compat_off_t,
    pub l_pid: compat_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_flock"][::std::mem::size_of::<compat_flock>() - 16usize];
    ["Alignment of compat_flock"][::std::mem::align_of::<compat_flock>() - 4usize];
    ["Offset of field: compat_flock::l_type"]
        [::std::mem::offset_of!(compat_flock, l_type) - 0usize];
    ["Offset of field: compat_flock::l_whence"]
        [::std::mem::offset_of!(compat_flock, l_whence) - 2usize];
    ["Offset of field: compat_flock::l_start"]
        [::std::mem::offset_of!(compat_flock, l_start) - 4usize];
    ["Offset of field: compat_flock::l_len"][::std::mem::offset_of!(compat_flock, l_len) - 8usize];
    ["Offset of field: compat_flock::l_pid"][::std::mem::offset_of!(compat_flock, l_pid) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct compat_flock64 {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: compat_loff_t,
    pub l_len: compat_loff_t,
    pub l_pid: compat_pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_flock64"][::std::mem::size_of::<compat_flock64>() - 24usize];
    ["Alignment of compat_flock64"][::std::mem::align_of::<compat_flock64>() - 1usize];
    ["Offset of field: compat_flock64::l_type"]
        [::std::mem::offset_of!(compat_flock64, l_type) - 0usize];
    ["Offset of field: compat_flock64::l_whence"]
        [::std::mem::offset_of!(compat_flock64, l_whence) - 2usize];
    ["Offset of field: compat_flock64::l_start"]
        [::std::mem::offset_of!(compat_flock64, l_start) - 4usize];
    ["Offset of field: compat_flock64::l_len"]
        [::std::mem::offset_of!(compat_flock64, l_len) - 12usize];
    ["Offset of field: compat_flock64::l_pid"]
        [::std::mem::offset_of!(compat_flock64, l_pid) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_rusage {
    pub ru_utime: old_timeval32,
    pub ru_stime: old_timeval32,
    pub ru_maxrss: compat_long_t,
    pub ru_ixrss: compat_long_t,
    pub ru_idrss: compat_long_t,
    pub ru_isrss: compat_long_t,
    pub ru_minflt: compat_long_t,
    pub ru_majflt: compat_long_t,
    pub ru_nswap: compat_long_t,
    pub ru_inblock: compat_long_t,
    pub ru_oublock: compat_long_t,
    pub ru_msgsnd: compat_long_t,
    pub ru_msgrcv: compat_long_t,
    pub ru_nsignals: compat_long_t,
    pub ru_nvcsw: compat_long_t,
    pub ru_nivcsw: compat_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_rusage"][::std::mem::size_of::<compat_rusage>() - 72usize];
    ["Alignment of compat_rusage"][::std::mem::align_of::<compat_rusage>() - 4usize];
    ["Offset of field: compat_rusage::ru_utime"]
        [::std::mem::offset_of!(compat_rusage, ru_utime) - 0usize];
    ["Offset of field: compat_rusage::ru_stime"]
        [::std::mem::offset_of!(compat_rusage, ru_stime) - 8usize];
    ["Offset of field: compat_rusage::ru_maxrss"]
        [::std::mem::offset_of!(compat_rusage, ru_maxrss) - 16usize];
    ["Offset of field: compat_rusage::ru_ixrss"]
        [::std::mem::offset_of!(compat_rusage, ru_ixrss) - 20usize];
    ["Offset of field: compat_rusage::ru_idrss"]
        [::std::mem::offset_of!(compat_rusage, ru_idrss) - 24usize];
    ["Offset of field: compat_rusage::ru_isrss"]
        [::std::mem::offset_of!(compat_rusage, ru_isrss) - 28usize];
    ["Offset of field: compat_rusage::ru_minflt"]
        [::std::mem::offset_of!(compat_rusage, ru_minflt) - 32usize];
    ["Offset of field: compat_rusage::ru_majflt"]
        [::std::mem::offset_of!(compat_rusage, ru_majflt) - 36usize];
    ["Offset of field: compat_rusage::ru_nswap"]
        [::std::mem::offset_of!(compat_rusage, ru_nswap) - 40usize];
    ["Offset of field: compat_rusage::ru_inblock"]
        [::std::mem::offset_of!(compat_rusage, ru_inblock) - 44usize];
    ["Offset of field: compat_rusage::ru_oublock"]
        [::std::mem::offset_of!(compat_rusage, ru_oublock) - 48usize];
    ["Offset of field: compat_rusage::ru_msgsnd"]
        [::std::mem::offset_of!(compat_rusage, ru_msgsnd) - 52usize];
    ["Offset of field: compat_rusage::ru_msgrcv"]
        [::std::mem::offset_of!(compat_rusage, ru_msgrcv) - 56usize];
    ["Offset of field: compat_rusage::ru_nsignals"]
        [::std::mem::offset_of!(compat_rusage, ru_nsignals) - 60usize];
    ["Offset of field: compat_rusage::ru_nvcsw"]
        [::std::mem::offset_of!(compat_rusage, ru_nvcsw) - 64usize];
    ["Offset of field: compat_rusage::ru_nivcsw"]
        [::std::mem::offset_of!(compat_rusage, ru_nivcsw) - 68usize];
};
extern "C" {
    pub fn put_compat_rusage(
        arg1: *const rusage,
        arg2: *mut compat_rusage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __compat_aio_sigset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_dirent {
    pub d_ino: u32_,
    pub d_off: compat_off_t,
    pub d_reclen: u16_,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_dirent"][::std::mem::size_of::<compat_dirent>() - 268usize];
    ["Alignment of compat_dirent"][::std::mem::align_of::<compat_dirent>() - 4usize];
    ["Offset of field: compat_dirent::d_ino"]
        [::std::mem::offset_of!(compat_dirent, d_ino) - 0usize];
    ["Offset of field: compat_dirent::d_off"]
        [::std::mem::offset_of!(compat_dirent, d_off) - 4usize];
    ["Offset of field: compat_dirent::d_reclen"]
        [::std::mem::offset_of!(compat_dirent, d_reclen) - 8usize];
    ["Offset of field: compat_dirent::d_name"]
        [::std::mem::offset_of!(compat_dirent, d_name) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_ustat {
    pub f_tfree: compat_daddr_t,
    pub f_tinode: compat_ino_t,
    pub f_fname: [::std::os::raw::c_char; 6usize],
    pub f_fpack: [::std::os::raw::c_char; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_ustat"][::std::mem::size_of::<compat_ustat>() - 20usize];
    ["Alignment of compat_ustat"][::std::mem::align_of::<compat_ustat>() - 4usize];
    ["Offset of field: compat_ustat::f_tfree"]
        [::std::mem::offset_of!(compat_ustat, f_tfree) - 0usize];
    ["Offset of field: compat_ustat::f_tinode"]
        [::std::mem::offset_of!(compat_ustat, f_tinode) - 4usize];
    ["Offset of field: compat_ustat::f_fname"]
        [::std::mem::offset_of!(compat_ustat, f_fname) - 8usize];
    ["Offset of field: compat_ustat::f_fpack"]
        [::std::mem::offset_of!(compat_ustat, f_fpack) - 14usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct compat_sigevent {
    pub sigev_value: compat_sigval_t,
    pub sigev_signo: compat_int_t,
    pub sigev_notify: compat_int_t,
    pub _sigev_un: compat_sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_sigevent__bindgen_ty_1 {
    pub _pad: [compat_int_t; 13usize],
    pub _tid: compat_int_t,
    pub _sigev_thread: compat_sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: compat_uptr_t,
    pub _attribute: compat_uptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<compat_sigevent__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of compat_sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<compat_sigevent__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: compat_sigevent__bindgen_ty_1__bindgen_ty_1::_function"]
        [::std::mem::offset_of!(compat_sigevent__bindgen_ty_1__bindgen_ty_1, _function) - 0usize];
    ["Offset of field: compat_sigevent__bindgen_ty_1__bindgen_ty_1::_attribute"]
        [::std::mem::offset_of!(compat_sigevent__bindgen_ty_1__bindgen_ty_1, _attribute) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_sigevent__bindgen_ty_1"]
        [::std::mem::size_of::<compat_sigevent__bindgen_ty_1>() - 52usize];
    ["Alignment of compat_sigevent__bindgen_ty_1"]
        [::std::mem::align_of::<compat_sigevent__bindgen_ty_1>() - 4usize];
    ["Offset of field: compat_sigevent__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(compat_sigevent__bindgen_ty_1, _pad) - 0usize];
    ["Offset of field: compat_sigevent__bindgen_ty_1::_tid"]
        [::std::mem::offset_of!(compat_sigevent__bindgen_ty_1, _tid) - 0usize];
    ["Offset of field: compat_sigevent__bindgen_ty_1::_sigev_thread"]
        [::std::mem::offset_of!(compat_sigevent__bindgen_ty_1, _sigev_thread) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_sigevent"][::std::mem::size_of::<compat_sigevent>() - 64usize];
    ["Alignment of compat_sigevent"][::std::mem::align_of::<compat_sigevent>() - 4usize];
    ["Offset of field: compat_sigevent::sigev_value"]
        [::std::mem::offset_of!(compat_sigevent, sigev_value) - 0usize];
    ["Offset of field: compat_sigevent::sigev_signo"]
        [::std::mem::offset_of!(compat_sigevent, sigev_signo) - 4usize];
    ["Offset of field: compat_sigevent::sigev_notify"]
        [::std::mem::offset_of!(compat_sigevent, sigev_notify) - 8usize];
    ["Offset of field: compat_sigevent::_sigev_un"]
        [::std::mem::offset_of!(compat_sigevent, _sigev_un) - 12usize];
};
pub type compat_sigevent_t = compat_sigevent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_ifmap {
    pub mem_start: compat_ulong_t,
    pub mem_end: compat_ulong_t,
    pub base_addr: ::std::os::raw::c_ushort,
    pub irq: ::std::os::raw::c_uchar,
    pub dma: ::std::os::raw::c_uchar,
    pub port: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_ifmap"][::std::mem::size_of::<compat_ifmap>() - 16usize];
    ["Alignment of compat_ifmap"][::std::mem::align_of::<compat_ifmap>() - 4usize];
    ["Offset of field: compat_ifmap::mem_start"]
        [::std::mem::offset_of!(compat_ifmap, mem_start) - 0usize];
    ["Offset of field: compat_ifmap::mem_end"]
        [::std::mem::offset_of!(compat_ifmap, mem_end) - 4usize];
    ["Offset of field: compat_ifmap::base_addr"]
        [::std::mem::offset_of!(compat_ifmap, base_addr) - 8usize];
    ["Offset of field: compat_ifmap::irq"][::std::mem::offset_of!(compat_ifmap, irq) - 10usize];
    ["Offset of field: compat_ifmap::dma"][::std::mem::offset_of!(compat_ifmap, dma) - 11usize];
    ["Offset of field: compat_ifmap::port"][::std::mem::offset_of!(compat_ifmap, port) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_if_settings {
    pub type_: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub ifs_ifsu: compat_uptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_if_settings"][::std::mem::size_of::<compat_if_settings>() - 12usize];
    ["Alignment of compat_if_settings"][::std::mem::align_of::<compat_if_settings>() - 4usize];
    ["Offset of field: compat_if_settings::type_"]
        [::std::mem::offset_of!(compat_if_settings, type_) - 0usize];
    ["Offset of field: compat_if_settings::size"]
        [::std::mem::offset_of!(compat_if_settings, size) - 4usize];
    ["Offset of field: compat_if_settings::ifs_ifsu"]
        [::std::mem::offset_of!(compat_if_settings, ifs_ifsu) - 8usize];
};
#[repr(C)]
pub struct compat_ifreq {
    pub ifr_ifrn: compat_ifreq__bindgen_ty_1,
    pub ifr_ifru: compat_ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union compat_ifreq__bindgen_ty_1 {
    pub ifrn_name: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_ifreq__bindgen_ty_1"]
        [::std::mem::size_of::<compat_ifreq__bindgen_ty_1>() - 16usize];
    ["Alignment of compat_ifreq__bindgen_ty_1"]
        [::std::mem::align_of::<compat_ifreq__bindgen_ty_1>() - 1usize];
    ["Offset of field: compat_ifreq__bindgen_ty_1::ifrn_name"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_1, ifrn_name) - 0usize];
};
#[repr(C)]
pub struct compat_ifreq__bindgen_ty_2 {
    pub ifru_addr: __BindgenUnionField<sockaddr>,
    pub ifru_dstaddr: __BindgenUnionField<sockaddr>,
    pub ifru_broadaddr: __BindgenUnionField<sockaddr>,
    pub ifru_netmask: __BindgenUnionField<sockaddr>,
    pub ifru_hwaddr: __BindgenUnionField<sockaddr>,
    pub ifru_flags: __BindgenUnionField<::std::os::raw::c_short>,
    pub ifru_ivalue: __BindgenUnionField<compat_int_t>,
    pub ifru_mtu: __BindgenUnionField<compat_int_t>,
    pub ifru_map: __BindgenUnionField<compat_ifmap>,
    pub ifru_slave: __BindgenUnionField<[::std::os::raw::c_char; 16usize]>,
    pub ifru_newname: __BindgenUnionField<[::std::os::raw::c_char; 16usize]>,
    pub ifru_data: __BindgenUnionField<compat_caddr_t>,
    pub ifru_settings: __BindgenUnionField<compat_if_settings>,
    pub bindgen_union_field: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_ifreq__bindgen_ty_2"]
        [::std::mem::size_of::<compat_ifreq__bindgen_ty_2>() - 16usize];
    ["Alignment of compat_ifreq__bindgen_ty_2"]
        [::std::mem::align_of::<compat_ifreq__bindgen_ty_2>() - 4usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_addr"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_addr) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_dstaddr"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_dstaddr) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_broadaddr"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_broadaddr) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_netmask"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_netmask) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_hwaddr"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_hwaddr) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_flags"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_flags) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_ivalue"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_ivalue) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_mtu"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_mtu) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_map"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_map) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_slave"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_slave) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_newname"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_newname) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_data"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_data) - 0usize];
    ["Offset of field: compat_ifreq__bindgen_ty_2::ifru_settings"]
        [::std::mem::offset_of!(compat_ifreq__bindgen_ty_2, ifru_settings) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_ifreq"][::std::mem::size_of::<compat_ifreq>() - 32usize];
    ["Alignment of compat_ifreq"][::std::mem::align_of::<compat_ifreq>() - 4usize];
    ["Offset of field: compat_ifreq::ifr_ifrn"]
        [::std::mem::offset_of!(compat_ifreq, ifr_ifrn) - 0usize];
    ["Offset of field: compat_ifreq::ifr_ifru"]
        [::std::mem::offset_of!(compat_ifreq, ifr_ifru) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_ifconf {
    pub ifc_len: compat_int_t,
    pub ifcbuf: compat_caddr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_ifconf"][::std::mem::size_of::<compat_ifconf>() - 8usize];
    ["Alignment of compat_ifconf"][::std::mem::align_of::<compat_ifconf>() - 4usize];
    ["Offset of field: compat_ifconf::ifc_len"]
        [::std::mem::offset_of!(compat_ifconf, ifc_len) - 0usize];
    ["Offset of field: compat_ifconf::ifcbuf"]
        [::std::mem::offset_of!(compat_ifconf, ifcbuf) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_robust_list {
    pub next: compat_uptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_robust_list"][::std::mem::size_of::<compat_robust_list>() - 4usize];
    ["Alignment of compat_robust_list"][::std::mem::align_of::<compat_robust_list>() - 4usize];
    ["Offset of field: compat_robust_list::next"]
        [::std::mem::offset_of!(compat_robust_list, next) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_robust_list_head {
    pub list: compat_robust_list,
    pub futex_offset: compat_long_t,
    pub list_op_pending: compat_uptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_robust_list_head"][::std::mem::size_of::<compat_robust_list_head>() - 12usize];
    ["Alignment of compat_robust_list_head"]
        [::std::mem::align_of::<compat_robust_list_head>() - 4usize];
    ["Offset of field: compat_robust_list_head::list"]
        [::std::mem::offset_of!(compat_robust_list_head, list) - 0usize];
    ["Offset of field: compat_robust_list_head::futex_offset"]
        [::std::mem::offset_of!(compat_robust_list_head, futex_offset) - 4usize];
    ["Offset of field: compat_robust_list_head::list_op_pending"]
        [::std::mem::offset_of!(compat_robust_list_head, list_op_pending) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_old_sigaction {
    pub sa_handler: compat_uptr_t,
    pub sa_mask: compat_old_sigset_t,
    pub sa_flags: compat_ulong_t,
    pub sa_restorer: compat_uptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_old_sigaction"][::std::mem::size_of::<compat_old_sigaction>() - 16usize];
    ["Alignment of compat_old_sigaction"][::std::mem::align_of::<compat_old_sigaction>() - 4usize];
    ["Offset of field: compat_old_sigaction::sa_handler"]
        [::std::mem::offset_of!(compat_old_sigaction, sa_handler) - 0usize];
    ["Offset of field: compat_old_sigaction::sa_mask"]
        [::std::mem::offset_of!(compat_old_sigaction, sa_mask) - 4usize];
    ["Offset of field: compat_old_sigaction::sa_flags"]
        [::std::mem::offset_of!(compat_old_sigaction, sa_flags) - 8usize];
    ["Offset of field: compat_old_sigaction::sa_restorer"]
        [::std::mem::offset_of!(compat_old_sigaction, sa_restorer) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_keyctl_kdf_params {
    pub hashname: compat_uptr_t,
    pub otherinfo: compat_uptr_t,
    pub otherinfolen: __u32,
    pub __spare: [__u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of compat_keyctl_kdf_params"]
        [::std::mem::size_of::<compat_keyctl_kdf_params>() - 44usize];
    ["Alignment of compat_keyctl_kdf_params"]
        [::std::mem::align_of::<compat_keyctl_kdf_params>() - 4usize];
    ["Offset of field: compat_keyctl_kdf_params::hashname"]
        [::std::mem::offset_of!(compat_keyctl_kdf_params, hashname) - 0usize];
    ["Offset of field: compat_keyctl_kdf_params::otherinfo"]
        [::std::mem::offset_of!(compat_keyctl_kdf_params, otherinfo) - 4usize];
    ["Offset of field: compat_keyctl_kdf_params::otherinfolen"]
        [::std::mem::offset_of!(compat_keyctl_kdf_params, otherinfolen) - 8usize];
    ["Offset of field: compat_keyctl_kdf_params::__spare"]
        [::std::mem::offset_of!(compat_keyctl_kdf_params, __spare) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_statfs64 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_old_linux_dirent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_linux_dirent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linux_dirent64 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_msghdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_mmsghdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_sysinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_sysctl_args {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_kexec_segment {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_mq_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct compat_msgbuf {
    _unused: [u8; 0],
}
extern "C" {
    pub fn copy_siginfo_to_external32(to: *mut compat_siginfo, from: *const kernel_siginfo);
}
extern "C" {
    pub fn copy_siginfo_from_user32(
        to: *mut kernel_siginfo_t,
        from: *const compat_siginfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __copy_siginfo_to_user32(
        to: *mut compat_siginfo,
        from: *const kernel_siginfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_compat_sigevent(
        event: *mut sigevent,
        u_event: *const compat_sigevent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_compat_sigset(
        set: *mut sigset_t,
        compat: *const compat_sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compat_ptrace_request(
        child: *mut task_struct,
        request: compat_long_t,
        addr: compat_ulong_t,
        data: compat_ulong_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compat_arch_ptrace(
        child: *mut task_struct,
        request: compat_long_t,
        addr: compat_ulong_t,
        data: compat_ulong_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn compat_restore_altstack(uss: *const compat_stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __compat_save_altstack(
        arg1: *mut compat_stack_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kcompat_sys_statfs64(
        pathname: *const ::std::os::raw::c_char,
        sz: compat_size_t,
        buf: *mut compat_statfs64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kcompat_sys_fstatfs64(
        fd: ::std::os::raw::c_uint,
        sz: compat_size_t,
        buf: *mut compat_statfs64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compat_get_bitmap(
        mask: *mut ::std::os::raw::c_ulong,
        umask: *const compat_ulong_t,
        bitmap_size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn compat_put_bitmap(
        umask: *mut compat_ulong_t,
        mask: *mut ::std::os::raw::c_ulong,
        bitmap_size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_ia32 {
    pub uc_flags: ::std::os::raw::c_uint,
    pub uc_link: ::std::os::raw::c_uint,
    pub uc_stack: compat_stack_t,
    pub uc_mcontext: sigcontext_32,
    pub uc_sigmask: compat_sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ucontext_ia32"][::std::mem::size_of::<ucontext_ia32>() - 116usize];
    ["Alignment of ucontext_ia32"][::std::mem::align_of::<ucontext_ia32>() - 4usize];
    ["Offset of field: ucontext_ia32::uc_flags"]
        [::std::mem::offset_of!(ucontext_ia32, uc_flags) - 0usize];
    ["Offset of field: ucontext_ia32::uc_link"]
        [::std::mem::offset_of!(ucontext_ia32, uc_link) - 4usize];
    ["Offset of field: ucontext_ia32::uc_stack"]
        [::std::mem::offset_of!(ucontext_ia32, uc_stack) - 8usize];
    ["Offset of field: ucontext_ia32::uc_mcontext"]
        [::std::mem::offset_of!(ucontext_ia32, uc_mcontext) - 20usize];
    ["Offset of field: ucontext_ia32::uc_sigmask"]
        [::std::mem::offset_of!(ucontext_ia32, uc_sigmask) - 108usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: ::std::os::raw::c_ulonglong,
    pub __pad0: [::std::os::raw::c_uchar; 4usize],
    pub __st_ino: ::std::os::raw::c_uint,
    pub st_mode: ::std::os::raw::c_uint,
    pub st_nlink: ::std::os::raw::c_uint,
    pub st_uid: ::std::os::raw::c_uint,
    pub st_gid: ::std::os::raw::c_uint,
    pub st_rdev: ::std::os::raw::c_ulonglong,
    pub __pad3: [::std::os::raw::c_uchar; 4usize],
    pub st_size: ::std::os::raw::c_longlong,
    pub st_blksize: ::std::os::raw::c_uint,
    pub st_blocks: ::std::os::raw::c_longlong,
    pub st_atime: ::std::os::raw::c_uint,
    pub st_atime_nsec: ::std::os::raw::c_uint,
    pub st_mtime: ::std::os::raw::c_uint,
    pub st_mtime_nsec: ::std::os::raw::c_uint,
    pub st_ctime: ::std::os::raw::c_uint,
    pub st_ctime_nsec: ::std::os::raw::c_uint,
    pub st_ino: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat64"][::std::mem::size_of::<stat64>() - 96usize];
    ["Alignment of stat64"][::std::mem::align_of::<stat64>() - 1usize];
    ["Offset of field: stat64::st_dev"][::std::mem::offset_of!(stat64, st_dev) - 0usize];
    ["Offset of field: stat64::__pad0"][::std::mem::offset_of!(stat64, __pad0) - 8usize];
    ["Offset of field: stat64::__st_ino"][::std::mem::offset_of!(stat64, __st_ino) - 12usize];
    ["Offset of field: stat64::st_mode"][::std::mem::offset_of!(stat64, st_mode) - 16usize];
    ["Offset of field: stat64::st_nlink"][::std::mem::offset_of!(stat64, st_nlink) - 20usize];
    ["Offset of field: stat64::st_uid"][::std::mem::offset_of!(stat64, st_uid) - 24usize];
    ["Offset of field: stat64::st_gid"][::std::mem::offset_of!(stat64, st_gid) - 28usize];
    ["Offset of field: stat64::st_rdev"][::std::mem::offset_of!(stat64, st_rdev) - 32usize];
    ["Offset of field: stat64::__pad3"][::std::mem::offset_of!(stat64, __pad3) - 40usize];
    ["Offset of field: stat64::st_size"][::std::mem::offset_of!(stat64, st_size) - 44usize];
    ["Offset of field: stat64::st_blksize"][::std::mem::offset_of!(stat64, st_blksize) - 52usize];
    ["Offset of field: stat64::st_blocks"][::std::mem::offset_of!(stat64, st_blocks) - 56usize];
    ["Offset of field: stat64::st_atime"][::std::mem::offset_of!(stat64, st_atime) - 64usize];
    ["Offset of field: stat64::st_atime_nsec"]
        [::std::mem::offset_of!(stat64, st_atime_nsec) - 68usize];
    ["Offset of field: stat64::st_mtime"][::std::mem::offset_of!(stat64, st_mtime) - 72usize];
    ["Offset of field: stat64::st_mtime_nsec"]
        [::std::mem::offset_of!(stat64, st_mtime_nsec) - 76usize];
    ["Offset of field: stat64::st_ctime"][::std::mem::offset_of!(stat64, st_ctime) - 80usize];
    ["Offset of field: stat64::st_ctime_nsec"]
        [::std::mem::offset_of!(stat64, st_ctime_nsec) - 84usize];
    ["Offset of field: stat64::st_ino"][::std::mem::offset_of!(stat64, st_ino) - 88usize];
};
extern "C" {
    pub static mut __ia32_enabled: bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_i387_struct {
    pub cwd: ::std::os::raw::c_ushort,
    pub swd: ::std::os::raw::c_ushort,
    pub twd: ::std::os::raw::c_ushort,
    pub fop: ::std::os::raw::c_ushort,
    pub rip: __u64,
    pub rdp: __u64,
    pub mxcsr: __u32,
    pub mxcsr_mask: __u32,
    pub st_space: [__u32; 32usize],
    pub xmm_space: [__u32; 64usize],
    pub padding: [__u32; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_i387_struct"][::std::mem::size_of::<user_i387_struct>() - 512usize];
    ["Alignment of user_i387_struct"][::std::mem::align_of::<user_i387_struct>() - 8usize];
    ["Offset of field: user_i387_struct::cwd"]
        [::std::mem::offset_of!(user_i387_struct, cwd) - 0usize];
    ["Offset of field: user_i387_struct::swd"]
        [::std::mem::offset_of!(user_i387_struct, swd) - 2usize];
    ["Offset of field: user_i387_struct::twd"]
        [::std::mem::offset_of!(user_i387_struct, twd) - 4usize];
    ["Offset of field: user_i387_struct::fop"]
        [::std::mem::offset_of!(user_i387_struct, fop) - 6usize];
    ["Offset of field: user_i387_struct::rip"]
        [::std::mem::offset_of!(user_i387_struct, rip) - 8usize];
    ["Offset of field: user_i387_struct::rdp"]
        [::std::mem::offset_of!(user_i387_struct, rdp) - 16usize];
    ["Offset of field: user_i387_struct::mxcsr"]
        [::std::mem::offset_of!(user_i387_struct, mxcsr) - 24usize];
    ["Offset of field: user_i387_struct::mxcsr_mask"]
        [::std::mem::offset_of!(user_i387_struct, mxcsr_mask) - 28usize];
    ["Offset of field: user_i387_struct::st_space"]
        [::std::mem::offset_of!(user_i387_struct, st_space) - 32usize];
    ["Offset of field: user_i387_struct::xmm_space"]
        [::std::mem::offset_of!(user_i387_struct, xmm_space) - 160usize];
    ["Offset of field: user_i387_struct::padding"]
        [::std::mem::offset_of!(user_i387_struct, padding) - 416usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_regs_struct {
    pub r15: ::std::os::raw::c_ulong,
    pub r14: ::std::os::raw::c_ulong,
    pub r13: ::std::os::raw::c_ulong,
    pub r12: ::std::os::raw::c_ulong,
    pub bp: ::std::os::raw::c_ulong,
    pub bx: ::std::os::raw::c_ulong,
    pub r11: ::std::os::raw::c_ulong,
    pub r10: ::std::os::raw::c_ulong,
    pub r9: ::std::os::raw::c_ulong,
    pub r8: ::std::os::raw::c_ulong,
    pub ax: ::std::os::raw::c_ulong,
    pub cx: ::std::os::raw::c_ulong,
    pub dx: ::std::os::raw::c_ulong,
    pub si: ::std::os::raw::c_ulong,
    pub di: ::std::os::raw::c_ulong,
    pub orig_ax: ::std::os::raw::c_ulong,
    pub ip: ::std::os::raw::c_ulong,
    pub cs: ::std::os::raw::c_ulong,
    pub flags: ::std::os::raw::c_ulong,
    pub sp: ::std::os::raw::c_ulong,
    pub ss: ::std::os::raw::c_ulong,
    pub fs_base: ::std::os::raw::c_ulong,
    pub gs_base: ::std::os::raw::c_ulong,
    pub ds: ::std::os::raw::c_ulong,
    pub es: ::std::os::raw::c_ulong,
    pub fs: ::std::os::raw::c_ulong,
    pub gs: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_regs_struct"][::std::mem::size_of::<user_regs_struct>() - 216usize];
    ["Alignment of user_regs_struct"][::std::mem::align_of::<user_regs_struct>() - 8usize];
    ["Offset of field: user_regs_struct::r15"]
        [::std::mem::offset_of!(user_regs_struct, r15) - 0usize];
    ["Offset of field: user_regs_struct::r14"]
        [::std::mem::offset_of!(user_regs_struct, r14) - 8usize];
    ["Offset of field: user_regs_struct::r13"]
        [::std::mem::offset_of!(user_regs_struct, r13) - 16usize];
    ["Offset of field: user_regs_struct::r12"]
        [::std::mem::offset_of!(user_regs_struct, r12) - 24usize];
    ["Offset of field: user_regs_struct::bp"]
        [::std::mem::offset_of!(user_regs_struct, bp) - 32usize];
    ["Offset of field: user_regs_struct::bx"]
        [::std::mem::offset_of!(user_regs_struct, bx) - 40usize];
    ["Offset of field: user_regs_struct::r11"]
        [::std::mem::offset_of!(user_regs_struct, r11) - 48usize];
    ["Offset of field: user_regs_struct::r10"]
        [::std::mem::offset_of!(user_regs_struct, r10) - 56usize];
    ["Offset of field: user_regs_struct::r9"]
        [::std::mem::offset_of!(user_regs_struct, r9) - 64usize];
    ["Offset of field: user_regs_struct::r8"]
        [::std::mem::offset_of!(user_regs_struct, r8) - 72usize];
    ["Offset of field: user_regs_struct::ax"]
        [::std::mem::offset_of!(user_regs_struct, ax) - 80usize];
    ["Offset of field: user_regs_struct::cx"]
        [::std::mem::offset_of!(user_regs_struct, cx) - 88usize];
    ["Offset of field: user_regs_struct::dx"]
        [::std::mem::offset_of!(user_regs_struct, dx) - 96usize];
    ["Offset of field: user_regs_struct::si"]
        [::std::mem::offset_of!(user_regs_struct, si) - 104usize];
    ["Offset of field: user_regs_struct::di"]
        [::std::mem::offset_of!(user_regs_struct, di) - 112usize];
    ["Offset of field: user_regs_struct::orig_ax"]
        [::std::mem::offset_of!(user_regs_struct, orig_ax) - 120usize];
    ["Offset of field: user_regs_struct::ip"]
        [::std::mem::offset_of!(user_regs_struct, ip) - 128usize];
    ["Offset of field: user_regs_struct::cs"]
        [::std::mem::offset_of!(user_regs_struct, cs) - 136usize];
    ["Offset of field: user_regs_struct::flags"]
        [::std::mem::offset_of!(user_regs_struct, flags) - 144usize];
    ["Offset of field: user_regs_struct::sp"]
        [::std::mem::offset_of!(user_regs_struct, sp) - 152usize];
    ["Offset of field: user_regs_struct::ss"]
        [::std::mem::offset_of!(user_regs_struct, ss) - 160usize];
    ["Offset of field: user_regs_struct::fs_base"]
        [::std::mem::offset_of!(user_regs_struct, fs_base) - 168usize];
    ["Offset of field: user_regs_struct::gs_base"]
        [::std::mem::offset_of!(user_regs_struct, gs_base) - 176usize];
    ["Offset of field: user_regs_struct::ds"]
        [::std::mem::offset_of!(user_regs_struct, ds) - 184usize];
    ["Offset of field: user_regs_struct::es"]
        [::std::mem::offset_of!(user_regs_struct, es) - 192usize];
    ["Offset of field: user_regs_struct::fs"]
        [::std::mem::offset_of!(user_regs_struct, fs) - 200usize];
    ["Offset of field: user_regs_struct::gs"]
        [::std::mem::offset_of!(user_regs_struct, gs) - 208usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user {
    pub regs: user_regs_struct,
    pub u_fpvalid: ::std::os::raw::c_int,
    pub pad0: ::std::os::raw::c_int,
    pub i387: user_i387_struct,
    pub u_tsize: ::std::os::raw::c_ulong,
    pub u_dsize: ::std::os::raw::c_ulong,
    pub u_ssize: ::std::os::raw::c_ulong,
    pub start_code: ::std::os::raw::c_ulong,
    pub start_stack: ::std::os::raw::c_ulong,
    pub signal: ::std::os::raw::c_long,
    pub reserved: ::std::os::raw::c_int,
    pub pad1: ::std::os::raw::c_int,
    pub u_ar0: ::std::os::raw::c_ulong,
    pub u_fpstate: *mut user_i387_struct,
    pub magic: ::std::os::raw::c_ulong,
    pub u_comm: [::std::os::raw::c_char; 32usize],
    pub u_debugreg: [::std::os::raw::c_ulong; 8usize],
    pub error_code: ::std::os::raw::c_ulong,
    pub fault_address: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user"][::std::mem::size_of::<user>() - 928usize];
    ["Alignment of user"][::std::mem::align_of::<user>() - 8usize];
    ["Offset of field: user::regs"][::std::mem::offset_of!(user, regs) - 0usize];
    ["Offset of field: user::u_fpvalid"][::std::mem::offset_of!(user, u_fpvalid) - 216usize];
    ["Offset of field: user::pad0"][::std::mem::offset_of!(user, pad0) - 220usize];
    ["Offset of field: user::i387"][::std::mem::offset_of!(user, i387) - 224usize];
    ["Offset of field: user::u_tsize"][::std::mem::offset_of!(user, u_tsize) - 736usize];
    ["Offset of field: user::u_dsize"][::std::mem::offset_of!(user, u_dsize) - 744usize];
    ["Offset of field: user::u_ssize"][::std::mem::offset_of!(user, u_ssize) - 752usize];
    ["Offset of field: user::start_code"][::std::mem::offset_of!(user, start_code) - 760usize];
    ["Offset of field: user::start_stack"][::std::mem::offset_of!(user, start_stack) - 768usize];
    ["Offset of field: user::signal"][::std::mem::offset_of!(user, signal) - 776usize];
    ["Offset of field: user::reserved"][::std::mem::offset_of!(user, reserved) - 784usize];
    ["Offset of field: user::pad1"][::std::mem::offset_of!(user, pad1) - 788usize];
    ["Offset of field: user::u_ar0"][::std::mem::offset_of!(user, u_ar0) - 792usize];
    ["Offset of field: user::u_fpstate"][::std::mem::offset_of!(user, u_fpstate) - 800usize];
    ["Offset of field: user::magic"][::std::mem::offset_of!(user, magic) - 808usize];
    ["Offset of field: user::u_comm"][::std::mem::offset_of!(user, u_comm) - 816usize];
    ["Offset of field: user::u_debugreg"][::std::mem::offset_of!(user, u_debugreg) - 848usize];
    ["Offset of field: user::error_code"][::std::mem::offset_of!(user, error_code) - 912usize];
    ["Offset of field: user::fault_address"]
        [::std::mem::offset_of!(user, fault_address) - 920usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_ymmh_regs {
    pub ymmh_space: [__u32; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_ymmh_regs"][::std::mem::size_of::<user_ymmh_regs>() - 256usize];
    ["Alignment of user_ymmh_regs"][::std::mem::align_of::<user_ymmh_regs>() - 4usize];
    ["Offset of field: user_ymmh_regs::ymmh_space"]
        [::std::mem::offset_of!(user_ymmh_regs, ymmh_space) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_xstate_header {
    pub xfeatures: __u64,
    pub reserved1: [__u64; 2usize],
    pub reserved2: [__u64; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_xstate_header"][::std::mem::size_of::<user_xstate_header>() - 64usize];
    ["Alignment of user_xstate_header"][::std::mem::align_of::<user_xstate_header>() - 8usize];
    ["Offset of field: user_xstate_header::xfeatures"]
        [::std::mem::offset_of!(user_xstate_header, xfeatures) - 0usize];
    ["Offset of field: user_xstate_header::reserved1"]
        [::std::mem::offset_of!(user_xstate_header, reserved1) - 8usize];
    ["Offset of field: user_xstate_header::reserved2"]
        [::std::mem::offset_of!(user_xstate_header, reserved2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_xstateregs {
    pub i387: user_xstateregs__bindgen_ty_1,
    pub header: user_xstate_header,
    pub ymmh: user_ymmh_regs,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_xstateregs__bindgen_ty_1 {
    pub fpx_space: [__u64; 58usize],
    pub xstate_fx_sw: [__u64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_xstateregs__bindgen_ty_1"]
        [::std::mem::size_of::<user_xstateregs__bindgen_ty_1>() - 512usize];
    ["Alignment of user_xstateregs__bindgen_ty_1"]
        [::std::mem::align_of::<user_xstateregs__bindgen_ty_1>() - 8usize];
    ["Offset of field: user_xstateregs__bindgen_ty_1::fpx_space"]
        [::std::mem::offset_of!(user_xstateregs__bindgen_ty_1, fpx_space) - 0usize];
    ["Offset of field: user_xstateregs__bindgen_ty_1::xstate_fx_sw"]
        [::std::mem::offset_of!(user_xstateregs__bindgen_ty_1, xstate_fx_sw) - 464usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_xstateregs"][::std::mem::size_of::<user_xstateregs>() - 832usize];
    ["Alignment of user_xstateregs"][::std::mem::align_of::<user_xstateregs>() - 8usize];
    ["Offset of field: user_xstateregs::i387"]
        [::std::mem::offset_of!(user_xstateregs, i387) - 0usize];
    ["Offset of field: user_xstateregs::header"]
        [::std::mem::offset_of!(user_xstateregs, header) - 512usize];
    ["Offset of field: user_xstateregs::ymmh"]
        [::std::mem::offset_of!(user_xstateregs, ymmh) - 576usize];
};
extern "C" {
    pub fn x86_fsbase_read_task(task: *mut task_struct) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn x86_gsbase_read_task(task: *mut task_struct) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn x86_fsbase_write_task(task: *mut task_struct, fsbase: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn x86_gsbase_write_task(task: *mut task_struct, gsbase: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn x86_gsbase_read_cpu_inactive() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn x86_gsbase_write_cpu_inactive(gsbase: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn x86_fsgsbase_read_task(
        task: *mut task_struct,
        selector: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ulong;
}
pub type elf_greg_t = ::std::os::raw::c_ulong;
pub type elf_gregset_t = [elf_greg_t; 27usize];
pub type elf_fpregset_t = user_i387_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vdso_image {
    pub data: *mut ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_ulong,
    pub alt: ::std::os::raw::c_ulong,
    pub alt_len: ::std::os::raw::c_ulong,
    pub extable_base: ::std::os::raw::c_ulong,
    pub extable_len: ::std::os::raw::c_ulong,
    pub extable: *const ::std::os::raw::c_void,
    pub sym_vvar_start: ::std::os::raw::c_long,
    pub sym_vvar_page: ::std::os::raw::c_long,
    pub sym_pvclock_page: ::std::os::raw::c_long,
    pub sym_hvclock_page: ::std::os::raw::c_long,
    pub sym_timens_page: ::std::os::raw::c_long,
    pub sym_VDSO32_NOTE_MASK: ::std::os::raw::c_long,
    pub sym___kernel_sigreturn: ::std::os::raw::c_long,
    pub sym___kernel_rt_sigreturn: ::std::os::raw::c_long,
    pub sym___kernel_vsyscall: ::std::os::raw::c_long,
    pub sym_int80_landing_pad: ::std::os::raw::c_long,
    pub sym_vdso32_sigreturn_landing_pad: ::std::os::raw::c_long,
    pub sym_vdso32_rt_sigreturn_landing_pad: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vdso_image"][::std::mem::size_of::<vdso_image>() - 152usize];
    ["Alignment of vdso_image"][::std::mem::align_of::<vdso_image>() - 8usize];
    ["Offset of field: vdso_image::data"][::std::mem::offset_of!(vdso_image, data) - 0usize];
    ["Offset of field: vdso_image::size"][::std::mem::offset_of!(vdso_image, size) - 8usize];
    ["Offset of field: vdso_image::alt"][::std::mem::offset_of!(vdso_image, alt) - 16usize];
    ["Offset of field: vdso_image::alt_len"][::std::mem::offset_of!(vdso_image, alt_len) - 24usize];
    ["Offset of field: vdso_image::extable_base"]
        [::std::mem::offset_of!(vdso_image, extable_base) - 32usize];
    ["Offset of field: vdso_image::extable_len"]
        [::std::mem::offset_of!(vdso_image, extable_len) - 40usize];
    ["Offset of field: vdso_image::extable"][::std::mem::offset_of!(vdso_image, extable) - 48usize];
    ["Offset of field: vdso_image::sym_vvar_start"]
        [::std::mem::offset_of!(vdso_image, sym_vvar_start) - 56usize];
    ["Offset of field: vdso_image::sym_vvar_page"]
        [::std::mem::offset_of!(vdso_image, sym_vvar_page) - 64usize];
    ["Offset of field: vdso_image::sym_pvclock_page"]
        [::std::mem::offset_of!(vdso_image, sym_pvclock_page) - 72usize];
    ["Offset of field: vdso_image::sym_hvclock_page"]
        [::std::mem::offset_of!(vdso_image, sym_hvclock_page) - 80usize];
    ["Offset of field: vdso_image::sym_timens_page"]
        [::std::mem::offset_of!(vdso_image, sym_timens_page) - 88usize];
    ["Offset of field: vdso_image::sym_VDSO32_NOTE_MASK"]
        [::std::mem::offset_of!(vdso_image, sym_VDSO32_NOTE_MASK) - 96usize];
    ["Offset of field: vdso_image::sym___kernel_sigreturn"]
        [::std::mem::offset_of!(vdso_image, sym___kernel_sigreturn) - 104usize];
    ["Offset of field: vdso_image::sym___kernel_rt_sigreturn"]
        [::std::mem::offset_of!(vdso_image, sym___kernel_rt_sigreturn) - 112usize];
    ["Offset of field: vdso_image::sym___kernel_vsyscall"]
        [::std::mem::offset_of!(vdso_image, sym___kernel_vsyscall) - 120usize];
    ["Offset of field: vdso_image::sym_int80_landing_pad"]
        [::std::mem::offset_of!(vdso_image, sym_int80_landing_pad) - 128usize];
    ["Offset of field: vdso_image::sym_vdso32_sigreturn_landing_pad"]
        [::std::mem::offset_of!(vdso_image, sym_vdso32_sigreturn_landing_pad) - 136usize];
    ["Offset of field: vdso_image::sym_vdso32_rt_sigreturn_landing_pad"]
        [::std::mem::offset_of!(vdso_image, sym_vdso32_rt_sigreturn_landing_pad) - 144usize];
};
extern "C" {
    pub static vdso_image_64: vdso_image;
}
extern "C" {
    pub static vdso_image_32: vdso_image;
}
extern "C" {
    pub fn init_vdso_image(image: *const vdso_image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn map_vdso_once(
        image: *const vdso_image,
        addr: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fixup_vdso_exception(
        regs: *mut pt_regs,
        trapnr: ::std::os::raw::c_int,
        error_code: ::std::os::raw::c_ulong,
        fault_addr: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub static mut vdso64_enabled: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut vdso32_enabled: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn compat_start_thread(regs: *mut pt_regs, new_ip: u32_, new_sp: u32_, x32: bool_);
}
extern "C" {
    pub fn set_personality_ia32(arg1: bool_);
}
extern "C" {
    pub fn set_personality_64bit();
}
extern "C" {
    pub static mut force_personality32: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut elf_hwcap2: u32_;
}
extern "C" {
    pub fn task_size_32bit() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn task_size_64bit(full_addr_space: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_mmap_base(is_legacy: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mmap_address_hint_valid(
        addr: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn get_sigframe_size() -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linux_binprm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn arch_setup_additional_pages(
        bprm: *mut linux_binprm,
        uses_interp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compat_arch_setup_additional_pages(
        bprm: *mut linux_binprm,
        uses_interp: ::std::os::raw::c_int,
        x32: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arch_syscall_is_vdso_sigreturn(regs: *mut pt_regs) -> bool_;
}
pub const align_flags_ALIGN_VA_32: align_flags = 1;
pub const align_flags_ALIGN_VA_64: align_flags = 2;
pub type align_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct va_alignment {
    pub flags: ::std::os::raw::c_int,
    pub mask: ::std::os::raw::c_ulong,
    pub bits: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of va_alignment"][::std::mem::size_of::<va_alignment>() - 64usize];
    ["Alignment of va_alignment"][::std::mem::align_of::<va_alignment>() - 64usize];
    ["Offset of field: va_alignment::flags"][::std::mem::offset_of!(va_alignment, flags) - 0usize];
    ["Offset of field: va_alignment::mask"][::std::mem::offset_of!(va_alignment, mask) - 8usize];
    ["Offset of field: va_alignment::bits"][::std::mem::offset_of!(va_alignment, bits) - 16usize];
};
extern "C" {
    pub static mut va_align: va_alignment;
}
pub type Elf32_Addr = __u32;
pub type Elf32_Half = __u16;
pub type Elf32_Off = __u32;
pub type Elf32_Sword = __s32;
pub type Elf32_Word = __u32;
pub type Elf64_Addr = __u64;
pub type Elf64_Half = __u16;
pub type Elf64_SHalf = __s16;
pub type Elf64_Off = __u64;
pub type Elf64_Sword = __s32;
pub type Elf64_Word = __u32;
pub type Elf64_Xword = __u64;
pub type Elf64_Sxword = __s64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Elf32_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_Dyn__bindgen_ty_1 {
    pub d_val: Elf32_Sword,
    pub d_ptr: Elf32_Addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Elf32_Dyn__bindgen_ty_1"][::std::mem::size_of::<Elf32_Dyn__bindgen_ty_1>() - 4usize];
    ["Alignment of Elf32_Dyn__bindgen_ty_1"]
        [::std::mem::align_of::<Elf32_Dyn__bindgen_ty_1>() - 4usize];
    ["Offset of field: Elf32_Dyn__bindgen_ty_1::d_val"]
        [::std::mem::offset_of!(Elf32_Dyn__bindgen_ty_1, d_val) - 0usize];
    ["Offset of field: Elf32_Dyn__bindgen_ty_1::d_ptr"]
        [::std::mem::offset_of!(Elf32_Dyn__bindgen_ty_1, d_ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Elf32_Dyn"][::std::mem::size_of::<Elf32_Dyn>() - 8usize];
    ["Alignment of Elf32_Dyn"][::std::mem::align_of::<Elf32_Dyn>() - 4usize];
    ["Offset of field: Elf32_Dyn::d_tag"][::std::mem::offset_of!(Elf32_Dyn, d_tag) - 0usize];
    ["Offset of field: Elf32_Dyn::d_un"][::std::mem::offset_of!(Elf32_Dyn, d_un) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Elf64_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf64_Dyn__bindgen_ty_1 {
    pub d_val: Elf64_Xword,
    pub d_ptr: Elf64_Addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Elf64_Dyn__bindgen_ty_1"][::std::mem::size_of::<Elf64_Dyn__bindgen_ty_1>() - 8usize];
    ["Alignment of Elf64_Dyn__bindgen_ty_1"]
        [::std::mem::align_of::<Elf64_Dyn__bindgen_ty_1>() - 8usize];
    ["Offset of field: Elf64_Dyn__bindgen_ty_1::d_val"]
        [::std::mem::offset_of!(Elf64_Dyn__bindgen_ty_1, d_val) - 0usize];
    ["Offset of field: Elf64_Dyn__bindgen_ty_1::d_ptr"]
        [::std::mem::offset_of!(Elf64_Dyn__bindgen_ty_1, d_ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Elf64_Dyn"][::std::mem::size_of::<Elf64_Dyn>() - 16usize];
    ["Alignment of Elf64_Dyn"][::std::mem::align_of::<Elf64_Dyn>() - 8usize];
    ["Offset of field: Elf64_Dyn::d_tag"][::std::mem::offset_of!(Elf64_Dyn, d_tag) - 0usize];
    ["Offset of field: Elf64_Dyn::d_un"][::std::mem::offset_of!(Elf64_Dyn, d_un) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf32_rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf32_rel"][::std::mem::size_of::<elf32_rel>() - 8usize];
    ["Alignment of elf32_rel"][::std::mem::align_of::<elf32_rel>() - 4usize];
    ["Offset of field: elf32_rel::r_offset"][::std::mem::offset_of!(elf32_rel, r_offset) - 0usize];
    ["Offset of field: elf32_rel::r_info"][::std::mem::offset_of!(elf32_rel, r_info) - 4usize];
};
pub type Elf32_Rel = elf32_rel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf64_rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_rel"][::std::mem::size_of::<elf64_rel>() - 16usize];
    ["Alignment of elf64_rel"][::std::mem::align_of::<elf64_rel>() - 8usize];
    ["Offset of field: elf64_rel::r_offset"][::std::mem::offset_of!(elf64_rel, r_offset) - 0usize];
    ["Offset of field: elf64_rel::r_info"][::std::mem::offset_of!(elf64_rel, r_info) - 8usize];
};
pub type Elf64_Rel = elf64_rel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf32_rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf32_rela"][::std::mem::size_of::<elf32_rela>() - 12usize];
    ["Alignment of elf32_rela"][::std::mem::align_of::<elf32_rela>() - 4usize];
    ["Offset of field: elf32_rela::r_offset"]
        [::std::mem::offset_of!(elf32_rela, r_offset) - 0usize];
    ["Offset of field: elf32_rela::r_info"][::std::mem::offset_of!(elf32_rela, r_info) - 4usize];
    ["Offset of field: elf32_rela::r_addend"]
        [::std::mem::offset_of!(elf32_rela, r_addend) - 8usize];
};
pub type Elf32_Rela = elf32_rela;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf64_rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_rela"][::std::mem::size_of::<elf64_rela>() - 24usize];
    ["Alignment of elf64_rela"][::std::mem::align_of::<elf64_rela>() - 8usize];
    ["Offset of field: elf64_rela::r_offset"]
        [::std::mem::offset_of!(elf64_rela, r_offset) - 0usize];
    ["Offset of field: elf64_rela::r_info"][::std::mem::offset_of!(elf64_rela, r_info) - 8usize];
    ["Offset of field: elf64_rela::r_addend"]
        [::std::mem::offset_of!(elf64_rela, r_addend) - 16usize];
};
pub type Elf64_Rela = elf64_rela;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf32_sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf32_Half,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf32_sym"][::std::mem::size_of::<elf32_sym>() - 16usize];
    ["Alignment of elf32_sym"][::std::mem::align_of::<elf32_sym>() - 4usize];
    ["Offset of field: elf32_sym::st_name"][::std::mem::offset_of!(elf32_sym, st_name) - 0usize];
    ["Offset of field: elf32_sym::st_value"][::std::mem::offset_of!(elf32_sym, st_value) - 4usize];
    ["Offset of field: elf32_sym::st_size"][::std::mem::offset_of!(elf32_sym, st_size) - 8usize];
    ["Offset of field: elf32_sym::st_info"][::std::mem::offset_of!(elf32_sym, st_info) - 12usize];
    ["Offset of field: elf32_sym::st_other"][::std::mem::offset_of!(elf32_sym, st_other) - 13usize];
    ["Offset of field: elf32_sym::st_shndx"][::std::mem::offset_of!(elf32_sym, st_shndx) - 14usize];
};
pub type Elf32_Sym = elf32_sym;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf64_sym {
    pub st_name: Elf64_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf64_Half,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_sym"][::std::mem::size_of::<elf64_sym>() - 24usize];
    ["Alignment of elf64_sym"][::std::mem::align_of::<elf64_sym>() - 8usize];
    ["Offset of field: elf64_sym::st_name"][::std::mem::offset_of!(elf64_sym, st_name) - 0usize];
    ["Offset of field: elf64_sym::st_info"][::std::mem::offset_of!(elf64_sym, st_info) - 4usize];
    ["Offset of field: elf64_sym::st_other"][::std::mem::offset_of!(elf64_sym, st_other) - 5usize];
    ["Offset of field: elf64_sym::st_shndx"][::std::mem::offset_of!(elf64_sym, st_shndx) - 6usize];
    ["Offset of field: elf64_sym::st_value"][::std::mem::offset_of!(elf64_sym, st_value) - 8usize];
    ["Offset of field: elf64_sym::st_size"][::std::mem::offset_of!(elf64_sym, st_size) - 16usize];
};
pub type Elf64_Sym = elf64_sym;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf32_hdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf32_hdr"][::std::mem::size_of::<elf32_hdr>() - 52usize];
    ["Alignment of elf32_hdr"][::std::mem::align_of::<elf32_hdr>() - 4usize];
    ["Offset of field: elf32_hdr::e_ident"][::std::mem::offset_of!(elf32_hdr, e_ident) - 0usize];
    ["Offset of field: elf32_hdr::e_type"][::std::mem::offset_of!(elf32_hdr, e_type) - 16usize];
    ["Offset of field: elf32_hdr::e_machine"]
        [::std::mem::offset_of!(elf32_hdr, e_machine) - 18usize];
    ["Offset of field: elf32_hdr::e_version"]
        [::std::mem::offset_of!(elf32_hdr, e_version) - 20usize];
    ["Offset of field: elf32_hdr::e_entry"][::std::mem::offset_of!(elf32_hdr, e_entry) - 24usize];
    ["Offset of field: elf32_hdr::e_phoff"][::std::mem::offset_of!(elf32_hdr, e_phoff) - 28usize];
    ["Offset of field: elf32_hdr::e_shoff"][::std::mem::offset_of!(elf32_hdr, e_shoff) - 32usize];
    ["Offset of field: elf32_hdr::e_flags"][::std::mem::offset_of!(elf32_hdr, e_flags) - 36usize];
    ["Offset of field: elf32_hdr::e_ehsize"][::std::mem::offset_of!(elf32_hdr, e_ehsize) - 40usize];
    ["Offset of field: elf32_hdr::e_phentsize"]
        [::std::mem::offset_of!(elf32_hdr, e_phentsize) - 42usize];
    ["Offset of field: elf32_hdr::e_phnum"][::std::mem::offset_of!(elf32_hdr, e_phnum) - 44usize];
    ["Offset of field: elf32_hdr::e_shentsize"]
        [::std::mem::offset_of!(elf32_hdr, e_shentsize) - 46usize];
    ["Offset of field: elf32_hdr::e_shnum"][::std::mem::offset_of!(elf32_hdr, e_shnum) - 48usize];
    ["Offset of field: elf32_hdr::e_shstrndx"]
        [::std::mem::offset_of!(elf32_hdr, e_shstrndx) - 50usize];
};
pub type Elf32_Ehdr = elf32_hdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf64_hdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_hdr"][::std::mem::size_of::<elf64_hdr>() - 64usize];
    ["Alignment of elf64_hdr"][::std::mem::align_of::<elf64_hdr>() - 8usize];
    ["Offset of field: elf64_hdr::e_ident"][::std::mem::offset_of!(elf64_hdr, e_ident) - 0usize];
    ["Offset of field: elf64_hdr::e_type"][::std::mem::offset_of!(elf64_hdr, e_type) - 16usize];
    ["Offset of field: elf64_hdr::e_machine"]
        [::std::mem::offset_of!(elf64_hdr, e_machine) - 18usize];
    ["Offset of field: elf64_hdr::e_version"]
        [::std::mem::offset_of!(elf64_hdr, e_version) - 20usize];
    ["Offset of field: elf64_hdr::e_entry"][::std::mem::offset_of!(elf64_hdr, e_entry) - 24usize];
    ["Offset of field: elf64_hdr::e_phoff"][::std::mem::offset_of!(elf64_hdr, e_phoff) - 32usize];
    ["Offset of field: elf64_hdr::e_shoff"][::std::mem::offset_of!(elf64_hdr, e_shoff) - 40usize];
    ["Offset of field: elf64_hdr::e_flags"][::std::mem::offset_of!(elf64_hdr, e_flags) - 48usize];
    ["Offset of field: elf64_hdr::e_ehsize"][::std::mem::offset_of!(elf64_hdr, e_ehsize) - 52usize];
    ["Offset of field: elf64_hdr::e_phentsize"]
        [::std::mem::offset_of!(elf64_hdr, e_phentsize) - 54usize];
    ["Offset of field: elf64_hdr::e_phnum"][::std::mem::offset_of!(elf64_hdr, e_phnum) - 56usize];
    ["Offset of field: elf64_hdr::e_shentsize"]
        [::std::mem::offset_of!(elf64_hdr, e_shentsize) - 58usize];
    ["Offset of field: elf64_hdr::e_shnum"][::std::mem::offset_of!(elf64_hdr, e_shnum) - 60usize];
    ["Offset of field: elf64_hdr::e_shstrndx"]
        [::std::mem::offset_of!(elf64_hdr, e_shstrndx) - 62usize];
};
pub type Elf64_Ehdr = elf64_hdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf32_phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf32_phdr"][::std::mem::size_of::<elf32_phdr>() - 32usize];
    ["Alignment of elf32_phdr"][::std::mem::align_of::<elf32_phdr>() - 4usize];
    ["Offset of field: elf32_phdr::p_type"][::std::mem::offset_of!(elf32_phdr, p_type) - 0usize];
    ["Offset of field: elf32_phdr::p_offset"]
        [::std::mem::offset_of!(elf32_phdr, p_offset) - 4usize];
    ["Offset of field: elf32_phdr::p_vaddr"][::std::mem::offset_of!(elf32_phdr, p_vaddr) - 8usize];
    ["Offset of field: elf32_phdr::p_paddr"][::std::mem::offset_of!(elf32_phdr, p_paddr) - 12usize];
    ["Offset of field: elf32_phdr::p_filesz"]
        [::std::mem::offset_of!(elf32_phdr, p_filesz) - 16usize];
    ["Offset of field: elf32_phdr::p_memsz"][::std::mem::offset_of!(elf32_phdr, p_memsz) - 20usize];
    ["Offset of field: elf32_phdr::p_flags"][::std::mem::offset_of!(elf32_phdr, p_flags) - 24usize];
    ["Offset of field: elf32_phdr::p_align"][::std::mem::offset_of!(elf32_phdr, p_align) - 28usize];
};
pub type Elf32_Phdr = elf32_phdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf64_phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_phdr"][::std::mem::size_of::<elf64_phdr>() - 56usize];
    ["Alignment of elf64_phdr"][::std::mem::align_of::<elf64_phdr>() - 8usize];
    ["Offset of field: elf64_phdr::p_type"][::std::mem::offset_of!(elf64_phdr, p_type) - 0usize];
    ["Offset of field: elf64_phdr::p_flags"][::std::mem::offset_of!(elf64_phdr, p_flags) - 4usize];
    ["Offset of field: elf64_phdr::p_offset"]
        [::std::mem::offset_of!(elf64_phdr, p_offset) - 8usize];
    ["Offset of field: elf64_phdr::p_vaddr"][::std::mem::offset_of!(elf64_phdr, p_vaddr) - 16usize];
    ["Offset of field: elf64_phdr::p_paddr"][::std::mem::offset_of!(elf64_phdr, p_paddr) - 24usize];
    ["Offset of field: elf64_phdr::p_filesz"]
        [::std::mem::offset_of!(elf64_phdr, p_filesz) - 32usize];
    ["Offset of field: elf64_phdr::p_memsz"][::std::mem::offset_of!(elf64_phdr, p_memsz) - 40usize];
    ["Offset of field: elf64_phdr::p_align"][::std::mem::offset_of!(elf64_phdr, p_align) - 48usize];
};
pub type Elf64_Phdr = elf64_phdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf32_shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf32_shdr"][::std::mem::size_of::<elf32_shdr>() - 40usize];
    ["Alignment of elf32_shdr"][::std::mem::align_of::<elf32_shdr>() - 4usize];
    ["Offset of field: elf32_shdr::sh_name"][::std::mem::offset_of!(elf32_shdr, sh_name) - 0usize];
    ["Offset of field: elf32_shdr::sh_type"][::std::mem::offset_of!(elf32_shdr, sh_type) - 4usize];
    ["Offset of field: elf32_shdr::sh_flags"]
        [::std::mem::offset_of!(elf32_shdr, sh_flags) - 8usize];
    ["Offset of field: elf32_shdr::sh_addr"][::std::mem::offset_of!(elf32_shdr, sh_addr) - 12usize];
    ["Offset of field: elf32_shdr::sh_offset"]
        [::std::mem::offset_of!(elf32_shdr, sh_offset) - 16usize];
    ["Offset of field: elf32_shdr::sh_size"][::std::mem::offset_of!(elf32_shdr, sh_size) - 20usize];
    ["Offset of field: elf32_shdr::sh_link"][::std::mem::offset_of!(elf32_shdr, sh_link) - 24usize];
    ["Offset of field: elf32_shdr::sh_info"][::std::mem::offset_of!(elf32_shdr, sh_info) - 28usize];
    ["Offset of field: elf32_shdr::sh_addralign"]
        [::std::mem::offset_of!(elf32_shdr, sh_addralign) - 32usize];
    ["Offset of field: elf32_shdr::sh_entsize"]
        [::std::mem::offset_of!(elf32_shdr, sh_entsize) - 36usize];
};
pub type Elf32_Shdr = elf32_shdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf64_shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_shdr"][::std::mem::size_of::<elf64_shdr>() - 64usize];
    ["Alignment of elf64_shdr"][::std::mem::align_of::<elf64_shdr>() - 8usize];
    ["Offset of field: elf64_shdr::sh_name"][::std::mem::offset_of!(elf64_shdr, sh_name) - 0usize];
    ["Offset of field: elf64_shdr::sh_type"][::std::mem::offset_of!(elf64_shdr, sh_type) - 4usize];
    ["Offset of field: elf64_shdr::sh_flags"]
        [::std::mem::offset_of!(elf64_shdr, sh_flags) - 8usize];
    ["Offset of field: elf64_shdr::sh_addr"][::std::mem::offset_of!(elf64_shdr, sh_addr) - 16usize];
    ["Offset of field: elf64_shdr::sh_offset"]
        [::std::mem::offset_of!(elf64_shdr, sh_offset) - 24usize];
    ["Offset of field: elf64_shdr::sh_size"][::std::mem::offset_of!(elf64_shdr, sh_size) - 32usize];
    ["Offset of field: elf64_shdr::sh_link"][::std::mem::offset_of!(elf64_shdr, sh_link) - 40usize];
    ["Offset of field: elf64_shdr::sh_info"][::std::mem::offset_of!(elf64_shdr, sh_info) - 44usize];
    ["Offset of field: elf64_shdr::sh_addralign"]
        [::std::mem::offset_of!(elf64_shdr, sh_addralign) - 48usize];
    ["Offset of field: elf64_shdr::sh_entsize"]
        [::std::mem::offset_of!(elf64_shdr, sh_entsize) - 56usize];
};
pub type Elf64_Shdr = elf64_shdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf32_note {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf32_note"][::std::mem::size_of::<elf32_note>() - 12usize];
    ["Alignment of elf32_note"][::std::mem::align_of::<elf32_note>() - 4usize];
    ["Offset of field: elf32_note::n_namesz"]
        [::std::mem::offset_of!(elf32_note, n_namesz) - 0usize];
    ["Offset of field: elf32_note::n_descsz"]
        [::std::mem::offset_of!(elf32_note, n_descsz) - 4usize];
    ["Offset of field: elf32_note::n_type"][::std::mem::offset_of!(elf32_note, n_type) - 8usize];
};
pub type Elf32_Nhdr = elf32_note;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf64_note {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_note"][::std::mem::size_of::<elf64_note>() - 12usize];
    ["Alignment of elf64_note"][::std::mem::align_of::<elf64_note>() - 4usize];
    ["Offset of field: elf64_note::n_namesz"]
        [::std::mem::offset_of!(elf64_note, n_namesz) - 0usize];
    ["Offset of field: elf64_note::n_descsz"]
        [::std::mem::offset_of!(elf64_note, n_descsz) - 4usize];
    ["Offset of field: elf64_note::n_type"][::std::mem::offset_of!(elf64_note, n_type) - 8usize];
};
pub type Elf64_Nhdr = elf64_note;
extern "C" {
    pub static mut _DYNAMIC: [Elf64_Dyn; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct coredump_params {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnu_property {
    pub pr_type: u32_,
    pub pr_datasz: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnu_property"][::std::mem::size_of::<gnu_property>() - 8usize];
    ["Alignment of gnu_property"][::std::mem::align_of::<gnu_property>() - 4usize];
    ["Offset of field: gnu_property::pr_type"]
        [::std::mem::offset_of!(gnu_property, pr_type) - 0usize];
    ["Offset of field: gnu_property::pr_datasz"]
        [::std::mem::offset_of!(gnu_property, pr_datasz) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_elf_state {
    _unused: [u8; 0],
}
pub const KERNEL_PARAM_OPS_FL_NOARG: _bindgen_ty_102 = 1;
pub type _bindgen_ty_102 = ::std::os::raw::c_uint;
pub const KERNEL_PARAM_FL_UNSAFE: _bindgen_ty_103 = 1;
pub const KERNEL_PARAM_FL_HWPARAM: _bindgen_ty_103 = 2;
pub type _bindgen_ty_103 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_param {
    pub name: *const ::std::os::raw::c_char,
    pub mod_: *mut module,
    pub ops: *const kernel_param_ops,
    pub perm: u16_,
    pub level: s8,
    pub flags: u8_,
    pub __bindgen_anon_1: kernel_param__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernel_param__bindgen_ty_1 {
    pub arg: *mut ::std::os::raw::c_void,
    pub str_: *const kparam_string,
    pub arr: *const kparam_array,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_param__bindgen_ty_1"]
        [::std::mem::size_of::<kernel_param__bindgen_ty_1>() - 8usize];
    ["Alignment of kernel_param__bindgen_ty_1"]
        [::std::mem::align_of::<kernel_param__bindgen_ty_1>() - 8usize];
    ["Offset of field: kernel_param__bindgen_ty_1::arg"]
        [::std::mem::offset_of!(kernel_param__bindgen_ty_1, arg) - 0usize];
    ["Offset of field: kernel_param__bindgen_ty_1::str_"]
        [::std::mem::offset_of!(kernel_param__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: kernel_param__bindgen_ty_1::arr"]
        [::std::mem::offset_of!(kernel_param__bindgen_ty_1, arr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_param"][::std::mem::size_of::<kernel_param>() - 40usize];
    ["Alignment of kernel_param"][::std::mem::align_of::<kernel_param>() - 8usize];
    ["Offset of field: kernel_param::name"][::std::mem::offset_of!(kernel_param, name) - 0usize];
    ["Offset of field: kernel_param::mod_"][::std::mem::offset_of!(kernel_param, mod_) - 8usize];
    ["Offset of field: kernel_param::ops"][::std::mem::offset_of!(kernel_param, ops) - 16usize];
    ["Offset of field: kernel_param::perm"][::std::mem::offset_of!(kernel_param, perm) - 24usize];
    ["Offset of field: kernel_param::level"][::std::mem::offset_of!(kernel_param, level) - 26usize];
    ["Offset of field: kernel_param::flags"][::std::mem::offset_of!(kernel_param, flags) - 27usize];
};
extern "C" {
    pub static __start___param: [kernel_param; 0usize];
}
extern "C" {
    pub static __stop___param: [kernel_param; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kparam_string {
    pub maxlen: ::std::os::raw::c_uint,
    pub string: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kparam_string"][::std::mem::size_of::<kparam_string>() - 16usize];
    ["Alignment of kparam_string"][::std::mem::align_of::<kparam_string>() - 8usize];
    ["Offset of field: kparam_string::maxlen"]
        [::std::mem::offset_of!(kparam_string, maxlen) - 0usize];
    ["Offset of field: kparam_string::string"]
        [::std::mem::offset_of!(kparam_string, string) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kparam_array {
    pub max: ::std::os::raw::c_uint,
    pub elemsize: ::std::os::raw::c_uint,
    pub num: *mut ::std::os::raw::c_uint,
    pub ops: *const kernel_param_ops,
    pub elem: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kparam_array"][::std::mem::size_of::<kparam_array>() - 32usize];
    ["Alignment of kparam_array"][::std::mem::align_of::<kparam_array>() - 8usize];
    ["Offset of field: kparam_array::max"][::std::mem::offset_of!(kparam_array, max) - 0usize];
    ["Offset of field: kparam_array::elemsize"]
        [::std::mem::offset_of!(kparam_array, elemsize) - 4usize];
    ["Offset of field: kparam_array::num"][::std::mem::offset_of!(kparam_array, num) - 8usize];
    ["Offset of field: kparam_array::ops"][::std::mem::offset_of!(kparam_array, ops) - 16usize];
    ["Offset of field: kparam_array::elem"][::std::mem::offset_of!(kparam_array, elem) - 24usize];
};
extern "C" {
    pub fn kernel_param_lock(mod_: *mut module);
}
extern "C" {
    pub fn kernel_param_unlock(mod_: *mut module);
}
extern "C" {
    #[doc = " parameq - checks if two parameter names match\n @name1: parameter name 1\n @name2: parameter name 2\n\n Returns true if the two parameter names are equal.\n Dashes (-) are considered equal to underscores (_)."]
    pub fn parameq(
        name1: *const ::std::os::raw::c_char,
        name2: *const ::std::os::raw::c_char,
    ) -> bool_;
}
extern "C" {
    #[doc = " parameqn - checks if two parameter names match\n @name1: parameter name 1\n @name2: parameter name 2\n @n: the length to compare\n\n Similar to parameq(), except it compares @n characters."]
    pub fn parameqn(
        name1: *const ::std::os::raw::c_char,
        name2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> bool_;
}
pub type parse_unknown_fn = ::std::option::Option<
    unsafe extern "C" fn(
        param: *mut ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_char,
        doing: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn parse_args(
        name: *const ::std::os::raw::c_char,
        args: *mut ::std::os::raw::c_char,
        params: *const kernel_param,
        num: ::std::os::raw::c_uint,
        level_min: s16,
        level_max: s16,
        arg: *mut ::std::os::raw::c_void,
        unknown: parse_unknown_fn,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn destroy_params(params: *const kernel_param, num: ::std::os::raw::c_uint);
}
extern "C" {
    pub static param_ops_byte: kernel_param_ops;
}
extern "C" {
    pub fn param_set_byte(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_byte(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_short: kernel_param_ops;
}
extern "C" {
    pub fn param_set_short(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_short(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_ushort: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ushort(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_ushort(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_int: kernel_param_ops;
}
extern "C" {
    pub fn param_set_int(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_int(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_uint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_uint(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_uint(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_set_uint_minmax(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
        min: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_long: kernel_param_ops;
}
extern "C" {
    pub fn param_set_long(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_long(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_ulong: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ulong(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_ulong(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_ullong: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ullong(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_ullong(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_hexint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_hexint(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_hexint(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_charp: kernel_param_ops;
}
extern "C" {
    pub fn param_set_charp(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_charp(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_free_charp(arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub static param_ops_bool: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bool(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_bool(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_bool_enable_only: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bool_enable_only(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_invbool: kernel_param_ops;
}
extern "C" {
    pub fn param_set_invbool(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_invbool(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static param_ops_bint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bint(
        val: *const ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
pub const hwparam_type_hwparam_ioport: hwparam_type = 0;
pub const hwparam_type_hwparam_iomem: hwparam_type = 1;
pub const hwparam_type_hwparam_ioport_or_iomem: hwparam_type = 2;
pub const hwparam_type_hwparam_irq: hwparam_type = 3;
pub const hwparam_type_hwparam_dma: hwparam_type = 4;
pub const hwparam_type_hwparam_dma_addr: hwparam_type = 5;
pub const hwparam_type_hwparam_other: hwparam_type = 6;
pub type hwparam_type = ::std::os::raw::c_uint;
extern "C" {
    pub static param_array_ops: kernel_param_ops;
}
extern "C" {
    pub static param_ops_string: kernel_param_ops;
}
extern "C" {
    pub fn param_set_copystring(
        val: *const ::std::os::raw::c_char,
        arg1: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_get_string(
        buffer: *mut ::std::os::raw::c_char,
        kp: *const kernel_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_param_sysfs_setup(
        mod_: *mut module,
        kparam: *const kernel_param,
        num_params: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_param_sysfs_remove(mod_: *mut module);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latch_tree_node {
    pub node: [rb_node; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of latch_tree_node"][::std::mem::size_of::<latch_tree_node>() - 48usize];
    ["Alignment of latch_tree_node"][::std::mem::align_of::<latch_tree_node>() - 8usize];
    ["Offset of field: latch_tree_node::node"]
        [::std::mem::offset_of!(latch_tree_node, node) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latch_tree_root {
    pub seq: seqcount_latch_t,
    pub tree: [rb_root; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of latch_tree_root"][::std::mem::size_of::<latch_tree_root>() - 24usize];
    ["Alignment of latch_tree_root"][::std::mem::align_of::<latch_tree_root>() - 8usize];
    ["Offset of field: latch_tree_root::seq"]
        [::std::mem::offset_of!(latch_tree_root, seq) - 0usize];
    ["Offset of field: latch_tree_root::tree"]
        [::std::mem::offset_of!(latch_tree_root, tree) - 8usize];
};
#[doc = " latch_tree_ops - operators to define the tree order\n @less: used for insertion; provides the (partial) order between two elements.\n @comp: used for lookups; provides the order between the search key and an element.\n\n The operators are related like:\n\n\tcomp(a->key,b) < 0  := less(a,b)\n\tcomp(a->key,b) > 0  := less(b,a)\n\tcomp(a->key,b) == 0 := !less(a,b) && !less(b,a)\n\n If these operators define a partial order on the elements we make no\n guarantee on which of the elements matching the key is found. See\n latch_tree_find()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latch_tree_ops {
    pub less: ::std::option::Option<
        unsafe extern "C" fn(a: *mut latch_tree_node, b: *mut latch_tree_node) -> bool_,
    >,
    pub comp: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut ::std::os::raw::c_void,
            b: *mut latch_tree_node,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of latch_tree_ops"][::std::mem::size_of::<latch_tree_ops>() - 16usize];
    ["Alignment of latch_tree_ops"][::std::mem::align_of::<latch_tree_ops>() - 8usize];
    ["Offset of field: latch_tree_ops::less"]
        [::std::mem::offset_of!(latch_tree_ops, less) - 0usize];
    ["Offset of field: latch_tree_ops::comp"]
        [::std::mem::offset_of!(latch_tree_ops, comp) - 8usize];
};
pub const EI_ETYPE_NULL: _bindgen_ty_104 = 0;
pub const EI_ETYPE_ERRNO: _bindgen_ty_104 = 1;
pub const EI_ETYPE_ERRNO_NULL: _bindgen_ty_104 = 2;
pub const EI_ETYPE_TRUE: _bindgen_ty_104 = 3;
pub type _bindgen_ty_104 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct error_injection_entry {
    pub addr: ::std::os::raw::c_ulong,
    pub etype: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of error_injection_entry"][::std::mem::size_of::<error_injection_entry>() - 16usize];
    ["Alignment of error_injection_entry"]
        [::std::mem::align_of::<error_injection_entry>() - 8usize];
    ["Offset of field: error_injection_entry::addr"]
        [::std::mem::offset_of!(error_injection_entry, addr) - 0usize];
    ["Offset of field: error_injection_entry::etype"]
        [::std::mem::offset_of!(error_injection_entry, etype) - 8usize];
};
extern "C" {
    pub fn override_function_with_return(regs: *mut pt_regs);
}
extern "C" {
    pub fn within_error_injection_list(addr: ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn get_injectable_error_type(addr: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mod_arch_specific {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mod_arch_specific"][::std::mem::size_of::<mod_arch_specific>() - 0usize];
    ["Alignment of mod_arch_specific"][::std::mem::align_of::<mod_arch_specific>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modversion_info {
    pub crc: ::std::os::raw::c_ulong,
    pub name: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of modversion_info"][::std::mem::size_of::<modversion_info>() - 64usize];
    ["Alignment of modversion_info"][::std::mem::align_of::<modversion_info>() - 8usize];
    ["Offset of field: modversion_info::crc"]
        [::std::mem::offset_of!(modversion_info, crc) - 0usize];
    ["Offset of field: modversion_info::name"]
        [::std::mem::offset_of!(modversion_info, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_kobject {
    pub kobj: kobject,
    pub mod_: *mut module,
    pub drivers_dir: *mut kobject,
    pub mp: *mut module_param_attrs,
    pub kobj_completion: *mut completion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_kobject"][::std::mem::size_of::<module_kobject>() - 96usize];
    ["Alignment of module_kobject"][::std::mem::align_of::<module_kobject>() - 8usize];
    ["Offset of field: module_kobject::kobj"]
        [::std::mem::offset_of!(module_kobject, kobj) - 0usize];
    ["Offset of field: module_kobject::mod_"]
        [::std::mem::offset_of!(module_kobject, mod_) - 64usize];
    ["Offset of field: module_kobject::drivers_dir"]
        [::std::mem::offset_of!(module_kobject, drivers_dir) - 72usize];
    ["Offset of field: module_kobject::mp"][::std::mem::offset_of!(module_kobject, mp) - 80usize];
    ["Offset of field: module_kobject::kobj_completion"]
        [::std::mem::offset_of!(module_kobject, kobj_completion) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_attribute {
    pub attr: attribute,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *mut ::std::os::raw::c_char,
        ) -> isize,
    >,
    pub store: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *const ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
    pub setup: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut module, arg2: *const ::std::os::raw::c_char),
    >,
    pub test:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut module) -> ::std::os::raw::c_int>,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut module)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_attribute"][::std::mem::size_of::<module_attribute>() - 56usize];
    ["Alignment of module_attribute"][::std::mem::align_of::<module_attribute>() - 8usize];
    ["Offset of field: module_attribute::attr"]
        [::std::mem::offset_of!(module_attribute, attr) - 0usize];
    ["Offset of field: module_attribute::show"]
        [::std::mem::offset_of!(module_attribute, show) - 16usize];
    ["Offset of field: module_attribute::store"]
        [::std::mem::offset_of!(module_attribute, store) - 24usize];
    ["Offset of field: module_attribute::setup"]
        [::std::mem::offset_of!(module_attribute, setup) - 32usize];
    ["Offset of field: module_attribute::test"]
        [::std::mem::offset_of!(module_attribute, test) - 40usize];
    ["Offset of field: module_attribute::free"]
        [::std::mem::offset_of!(module_attribute, free) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_version_attribute {
    pub mattr: module_attribute,
    pub module_name: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_version_attribute"]
        [::std::mem::size_of::<module_version_attribute>() - 72usize];
    ["Alignment of module_version_attribute"]
        [::std::mem::align_of::<module_version_attribute>() - 8usize];
    ["Offset of field: module_version_attribute::mattr"]
        [::std::mem::offset_of!(module_version_attribute, mattr) - 0usize];
    ["Offset of field: module_version_attribute::module_name"]
        [::std::mem::offset_of!(module_version_attribute, module_name) - 56usize];
    ["Offset of field: module_version_attribute::version"]
        [::std::mem::offset_of!(module_version_attribute, version) - 64usize];
};
extern "C" {
    pub fn __modver_version_show(
        arg1: *mut module_attribute,
        arg2: *mut module_kobject,
        arg3: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub static mut module_uevent: module_attribute;
}
extern "C" {
    pub fn init_module() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cleanup_module();
}
extern "C" {
    pub static mut modules_disabled: ::std::os::raw::c_int;
}
extern "C" {
    pub fn __symbol_get(symbol: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __symbol_get_gpl(symbol: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_use {
    pub source_list: list_head,
    pub target_list: list_head,
    pub source: *mut module,
    pub target: *mut module,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_use"][::std::mem::size_of::<module_use>() - 48usize];
    ["Alignment of module_use"][::std::mem::align_of::<module_use>() - 8usize];
    ["Offset of field: module_use::source_list"]
        [::std::mem::offset_of!(module_use, source_list) - 0usize];
    ["Offset of field: module_use::target_list"]
        [::std::mem::offset_of!(module_use, target_list) - 16usize];
    ["Offset of field: module_use::source"][::std::mem::offset_of!(module_use, source) - 32usize];
    ["Offset of field: module_use::target"][::std::mem::offset_of!(module_use, target) - 40usize];
};
pub const module_state_MODULE_STATE_LIVE: module_state = 0;
pub const module_state_MODULE_STATE_COMING: module_state = 1;
pub const module_state_MODULE_STATE_GOING: module_state = 2;
pub const module_state_MODULE_STATE_UNFORMED: module_state = 3;
pub type module_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mod_tree_node {
    pub mod_: *mut module,
    pub node: latch_tree_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mod_tree_node"][::std::mem::size_of::<mod_tree_node>() - 56usize];
    ["Alignment of mod_tree_node"][::std::mem::align_of::<mod_tree_node>() - 8usize];
    ["Offset of field: mod_tree_node::mod_"][::std::mem::offset_of!(mod_tree_node, mod_) - 0usize];
    ["Offset of field: mod_tree_node::node"][::std::mem::offset_of!(mod_tree_node, node) - 8usize];
};
pub const mod_mem_type_MOD_TEXT: mod_mem_type = 0;
pub const mod_mem_type_MOD_DATA: mod_mem_type = 1;
pub const mod_mem_type_MOD_RODATA: mod_mem_type = 2;
pub const mod_mem_type_MOD_RO_AFTER_INIT: mod_mem_type = 3;
pub const mod_mem_type_MOD_INIT_TEXT: mod_mem_type = 4;
pub const mod_mem_type_MOD_INIT_DATA: mod_mem_type = 5;
pub const mod_mem_type_MOD_INIT_RODATA: mod_mem_type = 6;
pub const mod_mem_type_MOD_MEM_NUM_TYPES: mod_mem_type = 7;
pub const mod_mem_type_MOD_INVALID: mod_mem_type = -1;
pub type mod_mem_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_memory {
    pub base: *mut ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_uint,
    pub mtn: mod_tree_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_memory"][::std::mem::size_of::<module_memory>() - 72usize];
    ["Alignment of module_memory"][::std::mem::align_of::<module_memory>() - 8usize];
    ["Offset of field: module_memory::base"][::std::mem::offset_of!(module_memory, base) - 0usize];
    ["Offset of field: module_memory::size"][::std::mem::offset_of!(module_memory, size) - 8usize];
    ["Offset of field: module_memory::mtn"][::std::mem::offset_of!(module_memory, mtn) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mod_kallsyms {
    pub symtab: *mut Elf64_Sym,
    pub num_symtab: ::std::os::raw::c_uint,
    pub strtab: *mut ::std::os::raw::c_char,
    pub typetab: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mod_kallsyms"][::std::mem::size_of::<mod_kallsyms>() - 32usize];
    ["Alignment of mod_kallsyms"][::std::mem::align_of::<mod_kallsyms>() - 8usize];
    ["Offset of field: mod_kallsyms::symtab"]
        [::std::mem::offset_of!(mod_kallsyms, symtab) - 0usize];
    ["Offset of field: mod_kallsyms::num_symtab"]
        [::std::mem::offset_of!(mod_kallsyms, num_symtab) - 8usize];
    ["Offset of field: mod_kallsyms::strtab"]
        [::std::mem::offset_of!(mod_kallsyms, strtab) - 16usize];
    ["Offset of field: mod_kallsyms::typetab"]
        [::std::mem::offset_of!(mod_kallsyms, typetab) - 24usize];
};
#[doc = " struct klp_modinfo - ELF information preserved from the livepatch module\n\n @hdr: ELF header\n @sechdrs: Section header table\n @secstrings: String table for the section headers\n @symndx: The symbol table section index"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klp_modinfo {
    pub hdr: Elf64_Ehdr,
    pub sechdrs: *mut Elf64_Shdr,
    pub secstrings: *mut ::std::os::raw::c_char,
    pub symndx: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of klp_modinfo"][::std::mem::size_of::<klp_modinfo>() - 88usize];
    ["Alignment of klp_modinfo"][::std::mem::align_of::<klp_modinfo>() - 8usize];
    ["Offset of field: klp_modinfo::hdr"][::std::mem::offset_of!(klp_modinfo, hdr) - 0usize];
    ["Offset of field: klp_modinfo::sechdrs"]
        [::std::mem::offset_of!(klp_modinfo, sechdrs) - 64usize];
    ["Offset of field: klp_modinfo::secstrings"]
        [::std::mem::offset_of!(klp_modinfo, secstrings) - 72usize];
    ["Offset of field: klp_modinfo::symndx"][::std::mem::offset_of!(klp_modinfo, symndx) - 80usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct module {
    pub state: module_state,
    pub list: list_head,
    pub name: [::std::os::raw::c_char; 56usize],
    pub mkobj: module_kobject,
    pub modinfo_attrs: *mut module_attribute,
    pub version: *const ::std::os::raw::c_char,
    pub srcversion: *const ::std::os::raw::c_char,
    pub holders_dir: *mut kobject,
    pub syms: *mut kernel_symbol,
    pub crcs: *const s32,
    pub num_syms: ::std::os::raw::c_uint,
    pub param_lock: mutex,
    pub kp: *mut kernel_param,
    pub num_kp: ::std::os::raw::c_uint,
    pub num_gpl_syms: ::std::os::raw::c_uint,
    pub gpl_syms: *const kernel_symbol,
    pub gpl_crcs: *const s32,
    pub using_gplonly_symbols: bool_,
    pub sig_ok: bool_,
    pub async_probe_requested: bool_,
    pub num_exentries: ::std::os::raw::c_uint,
    pub extable: *mut exception_table_entry,
    pub init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub mem: [module_memory; 7usize],
    pub arch: mod_arch_specific,
    pub taints: ::std::os::raw::c_ulong,
    pub num_bugs: ::std::os::raw::c_uint,
    pub bug_list: list_head,
    pub bug_table: *mut bug_entry,
    pub kallsyms: *mut mod_kallsyms,
    pub core_kallsyms: mod_kallsyms,
    pub sect_attrs: *mut module_sect_attrs,
    pub notes_attrs: *mut module_notes_attrs,
    pub args: *mut ::std::os::raw::c_char,
    pub percpu: *mut ::std::os::raw::c_void,
    pub percpu_size: ::std::os::raw::c_uint,
    pub noinstr_text_start: *mut ::std::os::raw::c_void,
    pub noinstr_text_size: ::std::os::raw::c_uint,
    pub num_tracepoints: ::std::os::raw::c_uint,
    pub tracepoints_ptrs: *const ::std::os::raw::c_int,
    pub num_srcu_structs: ::std::os::raw::c_uint,
    pub srcu_struct_ptrs: *mut *mut srcu_struct,
    pub num_bpf_raw_events: ::std::os::raw::c_uint,
    pub bpf_raw_events: *mut bpf_raw_event_map,
    pub jump_entries: *mut jump_entry,
    pub num_jump_entries: ::std::os::raw::c_uint,
    pub num_trace_bprintk_fmt: ::std::os::raw::c_uint,
    pub trace_bprintk_fmt_start: *mut *const ::std::os::raw::c_char,
    pub trace_events: *mut *mut trace_event_call,
    pub num_trace_events: ::std::os::raw::c_uint,
    pub trace_evals: *mut *mut trace_eval_map,
    pub num_trace_evals: ::std::os::raw::c_uint,
    pub num_ftrace_callsites: ::std::os::raw::c_uint,
    pub ftrace_callsites: *mut ::std::os::raw::c_ulong,
    pub kprobes_text_start: *mut ::std::os::raw::c_void,
    pub kprobes_text_size: ::std::os::raw::c_uint,
    pub kprobe_blacklist: *mut ::std::os::raw::c_ulong,
    pub num_kprobe_blacklist: ::std::os::raw::c_uint,
    pub num_static_call_sites: ::std::os::raw::c_int,
    pub static_call_sites: *mut static_call_site,
    pub klp: bool_,
    pub klp_alive: bool_,
    pub klp_info: *mut klp_modinfo,
    pub source_list: list_head,
    pub target_list: list_head,
    pub exit: ::std::option::Option<unsafe extern "C" fn()>,
    pub refcnt: atomic_t,
    pub ei_funcs: *mut error_injection_entry,
    pub num_ei_funcs: ::std::os::raw::c_uint,
    pub dyndbg_info: _ddebug_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module"][::std::mem::size_of::<module>() - 1216usize];
    ["Alignment of module"][::std::mem::align_of::<module>() - 64usize];
    ["Offset of field: module::state"][::std::mem::offset_of!(module, state) - 0usize];
    ["Offset of field: module::list"][::std::mem::offset_of!(module, list) - 8usize];
    ["Offset of field: module::name"][::std::mem::offset_of!(module, name) - 24usize];
    ["Offset of field: module::mkobj"][::std::mem::offset_of!(module, mkobj) - 80usize];
    ["Offset of field: module::modinfo_attrs"]
        [::std::mem::offset_of!(module, modinfo_attrs) - 176usize];
    ["Offset of field: module::version"][::std::mem::offset_of!(module, version) - 184usize];
    ["Offset of field: module::srcversion"][::std::mem::offset_of!(module, srcversion) - 192usize];
    ["Offset of field: module::holders_dir"]
        [::std::mem::offset_of!(module, holders_dir) - 200usize];
    ["Offset of field: module::syms"][::std::mem::offset_of!(module, syms) - 208usize];
    ["Offset of field: module::crcs"][::std::mem::offset_of!(module, crcs) - 216usize];
    ["Offset of field: module::num_syms"][::std::mem::offset_of!(module, num_syms) - 224usize];
    ["Offset of field: module::param_lock"][::std::mem::offset_of!(module, param_lock) - 232usize];
    ["Offset of field: module::kp"][::std::mem::offset_of!(module, kp) - 264usize];
    ["Offset of field: module::num_kp"][::std::mem::offset_of!(module, num_kp) - 272usize];
    ["Offset of field: module::num_gpl_syms"]
        [::std::mem::offset_of!(module, num_gpl_syms) - 276usize];
    ["Offset of field: module::gpl_syms"][::std::mem::offset_of!(module, gpl_syms) - 280usize];
    ["Offset of field: module::gpl_crcs"][::std::mem::offset_of!(module, gpl_crcs) - 288usize];
    ["Offset of field: module::using_gplonly_symbols"]
        [::std::mem::offset_of!(module, using_gplonly_symbols) - 296usize];
    ["Offset of field: module::sig_ok"][::std::mem::offset_of!(module, sig_ok) - 297usize];
    ["Offset of field: module::async_probe_requested"]
        [::std::mem::offset_of!(module, async_probe_requested) - 298usize];
    ["Offset of field: module::num_exentries"]
        [::std::mem::offset_of!(module, num_exentries) - 300usize];
    ["Offset of field: module::extable"][::std::mem::offset_of!(module, extable) - 304usize];
    ["Offset of field: module::init"][::std::mem::offset_of!(module, init) - 312usize];
    ["Offset of field: module::mem"][::std::mem::offset_of!(module, mem) - 320usize];
    ["Offset of field: module::arch"][::std::mem::offset_of!(module, arch) - 824usize];
    ["Offset of field: module::taints"][::std::mem::offset_of!(module, taints) - 824usize];
    ["Offset of field: module::num_bugs"][::std::mem::offset_of!(module, num_bugs) - 832usize];
    ["Offset of field: module::bug_list"][::std::mem::offset_of!(module, bug_list) - 840usize];
    ["Offset of field: module::bug_table"][::std::mem::offset_of!(module, bug_table) - 856usize];
    ["Offset of field: module::kallsyms"][::std::mem::offset_of!(module, kallsyms) - 864usize];
    ["Offset of field: module::core_kallsyms"]
        [::std::mem::offset_of!(module, core_kallsyms) - 872usize];
    ["Offset of field: module::sect_attrs"][::std::mem::offset_of!(module, sect_attrs) - 904usize];
    ["Offset of field: module::notes_attrs"]
        [::std::mem::offset_of!(module, notes_attrs) - 912usize];
    ["Offset of field: module::args"][::std::mem::offset_of!(module, args) - 920usize];
    ["Offset of field: module::percpu"][::std::mem::offset_of!(module, percpu) - 928usize];
    ["Offset of field: module::percpu_size"]
        [::std::mem::offset_of!(module, percpu_size) - 936usize];
    ["Offset of field: module::noinstr_text_start"]
        [::std::mem::offset_of!(module, noinstr_text_start) - 944usize];
    ["Offset of field: module::noinstr_text_size"]
        [::std::mem::offset_of!(module, noinstr_text_size) - 952usize];
    ["Offset of field: module::num_tracepoints"]
        [::std::mem::offset_of!(module, num_tracepoints) - 956usize];
    ["Offset of field: module::tracepoints_ptrs"]
        [::std::mem::offset_of!(module, tracepoints_ptrs) - 960usize];
    ["Offset of field: module::num_srcu_structs"]
        [::std::mem::offset_of!(module, num_srcu_structs) - 968usize];
    ["Offset of field: module::srcu_struct_ptrs"]
        [::std::mem::offset_of!(module, srcu_struct_ptrs) - 976usize];
    ["Offset of field: module::num_bpf_raw_events"]
        [::std::mem::offset_of!(module, num_bpf_raw_events) - 984usize];
    ["Offset of field: module::bpf_raw_events"]
        [::std::mem::offset_of!(module, bpf_raw_events) - 992usize];
    ["Offset of field: module::jump_entries"]
        [::std::mem::offset_of!(module, jump_entries) - 1000usize];
    ["Offset of field: module::num_jump_entries"]
        [::std::mem::offset_of!(module, num_jump_entries) - 1008usize];
    ["Offset of field: module::num_trace_bprintk_fmt"]
        [::std::mem::offset_of!(module, num_trace_bprintk_fmt) - 1012usize];
    ["Offset of field: module::trace_bprintk_fmt_start"]
        [::std::mem::offset_of!(module, trace_bprintk_fmt_start) - 1016usize];
    ["Offset of field: module::trace_events"]
        [::std::mem::offset_of!(module, trace_events) - 1024usize];
    ["Offset of field: module::num_trace_events"]
        [::std::mem::offset_of!(module, num_trace_events) - 1032usize];
    ["Offset of field: module::trace_evals"]
        [::std::mem::offset_of!(module, trace_evals) - 1040usize];
    ["Offset of field: module::num_trace_evals"]
        [::std::mem::offset_of!(module, num_trace_evals) - 1048usize];
    ["Offset of field: module::num_ftrace_callsites"]
        [::std::mem::offset_of!(module, num_ftrace_callsites) - 1052usize];
    ["Offset of field: module::ftrace_callsites"]
        [::std::mem::offset_of!(module, ftrace_callsites) - 1056usize];
    ["Offset of field: module::kprobes_text_start"]
        [::std::mem::offset_of!(module, kprobes_text_start) - 1064usize];
    ["Offset of field: module::kprobes_text_size"]
        [::std::mem::offset_of!(module, kprobes_text_size) - 1072usize];
    ["Offset of field: module::kprobe_blacklist"]
        [::std::mem::offset_of!(module, kprobe_blacklist) - 1080usize];
    ["Offset of field: module::num_kprobe_blacklist"]
        [::std::mem::offset_of!(module, num_kprobe_blacklist) - 1088usize];
    ["Offset of field: module::num_static_call_sites"]
        [::std::mem::offset_of!(module, num_static_call_sites) - 1092usize];
    ["Offset of field: module::static_call_sites"]
        [::std::mem::offset_of!(module, static_call_sites) - 1096usize];
    ["Offset of field: module::klp"][::std::mem::offset_of!(module, klp) - 1104usize];
    ["Offset of field: module::klp_alive"][::std::mem::offset_of!(module, klp_alive) - 1105usize];
    ["Offset of field: module::klp_info"][::std::mem::offset_of!(module, klp_info) - 1112usize];
    ["Offset of field: module::source_list"]
        [::std::mem::offset_of!(module, source_list) - 1120usize];
    ["Offset of field: module::target_list"]
        [::std::mem::offset_of!(module, target_list) - 1136usize];
    ["Offset of field: module::exit"][::std::mem::offset_of!(module, exit) - 1152usize];
    ["Offset of field: module::refcnt"][::std::mem::offset_of!(module, refcnt) - 1160usize];
    ["Offset of field: module::ei_funcs"][::std::mem::offset_of!(module, ei_funcs) - 1168usize];
    ["Offset of field: module::num_ei_funcs"]
        [::std::mem::offset_of!(module, num_ei_funcs) - 1176usize];
    ["Offset of field: module::dyndbg_info"]
        [::std::mem::offset_of!(module, dyndbg_info) - 1184usize];
};
extern "C" {
    pub fn __module_text_address(addr: ::std::os::raw::c_ulong) -> *mut module;
}
extern "C" {
    pub fn __module_address(addr: ::std::os::raw::c_ulong) -> *mut module;
}
extern "C" {
    pub fn is_module_address(addr: ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn __is_module_percpu_address(
        addr: ::std::os::raw::c_ulong,
        can_addr: *mut ::std::os::raw::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn is_module_percpu_address(addr: ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn is_module_text_address(addr: ::std::os::raw::c_ulong) -> bool_;
}
extern "C" {
    pub fn find_module(name: *const ::std::os::raw::c_char) -> *mut module;
}
extern "C" {
    pub fn __module_put_and_kthread_exit(mod_: *mut module, code: ::std::os::raw::c_long) -> !;
}
extern "C" {
    pub fn module_refcount(mod_: *mut module) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __symbol_put(symbol: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn symbol_put_addr(addr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __module_get(module: *mut module);
}
extern "C" {
    #[doc = " try_module_get() - take module refcount unless module is being removed\n @module: the module we should check for\n\n Only try to get a module reference count if the module is not being removed.\n This call will fail if the module is in the process of being removed.\n\n Care must also be taken to ensure the module exists and is alive prior to\n usage of this call. This can be gauranteed through two means:\n\n 1) Direct protection: you know an earlier caller must have increased the\n    module reference through __module_get(). This can typically be achieved\n    by having another entity other than the module itself increment the\n    module reference count.\n\n 2) Implied protection: there is an implied protection against module\n    removal. An example of this is the implied protection used by kernfs /\n    sysfs. The sysfs store / read file operations are guaranteed to exist\n    through the use of kernfs's active reference (see kernfs_active()) and a\n    sysfs / kernfs file removal cannot happen unless the same file is not\n    active. Therefore, if a sysfs file is being read or written to the module\n    which created it must still exist. It is therefore safe to use\n    try_module_get() on module sysfs store / read ops.\n\n One of the real values to try_module_get() is the module_is_live() check\n which ensures that the caller of try_module_get() can yield to userspace\n module removal requests and gracefully fail if the module is on its way out.\n\n Returns true if the reference count was successfully incremented."]
    pub fn try_module_get(module: *mut module) -> bool_;
}
extern "C" {
    #[doc = " module_put() - release a reference count to a module\n @module: the module we should release a reference count for\n\n If you successfully bump a reference count to a module with try_module_get(),\n when you are finished you must call module_put() to release that reference\n count."]
    pub fn module_put(module: *mut module);
}
extern "C" {
    pub fn dereference_module_function_descriptor(
        mod_: *mut module,
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn register_module_notifier(nb: *mut notifier_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unregister_module_notifier(nb: *mut notifier_block) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_modules();
}
extern "C" {
    pub fn set_module_sig_enforced();
}
extern "C" {
    pub static mut module_kset: *mut kset;
}
extern "C" {
    pub static module_ktype: kobj_type;
}
extern "C" {
    pub fn module_bug_finalize(arg1: *const Elf64_Ehdr, arg2: *const Elf64_Shdr, arg3: *mut module);
}
extern "C" {
    pub fn module_bug_cleanup(arg1: *mut module);
}
extern "C" {
    pub fn retpoline_module_ok(has_retpoline: bool_) -> bool_;
}
extern "C" {
    pub fn is_module_sig_enforced() -> bool_;
}
extern "C" {
    pub fn module_kallsyms_on_each_symbol(
        modname: *const ::std::os::raw::c_char,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_ulong,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_address_lookup(
        addr: ::std::os::raw::c_ulong,
        symbolsize: *mut ::std::os::raw::c_ulong,
        offset: *mut ::std::os::raw::c_ulong,
        modname: *mut *mut ::std::os::raw::c_char,
        modbuildid: *mut *const ::std::os::raw::c_uchar,
        namebuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lookup_module_symbol_name(
        addr: ::std::os::raw::c_ulong,
        symname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lookup_module_symbol_attrs(
        addr: ::std::os::raw::c_ulong,
        size: *mut ::std::os::raw::c_ulong,
        offset: *mut ::std::os::raw::c_ulong,
        modname: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_get_kallsym(
        symnum: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_ulong,
        type_: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
        module_name: *mut ::std::os::raw::c_char,
        exported: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_kallsyms_lookup_name(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn find_kallsyms_symbol_value(
        mod_: *mut module,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
pub const probe_type_PROBE_DEFAULT_STRATEGY: probe_type = 0;
pub const probe_type_PROBE_PREFER_ASYNCHRONOUS: probe_type = 1;
pub const probe_type_PROBE_FORCE_SYNCHRONOUS: probe_type = 2;
#[doc = " enum probe_type - device driver probe type to try\n\tDevice drivers may opt in for special handling of their\n\trespective probe routines. This tells the core what to\n\texpect and prefer.\n\n @PROBE_DEFAULT_STRATEGY: Used by drivers that work equally well\n\twhether probed synchronously or asynchronously.\n @PROBE_PREFER_ASYNCHRONOUS: Drivers for \"slow\" devices which\n\tprobing order is not essential for booting the system may\n\topt into executing their probes asynchronously.\n @PROBE_FORCE_SYNCHRONOUS: Use this to annotate drivers that need\n\ttheir probe routines to run synchronously with driver and\n\tdevice registration (with the exception of -EPROBE_DEFER\n\thandling - re-probing always ends up being done asynchronously).\n\n Note that the end goal is to switch the kernel to use asynchronous\n probing by default, so annotating drivers with\n %PROBE_PREFER_ASYNCHRONOUS is a temporary measure that allows us\n to speed up boot process while we are validating the rest of the\n drivers."]
pub type probe_type = ::std::os::raw::c_uint;
#[doc = " struct device_driver - The basic device driver structure\n @name:\tName of the device driver.\n @bus:\tThe bus which the device of this driver belongs to.\n @owner:\tThe module owner.\n @mod_name:\tUsed for built-in modules.\n @suppress_bind_attrs: Disables bind/unbind via sysfs.\n @probe_type:\tType of the probe (synchronous or asynchronous) to use.\n @of_match_table: The open firmware table.\n @acpi_match_table: The ACPI match table.\n @probe:\tCalled to query the existence of a specific device,\n\t\twhether this driver can work with it, and bind the driver\n\t\tto a specific device.\n @sync_state:\tCalled to sync device state to software state after all the\n\t\tstate tracking consumers linked to this device (present at\n\t\tthe time of late_initcall) have successfully bound to a\n\t\tdriver. If the device has no consumers, this function will\n\t\tbe called at late_initcall_sync level. If the device has\n\t\tconsumers that are never bound to a driver, this function\n\t\twill never get called until they do.\n @remove:\tCalled when the device is removed from the system to\n\t\tunbind a device from this driver.\n @shutdown:\tCalled at shut-down time to quiesce the device.\n @suspend:\tCalled to put the device to sleep mode. Usually to a\n\t\tlow power state.\n @resume:\tCalled to bring a device from sleep mode.\n @groups:\tDefault attributes that get created by the driver core\n\t\tautomatically.\n @dev_groups:\tAdditional attributes attached to device instance once\n\t\tit is bound to the driver.\n @pm:\t\tPower management operations of the device which matched\n\t\tthis driver.\n @coredump:\tCalled when sysfs entry is written to. The device driver\n\t\tis expected to call the dev_coredump API resulting in a\n\t\tuevent.\n @p:\t\tDriver core's private data, no one other than the driver\n\t\tcore can touch this.\n\n The device driver-model tracks all of the drivers known to the system.\n The main reason for this tracking is to enable the driver core to match\n up drivers with new devices. Once drivers are known objects within the\n system, however, a number of other things become possible. Device drivers\n can export information and configuration variables that are independent\n of any specific device."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_driver {
    pub name: *const ::std::os::raw::c_char,
    pub bus: *const bus_type,
    pub owner: *mut module,
    pub mod_name: *const ::std::os::raw::c_char,
    pub suppress_bind_attrs: bool_,
    pub probe_type: probe_type,
    pub of_match_table: *mut of_device_id,
    pub acpi_match_table: *mut acpi_device_id,
    pub probe:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub sync_state: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub remove:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub suspend: ::std::option::Option<
        unsafe extern "C" fn(dev: *mut device, state: pm_message_t) -> ::std::os::raw::c_int,
    >,
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device) -> ::std::os::raw::c_int>,
    pub groups: *mut *const attribute_group,
    pub dev_groups: *mut *const attribute_group,
    pub pm: *const dev_pm_ops,
    pub coredump: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub p: *mut driver_private,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device_driver"][::std::mem::size_of::<device_driver>() - 144usize];
    ["Alignment of device_driver"][::std::mem::align_of::<device_driver>() - 8usize];
    ["Offset of field: device_driver::name"][::std::mem::offset_of!(device_driver, name) - 0usize];
    ["Offset of field: device_driver::bus"][::std::mem::offset_of!(device_driver, bus) - 8usize];
    ["Offset of field: device_driver::owner"]
        [::std::mem::offset_of!(device_driver, owner) - 16usize];
    ["Offset of field: device_driver::mod_name"]
        [::std::mem::offset_of!(device_driver, mod_name) - 24usize];
    ["Offset of field: device_driver::suppress_bind_attrs"]
        [::std::mem::offset_of!(device_driver, suppress_bind_attrs) - 32usize];
    ["Offset of field: device_driver::probe_type"]
        [::std::mem::offset_of!(device_driver, probe_type) - 36usize];
    ["Offset of field: device_driver::of_match_table"]
        [::std::mem::offset_of!(device_driver, of_match_table) - 40usize];
    ["Offset of field: device_driver::acpi_match_table"]
        [::std::mem::offset_of!(device_driver, acpi_match_table) - 48usize];
    ["Offset of field: device_driver::probe"]
        [::std::mem::offset_of!(device_driver, probe) - 56usize];
    ["Offset of field: device_driver::sync_state"]
        [::std::mem::offset_of!(device_driver, sync_state) - 64usize];
    ["Offset of field: device_driver::remove"]
        [::std::mem::offset_of!(device_driver, remove) - 72usize];
    ["Offset of field: device_driver::shutdown"]
        [::std::mem::offset_of!(device_driver, shutdown) - 80usize];
    ["Offset of field: device_driver::suspend"]
        [::std::mem::offset_of!(device_driver, suspend) - 88usize];
    ["Offset of field: device_driver::resume"]
        [::std::mem::offset_of!(device_driver, resume) - 96usize];
    ["Offset of field: device_driver::groups"]
        [::std::mem::offset_of!(device_driver, groups) - 104usize];
    ["Offset of field: device_driver::dev_groups"]
        [::std::mem::offset_of!(device_driver, dev_groups) - 112usize];
    ["Offset of field: device_driver::pm"][::std::mem::offset_of!(device_driver, pm) - 120usize];
    ["Offset of field: device_driver::coredump"]
        [::std::mem::offset_of!(device_driver, coredump) - 128usize];
    ["Offset of field: device_driver::p"][::std::mem::offset_of!(device_driver, p) - 136usize];
};
extern "C" {
    pub fn driver_register(drv: *mut device_driver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_unregister(drv: *mut device_driver);
}
extern "C" {
    pub fn driver_find(
        name: *const ::std::os::raw::c_char,
        bus: *const bus_type,
    ) -> *mut device_driver;
}
extern "C" {
    pub fn driver_probe_done() -> bool_;
}
extern "C" {
    pub fn wait_for_device_probe();
}
extern "C" {
    pub fn wait_for_init_devices_probe();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct driver_attribute {
    pub attr: attribute,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(driver: *mut device_driver, buf: *mut ::std::os::raw::c_char) -> isize,
    >,
    pub store: ::std::option::Option<
        unsafe extern "C" fn(
            driver: *mut device_driver,
            buf: *const ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of driver_attribute"][::std::mem::size_of::<driver_attribute>() - 32usize];
    ["Alignment of driver_attribute"][::std::mem::align_of::<driver_attribute>() - 8usize];
    ["Offset of field: driver_attribute::attr"]
        [::std::mem::offset_of!(driver_attribute, attr) - 0usize];
    ["Offset of field: driver_attribute::show"]
        [::std::mem::offset_of!(driver_attribute, show) - 16usize];
    ["Offset of field: driver_attribute::store"]
        [::std::mem::offset_of!(driver_attribute, store) - 24usize];
};
extern "C" {
    pub fn driver_create_file(
        driver: *const device_driver,
        attr: *const driver_attribute,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_remove_file(driver: *const device_driver, attr: *const driver_attribute);
}
extern "C" {
    pub fn driver_set_override(
        dev: *mut device,
        override_: *mut *const ::std::os::raw::c_char,
        s: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_for_each_device(
        drv: *mut device_driver,
        start: *mut device,
        data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                arg1: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_find_device(
        drv: *const device_driver,
        start: *mut device,
        data: *const ::std::os::raw::c_void,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut device;
}
extern "C" {
    pub fn driver_deferred_probe_add(dev: *mut device);
}
extern "C" {
    pub fn driver_deferred_probe_check_state(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_init();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_archdata {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_archdata"][::std::mem::size_of::<dev_archdata>() - 0usize];
    ["Alignment of dev_archdata"][::std::mem::align_of::<dev_archdata>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pdev_archdata {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pdev_archdata"][::std::mem::size_of::<pdev_archdata>() - 0usize];
    ["Alignment of pdev_archdata"][::std::mem::align_of::<pdev_archdata>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_private {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct driver_private {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subsys_private {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iommu_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pin_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_iommu {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msi_device_data {
    _unused: [u8; 0],
}
#[doc = " struct subsys_interface - interfaces to device functions\n @name:       name of the device function\n @subsys:     subsystem of the devices to attach to\n @node:       the list of functions registered at the subsystem\n @add_dev:    device hookup to device function handler\n @remove_dev: device hookup to device function handler\n\n Simple interfaces attached to a subsystem. Multiple interfaces can\n attach to a subsystem and its devices. Unlike drivers, they do not\n exclusively claim or control devices. Interfaces usually represent\n a specific functionality of a subsystem/class of devices."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subsys_interface {
    pub name: *const ::std::os::raw::c_char,
    pub subsys: *const bus_type,
    pub node: list_head,
    pub add_dev: ::std::option::Option<
        unsafe extern "C" fn(dev: *mut device, sif: *mut subsys_interface) -> ::std::os::raw::c_int,
    >,
    pub remove_dev:
        ::std::option::Option<unsafe extern "C" fn(dev: *mut device, sif: *mut subsys_interface)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of subsys_interface"][::std::mem::size_of::<subsys_interface>() - 48usize];
    ["Alignment of subsys_interface"][::std::mem::align_of::<subsys_interface>() - 8usize];
    ["Offset of field: subsys_interface::name"]
        [::std::mem::offset_of!(subsys_interface, name) - 0usize];
    ["Offset of field: subsys_interface::subsys"]
        [::std::mem::offset_of!(subsys_interface, subsys) - 8usize];
    ["Offset of field: subsys_interface::node"]
        [::std::mem::offset_of!(subsys_interface, node) - 16usize];
    ["Offset of field: subsys_interface::add_dev"]
        [::std::mem::offset_of!(subsys_interface, add_dev) - 32usize];
    ["Offset of field: subsys_interface::remove_dev"]
        [::std::mem::offset_of!(subsys_interface, remove_dev) - 40usize];
};
extern "C" {
    pub fn subsys_interface_register(sif: *mut subsys_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subsys_interface_unregister(sif: *mut subsys_interface);
}
extern "C" {
    pub fn subsys_system_register(
        subsys: *const bus_type,
        groups: *mut *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subsys_virtual_register(
        subsys: *const bus_type,
        groups: *mut *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_type {
    pub name: *const ::std::os::raw::c_char,
    pub groups: *mut *const attribute_group,
    pub uevent: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *const device,
            env: *mut kobj_uevent_env,
        ) -> ::std::os::raw::c_int,
    >,
    pub devnode: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *const device,
            mode: *mut umode_t,
            uid: *mut kuid_t,
            gid: *mut kgid_t,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub pm: *const dev_pm_ops,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device_type"][::std::mem::size_of::<device_type>() - 48usize];
    ["Alignment of device_type"][::std::mem::align_of::<device_type>() - 8usize];
    ["Offset of field: device_type::name"][::std::mem::offset_of!(device_type, name) - 0usize];
    ["Offset of field: device_type::groups"][::std::mem::offset_of!(device_type, groups) - 8usize];
    ["Offset of field: device_type::uevent"][::std::mem::offset_of!(device_type, uevent) - 16usize];
    ["Offset of field: device_type::devnode"]
        [::std::mem::offset_of!(device_type, devnode) - 24usize];
    ["Offset of field: device_type::release"]
        [::std::mem::offset_of!(device_type, release) - 32usize];
    ["Offset of field: device_type::pm"][::std::mem::offset_of!(device_type, pm) - 40usize];
};
#[doc = " struct device_attribute - Interface for exporting device attributes.\n @attr: sysfs attribute definition.\n @show: Show handler.\n @store: Store handler."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_attribute {
    pub attr: attribute,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *mut device,
            attr: *mut device_attribute,
            buf: *mut ::std::os::raw::c_char,
        ) -> isize,
    >,
    pub store: ::std::option::Option<
        unsafe extern "C" fn(
            dev: *mut device,
            attr: *mut device_attribute,
            buf: *const ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device_attribute"][::std::mem::size_of::<device_attribute>() - 32usize];
    ["Alignment of device_attribute"][::std::mem::align_of::<device_attribute>() - 8usize];
    ["Offset of field: device_attribute::attr"]
        [::std::mem::offset_of!(device_attribute, attr) - 0usize];
    ["Offset of field: device_attribute::show"]
        [::std::mem::offset_of!(device_attribute, show) - 16usize];
    ["Offset of field: device_attribute::store"]
        [::std::mem::offset_of!(device_attribute, store) - 24usize];
};
#[doc = " struct dev_ext_attribute - Exported device attribute with extra context.\n @attr: Exported device attribute.\n @var: Pointer to context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_ext_attribute {
    pub attr: device_attribute,
    pub var: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_ext_attribute"][::std::mem::size_of::<dev_ext_attribute>() - 40usize];
    ["Alignment of dev_ext_attribute"][::std::mem::align_of::<dev_ext_attribute>() - 8usize];
    ["Offset of field: dev_ext_attribute::attr"]
        [::std::mem::offset_of!(dev_ext_attribute, attr) - 0usize];
    ["Offset of field: dev_ext_attribute::var"]
        [::std::mem::offset_of!(dev_ext_attribute, var) - 32usize];
};
extern "C" {
    pub fn device_show_ulong(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_store_ulong(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn device_show_int(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_store_int(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn device_show_bool(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_store_bool(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn device_show_string(
        dev: *mut device,
        attr: *mut device_attribute,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn device_create_file(
        device: *mut device,
        entry: *const device_attribute,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_remove_file(dev: *mut device, attr: *const device_attribute);
}
extern "C" {
    pub fn device_remove_file_self(dev: *mut device, attr: *const device_attribute) -> bool_;
}
extern "C" {
    pub fn device_create_bin_file(
        dev: *mut device,
        attr: *const bin_attribute,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_remove_bin_file(dev: *mut device, attr: *const bin_attribute);
}
pub type dr_release_t =
    ::std::option::Option<unsafe extern "C" fn(dev: *mut device, res: *mut ::std::os::raw::c_void)>;
pub type dr_match_t = ::std::option::Option<
    unsafe extern "C" fn(
        dev: *mut device,
        res: *mut ::std::os::raw::c_void,
        match_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __devres_alloc_node(
        release: dr_release_t,
        size: usize,
        gfp: gfp_t,
        nid: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devres_for_each_res(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut device,
                arg2: *mut ::std::os::raw::c_void,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn devres_free(res: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn devres_add(dev: *mut device, res: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn devres_find(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devres_get(
        dev: *mut device,
        new_res: *mut ::std::os::raw::c_void,
        match_: dr_match_t,
        match_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devres_remove(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devres_destroy(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devres_release(
        dev: *mut device,
        release: dr_release_t,
        match_: dr_match_t,
        match_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devres_open_group(
        dev: *mut device,
        id: *mut ::std::os::raw::c_void,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devres_close_group(dev: *mut device, id: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn devres_remove_group(dev: *mut device, id: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn devres_release_group(
        dev: *mut device,
        id: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devm_kmalloc(dev: *mut device, size: usize, gfp: gfp_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devm_krealloc(
        dev: *mut device,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devm_kvasprintf(
        dev: *mut device,
        gfp: gfp_t,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devm_kasprintf(
        dev: *mut device,
        gfp: gfp_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devm_kfree(dev: *mut device, p: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn devm_kstrdup(
        dev: *mut device,
        s: *const ::std::os::raw::c_char,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devm_kstrdup_const(
        dev: *mut device,
        s: *const ::std::os::raw::c_char,
        gfp: gfp_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn devm_kmemdup(
        dev: *mut device,
        src: *const ::std::os::raw::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devm_get_free_pages(
        dev: *mut device,
        gfp_mask: gfp_t,
        order: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn devm_free_pages(dev: *mut device, addr: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn devm_ioremap_resource(
        dev: *mut device,
        res: *const resource,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devm_ioremap_resource_wc(
        dev: *mut device,
        res: *const resource,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devm_of_iomap(
        dev: *mut device,
        node: *mut device_node,
        index: ::std::os::raw::c_int,
        size: *mut resource_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devm_remove_action(
        dev: *mut device,
        action: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn devm_release_action(
        dev: *mut device,
        action: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __devm_add_action(
        dev: *mut device,
        action: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        data: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __devm_alloc_percpu(
        dev: *mut device,
        size: usize,
        align: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn devm_free_percpu(dev: *mut device, pdata: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_dma_parameters {
    pub max_segment_size: ::std::os::raw::c_uint,
    pub min_align_mask: ::std::os::raw::c_uint,
    pub segment_boundary_mask: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device_dma_parameters"][::std::mem::size_of::<device_dma_parameters>() - 16usize];
    ["Alignment of device_dma_parameters"]
        [::std::mem::align_of::<device_dma_parameters>() - 8usize];
    ["Offset of field: device_dma_parameters::max_segment_size"]
        [::std::mem::offset_of!(device_dma_parameters, max_segment_size) - 0usize];
    ["Offset of field: device_dma_parameters::min_align_mask"]
        [::std::mem::offset_of!(device_dma_parameters, min_align_mask) - 4usize];
    ["Offset of field: device_dma_parameters::segment_boundary_mask"]
        [::std::mem::offset_of!(device_dma_parameters, segment_boundary_mask) - 8usize];
};
pub const device_link_state_DL_STATE_NONE: device_link_state = -1;
pub const device_link_state_DL_STATE_DORMANT: device_link_state = 0;
pub const device_link_state_DL_STATE_AVAILABLE: device_link_state = 1;
pub const device_link_state_DL_STATE_CONSUMER_PROBE: device_link_state = 2;
pub const device_link_state_DL_STATE_ACTIVE: device_link_state = 3;
pub const device_link_state_DL_STATE_SUPPLIER_UNBIND: device_link_state = 4;
#[doc = " enum device_link_state - Device link states.\n @DL_STATE_NONE: The presence of the drivers is not being tracked.\n @DL_STATE_DORMANT: None of the supplier/consumer drivers is present.\n @DL_STATE_AVAILABLE: The supplier driver is present, but the consumer is not.\n @DL_STATE_CONSUMER_PROBE: The consumer is probing (supplier driver present).\n @DL_STATE_ACTIVE: Both the supplier and consumer drivers are present.\n @DL_STATE_SUPPLIER_UNBIND: The supplier driver is unbinding."]
pub type device_link_state = ::std::os::raw::c_int;
pub const dl_dev_state_DL_DEV_NO_DRIVER: dl_dev_state = 0;
pub const dl_dev_state_DL_DEV_PROBING: dl_dev_state = 1;
pub const dl_dev_state_DL_DEV_DRIVER_BOUND: dl_dev_state = 2;
pub const dl_dev_state_DL_DEV_UNBINDING: dl_dev_state = 3;
#[doc = " enum dl_dev_state - Device driver presence tracking information.\n @DL_DEV_NO_DRIVER: There is no driver attached to the device.\n @DL_DEV_PROBING: A driver is probing.\n @DL_DEV_DRIVER_BOUND: The driver has been bound to the device.\n @DL_DEV_UNBINDING: The driver is unbinding from the device."]
pub type dl_dev_state = ::std::os::raw::c_uint;
pub const device_removable_DEVICE_REMOVABLE_NOT_SUPPORTED: device_removable = 0;
pub const device_removable_DEVICE_REMOVABLE_UNKNOWN: device_removable = 1;
pub const device_removable_DEVICE_FIXED: device_removable = 2;
pub const device_removable_DEVICE_REMOVABLE: device_removable = 3;
#[doc = " enum device_removable - Whether the device is removable. The criteria for a\n device to be classified as removable is determined by its subsystem or bus.\n @DEVICE_REMOVABLE_NOT_SUPPORTED: This attribute is not supported for this\n\t\t\t\t    device (default).\n @DEVICE_REMOVABLE_UNKNOWN:  Device location is Unknown.\n @DEVICE_FIXED: Device is not removable by the user.\n @DEVICE_REMOVABLE: Device is removable by the user."]
pub type device_removable = ::std::os::raw::c_uint;
#[doc = " struct dev_links_info - Device data related to device links.\n @suppliers: List of links to supplier devices.\n @consumers: List of links to consumer devices.\n @defer_sync: Hook to global list of devices that have deferred sync_state.\n @status: Driver status information."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_links_info {
    pub suppliers: list_head,
    pub consumers: list_head,
    pub defer_sync: list_head,
    pub status: dl_dev_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_links_info"][::std::mem::size_of::<dev_links_info>() - 56usize];
    ["Alignment of dev_links_info"][::std::mem::align_of::<dev_links_info>() - 8usize];
    ["Offset of field: dev_links_info::suppliers"]
        [::std::mem::offset_of!(dev_links_info, suppliers) - 0usize];
    ["Offset of field: dev_links_info::consumers"]
        [::std::mem::offset_of!(dev_links_info, consumers) - 16usize];
    ["Offset of field: dev_links_info::defer_sync"]
        [::std::mem::offset_of!(dev_links_info, defer_sync) - 32usize];
    ["Offset of field: dev_links_info::status"]
        [::std::mem::offset_of!(dev_links_info, status) - 48usize];
};
#[doc = " struct dev_msi_info - Device data related to MSI\n @domain:\tThe MSI interrupt domain associated to the device\n @data:\tPointer to MSI device data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_msi_info {
    pub domain: *mut irq_domain,
    pub data: *mut msi_device_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dev_msi_info"][::std::mem::size_of::<dev_msi_info>() - 16usize];
    ["Alignment of dev_msi_info"][::std::mem::align_of::<dev_msi_info>() - 8usize];
    ["Offset of field: dev_msi_info::domain"]
        [::std::mem::offset_of!(dev_msi_info, domain) - 0usize];
    ["Offset of field: dev_msi_info::data"][::std::mem::offset_of!(dev_msi_info, data) - 8usize];
};
pub const device_physical_location_panel_DEVICE_PANEL_TOP: device_physical_location_panel = 0;
pub const device_physical_location_panel_DEVICE_PANEL_BOTTOM: device_physical_location_panel = 1;
pub const device_physical_location_panel_DEVICE_PANEL_LEFT: device_physical_location_panel = 2;
pub const device_physical_location_panel_DEVICE_PANEL_RIGHT: device_physical_location_panel = 3;
pub const device_physical_location_panel_DEVICE_PANEL_FRONT: device_physical_location_panel = 4;
pub const device_physical_location_panel_DEVICE_PANEL_BACK: device_physical_location_panel = 5;
pub const device_physical_location_panel_DEVICE_PANEL_UNKNOWN: device_physical_location_panel = 6;
#[doc = " enum device_physical_location_panel - Describes which panel surface of the\n system's housing the device connection point resides on.\n @DEVICE_PANEL_TOP: Device connection point is on the top panel.\n @DEVICE_PANEL_BOTTOM: Device connection point is on the bottom panel.\n @DEVICE_PANEL_LEFT: Device connection point is on the left panel.\n @DEVICE_PANEL_RIGHT: Device connection point is on the right panel.\n @DEVICE_PANEL_FRONT: Device connection point is on the front panel.\n @DEVICE_PANEL_BACK: Device connection point is on the back panel.\n @DEVICE_PANEL_UNKNOWN: The panel with device connection point is unknown."]
pub type device_physical_location_panel = ::std::os::raw::c_uint;
pub const device_physical_location_vertical_position_DEVICE_VERT_POS_UPPER:
    device_physical_location_vertical_position = 0;
pub const device_physical_location_vertical_position_DEVICE_VERT_POS_CENTER:
    device_physical_location_vertical_position = 1;
pub const device_physical_location_vertical_position_DEVICE_VERT_POS_LOWER:
    device_physical_location_vertical_position = 2;
#[doc = " enum device_physical_location_vertical_position - Describes vertical\n position of the device connection point on the panel surface.\n @DEVICE_VERT_POS_UPPER: Device connection point is at upper part of panel.\n @DEVICE_VERT_POS_CENTER: Device connection point is at center part of panel.\n @DEVICE_VERT_POS_LOWER: Device connection point is at lower part of panel."]
pub type device_physical_location_vertical_position = ::std::os::raw::c_uint;
pub const device_physical_location_horizontal_position_DEVICE_HORI_POS_LEFT:
    device_physical_location_horizontal_position = 0;
pub const device_physical_location_horizontal_position_DEVICE_HORI_POS_CENTER:
    device_physical_location_horizontal_position = 1;
pub const device_physical_location_horizontal_position_DEVICE_HORI_POS_RIGHT:
    device_physical_location_horizontal_position = 2;
#[doc = " enum device_physical_location_horizontal_position - Describes horizontal\n position of the device connection point on the panel surface.\n @DEVICE_HORI_POS_LEFT: Device connection point is at left part of panel.\n @DEVICE_HORI_POS_CENTER: Device connection point is at center part of panel.\n @DEVICE_HORI_POS_RIGHT: Device connection point is at right part of panel."]
pub type device_physical_location_horizontal_position = ::std::os::raw::c_uint;
#[doc = " struct device_physical_location - Device data related to physical location\n of the device connection point.\n @panel: Panel surface of the system's housing that the device connection\n         point resides on.\n @vertical_position: Vertical position of the device connection point within\n                     the panel.\n @horizontal_position: Horizontal position of the device connection point\n                       within the panel.\n @dock: Set if the device connection point resides in a docking station or\n        port replicator.\n @lid: Set if this device connection point resides on the lid of laptop\n       system."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_physical_location {
    pub panel: device_physical_location_panel,
    pub vertical_position: device_physical_location_vertical_position,
    pub horizontal_position: device_physical_location_horizontal_position,
    pub dock: bool_,
    pub lid: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device_physical_location"]
        [::std::mem::size_of::<device_physical_location>() - 16usize];
    ["Alignment of device_physical_location"]
        [::std::mem::align_of::<device_physical_location>() - 4usize];
    ["Offset of field: device_physical_location::panel"]
        [::std::mem::offset_of!(device_physical_location, panel) - 0usize];
    ["Offset of field: device_physical_location::vertical_position"]
        [::std::mem::offset_of!(device_physical_location, vertical_position) - 4usize];
    ["Offset of field: device_physical_location::horizontal_position"]
        [::std::mem::offset_of!(device_physical_location, horizontal_position) - 8usize];
    ["Offset of field: device_physical_location::dock"]
        [::std::mem::offset_of!(device_physical_location, dock) - 12usize];
    ["Offset of field: device_physical_location::lid"]
        [::std::mem::offset_of!(device_physical_location, lid) - 13usize];
};
#[doc = " struct device - The basic device structure\n @parent:\tThe device's \"parent\" device, the device to which it is attached.\n \t\tIn most cases, a parent device is some sort of bus or host\n \t\tcontroller. If parent is NULL, the device, is a top-level device,\n \t\twhich is not usually what you want.\n @p:\t\tHolds the private data of the driver core portions of the device.\n \t\tSee the comment of the struct device_private for detail.\n @kobj:\tA top-level, abstract class from which other classes are derived.\n @init_name:\tInitial name of the device.\n @type:\tThe type of device.\n \t\tThis identifies the device type and carries type-specific\n \t\tinformation.\n @mutex:\tMutex to synchronize calls to its driver.\n @bus:\tType of bus device is on.\n @driver:\tWhich driver has allocated this\n @platform_data: Platform data specific to the device.\n \t\tExample: For devices on custom boards, as typical of embedded\n \t\tand SOC based hardware, Linux often uses platform_data to point\n \t\tto board-specific structures describing devices and how they\n \t\tare wired.  That can include what ports are available, chip\n \t\tvariants, which GPIO pins act in what additional roles, and so\n \t\ton.  This shrinks the \"Board Support Packages\" (BSPs) and\n \t\tminimizes board-specific #ifdefs in drivers.\n @driver_data: Private pointer for driver specific info.\n @links:\tLinks to suppliers and consumers of this device.\n @power:\tFor device power management.\n\t\tSee Documentation/driver-api/pm/devices.rst for details.\n @pm_domain:\tProvide callbacks that are executed during system suspend,\n \t\thibernation, system resume and during runtime PM transitions\n \t\talong with subsystem-level and driver-level callbacks.\n @em_pd:\tdevice's energy model performance domain\n @pins:\tFor device pin management.\n\t\tSee Documentation/driver-api/pin-control.rst for details.\n @msi:\tMSI related data\n @numa_node:\tNUMA node this device is close to.\n @dma_ops:    DMA mapping operations for this device.\n @dma_mask:\tDma mask (if dma'ble device).\n @coherent_dma_mask: Like dma_mask, but for alloc_coherent mapping as not all\n \t\thardware supports 64-bit addresses for consistent allocations\n \t\tsuch descriptors.\n @bus_dma_limit: Limit of an upstream bridge or bus which imposes a smaller\n\t\tDMA limit than the device itself supports.\n @dma_range_map: map for DMA memory ranges relative to that of RAM\n @dma_parms:\tA low level driver may set these to teach IOMMU code about\n \t\tsegment limitations.\n @dma_pools:\tDma pools (if dma'ble device).\n @dma_mem:\tInternal for coherent mem override.\n @cma_area:\tContiguous memory area for dma allocations\n @dma_io_tlb_mem: Software IO TLB allocator.  Not for driver use.\n @dma_io_tlb_pools:\tList of transient swiotlb memory pools.\n @dma_io_tlb_lock:\tProtects changes to the list of active pools.\n @dma_uses_io_tlb: %true if device has used the software IO TLB.\n @archdata:\tFor arch-specific additions.\n @of_node:\tAssociated device tree node.\n @fwnode:\tAssociated device node supplied by platform firmware.\n @devt:\tFor creating the sysfs \"dev\".\n @id:\t\tdevice instance\n @devres_lock: Spinlock to protect the resource of the device.\n @devres_head: The resources list of the device.\n @class:\tThe class of the device.\n @groups:\tOptional attribute groups.\n @release:\tCallback to free the device after all references have\n \t\tgone away. This should be set by the allocator of the\n \t\tdevice (i.e. the bus driver that discovered the device).\n @iommu_group: IOMMU group the device belongs to.\n @iommu:\tPer device generic IOMMU runtime data\n @physical_location: Describes physical location of the device connection\n\t\tpoint in the system housing.\n @removable:  Whether the device can be removed from the system. This\n              should be set by the subsystem / bus driver that discovered\n              the device.\n\n @offline_disabled: If set, the device is permanently online.\n @offline:\tSet after successful invocation of bus type's .offline().\n @of_node_reused: Set if the device-tree node is shared with an ancestor\n              device.\n @state_synced: The hardware state of this device has been synced to match\n\t\t  the software state of this device by calling the driver/bus\n\t\t  sync_state() callback.\n @can_match:\tThe device has matched with a driver at least once or it is in\n\t\ta bus (like AMBA) which can't check for matching drivers until\n\t\tother devices probe successfully.\n @dma_coherent: this particular device is dma coherent, even if the\n\t\tarchitecture supports non-coherent devices.\n @dma_ops_bypass: If set to %true then the dma_ops are bypassed for the\n\t\tstreaming DMA operations (->map_* / ->unmap_* / ->sync_*),\n\t\tand optionall (if the coherent mask is large enough) also\n\t\tfor dma allocations.  This flag is managed by the dma ops\n\t\tinstance from ->dma_supported.\n @dma_skip_sync: DMA sync operations can be skipped for coherent buffers.\n\n At the lowest level, every device in a Linux system is represented by an\n instance of struct device. The device structure contains the information\n that the device model core needs to model the system. Most subsystems,\n however, track additional information about the devices they host. As a\n result, it is rare for devices to be represented by bare device structures;\n instead, that structure, like kobject structures, is usually embedded within\n a higher-level representation of the device."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device {
    pub kobj: kobject,
    pub parent: *mut device,
    pub p: *mut device_private,
    pub init_name: *const ::std::os::raw::c_char,
    pub type_: *const device_type,
    pub bus: *const bus_type,
    pub driver: *mut device_driver,
    pub platform_data: *mut ::std::os::raw::c_void,
    pub driver_data: *mut ::std::os::raw::c_void,
    pub mutex: mutex,
    pub links: dev_links_info,
    pub power: dev_pm_info,
    pub pm_domain: *mut dev_pm_domain,
    pub em_pd: *mut em_perf_domain,
    pub pins: *mut dev_pin_info,
    pub msi: dev_msi_info,
    pub dma_ops: *mut dma_map_ops,
    pub dma_mask: *mut u64_,
    pub coherent_dma_mask: u64_,
    pub bus_dma_limit: u64_,
    pub dma_range_map: *mut bus_dma_region,
    pub dma_parms: *mut device_dma_parameters,
    pub dma_pools: list_head,
    pub dma_io_tlb_mem: *mut io_tlb_mem,
    pub dma_io_tlb_pools: list_head,
    pub dma_io_tlb_lock: spinlock_t,
    pub dma_uses_io_tlb: bool_,
    pub archdata: dev_archdata,
    pub of_node: *mut device_node,
    pub fwnode: *mut fwnode_handle,
    pub numa_node: ::std::os::raw::c_int,
    pub devt: dev_t,
    pub id: u32_,
    pub devres_lock: spinlock_t,
    pub devres_head: list_head,
    pub class: *const class,
    pub groups: *mut *const attribute_group,
    pub release: ::std::option::Option<unsafe extern "C" fn(dev: *mut device)>,
    pub iommu_group: *mut iommu_group,
    pub iommu: *mut dev_iommu,
    pub physical_location: *mut device_physical_location,
    pub removable: device_removable,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device"][::std::mem::size_of::<device>() - 768usize];
    ["Alignment of device"][::std::mem::align_of::<device>() - 8usize];
    ["Offset of field: device::kobj"][::std::mem::offset_of!(device, kobj) - 0usize];
    ["Offset of field: device::parent"][::std::mem::offset_of!(device, parent) - 64usize];
    ["Offset of field: device::p"][::std::mem::offset_of!(device, p) - 72usize];
    ["Offset of field: device::init_name"][::std::mem::offset_of!(device, init_name) - 80usize];
    ["Offset of field: device::type_"][::std::mem::offset_of!(device, type_) - 88usize];
    ["Offset of field: device::bus"][::std::mem::offset_of!(device, bus) - 96usize];
    ["Offset of field: device::driver"][::std::mem::offset_of!(device, driver) - 104usize];
    ["Offset of field: device::platform_data"]
        [::std::mem::offset_of!(device, platform_data) - 112usize];
    ["Offset of field: device::driver_data"]
        [::std::mem::offset_of!(device, driver_data) - 120usize];
    ["Offset of field: device::mutex"][::std::mem::offset_of!(device, mutex) - 128usize];
    ["Offset of field: device::links"][::std::mem::offset_of!(device, links) - 160usize];
    ["Offset of field: device::power"][::std::mem::offset_of!(device, power) - 216usize];
    ["Offset of field: device::pm_domain"][::std::mem::offset_of!(device, pm_domain) - 528usize];
    ["Offset of field: device::em_pd"][::std::mem::offset_of!(device, em_pd) - 536usize];
    ["Offset of field: device::pins"][::std::mem::offset_of!(device, pins) - 544usize];
    ["Offset of field: device::msi"][::std::mem::offset_of!(device, msi) - 552usize];
    ["Offset of field: device::dma_ops"][::std::mem::offset_of!(device, dma_ops) - 568usize];
    ["Offset of field: device::dma_mask"][::std::mem::offset_of!(device, dma_mask) - 576usize];
    ["Offset of field: device::coherent_dma_mask"]
        [::std::mem::offset_of!(device, coherent_dma_mask) - 584usize];
    ["Offset of field: device::bus_dma_limit"]
        [::std::mem::offset_of!(device, bus_dma_limit) - 592usize];
    ["Offset of field: device::dma_range_map"]
        [::std::mem::offset_of!(device, dma_range_map) - 600usize];
    ["Offset of field: device::dma_parms"][::std::mem::offset_of!(device, dma_parms) - 608usize];
    ["Offset of field: device::dma_pools"][::std::mem::offset_of!(device, dma_pools) - 616usize];
    ["Offset of field: device::dma_io_tlb_mem"]
        [::std::mem::offset_of!(device, dma_io_tlb_mem) - 632usize];
    ["Offset of field: device::dma_io_tlb_pools"]
        [::std::mem::offset_of!(device, dma_io_tlb_pools) - 640usize];
    ["Offset of field: device::dma_io_tlb_lock"]
        [::std::mem::offset_of!(device, dma_io_tlb_lock) - 656usize];
    ["Offset of field: device::dma_uses_io_tlb"]
        [::std::mem::offset_of!(device, dma_uses_io_tlb) - 660usize];
    ["Offset of field: device::archdata"][::std::mem::offset_of!(device, archdata) - 661usize];
    ["Offset of field: device::of_node"][::std::mem::offset_of!(device, of_node) - 664usize];
    ["Offset of field: device::fwnode"][::std::mem::offset_of!(device, fwnode) - 672usize];
    ["Offset of field: device::numa_node"][::std::mem::offset_of!(device, numa_node) - 680usize];
    ["Offset of field: device::devt"][::std::mem::offset_of!(device, devt) - 684usize];
    ["Offset of field: device::id"][::std::mem::offset_of!(device, id) - 688usize];
    ["Offset of field: device::devres_lock"]
        [::std::mem::offset_of!(device, devres_lock) - 692usize];
    ["Offset of field: device::devres_head"]
        [::std::mem::offset_of!(device, devres_head) - 696usize];
    ["Offset of field: device::class"][::std::mem::offset_of!(device, class) - 712usize];
    ["Offset of field: device::groups"][::std::mem::offset_of!(device, groups) - 720usize];
    ["Offset of field: device::release"][::std::mem::offset_of!(device, release) - 728usize];
    ["Offset of field: device::iommu_group"]
        [::std::mem::offset_of!(device, iommu_group) - 736usize];
    ["Offset of field: device::iommu"][::std::mem::offset_of!(device, iommu) - 744usize];
    ["Offset of field: device::physical_location"]
        [::std::mem::offset_of!(device, physical_location) - 752usize];
    ["Offset of field: device::removable"][::std::mem::offset_of!(device, removable) - 760usize];
};
impl device {
    #[inline]
    pub fn offline_disabled(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offline_disabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offline(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_offline(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn of_node_reused(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_of_node_reused(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_synced(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_state_synced(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_match(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_can_match(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_skip_sync(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dma_skip_sync(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        offline_disabled: bool_,
        offline: bool_,
        of_node_reused: bool_,
        state_synced: bool_,
        can_match: bool_,
        dma_skip_sync: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let offline_disabled: u8 = unsafe { ::std::mem::transmute(offline_disabled) };
            offline_disabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let offline: u8 = unsafe { ::std::mem::transmute(offline) };
            offline as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let of_node_reused: u8 = unsafe { ::std::mem::transmute(of_node_reused) };
            of_node_reused as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_synced: u8 = unsafe { ::std::mem::transmute(state_synced) };
            state_synced as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let can_match: u8 = unsafe { ::std::mem::transmute(can_match) };
            can_match as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dma_skip_sync: u8 = unsafe { ::std::mem::transmute(dma_skip_sync) };
            dma_skip_sync as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " struct device_link - Device link representation.\n @supplier: The device on the supplier end of the link.\n @s_node: Hook to the supplier device's list of links to consumers.\n @consumer: The device on the consumer end of the link.\n @c_node: Hook to the consumer device's list of links to suppliers.\n @link_dev: device used to expose link details in sysfs\n @status: The state of the link (with respect to the presence of drivers).\n @flags: Link flags.\n @rpm_active: Whether or not the consumer device is runtime-PM-active.\n @kref: Count repeated addition of the same link.\n @rm_work: Work structure used for removing the link.\n @supplier_preactivated: Supplier has been made active before consumer probe."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_link {
    pub supplier: *mut device,
    pub s_node: list_head,
    pub consumer: *mut device,
    pub c_node: list_head,
    pub link_dev: device,
    pub status: device_link_state,
    pub flags: u32_,
    pub rpm_active: refcount_t,
    pub kref: kref,
    pub rm_work: work_struct,
    pub supplier_preactivated: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of device_link"][::std::mem::size_of::<device_link>() - 872usize];
    ["Alignment of device_link"][::std::mem::align_of::<device_link>() - 8usize];
    ["Offset of field: device_link::supplier"]
        [::std::mem::offset_of!(device_link, supplier) - 0usize];
    ["Offset of field: device_link::s_node"][::std::mem::offset_of!(device_link, s_node) - 8usize];
    ["Offset of field: device_link::consumer"]
        [::std::mem::offset_of!(device_link, consumer) - 24usize];
    ["Offset of field: device_link::c_node"][::std::mem::offset_of!(device_link, c_node) - 32usize];
    ["Offset of field: device_link::link_dev"]
        [::std::mem::offset_of!(device_link, link_dev) - 48usize];
    ["Offset of field: device_link::status"]
        [::std::mem::offset_of!(device_link, status) - 816usize];
    ["Offset of field: device_link::flags"][::std::mem::offset_of!(device_link, flags) - 820usize];
    ["Offset of field: device_link::rpm_active"]
        [::std::mem::offset_of!(device_link, rpm_active) - 824usize];
    ["Offset of field: device_link::kref"][::std::mem::offset_of!(device_link, kref) - 828usize];
    ["Offset of field: device_link::rm_work"]
        [::std::mem::offset_of!(device_link, rm_work) - 832usize];
    ["Offset of field: device_link::supplier_preactivated"]
        [::std::mem::offset_of!(device_link, supplier_preactivated) - 864usize];
};
#[doc = " struct wakeup_source - Representation of wakeup sources\n\n @name: Name of the wakeup source\n @id: Wakeup source id\n @entry: Wakeup source list entry\n @lock: Wakeup source lock\n @wakeirq: Optional device specific wakeirq\n @timer: Wakeup timer list\n @timer_expires: Wakeup timer expiration\n @total_time: Total time this wakeup source has been active.\n @max_time: Maximum time this wakeup source has been continuously active.\n @last_time: Monotonic clock when the wakeup source's was touched last time.\n @prevent_sleep_time: Total time this source has been preventing autosleep.\n @event_count: Number of signaled wakeup events.\n @active_count: Number of times the wakeup source was activated.\n @relax_count: Number of times the wakeup source was deactivated.\n @expire_count: Number of times the wakeup source's timeout has expired.\n @wakeup_count: Number of times the wakeup source might abort suspend.\n @dev: Struct device for sysfs statistics about the wakeup source.\n @active: Status of the wakeup source.\n @autosleep_enabled: Autosleep is active, so update @prevent_sleep_time."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wakeup_source {
    pub name: *const ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_int,
    pub entry: list_head,
    pub lock: spinlock_t,
    pub wakeirq: *mut wake_irq,
    pub timer: timer_list,
    pub timer_expires: ::std::os::raw::c_ulong,
    pub total_time: ktime_t,
    pub max_time: ktime_t,
    pub last_time: ktime_t,
    pub start_prevent_time: ktime_t,
    pub prevent_sleep_time: ktime_t,
    pub event_count: ::std::os::raw::c_ulong,
    pub active_count: ::std::os::raw::c_ulong,
    pub relax_count: ::std::os::raw::c_ulong,
    pub expire_count: ::std::os::raw::c_ulong,
    pub wakeup_count: ::std::os::raw::c_ulong,
    pub dev: *mut device,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wakeup_source"][::std::mem::size_of::<wakeup_source>() - 192usize];
    ["Alignment of wakeup_source"][::std::mem::align_of::<wakeup_source>() - 8usize];
    ["Offset of field: wakeup_source::name"][::std::mem::offset_of!(wakeup_source, name) - 0usize];
    ["Offset of field: wakeup_source::id"][::std::mem::offset_of!(wakeup_source, id) - 8usize];
    ["Offset of field: wakeup_source::entry"]
        [::std::mem::offset_of!(wakeup_source, entry) - 16usize];
    ["Offset of field: wakeup_source::lock"][::std::mem::offset_of!(wakeup_source, lock) - 32usize];
    ["Offset of field: wakeup_source::wakeirq"]
        [::std::mem::offset_of!(wakeup_source, wakeirq) - 40usize];
    ["Offset of field: wakeup_source::timer"]
        [::std::mem::offset_of!(wakeup_source, timer) - 48usize];
    ["Offset of field: wakeup_source::timer_expires"]
        [::std::mem::offset_of!(wakeup_source, timer_expires) - 88usize];
    ["Offset of field: wakeup_source::total_time"]
        [::std::mem::offset_of!(wakeup_source, total_time) - 96usize];
    ["Offset of field: wakeup_source::max_time"]
        [::std::mem::offset_of!(wakeup_source, max_time) - 104usize];
    ["Offset of field: wakeup_source::last_time"]
        [::std::mem::offset_of!(wakeup_source, last_time) - 112usize];
    ["Offset of field: wakeup_source::start_prevent_time"]
        [::std::mem::offset_of!(wakeup_source, start_prevent_time) - 120usize];
    ["Offset of field: wakeup_source::prevent_sleep_time"]
        [::std::mem::offset_of!(wakeup_source, prevent_sleep_time) - 128usize];
    ["Offset of field: wakeup_source::event_count"]
        [::std::mem::offset_of!(wakeup_source, event_count) - 136usize];
    ["Offset of field: wakeup_source::active_count"]
        [::std::mem::offset_of!(wakeup_source, active_count) - 144usize];
    ["Offset of field: wakeup_source::relax_count"]
        [::std::mem::offset_of!(wakeup_source, relax_count) - 152usize];
    ["Offset of field: wakeup_source::expire_count"]
        [::std::mem::offset_of!(wakeup_source, expire_count) - 160usize];
    ["Offset of field: wakeup_source::wakeup_count"]
        [::std::mem::offset_of!(wakeup_source, wakeup_count) - 168usize];
    ["Offset of field: wakeup_source::dev"][::std::mem::offset_of!(wakeup_source, dev) - 176usize];
};
impl wakeup_source {
    #[inline]
    pub fn active(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_active(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autosleep_enabled(&self) -> bool_ {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autosleep_enabled(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        active: bool_,
        autosleep_enabled: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let active: u8 = unsafe { ::std::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autosleep_enabled: u8 = unsafe { ::std::mem::transmute(autosleep_enabled) };
            autosleep_enabled as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn wakeup_source_create(name: *const ::std::os::raw::c_char) -> *mut wakeup_source;
}
extern "C" {
    pub fn wakeup_source_destroy(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_source_add(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_source_remove(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_source_register(
        dev: *mut device,
        name: *const ::std::os::raw::c_char,
    ) -> *mut wakeup_source;
}
extern "C" {
    pub fn wakeup_source_unregister(ws: *mut wakeup_source);
}
extern "C" {
    pub fn wakeup_sources_read_lock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wakeup_sources_read_unlock(idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wakeup_sources_walk_start() -> *mut wakeup_source;
}
extern "C" {
    pub fn wakeup_sources_walk_next(ws: *mut wakeup_source) -> *mut wakeup_source;
}
extern "C" {
    pub fn device_wakeup_enable(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_wakeup_disable(dev: *mut device);
}
extern "C" {
    pub fn device_set_wakeup_capable(dev: *mut device, capable: bool_);
}
extern "C" {
    pub fn device_set_wakeup_enable(dev: *mut device, enable: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __pm_stay_awake(ws: *mut wakeup_source);
}
extern "C" {
    pub fn pm_stay_awake(dev: *mut device);
}
extern "C" {
    pub fn __pm_relax(ws: *mut wakeup_source);
}
extern "C" {
    pub fn pm_relax(dev: *mut device);
}
extern "C" {
    pub fn pm_wakeup_ws_event(ws: *mut wakeup_source, msec: ::std::os::raw::c_uint, hard: bool_);
}
extern "C" {
    pub fn pm_wakeup_dev_event(dev: *mut device, msec: ::std::os::raw::c_uint, hard: bool_);
}
extern "C" {
    pub fn dev_set_name(
        dev: *mut device,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type class_device_t = *mut device;
extern "C" {
    pub fn device_register(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_unregister(dev: *mut device);
}
extern "C" {
    pub fn device_initialize(dev: *mut device);
}
extern "C" {
    pub fn device_add(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_del(dev: *mut device);
}
extern "C" {
    pub fn device_for_each_child(
        dev: *mut device,
        data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_for_each_child_reverse(
        dev: *mut device,
        data: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_find_child(
        dev: *mut device,
        data: *mut ::std::os::raw::c_void,
        match_: ::std::option::Option<
            unsafe extern "C" fn(
                dev: *mut device,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut device;
}
extern "C" {
    pub fn device_find_child_by_name(
        parent: *mut device,
        name: *const ::std::os::raw::c_char,
    ) -> *mut device;
}
extern "C" {
    pub fn device_find_any_child(parent: *mut device) -> *mut device;
}
extern "C" {
    pub fn device_rename(
        dev: *mut device,
        new_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_move(
        dev: *mut device,
        new_parent: *mut device,
        dpm_order: dpm_order,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_change_owner(
        dev: *mut device,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lock_device_hotplug();
}
extern "C" {
    pub fn unlock_device_hotplug();
}
extern "C" {
    pub fn lock_device_hotplug_sysfs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_offline(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_online(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_primary_fwnode(dev: *mut device, fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn set_secondary_fwnode(dev: *mut device, fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn device_set_node(dev: *mut device, fwnode: *mut fwnode_handle);
}
extern "C" {
    pub fn device_set_of_node_from_dev(dev: *mut device, dev2: *const device);
}
extern "C" {
    pub fn __root_device_register(
        name: *const ::std::os::raw::c_char,
        owner: *mut module,
    ) -> *mut device;
}
extern "C" {
    pub fn root_device_unregister(root: *mut device);
}
extern "C" {
    pub fn device_driver_attach(
        drv: *const device_driver,
        dev: *mut device,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_bind_driver(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_release_driver(dev: *mut device);
}
extern "C" {
    pub fn device_attach(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_attach(drv: *const device_driver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_initial_probe(dev: *mut device);
}
extern "C" {
    pub fn device_reprobe(dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_is_bound(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn device_create(
        cls: *const class,
        parent: *mut device,
        devt: dev_t,
        drvdata: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut device;
}
extern "C" {
    pub fn device_create_with_groups(
        cls: *const class,
        parent: *mut device,
        devt: dev_t,
        drvdata: *mut ::std::os::raw::c_void,
        groups: *mut *const attribute_group,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut device;
}
extern "C" {
    pub fn device_destroy(cls: *const class, devt: dev_t);
}
extern "C" {
    pub fn device_add_groups(
        dev: *mut device,
        groups: *mut *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_remove_groups(dev: *mut device, groups: *mut *const attribute_group);
}
extern "C" {
    pub fn devm_device_add_group(
        dev: *mut device,
        grp: *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_device(dev: *mut device) -> *mut device;
}
extern "C" {
    pub fn put_device(dev: *mut device);
}
extern "C" {
    pub fn kill_device(dev: *mut device) -> bool_;
}
extern "C" {
    pub fn devtmpfs_mount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn device_shutdown();
}
extern "C" {
    pub fn dev_driver_string(dev: *const device) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn device_link_add(
        consumer: *mut device,
        supplier: *mut device,
        flags: u32_,
    ) -> *mut device_link;
}
extern "C" {
    pub fn device_link_del(link: *mut device_link);
}
extern "C" {
    pub fn device_link_remove(consumer: *mut ::std::os::raw::c_void, supplier: *mut device);
}
extern "C" {
    pub fn device_links_supplier_sync_state_pause();
}
extern "C" {
    pub fn device_links_supplier_sync_state_resume();
}
extern "C" {
    pub fn device_link_wait_removal();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpio_array {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpio_desc {
    _unused: [u8; 0],
}
#[doc = " struct gpio_descs - Struct containing an array of descriptors that can be\n                     obtained using gpiod_get_array()\n\n @info:\tPointer to the opaque gpio_array structure\n @ndescs:\tNumber of held descriptors\n @desc:\tArray of pointers to GPIO descriptors"]
#[repr(C)]
#[derive(Debug)]
pub struct gpio_descs {
    pub info: *mut gpio_array,
    pub ndescs: ::std::os::raw::c_uint,
    pub desc: __IncompleteArrayField<*mut gpio_desc>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpio_descs"][::std::mem::size_of::<gpio_descs>() - 16usize];
    ["Alignment of gpio_descs"][::std::mem::align_of::<gpio_descs>() - 8usize];
    ["Offset of field: gpio_descs::info"][::std::mem::offset_of!(gpio_descs, info) - 0usize];
    ["Offset of field: gpio_descs::ndescs"][::std::mem::offset_of!(gpio_descs, ndescs) - 8usize];
    ["Offset of field: gpio_descs::desc"][::std::mem::offset_of!(gpio_descs, desc) - 16usize];
};
pub const gpiod_flags_GPIOD_ASIS: gpiod_flags = 0;
pub const gpiod_flags_GPIOD_IN: gpiod_flags = 1;
pub const gpiod_flags_GPIOD_OUT_LOW: gpiod_flags = 3;
pub const gpiod_flags_GPIOD_OUT_HIGH: gpiod_flags = 7;
pub const gpiod_flags_GPIOD_OUT_LOW_OPEN_DRAIN: gpiod_flags = 11;
pub const gpiod_flags_GPIOD_OUT_HIGH_OPEN_DRAIN: gpiod_flags = 15;
#[doc = " enum gpiod_flags - Optional flags that can be passed to one of gpiod_* to\n                    configure direction and output value. These values\n                    cannot be OR'd.\n\n @GPIOD_ASIS:\t\t\tDon't change anything\n @GPIOD_IN:\t\t\tSet lines to input mode\n @GPIOD_OUT_LOW:\t\tSet lines to output and drive them low\n @GPIOD_OUT_HIGH:\t\tSet lines to output and drive them high\n @GPIOD_OUT_LOW_OPEN_DRAIN:\tSet lines to open-drain output and drive them low\n @GPIOD_OUT_HIGH_OPEN_DRAIN:\tSet lines to open-drain output and drive them high"]
pub type gpiod_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn gpiod_count(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn gpiod_get_index(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_uint,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn gpiod_get_optional(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn gpiod_get_index_optional(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_uint,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn gpiod_get_array(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_descs;
}
extern "C" {
    pub fn gpiod_get_array_optional(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_descs;
}
extern "C" {
    pub fn gpiod_put(desc: *mut gpio_desc);
}
extern "C" {
    pub fn gpiod_put_array(descs: *mut gpio_descs);
}
extern "C" {
    pub fn devm_gpiod_get(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn devm_gpiod_get_index(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_uint,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn devm_gpiod_get_optional(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn devm_gpiod_get_index_optional(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_uint,
        flags: gpiod_flags,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn devm_gpiod_get_array(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_descs;
}
extern "C" {
    pub fn devm_gpiod_get_array_optional(
        dev: *mut device,
        con_id: *const ::std::os::raw::c_char,
        flags: gpiod_flags,
    ) -> *mut gpio_descs;
}
extern "C" {
    pub fn devm_gpiod_put(dev: *mut device, desc: *mut gpio_desc);
}
extern "C" {
    pub fn devm_gpiod_unhinge(dev: *mut device, desc: *mut gpio_desc);
}
extern "C" {
    pub fn devm_gpiod_put_array(dev: *mut device, descs: *mut gpio_descs);
}
extern "C" {
    pub fn gpiod_get_direction(desc: *mut gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_direction_input(desc: *mut gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_direction_output(
        desc: *mut gpio_desc,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_direction_output_raw(
        desc: *mut gpio_desc,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_enable_hw_timestamp_ns(
        desc: *mut gpio_desc,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_disable_hw_timestamp_ns(
        desc: *mut gpio_desc,
        flags: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_value(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_array_value(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_set_value(desc: *mut gpio_desc, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gpiod_set_array_value(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_raw_value(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_raw_array_value(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_set_raw_value(desc: *mut gpio_desc, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gpiod_set_raw_array_value(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_value_cansleep(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_array_value_cansleep(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_set_value_cansleep(desc: *mut gpio_desc, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gpiod_set_array_value_cansleep(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_raw_value_cansleep(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_get_raw_array_value_cansleep(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_set_raw_value_cansleep(desc: *mut gpio_desc, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gpiod_set_raw_array_value_cansleep(
        array_size: ::std::os::raw::c_uint,
        desc_array: *mut *mut gpio_desc,
        array_info: *mut gpio_array,
        value_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_set_config(
        desc: *mut gpio_desc,
        config: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_set_debounce(
        desc: *mut gpio_desc,
        debounce: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_toggle_active_low(desc: *mut gpio_desc);
}
extern "C" {
    pub fn gpiod_is_active_low(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_cansleep(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_to_irq(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_set_consumer_name(
        desc: *mut gpio_desc,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpio_to_desc(gpio: ::std::os::raw::c_uint) -> *mut gpio_desc;
}
extern "C" {
    pub fn desc_to_gpio(desc: *const gpio_desc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwnode_gpiod_get_index(
        fwnode: *mut fwnode_handle,
        con_id: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        flags: gpiod_flags,
        label: *const ::std::os::raw::c_char,
    ) -> *mut gpio_desc;
}
extern "C" {
    pub fn devm_fwnode_gpiod_get_index(
        dev: *mut device,
        child: *mut fwnode_handle,
        con_id: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        flags: gpiod_flags,
        label: *const ::std::os::raw::c_char,
    ) -> *mut gpio_desc;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gpio_params {
    pub crs_entry_index: ::std::os::raw::c_uint,
    pub line_index: ::std::os::raw::c_uint,
    pub active_low: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gpio_params"][::std::mem::size_of::<acpi_gpio_params>() - 12usize];
    ["Alignment of acpi_gpio_params"][::std::mem::align_of::<acpi_gpio_params>() - 4usize];
    ["Offset of field: acpi_gpio_params::crs_entry_index"]
        [::std::mem::offset_of!(acpi_gpio_params, crs_entry_index) - 0usize];
    ["Offset of field: acpi_gpio_params::line_index"]
        [::std::mem::offset_of!(acpi_gpio_params, line_index) - 4usize];
    ["Offset of field: acpi_gpio_params::active_low"]
        [::std::mem::offset_of!(acpi_gpio_params, active_low) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gpio_mapping {
    pub name: *const ::std::os::raw::c_char,
    pub data: *const acpi_gpio_params,
    pub size: ::std::os::raw::c_uint,
    pub quirks: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acpi_gpio_mapping"][::std::mem::size_of::<acpi_gpio_mapping>() - 24usize];
    ["Alignment of acpi_gpio_mapping"][::std::mem::align_of::<acpi_gpio_mapping>() - 8usize];
    ["Offset of field: acpi_gpio_mapping::name"]
        [::std::mem::offset_of!(acpi_gpio_mapping, name) - 0usize];
    ["Offset of field: acpi_gpio_mapping::data"]
        [::std::mem::offset_of!(acpi_gpio_mapping, data) - 8usize];
    ["Offset of field: acpi_gpio_mapping::size"]
        [::std::mem::offset_of!(acpi_gpio_mapping, size) - 16usize];
    ["Offset of field: acpi_gpio_mapping::quirks"]
        [::std::mem::offset_of!(acpi_gpio_mapping, quirks) - 20usize];
};
extern "C" {
    pub fn acpi_dev_add_driver_gpios(
        adev: *mut acpi_device,
        gpios: *const acpi_gpio_mapping,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acpi_dev_remove_driver_gpios(adev: *mut acpi_device);
}
extern "C" {
    pub fn devm_acpi_dev_add_driver_gpios(
        dev: *mut device,
        gpios: *const acpi_gpio_mapping,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_export(desc: *mut gpio_desc, direction_may_change: bool_)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_export_link(
        dev: *mut device,
        name: *const ::std::os::raw::c_char,
        desc: *mut gpio_desc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpiod_unexport(desc: *mut gpio_desc);
}
pub type nvmem_reg_read_t = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        offset: ::std::os::raw::c_uint,
        val: *mut ::std::os::raw::c_void,
        bytes: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type nvmem_reg_write_t = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        offset: ::std::os::raw::c_uint,
        val: *mut ::std::os::raw::c_void,
        bytes: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type nvmem_cell_post_process_t = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        id: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_void,
        bytes: usize,
    ) -> ::std::os::raw::c_int,
>;
pub const nvmem_type_NVMEM_TYPE_UNKNOWN: nvmem_type = 0;
pub const nvmem_type_NVMEM_TYPE_EEPROM: nvmem_type = 1;
pub const nvmem_type_NVMEM_TYPE_OTP: nvmem_type = 2;
pub const nvmem_type_NVMEM_TYPE_BATTERY_BACKED: nvmem_type = 3;
pub const nvmem_type_NVMEM_TYPE_FRAM: nvmem_type = 4;
pub type nvmem_type = ::std::os::raw::c_uint;
#[doc = " struct nvmem_keepout - NVMEM register keepout range.\n\n @start:\tThe first byte offset to avoid.\n @end:\tOne beyond the last byte offset to avoid.\n @value:\tThe byte to fill reads with for this region."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_keepout {
    pub start: ::std::os::raw::c_uint,
    pub end: ::std::os::raw::c_uint,
    pub value: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvmem_keepout"][::std::mem::size_of::<nvmem_keepout>() - 12usize];
    ["Alignment of nvmem_keepout"][::std::mem::align_of::<nvmem_keepout>() - 4usize];
    ["Offset of field: nvmem_keepout::start"]
        [::std::mem::offset_of!(nvmem_keepout, start) - 0usize];
    ["Offset of field: nvmem_keepout::end"][::std::mem::offset_of!(nvmem_keepout, end) - 4usize];
    ["Offset of field: nvmem_keepout::value"]
        [::std::mem::offset_of!(nvmem_keepout, value) - 8usize];
};
#[doc = " struct nvmem_cell_info - NVMEM cell description\n @name:\tName.\n @offset:\tOffset within the NVMEM device.\n @raw_len:\tLength of raw data (without post processing).\n @bytes:\tLength of the cell.\n @bit_offset:\tBit offset if cell is smaller than a byte.\n @nbits:\tNumber of bits.\n @np:\t\tOptional device_node pointer.\n @read_post_process:\tCallback for optional post processing of cell data\n\t\t\ton reads.\n @priv:\tOpaque data passed to the read_post_process hook."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_cell_info {
    pub name: *const ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_uint,
    pub raw_len: usize,
    pub bytes: ::std::os::raw::c_uint,
    pub bit_offset: ::std::os::raw::c_uint,
    pub nbits: ::std::os::raw::c_uint,
    pub np: *mut device_node,
    pub read_post_process: nvmem_cell_post_process_t,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvmem_cell_info"][::std::mem::size_of::<nvmem_cell_info>() - 64usize];
    ["Alignment of nvmem_cell_info"][::std::mem::align_of::<nvmem_cell_info>() - 8usize];
    ["Offset of field: nvmem_cell_info::name"]
        [::std::mem::offset_of!(nvmem_cell_info, name) - 0usize];
    ["Offset of field: nvmem_cell_info::offset"]
        [::std::mem::offset_of!(nvmem_cell_info, offset) - 8usize];
    ["Offset of field: nvmem_cell_info::raw_len"]
        [::std::mem::offset_of!(nvmem_cell_info, raw_len) - 16usize];
    ["Offset of field: nvmem_cell_info::bytes"]
        [::std::mem::offset_of!(nvmem_cell_info, bytes) - 24usize];
    ["Offset of field: nvmem_cell_info::bit_offset"]
        [::std::mem::offset_of!(nvmem_cell_info, bit_offset) - 28usize];
    ["Offset of field: nvmem_cell_info::nbits"]
        [::std::mem::offset_of!(nvmem_cell_info, nbits) - 32usize];
    ["Offset of field: nvmem_cell_info::np"][::std::mem::offset_of!(nvmem_cell_info, np) - 40usize];
    ["Offset of field: nvmem_cell_info::read_post_process"]
        [::std::mem::offset_of!(nvmem_cell_info, read_post_process) - 48usize];
    ["Offset of field: nvmem_cell_info::priv_"]
        [::std::mem::offset_of!(nvmem_cell_info, priv_) - 56usize];
};
#[doc = " struct nvmem_config - NVMEM device configuration\n\n @dev:\tParent device.\n @name:\tOptional name.\n @id:\t\tOptional device ID used in full name. Ignored if name is NULL.\n @owner:\tPointer to exporter module. Used for refcounting.\n @cells:\tOptional array of pre-defined NVMEM cells.\n @ncells:\tNumber of elements in cells.\n @add_legacy_fixed_of_cells:\tRead fixed NVMEM cells from old OF syntax.\n @fixup_dt_cell_info: Will be called before a cell is added. Can be\n\t\tused to modify the nvmem_cell_info.\n @keepout:\tOptional array of keepout ranges (sorted ascending by start).\n @nkeepout:\tNumber of elements in the keepout array.\n @type:\tType of the nvmem storage\n @read_only:\tDevice is read-only.\n @root_only:\tDevice is accessibly to root only.\n @of_node:\tIf given, this will be used instead of the parent's of_node.\n @reg_read:\tCallback to read data.\n @reg_write:\tCallback to write data.\n @size:\tDevice size.\n @word_size:\tMinimum read/write access granularity.\n @stride:\tMinimum read/write access stride.\n @priv:\tUser context passed to read/write callbacks.\n @ignore_wp:  Write Protect pin is managed by the provider.\n @layout:\tFixed layout associated with this nvmem device.\n\n Note: A default \"nvmem<id>\" name will be assigned to the device if\n no name is specified in its configuration. In such case \"<id>\" is\n generated with ida_simple_get() and provided id field is ignored.\n\n Note: Specifying name and setting id to -1 implies a unique device\n whose name is provided as-is (kept unaltered)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_config {
    pub dev: *mut device,
    pub name: *const ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_int,
    pub owner: *mut module,
    pub cells: *const nvmem_cell_info,
    pub ncells: ::std::os::raw::c_int,
    pub add_legacy_fixed_of_cells: bool_,
    pub fixup_dt_cell_info: ::std::option::Option<
        unsafe extern "C" fn(nvmem: *mut nvmem_device, cell: *mut nvmem_cell_info),
    >,
    pub keepout: *const nvmem_keepout,
    pub nkeepout: ::std::os::raw::c_uint,
    pub type_: nvmem_type,
    pub read_only: bool_,
    pub root_only: bool_,
    pub ignore_wp: bool_,
    pub layout: *mut nvmem_layout,
    pub of_node: *mut device_node,
    pub reg_read: nvmem_reg_read_t,
    pub reg_write: nvmem_reg_write_t,
    pub size: ::std::os::raw::c_int,
    pub word_size: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
    pub priv_: *mut ::std::os::raw::c_void,
    pub compat: bool_,
    pub base_dev: *mut device,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvmem_config"][::std::mem::size_of::<nvmem_config>() - 152usize];
    ["Alignment of nvmem_config"][::std::mem::align_of::<nvmem_config>() - 8usize];
    ["Offset of field: nvmem_config::dev"][::std::mem::offset_of!(nvmem_config, dev) - 0usize];
    ["Offset of field: nvmem_config::name"][::std::mem::offset_of!(nvmem_config, name) - 8usize];
    ["Offset of field: nvmem_config::id"][::std::mem::offset_of!(nvmem_config, id) - 16usize];
    ["Offset of field: nvmem_config::owner"][::std::mem::offset_of!(nvmem_config, owner) - 24usize];
    ["Offset of field: nvmem_config::cells"][::std::mem::offset_of!(nvmem_config, cells) - 32usize];
    ["Offset of field: nvmem_config::ncells"]
        [::std::mem::offset_of!(nvmem_config, ncells) - 40usize];
    ["Offset of field: nvmem_config::add_legacy_fixed_of_cells"]
        [::std::mem::offset_of!(nvmem_config, add_legacy_fixed_of_cells) - 44usize];
    ["Offset of field: nvmem_config::fixup_dt_cell_info"]
        [::std::mem::offset_of!(nvmem_config, fixup_dt_cell_info) - 48usize];
    ["Offset of field: nvmem_config::keepout"]
        [::std::mem::offset_of!(nvmem_config, keepout) - 56usize];
    ["Offset of field: nvmem_config::nkeepout"]
        [::std::mem::offset_of!(nvmem_config, nkeepout) - 64usize];
    ["Offset of field: nvmem_config::type_"][::std::mem::offset_of!(nvmem_config, type_) - 68usize];
    ["Offset of field: nvmem_config::read_only"]
        [::std::mem::offset_of!(nvmem_config, read_only) - 72usize];
    ["Offset of field: nvmem_config::root_only"]
        [::std::mem::offset_of!(nvmem_config, root_only) - 73usize];
    ["Offset of field: nvmem_config::ignore_wp"]
        [::std::mem::offset_of!(nvmem_config, ignore_wp) - 74usize];
    ["Offset of field: nvmem_config::layout"]
        [::std::mem::offset_of!(nvmem_config, layout) - 80usize];
    ["Offset of field: nvmem_config::of_node"]
        [::std::mem::offset_of!(nvmem_config, of_node) - 88usize];
    ["Offset of field: nvmem_config::reg_read"]
        [::std::mem::offset_of!(nvmem_config, reg_read) - 96usize];
    ["Offset of field: nvmem_config::reg_write"]
        [::std::mem::offset_of!(nvmem_config, reg_write) - 104usize];
    ["Offset of field: nvmem_config::size"][::std::mem::offset_of!(nvmem_config, size) - 112usize];
    ["Offset of field: nvmem_config::word_size"]
        [::std::mem::offset_of!(nvmem_config, word_size) - 116usize];
    ["Offset of field: nvmem_config::stride"]
        [::std::mem::offset_of!(nvmem_config, stride) - 120usize];
    ["Offset of field: nvmem_config::priv_"]
        [::std::mem::offset_of!(nvmem_config, priv_) - 128usize];
    ["Offset of field: nvmem_config::compat"]
        [::std::mem::offset_of!(nvmem_config, compat) - 136usize];
    ["Offset of field: nvmem_config::base_dev"]
        [::std::mem::offset_of!(nvmem_config, base_dev) - 144usize];
};
#[doc = " struct nvmem_cell_table - NVMEM cell definitions for given provider\n\n @nvmem_name:\t\tProvider name.\n @cells:\t\tArray of cell definitions.\n @ncells:\t\tNumber of cell definitions in the array.\n @node:\t\tList node.\n\n This structure together with related helper functions is provided for users\n that don't can't access the nvmem provided structure but wish to register\n cell definitions for it e.g. board files registering an EEPROM device."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_cell_table {
    pub nvmem_name: *const ::std::os::raw::c_char,
    pub cells: *const nvmem_cell_info,
    pub ncells: usize,
    pub node: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvmem_cell_table"][::std::mem::size_of::<nvmem_cell_table>() - 40usize];
    ["Alignment of nvmem_cell_table"][::std::mem::align_of::<nvmem_cell_table>() - 8usize];
    ["Offset of field: nvmem_cell_table::nvmem_name"]
        [::std::mem::offset_of!(nvmem_cell_table, nvmem_name) - 0usize];
    ["Offset of field: nvmem_cell_table::cells"]
        [::std::mem::offset_of!(nvmem_cell_table, cells) - 8usize];
    ["Offset of field: nvmem_cell_table::ncells"]
        [::std::mem::offset_of!(nvmem_cell_table, ncells) - 16usize];
    ["Offset of field: nvmem_cell_table::node"]
        [::std::mem::offset_of!(nvmem_cell_table, node) - 24usize];
};
#[doc = " struct nvmem_layout - NVMEM layout definitions\n\n @dev:\t\tDevice-model layout device.\n @nvmem:\t\tThe underlying NVMEM device\n @add_cells:\t\tWill be called if a nvmem device is found which\n\t\t\thas this layout. The function will add layout\n\t\t\tspecific cells with nvmem_add_one_cell().\n\n A nvmem device can hold a well defined structure which can just be\n evaluated during runtime. For example a TLV list, or a list of \"name=val\"\n pairs. A nvmem layout can parse the nvmem device and add appropriate\n cells."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvmem_layout {
    pub dev: device,
    pub nvmem: *mut nvmem_device,
    pub add_cells: ::std::option::Option<
        unsafe extern "C" fn(layout: *mut nvmem_layout) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvmem_layout"][::std::mem::size_of::<nvmem_layout>() - 784usize];
    ["Alignment of nvmem_layout"][::std::mem::align_of::<nvmem_layout>() - 8usize];
    ["Offset of field: nvmem_layout::dev"][::std::mem::offset_of!(nvmem_layout, dev) - 0usize];
    ["Offset of field: nvmem_layout::nvmem"]
        [::std::mem::offset_of!(nvmem_layout, nvmem) - 768usize];
    ["Offset of field: nvmem_layout::add_cells"]
        [::std::mem::offset_of!(nvmem_layout, add_cells) - 776usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvmem_layout_driver {
    pub driver: device_driver,
    pub probe: ::std::option::Option<
        unsafe extern "C" fn(layout: *mut nvmem_layout) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<unsafe extern "C" fn(layout: *mut nvmem_layout)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvmem_layout_driver"][::std::mem::size_of::<nvmem_layout_driver>() - 160usize];
    ["Alignment of nvmem_layout_driver"][::std::mem::align_of::<nvmem_layout_driver>() - 8usize];
    ["Offset of field: nvmem_layout_driver::driver"]
        [::std::mem::offset_of!(nvmem_layout_driver, driver) - 0usize];
    ["Offset of field: nvmem_layout_driver::probe"]
        [::std::mem::offset_of!(nvmem_layout_driver, probe) - 144usize];
    ["Offset of field: nvmem_layout_driver::remove"]
        [::std::mem::offset_of!(nvmem_layout_driver, remove) - 152usize];
};
extern "C" {
    pub fn nvmem_register(cfg: *const nvmem_config) -> *mut nvmem_device;
}
extern "C" {
    pub fn nvmem_unregister(nvmem: *mut nvmem_device);
}
extern "C" {
    pub fn devm_nvmem_register(dev: *mut device, cfg: *const nvmem_config) -> *mut nvmem_device;
}
extern "C" {
    pub fn nvmem_add_cell_table(table: *mut nvmem_cell_table);
}
extern "C" {
    pub fn nvmem_del_cell_table(table: *mut nvmem_cell_table);
}
extern "C" {
    pub fn nvmem_add_one_cell(
        nvmem: *mut nvmem_device,
        info: *const nvmem_cell_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_layout_register(layout: *mut nvmem_layout) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_layout_unregister(layout: *mut nvmem_layout);
}
extern "C" {
    pub fn __nvmem_layout_driver_register(
        drv: *mut nvmem_layout_driver,
        owner: *mut module,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvmem_layout_driver_unregister(drv: *mut nvmem_layout_driver);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtc_time {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_time"][::std::mem::size_of::<rtc_time>() - 36usize];
    ["Alignment of rtc_time"][::std::mem::align_of::<rtc_time>() - 4usize];
    ["Offset of field: rtc_time::tm_sec"][::std::mem::offset_of!(rtc_time, tm_sec) - 0usize];
    ["Offset of field: rtc_time::tm_min"][::std::mem::offset_of!(rtc_time, tm_min) - 4usize];
    ["Offset of field: rtc_time::tm_hour"][::std::mem::offset_of!(rtc_time, tm_hour) - 8usize];
    ["Offset of field: rtc_time::tm_mday"][::std::mem::offset_of!(rtc_time, tm_mday) - 12usize];
    ["Offset of field: rtc_time::tm_mon"][::std::mem::offset_of!(rtc_time, tm_mon) - 16usize];
    ["Offset of field: rtc_time::tm_year"][::std::mem::offset_of!(rtc_time, tm_year) - 20usize];
    ["Offset of field: rtc_time::tm_wday"][::std::mem::offset_of!(rtc_time, tm_wday) - 24usize];
    ["Offset of field: rtc_time::tm_yday"][::std::mem::offset_of!(rtc_time, tm_yday) - 28usize];
    ["Offset of field: rtc_time::tm_isdst"][::std::mem::offset_of!(rtc_time, tm_isdst) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtc_wkalrm {
    pub enabled: ::std::os::raw::c_uchar,
    pub pending: ::std::os::raw::c_uchar,
    pub time: rtc_time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_wkalrm"][::std::mem::size_of::<rtc_wkalrm>() - 40usize];
    ["Alignment of rtc_wkalrm"][::std::mem::align_of::<rtc_wkalrm>() - 4usize];
    ["Offset of field: rtc_wkalrm::enabled"][::std::mem::offset_of!(rtc_wkalrm, enabled) - 0usize];
    ["Offset of field: rtc_wkalrm::pending"][::std::mem::offset_of!(rtc_wkalrm, pending) - 1usize];
    ["Offset of field: rtc_wkalrm::time"][::std::mem::offset_of!(rtc_wkalrm, time) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtc_pll_info {
    pub pll_ctrl: ::std::os::raw::c_int,
    pub pll_value: ::std::os::raw::c_int,
    pub pll_max: ::std::os::raw::c_int,
    pub pll_min: ::std::os::raw::c_int,
    pub pll_posmult: ::std::os::raw::c_int,
    pub pll_negmult: ::std::os::raw::c_int,
    pub pll_clock: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_pll_info"][::std::mem::size_of::<rtc_pll_info>() - 32usize];
    ["Alignment of rtc_pll_info"][::std::mem::align_of::<rtc_pll_info>() - 8usize];
    ["Offset of field: rtc_pll_info::pll_ctrl"]
        [::std::mem::offset_of!(rtc_pll_info, pll_ctrl) - 0usize];
    ["Offset of field: rtc_pll_info::pll_value"]
        [::std::mem::offset_of!(rtc_pll_info, pll_value) - 4usize];
    ["Offset of field: rtc_pll_info::pll_max"]
        [::std::mem::offset_of!(rtc_pll_info, pll_max) - 8usize];
    ["Offset of field: rtc_pll_info::pll_min"]
        [::std::mem::offset_of!(rtc_pll_info, pll_min) - 12usize];
    ["Offset of field: rtc_pll_info::pll_posmult"]
        [::std::mem::offset_of!(rtc_pll_info, pll_posmult) - 16usize];
    ["Offset of field: rtc_pll_info::pll_negmult"]
        [::std::mem::offset_of!(rtc_pll_info, pll_negmult) - 20usize];
    ["Offset of field: rtc_pll_info::pll_clock"]
        [::std::mem::offset_of!(rtc_pll_info, pll_clock) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rtc_param {
    pub param: __u64,
    pub __bindgen_anon_1: rtc_param__bindgen_ty_1,
    pub index: __u32,
    pub __pad: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_param__bindgen_ty_1 {
    pub uvalue: __u64,
    pub svalue: __s64,
    pub ptr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_param__bindgen_ty_1"][::std::mem::size_of::<rtc_param__bindgen_ty_1>() - 8usize];
    ["Alignment of rtc_param__bindgen_ty_1"]
        [::std::mem::align_of::<rtc_param__bindgen_ty_1>() - 8usize];
    ["Offset of field: rtc_param__bindgen_ty_1::uvalue"]
        [::std::mem::offset_of!(rtc_param__bindgen_ty_1, uvalue) - 0usize];
    ["Offset of field: rtc_param__bindgen_ty_1::svalue"]
        [::std::mem::offset_of!(rtc_param__bindgen_ty_1, svalue) - 0usize];
    ["Offset of field: rtc_param__bindgen_ty_1::ptr"]
        [::std::mem::offset_of!(rtc_param__bindgen_ty_1, ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_param"][::std::mem::size_of::<rtc_param>() - 24usize];
    ["Alignment of rtc_param"][::std::mem::align_of::<rtc_param>() - 8usize];
    ["Offset of field: rtc_param::param"][::std::mem::offset_of!(rtc_param, param) - 0usize];
    ["Offset of field: rtc_param::index"][::std::mem::offset_of!(rtc_param, index) - 16usize];
    ["Offset of field: rtc_param::__pad"][::std::mem::offset_of!(rtc_param, __pad) - 20usize];
};
extern "C" {
    pub fn rtc_month_days(
        month: ::std::os::raw::c_uint,
        year: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_year_days(
        day: ::std::os::raw::c_uint,
        month: ::std::os::raw::c_uint,
        year: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_valid_tm(tm: *mut rtc_time) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_tm_to_time64(tm: *mut rtc_time) -> time64_t;
}
extern "C" {
    pub fn rtc_time64_to_tm(time: time64_t, tm: *mut rtc_time);
}
extern "C" {
    pub fn rtc_tm_to_ktime(tm: rtc_time) -> ktime_t;
}
extern "C" {
    pub fn rtc_ktime_to_tm(kt: ktime_t) -> rtc_time;
}
extern "C" {
    pub static _ctype: [::std::os::raw::c_uchar; 0usize];
}
pub const string_size_units_STRING_UNITS_10: string_size_units = 0;
pub const string_size_units_STRING_UNITS_2: string_size_units = 1;
pub const string_size_units_STRING_UNITS_MASK: string_size_units = 1;
pub const string_size_units_STRING_UNITS_NO_SPACE: string_size_units = 1073741824;
pub const string_size_units_STRING_UNITS_NO_BYTES: string_size_units = 2147483648;
pub type string_size_units = ::std::os::raw::c_uint;
extern "C" {
    pub fn string_get_size(
        size: u64_,
        blk_size: u64_,
        units: string_size_units,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_int_array_user(
        from: *const ::std::os::raw::c_char,
        count: usize,
        array: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_unescape(
        src: *mut ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_escape_mem(
        src: *const ::std::os::raw::c_char,
        isz: usize,
        dst: *mut ::std::os::raw::c_char,
        osz: usize,
        flags: ::std::os::raw::c_uint,
        only: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kstrdup_quotable(
        src: *const ::std::os::raw::c_char,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kstrdup_quotable_cmdline(
        task: *mut task_struct,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kstrdup_quotable_file(file: *mut file, gfp: gfp_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kstrdup_and_replace(
        src: *const ::std::os::raw::c_char,
        old: ::std::os::raw::c_char,
        new: ::std::os::raw::c_char,
        gfp: gfp_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kasprintf_strarray(
        gfp: gfp_t,
        prefix: *const ::std::os::raw::c_char,
        n: usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn kfree_strarray(array: *mut *mut ::std::os::raw::c_char, n: usize);
}
extern "C" {
    pub fn devm_kasprintf_strarray(
        dev: *mut device,
        prefix: *const ::std::os::raw::c_char,
        n: usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seq_file {
    pub buf: *mut ::std::os::raw::c_char,
    pub size: usize,
    pub from: usize,
    pub count: usize,
    pub pad_until: usize,
    pub index: loff_t,
    pub read_pos: loff_t,
    pub lock: mutex,
    pub op: *const seq_operations,
    pub poll_event: ::std::os::raw::c_int,
    pub file: *const file,
    pub private: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seq_file"][::std::mem::size_of::<seq_file>() - 120usize];
    ["Alignment of seq_file"][::std::mem::align_of::<seq_file>() - 8usize];
    ["Offset of field: seq_file::buf"][::std::mem::offset_of!(seq_file, buf) - 0usize];
    ["Offset of field: seq_file::size"][::std::mem::offset_of!(seq_file, size) - 8usize];
    ["Offset of field: seq_file::from"][::std::mem::offset_of!(seq_file, from) - 16usize];
    ["Offset of field: seq_file::count"][::std::mem::offset_of!(seq_file, count) - 24usize];
    ["Offset of field: seq_file::pad_until"][::std::mem::offset_of!(seq_file, pad_until) - 32usize];
    ["Offset of field: seq_file::index"][::std::mem::offset_of!(seq_file, index) - 40usize];
    ["Offset of field: seq_file::read_pos"][::std::mem::offset_of!(seq_file, read_pos) - 48usize];
    ["Offset of field: seq_file::lock"][::std::mem::offset_of!(seq_file, lock) - 56usize];
    ["Offset of field: seq_file::op"][::std::mem::offset_of!(seq_file, op) - 88usize];
    ["Offset of field: seq_file::poll_event"]
        [::std::mem::offset_of!(seq_file, poll_event) - 96usize];
    ["Offset of field: seq_file::file"][::std::mem::offset_of!(seq_file, file) - 104usize];
    ["Offset of field: seq_file::private"][::std::mem::offset_of!(seq_file, private) - 112usize];
};
extern "C" {
    pub fn seq_pad(m: *mut seq_file, c: ::std::os::raw::c_char);
}
extern "C" {
    pub fn mangle_path(
        s: *mut ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        esc: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seq_open(arg1: *mut file, arg2: *const seq_operations) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_read(
        arg1: *mut file,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn seq_read_iter(iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn seq_lseek(arg1: *mut file, arg2: loff_t, arg3: ::std::os::raw::c_int) -> loff_t;
}
extern "C" {
    pub fn seq_release(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_write(
        seq: *mut seq_file,
        data: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_vprintf(
        m: *mut seq_file,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn seq_printf(m: *mut seq_file, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn seq_putc(m: *mut seq_file, c: ::std::os::raw::c_char);
}
extern "C" {
    pub fn __seq_puts(m: *mut seq_file, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn seq_put_decimal_ull_width(
        m: *mut seq_file,
        delimiter: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
        width: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn seq_put_decimal_ull(
        m: *mut seq_file,
        delimiter: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn seq_put_decimal_ll(
        m: *mut seq_file,
        delimiter: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn seq_put_hex_ll(
        m: *mut seq_file,
        delimiter: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        width: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn seq_escape_mem(
        m: *mut seq_file,
        src: *const ::std::os::raw::c_char,
        len: usize,
        flags: ::std::os::raw::c_uint,
        esc: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn seq_hex_dump(
        m: *mut seq_file,
        prefix_str: *const ::std::os::raw::c_char,
        prefix_type: ::std::os::raw::c_int,
        rowsize: ::std::os::raw::c_int,
        groupsize: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        ascii: bool_,
    );
}
extern "C" {
    pub fn seq_path(
        arg1: *mut seq_file,
        arg2: *const path,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_file_path(
        arg1: *mut seq_file,
        arg2: *mut file,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_dentry(
        arg1: *mut seq_file,
        arg2: *mut dentry,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_path_root(
        m: *mut seq_file,
        path: *const path,
        root: *const path,
        esc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn single_start(arg1: *mut seq_file, arg2: *mut loff_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn single_open(
        arg1: *mut file,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut seq_file,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn single_open_size(
        arg1: *mut file,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut seq_file,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn single_release(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __seq_open_private(
        arg1: *mut file,
        arg2: *const seq_operations,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn seq_open_private(
        arg1: *mut file,
        arg2: *const seq_operations,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_release_private(arg1: *mut inode, arg2: *mut file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seq_bprintf(m: *mut seq_file, f: *const ::std::os::raw::c_char, binary: *const u32_);
}
extern "C" {
    pub fn seq_list_start(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_start_head(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_next(
        v: *mut ::std::os::raw::c_void,
        head: *mut list_head,
        ppos: *mut loff_t,
    ) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_start_rcu(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_start_head_rcu(head: *mut list_head, pos: loff_t) -> *mut list_head;
}
extern "C" {
    pub fn seq_list_next_rcu(
        v: *mut ::std::os::raw::c_void,
        head: *mut list_head,
        ppos: *mut loff_t,
    ) -> *mut list_head;
}
extern "C" {
    pub fn seq_hlist_start(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_head(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_next(
        v: *mut ::std::os::raw::c_void,
        head: *mut hlist_head,
        ppos: *mut loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_rcu(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_head_rcu(head: *mut hlist_head, pos: loff_t) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_next_rcu(
        v: *mut ::std::os::raw::c_void,
        head: *mut hlist_head,
        ppos: *mut loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_start_percpu(
        head: *mut hlist_head,
        cpu: *mut ::std::os::raw::c_int,
        pos: loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_hlist_next_percpu(
        v: *mut ::std::os::raw::c_void,
        head: *mut hlist_head,
        cpu: *mut ::std::os::raw::c_int,
        pos: *mut loff_t,
    ) -> *mut hlist_node;
}
extern "C" {
    pub fn seq_file_init();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdev {
    pub kobj: kobject,
    pub owner: *mut module,
    pub ops: *const file_operations,
    pub list: list_head,
    pub dev: dev_t,
    pub count: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev"][::std::mem::size_of::<cdev>() - 104usize];
    ["Alignment of cdev"][::std::mem::align_of::<cdev>() - 8usize];
    ["Offset of field: cdev::kobj"][::std::mem::offset_of!(cdev, kobj) - 0usize];
    ["Offset of field: cdev::owner"][::std::mem::offset_of!(cdev, owner) - 64usize];
    ["Offset of field: cdev::ops"][::std::mem::offset_of!(cdev, ops) - 72usize];
    ["Offset of field: cdev::list"][::std::mem::offset_of!(cdev, list) - 80usize];
    ["Offset of field: cdev::dev"][::std::mem::offset_of!(cdev, dev) - 96usize];
    ["Offset of field: cdev::count"][::std::mem::offset_of!(cdev, count) - 100usize];
};
extern "C" {
    pub fn cdev_init(arg1: *mut cdev, arg2: *const file_operations);
}
extern "C" {
    pub fn cdev_alloc() -> *mut cdev;
}
extern "C" {
    pub fn cdev_put(p: *mut cdev);
}
extern "C" {
    pub fn cdev_add(
        arg1: *mut cdev,
        arg2: dev_t,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdev_set_parent(p: *mut cdev, kobj: *mut kobject);
}
extern "C" {
    pub fn cdev_device_add(cdev: *mut cdev, dev: *mut device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdev_device_del(cdev: *mut cdev, dev: *mut device);
}
extern "C" {
    pub fn cdev_del(arg1: *mut cdev);
}
extern "C" {
    pub fn cd_forget(arg1: *mut inode);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pollfd"][::std::mem::size_of::<pollfd>() - 8usize];
    ["Alignment of pollfd"][::std::mem::align_of::<pollfd>() - 4usize];
    ["Offset of field: pollfd::fd"][::std::mem::offset_of!(pollfd, fd) - 0usize];
    ["Offset of field: pollfd::events"][::std::mem::offset_of!(pollfd, events) - 4usize];
    ["Offset of field: pollfd::revents"][::std::mem::offset_of!(pollfd, revents) - 6usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct epoll_event {
    pub events: __poll_t,
    pub data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of epoll_event"][::std::mem::size_of::<epoll_event>() - 12usize];
    ["Alignment of epoll_event"][::std::mem::align_of::<epoll_event>() - 1usize];
    ["Offset of field: epoll_event::events"][::std::mem::offset_of!(epoll_event, events) - 0usize];
    ["Offset of field: epoll_event::data"][::std::mem::offset_of!(epoll_event, data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epoll_params {
    pub busy_poll_usecs: __u32,
    pub busy_poll_budget: __u16,
    pub prefer_busy_poll: __u8,
    pub __pad: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of epoll_params"][::std::mem::size_of::<epoll_params>() - 8usize];
    ["Alignment of epoll_params"][::std::mem::align_of::<epoll_params>() - 4usize];
    ["Offset of field: epoll_params::busy_poll_usecs"]
        [::std::mem::offset_of!(epoll_params, busy_poll_usecs) - 0usize];
    ["Offset of field: epoll_params::busy_poll_budget"]
        [::std::mem::offset_of!(epoll_params, busy_poll_budget) - 4usize];
    ["Offset of field: epoll_params::prefer_busy_poll"]
        [::std::mem::offset_of!(epoll_params, prefer_busy_poll) - 6usize];
    ["Offset of field: epoll_params::__pad"][::std::mem::offset_of!(epoll_params, __pad) - 7usize];
};
pub type poll_queue_proc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut file,
        arg2: *mut wait_queue_head_t,
        arg3: *mut poll_table_struct,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poll_table_struct {
    pub _qproc: poll_queue_proc,
    pub _key: __poll_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of poll_table_struct"][::std::mem::size_of::<poll_table_struct>() - 16usize];
    ["Alignment of poll_table_struct"][::std::mem::align_of::<poll_table_struct>() - 8usize];
    ["Offset of field: poll_table_struct::_qproc"]
        [::std::mem::offset_of!(poll_table_struct, _qproc) - 0usize];
    ["Offset of field: poll_table_struct::_key"]
        [::std::mem::offset_of!(poll_table_struct, _key) - 8usize];
};
pub type poll_table = poll_table_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poll_table_entry {
    pub filp: *mut file,
    pub key: __poll_t,
    pub wait: wait_queue_entry_t,
    pub wait_address: *mut wait_queue_head_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of poll_table_entry"][::std::mem::size_of::<poll_table_entry>() - 64usize];
    ["Alignment of poll_table_entry"][::std::mem::align_of::<poll_table_entry>() - 8usize];
    ["Offset of field: poll_table_entry::filp"]
        [::std::mem::offset_of!(poll_table_entry, filp) - 0usize];
    ["Offset of field: poll_table_entry::key"]
        [::std::mem::offset_of!(poll_table_entry, key) - 8usize];
    ["Offset of field: poll_table_entry::wait"]
        [::std::mem::offset_of!(poll_table_entry, wait) - 16usize];
    ["Offset of field: poll_table_entry::wait_address"]
        [::std::mem::offset_of!(poll_table_entry, wait_address) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poll_wqueues {
    pub pt: poll_table,
    pub table: *mut poll_table_page,
    pub polling_task: *mut task_struct,
    pub triggered: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub inline_index: ::std::os::raw::c_int,
    pub inline_entries: [poll_table_entry; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of poll_wqueues"][::std::mem::size_of::<poll_wqueues>() - 624usize];
    ["Alignment of poll_wqueues"][::std::mem::align_of::<poll_wqueues>() - 8usize];
    ["Offset of field: poll_wqueues::pt"][::std::mem::offset_of!(poll_wqueues, pt) - 0usize];
    ["Offset of field: poll_wqueues::table"][::std::mem::offset_of!(poll_wqueues, table) - 16usize];
    ["Offset of field: poll_wqueues::polling_task"]
        [::std::mem::offset_of!(poll_wqueues, polling_task) - 24usize];
    ["Offset of field: poll_wqueues::triggered"]
        [::std::mem::offset_of!(poll_wqueues, triggered) - 32usize];
    ["Offset of field: poll_wqueues::error"][::std::mem::offset_of!(poll_wqueues, error) - 36usize];
    ["Offset of field: poll_wqueues::inline_index"]
        [::std::mem::offset_of!(poll_wqueues, inline_index) - 40usize];
    ["Offset of field: poll_wqueues::inline_entries"]
        [::std::mem::offset_of!(poll_wqueues, inline_entries) - 48usize];
};
extern "C" {
    pub fn poll_initwait(pwq: *mut poll_wqueues);
}
extern "C" {
    pub fn poll_freewait(pwq: *mut poll_wqueues);
}
extern "C" {
    pub fn select_estimate_accuracy(tv: *mut timespec64) -> u64_;
}
extern "C" {
    pub fn core_sys_select(
        n: ::std::os::raw::c_int,
        inp: *mut fd_set,
        outp: *mut fd_set,
        exp: *mut fd_set,
        end_time: *mut timespec64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poll_select_set_timeout(
        to: *mut timespec64,
        sec: time64_t,
        nsec: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rtc_class: class;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtc_class_ops {
    pub ioctl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut device,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_time: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut device, arg2: *mut rtc_time) -> ::std::os::raw::c_int,
    >,
    pub set_time: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut device, arg2: *mut rtc_time) -> ::std::os::raw::c_int,
    >,
    pub read_alarm: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut device, arg2: *mut rtc_wkalrm) -> ::std::os::raw::c_int,
    >,
    pub set_alarm: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut device, arg2: *mut rtc_wkalrm) -> ::std::os::raw::c_int,
    >,
    pub proc_: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut device, arg2: *mut seq_file) -> ::std::os::raw::c_int,
    >,
    pub alarm_irq_enable: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut device,
            enabled: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_offset: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut device,
            offset: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_offset: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut device,
            offset: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub param_get: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut device, param: *mut rtc_param) -> ::std::os::raw::c_int,
    >,
    pub param_set: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut device, param: *mut rtc_param) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_class_ops"][::std::mem::size_of::<rtc_class_ops>() - 88usize];
    ["Alignment of rtc_class_ops"][::std::mem::align_of::<rtc_class_ops>() - 8usize];
    ["Offset of field: rtc_class_ops::ioctl"]
        [::std::mem::offset_of!(rtc_class_ops, ioctl) - 0usize];
    ["Offset of field: rtc_class_ops::read_time"]
        [::std::mem::offset_of!(rtc_class_ops, read_time) - 8usize];
    ["Offset of field: rtc_class_ops::set_time"]
        [::std::mem::offset_of!(rtc_class_ops, set_time) - 16usize];
    ["Offset of field: rtc_class_ops::read_alarm"]
        [::std::mem::offset_of!(rtc_class_ops, read_alarm) - 24usize];
    ["Offset of field: rtc_class_ops::set_alarm"]
        [::std::mem::offset_of!(rtc_class_ops, set_alarm) - 32usize];
    ["Offset of field: rtc_class_ops::proc_"]
        [::std::mem::offset_of!(rtc_class_ops, proc_) - 40usize];
    ["Offset of field: rtc_class_ops::alarm_irq_enable"]
        [::std::mem::offset_of!(rtc_class_ops, alarm_irq_enable) - 48usize];
    ["Offset of field: rtc_class_ops::read_offset"]
        [::std::mem::offset_of!(rtc_class_ops, read_offset) - 56usize];
    ["Offset of field: rtc_class_ops::set_offset"]
        [::std::mem::offset_of!(rtc_class_ops, set_offset) - 64usize];
    ["Offset of field: rtc_class_ops::param_get"]
        [::std::mem::offset_of!(rtc_class_ops, param_get) - 72usize];
    ["Offset of field: rtc_class_ops::param_set"]
        [::std::mem::offset_of!(rtc_class_ops, param_set) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtc_timer {
    pub node: timerqueue_node,
    pub period: ktime_t,
    pub func: ::std::option::Option<unsafe extern "C" fn(rtc: *mut rtc_device)>,
    pub rtc: *mut rtc_device,
    pub enabled: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_timer"][::std::mem::size_of::<rtc_timer>() - 64usize];
    ["Alignment of rtc_timer"][::std::mem::align_of::<rtc_timer>() - 8usize];
    ["Offset of field: rtc_timer::node"][::std::mem::offset_of!(rtc_timer, node) - 0usize];
    ["Offset of field: rtc_timer::period"][::std::mem::offset_of!(rtc_timer, period) - 32usize];
    ["Offset of field: rtc_timer::func"][::std::mem::offset_of!(rtc_timer, func) - 40usize];
    ["Offset of field: rtc_timer::rtc"][::std::mem::offset_of!(rtc_timer, rtc) - 48usize];
    ["Offset of field: rtc_timer::enabled"][::std::mem::offset_of!(rtc_timer, enabled) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rtc_device {
    pub dev: device,
    pub owner: *mut module,
    pub id: ::std::os::raw::c_int,
    pub ops: *const rtc_class_ops,
    pub ops_lock: mutex,
    pub char_dev: cdev,
    pub flags: ::std::os::raw::c_ulong,
    pub irq_data: ::std::os::raw::c_ulong,
    pub irq_lock: spinlock_t,
    pub irq_queue: wait_queue_head_t,
    pub async_queue: *mut fasync_struct,
    pub irq_freq: ::std::os::raw::c_int,
    pub max_user_freq: ::std::os::raw::c_int,
    pub timerqueue: timerqueue_head,
    pub aie_timer: rtc_timer,
    pub uie_rtctimer: rtc_timer,
    pub pie_timer: hrtimer,
    pub pie_enabled: ::std::os::raw::c_int,
    pub irqwork: work_struct,
    pub set_offset_nsec: ::std::os::raw::c_ulong,
    pub features: [::std::os::raw::c_ulong; 1usize],
    pub range_min: time64_t,
    pub range_max: timeu64_t,
    pub alarm_offset_max: timeu64_t,
    pub start_secs: time64_t,
    pub offset_secs: time64_t,
    pub set_start_time: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtc_device"][::std::mem::size_of::<rtc_device>() - 1304usize];
    ["Alignment of rtc_device"][::std::mem::align_of::<rtc_device>() - 8usize];
    ["Offset of field: rtc_device::dev"][::std::mem::offset_of!(rtc_device, dev) - 0usize];
    ["Offset of field: rtc_device::owner"][::std::mem::offset_of!(rtc_device, owner) - 768usize];
    ["Offset of field: rtc_device::id"][::std::mem::offset_of!(rtc_device, id) - 776usize];
    ["Offset of field: rtc_device::ops"][::std::mem::offset_of!(rtc_device, ops) - 784usize];
    ["Offset of field: rtc_device::ops_lock"]
        [::std::mem::offset_of!(rtc_device, ops_lock) - 792usize];
    ["Offset of field: rtc_device::char_dev"]
        [::std::mem::offset_of!(rtc_device, char_dev) - 824usize];
    ["Offset of field: rtc_device::flags"][::std::mem::offset_of!(rtc_device, flags) - 928usize];
    ["Offset of field: rtc_device::irq_data"]
        [::std::mem::offset_of!(rtc_device, irq_data) - 936usize];
    ["Offset of field: rtc_device::irq_lock"]
        [::std::mem::offset_of!(rtc_device, irq_lock) - 944usize];
    ["Offset of field: rtc_device::irq_queue"]
        [::std::mem::offset_of!(rtc_device, irq_queue) - 952usize];
    ["Offset of field: rtc_device::async_queue"]
        [::std::mem::offset_of!(rtc_device, async_queue) - 976usize];
    ["Offset of field: rtc_device::irq_freq"]
        [::std::mem::offset_of!(rtc_device, irq_freq) - 984usize];
    ["Offset of field: rtc_device::max_user_freq"]
        [::std::mem::offset_of!(rtc_device, max_user_freq) - 988usize];
    ["Offset of field: rtc_device::timerqueue"]
        [::std::mem::offset_of!(rtc_device, timerqueue) - 992usize];
    ["Offset of field: rtc_device::aie_timer"]
        [::std::mem::offset_of!(rtc_device, aie_timer) - 1008usize];
    ["Offset of field: rtc_device::uie_rtctimer"]
        [::std::mem::offset_of!(rtc_device, uie_rtctimer) - 1072usize];
    ["Offset of field: rtc_device::pie_timer"]
        [::std::mem::offset_of!(rtc_device, pie_timer) - 1136usize];
    ["Offset of field: rtc_device::pie_enabled"]
        [::std::mem::offset_of!(rtc_device, pie_enabled) - 1200usize];
    ["Offset of field: rtc_device::irqwork"]
        [::std::mem::offset_of!(rtc_device, irqwork) - 1208usize];
    ["Offset of field: rtc_device::set_offset_nsec"]
        [::std::mem::offset_of!(rtc_device, set_offset_nsec) - 1240usize];
    ["Offset of field: rtc_device::features"]
        [::std::mem::offset_of!(rtc_device, features) - 1248usize];
    ["Offset of field: rtc_device::range_min"]
        [::std::mem::offset_of!(rtc_device, range_min) - 1256usize];
    ["Offset of field: rtc_device::range_max"]
        [::std::mem::offset_of!(rtc_device, range_max) - 1264usize];
    ["Offset of field: rtc_device::alarm_offset_max"]
        [::std::mem::offset_of!(rtc_device, alarm_offset_max) - 1272usize];
    ["Offset of field: rtc_device::start_secs"]
        [::std::mem::offset_of!(rtc_device, start_secs) - 1280usize];
    ["Offset of field: rtc_device::offset_secs"]
        [::std::mem::offset_of!(rtc_device, offset_secs) - 1288usize];
    ["Offset of field: rtc_device::set_start_time"]
        [::std::mem::offset_of!(rtc_device, set_start_time) - 1296usize];
};
extern "C" {
    pub fn devm_rtc_device_register(
        dev: *mut device,
        name: *const ::std::os::raw::c_char,
        ops: *const rtc_class_ops,
        owner: *mut module,
    ) -> *mut rtc_device;
}
extern "C" {
    pub fn devm_rtc_allocate_device(dev: *mut device) -> *mut rtc_device;
}
extern "C" {
    pub fn __devm_rtc_register_device(
        owner: *mut module,
        rtc: *mut rtc_device,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_read_time(rtc: *mut rtc_device, tm: *mut rtc_time) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_set_time(rtc: *mut rtc_device, tm: *mut rtc_time) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __rtc_read_alarm(rtc: *mut rtc_device, alarm: *mut rtc_wkalrm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_read_alarm(rtc: *mut rtc_device, alrm: *mut rtc_wkalrm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_set_alarm(rtc: *mut rtc_device, alrm: *mut rtc_wkalrm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_initialize_alarm(
        rtc: *mut rtc_device,
        alrm: *mut rtc_wkalrm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_update_irq(
        rtc: *mut rtc_device,
        num: ::std::os::raw::c_ulong,
        events: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn rtc_class_open(name: *const ::std::os::raw::c_char) -> *mut rtc_device;
}
extern "C" {
    pub fn rtc_class_close(rtc: *mut rtc_device);
}
extern "C" {
    pub fn rtc_irq_set_state(
        rtc: *mut rtc_device,
        enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_irq_set_freq(
        rtc: *mut rtc_device,
        freq: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_update_irq_enable(
        rtc: *mut rtc_device,
        enabled: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_alarm_irq_enable(
        rtc: *mut rtc_device,
        enabled: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_dev_update_irq_enable_emul(
        rtc: *mut rtc_device,
        enabled: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_handle_legacy_irq(
        rtc: *mut rtc_device,
        num: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rtc_aie_update_irq(rtc: *mut rtc_device);
}
extern "C" {
    pub fn rtc_uie_update_irq(rtc: *mut rtc_device);
}
extern "C" {
    pub fn rtc_pie_update_irq(timer: *mut hrtimer) -> hrtimer_restart;
}
extern "C" {
    pub fn rtc_timer_init(
        timer: *mut rtc_timer,
        f: ::std::option::Option<unsafe extern "C" fn(r: *mut rtc_device)>,
        rtc: *mut rtc_device,
    );
}
extern "C" {
    pub fn rtc_timer_start(
        rtc: *mut rtc_device,
        timer: *mut rtc_timer,
        expires: ktime_t,
        period: ktime_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_timer_cancel(rtc: *mut rtc_device, timer: *mut rtc_timer);
}
extern "C" {
    pub fn rtc_read_offset(
        rtc: *mut rtc_device,
        offset: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_set_offset(
        rtc: *mut rtc_device,
        offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_timer_do_work(work: *mut work_struct);
}
extern "C" {
    pub static mut rtc_hctosys_ret: ::std::os::raw::c_int;
}
extern "C" {
    pub fn devm_rtc_nvmem_register(
        rtc: *mut rtc_device,
        nvmem_config: *mut nvmem_config,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_add_group(
        rtc: *mut rtc_device,
        grp: *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtc_add_groups(
        rtc: *mut rtc_device,
        grps: *mut *const attribute_group,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct static_key_mod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct static_call_mod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct files_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_mutex_waiter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct numa_group {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obj_cgroup {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gendisk {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_dir_entry {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_pnode {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maple_enode {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldt_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_pool {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct userfaultfd_ctx {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct anon_vma {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linux_binfmt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_tier {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_root {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_group_capacity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pm_qos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgbuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem_undo {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_vec {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ubuf_info {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cgroup {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct assoc_array_ptr {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct watch_list {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_user {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_clock {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct autogroup {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taskstats {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty_audit_buf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct request_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait_page_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_lock_context {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xattr_handler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_keyring {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unicode_map {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_device {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mtd_info {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_param_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_symbol {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_sect_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_notes_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_event_call {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_eval_map {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct of_device_id {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_device_id {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dma_map_ops {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bus_dma_region {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_tlb_mem {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poll_table_page {
    pub _address: u8,
}
