import os
import prompt
import re


class CodeTranslator:
    FILE_TYPE = ".c"
    
    # Retrieve the file content
    def get_file_info(self, path2file, file_type):
        if not os.path.isfile(path2file):
            print(f"Error: {path2file} is not a valid file path.")
            return None, None
        try:
            os.path.splitext(path2file)[1] == file_type
            file_name = os.path.basename(path2file)
            with open(path2file, 'r') as f:
                file_content = f.read()
                return file_content, file_name
        except Exception as e:
            print(f"get_file_info_Error: {e}")
            return None, None
        
        return None, None
    
    
        # Remove comments from a file
    def remove_comments(self, file):
        # Check if `file` is a valid file path or raw content
        if os.path.isfile(file):
            with open(file, 'r') as f:
                lines = f.read()
        elif file != "":
            lines = file  # Assume it's raw file content as a string
        else:
            return None
        
        code = lines
    
        # Patterns for /* */ muilti line style comment
        pattern4m = re.compile(r'/\*.*?\*/', flags=re.DOTALL)
        # Pattern for ``` style single line comment
        pattern4llm = re.compile(r'```.*')
        # Patther for // style single line comment
        patthern4s = re.compile(r'//.*')
    
        # Remove all /* */ style comments (multi-line): C style comment
        code = re.sub(pattern4m, "", code)
        # Remove all // style comments (single-line): C style comment
        code = re.sub(patthern4s, "", code)
        # Remove ``` style comment (single-line) result generated by LLM
        code = re.sub(pattern4llm,"",code)
    
        return code
    
    
    def translate(self, path2folder):
        
        # Check if the provided path is a valid directory
        if (os.path.isdir(path2folder)):
            print("\nPath checked successfully\n")
            for dir, subdirs, files in os.walk(path2folder):      
                for file in files:
                    output_dir = path2folder + f"/d_{file}/"
                    print(os.path.join(dir, file))
                    if file.endswith(self.FILE_TYPE):
                        path2file = os.path.join(dir, file)
                        file_result = self.get_file_info(path2file, self.FILE_TYPE)
                        file_content, file_name = file_result
                        
                        if file_content is None and file_name is None:
                            raise Exception("Error encountered during reading file content or retrieving filename.")                                                
                        
                        translation_result = prompt.gpt_translate(file_content, None)
                        print(translation_result)
                        
                        # Remove comments
                        clean_code = self.remove_comments(translation_result)                        
                        print(clean_code)
                        
                        # Write translated code into correct Rust format in the current directory
                        rust_bn = os.path.splitext(file)[0] + ".rs"
                        with open(output_dir + rust_bn, "w") as f:
                            f.write(clean_code)
            print ("Translation Successfully Completed")
            return True
        else:
            print(f"ERROR: {path2folder} not found")
            return False

if __name__ == "__main__":
    translator = CodeTranslator()
    path2folder = "/home/wsh/test/rtc"
    print(translator.translate(path2folder))