import os
from gpt import prompt2gpt
from pathlib import Path
from file_utility import FileProcessor


def translate(path2folder):
    file_type = ".c"
    driver_name = "rtc"
    
    if (os.path.isdir(path2folder)):
        print("\nPath checked successfully\n")
        for dir, subdirs, files in os.walk(path2folder):      
            for file in files:
                output_dir = path2folder + f"/d_{file}/"
                # print(os.path.join(dir, file))
                if file.endswith(file_type):
                    with open(os.path.join(dir, file), 'r') as f:
                        file_content = f.read()
                        
                    # translated without code specification
                    # prompt = (
                    #             f"The provided {file} code is located under the {driver_name} directory of the Linux kernel. Your task is to translate the given C code into equivalent safe Rust code and use the corresponding FFIs generated by Bindgen, such as ```use kernel::bindings::*```. Please provide the translated Rust code without comments. C code: ```{file_content}``` " 
                    #             )
                         
                    
                    # translated with code specification
                    f_task_prompt = ( 
                                f"you have two tasks. The first task is to inspect original C code and provide a formal and detailed specification of its fucntionality, where {file} code is located under the {driver_name} directory of the Linux kernel. I will give your second task when you finished. Original C code: ```{file_content}``` " 
                                )
                    s_task_prompt = (
                                f"Your second task is to translate the given C code into equivalent safe Rust code using the original C code and its specification as references, as well as use the corresponding FFIs generated by Bindgen, such as ```use kernel::bindings::*```. Please provide the code without comments. C code: ```{file_content}``` " 
                                )
                    
                    print(f"translating {file}")
                    task_1_response = prompt2gpt(f_task_prompt,False)
                    task_2_response = prompt2gpt(s_task_prompt,False)
                    print(task_1_response)
                    print(task_2_response)
                      
                    # Remove comments
                    class_file = FileProcessor()
                    clean_code = class_file.remove_comments(task_2_response)                        
                    print(clean_code)
                        
                    # Create a file contianing the code from LLM in correct base name (Rust file)
                    rust_base = os.path.splitext(file)[0] + ".rs"
                    with open(output_dir + rust_base, "w") as f:
                        f.write(clean_code)
                    
                else:
                    print(f"Error: {file} in the {path2folder} is not the target {file_type} file")
        
        return "Translation Successfully Completed"
    else:
        return f"ERROR: {path2folder} not found"

path2folder = "/home/wsh/test/connector"
print(translate(path2folder))


