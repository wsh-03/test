import os
from gpt import prompt2gpt
from pathlib import Path
from files import File


def translate(path2folder):
    file_type = ".c"
    driver_name = "rtc"
    headers = []
    
    if (os.path.isdir(path2folder)):
        print("\nPath checked successfully\n")
        for dir, subdirs, files in os.walk(path2folder):      
            # print(files)     
            for file in files:
                output_dir = path2folder + f"/d_{file}"
                # print(os.path.join(dir, file))
                if file.endswith(file_type):
                    with open(os.path.join(dir, file), 'r') as f:
                        file_content = f.read()
                        
                    # Get headers
                    file = File()
                    headers.append(file.get_headers(file_content))
                    prompt = (
                                f"Translate the provided C file to Rust. The provided C file is {file} located in the {driver_name} directory in the Linux kernel. Please translate it from C to Rust and use corresponding FFIs generated by bindgen, for example use kernel::bindings::*, including only the Rust code without any comments. Please also consider the use of unsafe code and the function name. {file_content}"
                            )
                    print("translating file: ", file)
                    response = prompt2gpt(prompt)
                    print(response)
                    # Remove comments
                    clean_code = file.remove_comments(response)                        
                    print(clean_code)
                        
                    os.chdir(output_dir)
                    # Create a file contianing the code from LLM in correct base name (Rust file)
                    rust_base = file.split(".")[0] + ".rs" 
                    with open(rust_base, "w") as f:
                        f.write(clean_code)
                    
                else:
                    print(f"Error: {file_type} type file not found in {path2folder}")
        
        # write headers to a file
        unique_headers = list(set(headers)) #remove duplicates
        with open("headers.h", "w") as f:
            for header in unique_headers:
                f.write(header)
        
        return "Translation Successfully Completed"
    else:
        return f"{path2folder} ERROR: Path not found"

path2folder = "/home/wsh/test/rtc"
print(translate(path2folder))



