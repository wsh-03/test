import os
from gpt import prompt2gpt
from pathlib import Path
from file_utility import FileProcessor

class CodeTranslator:
    FILE_TYPE = ".c"
    DRIVER_NAME = "rtc"
    
    def translate(self, path2folder):
        # Check if the provided path is a valid directory
        if (os.path.isdir(path2folder)):
            print("\nPath checked successfully\n")
            for dir, subdirs, files in os.walk(path2folder):      
                for file in files:
                    output_dir = path2folder + f"/d_{file}/"
                    # print(os.path.join(dir, file))
                    
                    if file.endswith():
                        with open(os.path.join(dir, file), 'r') as f:
                            file_content = f.read()
                        task_prompt = ( 
                                    f"The {file} code is located under the {self.DRIVER_NAME} directory in the Linux kernel. Your translation should use the corresponding FFIs generated by Bindgen by declaring the ```use kernel::bindings::*``` in Rust code. The original C code: ```{file_content}```"
                                    )
                        print(f"translating {file} in {self.DRIVER_NAME}")
                        response = prompt2gpt(task_prompt,False)
                        print(response)
                        # Remove comments
                        class_file = FileProcessor()
                        clean_code = class_file.remove_comments(response)                        
                        print(clean_code)
                        # To write the translation into a file with 'rs' base name
                        rust_bn = os.path.splitext(file)[0] + ".rs"
                        with open(output_dir + rust_bn, "w") as f:
                            f.write(clean_code)
                    else:
                        print(f"Error: {file} in the {path2folder} is not the target {self.FILE_TYPE} file")
        
            return "Translation Successfully Completed"
        else:
            return f"ERROR: {path2folder} not found"
        

if __name__ == "__main__":
    translator = CodeTranslator()
    path2folder = "/home/wsh/test/connector"
    print(translator.translate(path2folder))


